
BLDC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ee4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800706c  0800706c  0000806c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070d4  080070d4  0000915c  2**0
                  CONTENTS
  4 .ARM          00000000  080070d4  080070d4  0000915c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080070d4  080070d4  0000915c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070d4  080070d4  000080d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080070d8  080070d8  000080d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000015c  20000000  080070dc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000915c  2**0
                  CONTENTS
 10 .bss          00001d5c  2000015c  2000015c  0000915c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001eb8  20001eb8  0000915c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000915c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e59a  00000000  00000000  0000918c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e48  00000000  00000000  00017726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c70  00000000  00000000  0001a570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000091d  00000000  00000000  0001b1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024a63  00000000  00000000  0001bafd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011e7e  00000000  00000000  00040560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf0da  00000000  00000000  000523de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001214b8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003698  00000000  00000000  001214fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000046  00000000  00000000  00124b94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000015c 	.word	0x2000015c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007054 	.word	0x08007054

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000160 	.word	0x20000160
 80001c4:	08007054 	.word	0x08007054

080001c8 <bufferAdd>:

uint8_t bufferHead;
uint8_t bufferTail;
uint8_t arrayBuffer[BUFFER_SIZE];

void bufferAdd(uint8_t buffer) {
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
    uint8_t nextHead = (bufferHead + 1) % BUFFER_SIZE;
 80001d2:	4b0e      	ldr	r3, [pc, #56]	@ (800020c <bufferAdd+0x44>)
 80001d4:	781b      	ldrb	r3, [r3, #0]
 80001d6:	3301      	adds	r3, #1
 80001d8:	2b00      	cmp	r3, #0
 80001da:	f003 0301 	and.w	r3, r3, #1
 80001de:	bfb8      	it	lt
 80001e0:	425b      	neglt	r3, r3
 80001e2:	73fb      	strb	r3, [r7, #15]
    if (nextHead != bufferTail) {
 80001e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000210 <bufferAdd+0x48>)
 80001e6:	781b      	ldrb	r3, [r3, #0]
 80001e8:	7bfa      	ldrb	r2, [r7, #15]
 80001ea:	429a      	cmp	r2, r3
 80001ec:	d008      	beq.n	8000200 <bufferAdd+0x38>
        arrayBuffer[bufferHead] = buffer;
 80001ee:	4b07      	ldr	r3, [pc, #28]	@ (800020c <bufferAdd+0x44>)
 80001f0:	781b      	ldrb	r3, [r3, #0]
 80001f2:	4619      	mov	r1, r3
 80001f4:	4a07      	ldr	r2, [pc, #28]	@ (8000214 <bufferAdd+0x4c>)
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	5453      	strb	r3, [r2, r1]
        bufferHead = nextHead;
 80001fa:	4a04      	ldr	r2, [pc, #16]	@ (800020c <bufferAdd+0x44>)
 80001fc:	7bfb      	ldrb	r3, [r7, #15]
 80001fe:	7013      	strb	r3, [r2, #0]
    }
}
 8000200:	bf00      	nop
 8000202:	3714      	adds	r7, #20
 8000204:	46bd      	mov	sp, r7
 8000206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020a:	4770      	bx	lr
 800020c:	20000178 	.word	0x20000178
 8000210:	20000179 	.word	0x20000179
 8000214:	2000017c 	.word	0x2000017c

08000218 <isBufferReady>:

int isBufferReady() {
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0
	return (bufferTail != bufferHead);
 800021c:	4b06      	ldr	r3, [pc, #24]	@ (8000238 <isBufferReady+0x20>)
 800021e:	781a      	ldrb	r2, [r3, #0]
 8000220:	4b06      	ldr	r3, [pc, #24]	@ (800023c <isBufferReady+0x24>)
 8000222:	781b      	ldrb	r3, [r3, #0]
 8000224:	429a      	cmp	r2, r3
 8000226:	bf14      	ite	ne
 8000228:	2301      	movne	r3, #1
 800022a:	2300      	moveq	r3, #0
 800022c:	b2db      	uxtb	r3, r3
}
 800022e:	4618      	mov	r0, r3
 8000230:	46bd      	mov	sp, r7
 8000232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000236:	4770      	bx	lr
 8000238:	20000179 	.word	0x20000179
 800023c:	20000178 	.word	0x20000178

08000240 <bufferGet>:

int bufferGet() {
 8000240:	b480      	push	{r7}
 8000242:	b083      	sub	sp, #12
 8000244:	af00      	add	r7, sp, #0
	if (bufferTail != bufferHead) {
 8000246:	4b0f      	ldr	r3, [pc, #60]	@ (8000284 <bufferGet+0x44>)
 8000248:	781a      	ldrb	r2, [r3, #0]
 800024a:	4b0f      	ldr	r3, [pc, #60]	@ (8000288 <bufferGet+0x48>)
 800024c:	781b      	ldrb	r3, [r3, #0]
 800024e:	429a      	cmp	r2, r3
 8000250:	d012      	beq.n	8000278 <bufferGet+0x38>
	  uint8_t buffer = arrayBuffer[bufferTail];
 8000252:	4b0c      	ldr	r3, [pc, #48]	@ (8000284 <bufferGet+0x44>)
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	461a      	mov	r2, r3
 8000258:	4b0c      	ldr	r3, [pc, #48]	@ (800028c <bufferGet+0x4c>)
 800025a:	5c9b      	ldrb	r3, [r3, r2]
 800025c:	71fb      	strb	r3, [r7, #7]
	  bufferTail = (bufferTail + 1) % BUFFER_SIZE;
 800025e:	4b09      	ldr	r3, [pc, #36]	@ (8000284 <bufferGet+0x44>)
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	3301      	adds	r3, #1
 8000264:	2b00      	cmp	r3, #0
 8000266:	f003 0301 	and.w	r3, r3, #1
 800026a:	bfb8      	it	lt
 800026c:	425b      	neglt	r3, r3
 800026e:	b2da      	uxtb	r2, r3
 8000270:	4b04      	ldr	r3, [pc, #16]	@ (8000284 <bufferGet+0x44>)
 8000272:	701a      	strb	r2, [r3, #0]
	  return buffer;
 8000274:	79fb      	ldrb	r3, [r7, #7]
 8000276:	e7ff      	b.n	8000278 <bufferGet+0x38>
	}
}
 8000278:	4618      	mov	r0, r3
 800027a:	370c      	adds	r7, #12
 800027c:	46bd      	mov	sp, r7
 800027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000282:	4770      	bx	lr
 8000284:	20000179 	.word	0x20000179
 8000288:	20000178 	.word	0x20000178
 800028c:	2000017c 	.word	0x2000017c

08000290 <STM32_Init>:

//======================================================
//STM32 FULL INITIALIZATION
//======================================================
void STM32_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
	//HALL
	HAL_Init();
 8000294:	f000 fcc2 	bl	8000c1c <HAL_Init>

	//SYSTEMCLOCK
	SystemClock_Config();
 8000298:	f000 f80e 	bl	80002b8 <SystemClock_Config>

	//USB_DEVICE (USB_CDC)
	MX_USB_DEVICE_Init();
 800029c:	f005 fd3a 	bl	8005d14 <MX_USB_DEVICE_Init>

	//GPIO
	GPIO_Init();
 80002a0:	f000 f96a 	bl	8000578 <GPIO_Init>

	//TIMER
	TIM2_Init();
 80002a4:	f000 f866 	bl	8000374 <TIM2_Init>
	TIM3_Init();
 80002a8:	f000 f8c6 	bl	8000438 <TIM3_Init>
	TIM4_Init();
 80002ac:	f000 f914 	bl	80004d8 <TIM4_Init>

	//COMMUNICATION UART
	USART1_UART_Init();
 80002b0:	f000 fa38 	bl	8000724 <USART1_UART_Init>
}
 80002b4:	bf00      	nop
 80002b6:	bd80      	pop	{r7, pc}

080002b8 <SystemClock_Config>:

//======================================================
//SYSTEMCLOCK CONFIG
//======================================================
void SystemClock_Config(void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
    // 1. Enable HSI (High-Speed Internal Clock)
    RCC->CR |= RCC_CR_HSION;
 80002bc:	4b2a      	ldr	r3, [pc, #168]	@ (8000368 <SystemClock_Config+0xb0>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4a29      	ldr	r2, [pc, #164]	@ (8000368 <SystemClock_Config+0xb0>)
 80002c2:	f043 0301 	orr.w	r3, r3, #1
 80002c6:	6013      	str	r3, [r2, #0]
    while ((RCC->CR & RCC_CR_HSIRDY) == 0); // Wait till HSI is ready
 80002c8:	bf00      	nop
 80002ca:	4b27      	ldr	r3, [pc, #156]	@ (8000368 <SystemClock_Config+0xb0>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	f003 0302 	and.w	r3, r3, #2
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d0f9      	beq.n	80002ca <SystemClock_Config+0x12>

    // 2. Reset PLL
    RCC->CR &= ~RCC_CR_PLLON; // Turn off PLL
 80002d6:	4b24      	ldr	r3, [pc, #144]	@ (8000368 <SystemClock_Config+0xb0>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	4a23      	ldr	r2, [pc, #140]	@ (8000368 <SystemClock_Config+0xb0>)
 80002dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80002e0:	6013      	str	r3, [r2, #0]
    while (RCC->CR & RCC_CR_PLLRDY); // Wait PLL disabled
 80002e2:	bf00      	nop
 80002e4:	4b20      	ldr	r3, [pc, #128]	@ (8000368 <SystemClock_Config+0xb0>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d1f9      	bne.n	80002e4 <SystemClock_Config+0x2c>
     * PLL_P = 4 (00: /2, 01: /4, ...)
     * PLL_Q = 7
     *
     * SYSCLK = ((16 MHz / 16) * 336) / 4 = 84 MHz
     */
    RCC->PLLCFGR = (16 << RCC_PLLCFGR_PLLM_Pos) |
 80002f0:	4b1d      	ldr	r3, [pc, #116]	@ (8000368 <SystemClock_Config+0xb0>)
 80002f2:	4a1e      	ldr	r2, [pc, #120]	@ (800036c <SystemClock_Config+0xb4>)
 80002f4:	605a      	str	r2, [r3, #4]
                   (1 << RCC_PLLCFGR_PLLP_Pos) |  // PLLP = 4 -> 01b
                   (7 << RCC_PLLCFGR_PLLQ_Pos) |
                   (RCC_PLLCFGR_PLLSRC_HSI);      // PLL source = HSI

    // 4. Enable PLL
    RCC->CR |= RCC_CR_PLLON;
 80002f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000368 <SystemClock_Config+0xb0>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	4a1b      	ldr	r2, [pc, #108]	@ (8000368 <SystemClock_Config+0xb0>)
 80002fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000300:	6013      	str	r3, [r2, #0]
    while ((RCC->CR & RCC_CR_PLLRDY) == 0); // Wait till PLL is ready
 8000302:	bf00      	nop
 8000304:	4b18      	ldr	r3, [pc, #96]	@ (8000368 <SystemClock_Config+0xb0>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800030c:	2b00      	cmp	r3, #0
 800030e:	d0f9      	beq.n	8000304 <SystemClock_Config+0x4c>

    // 5. Configure Flash Latency
    FLASH->ACR = FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_PRFTEN | FLASH_ACR_LATENCY_2WS;
 8000310:	4b17      	ldr	r3, [pc, #92]	@ (8000370 <SystemClock_Config+0xb8>)
 8000312:	f240 7202 	movw	r2, #1794	@ 0x702
 8000316:	601a      	str	r2, [r3, #0]

    // 6. Set AHB, APB1, APB2 prescaler
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;   // AHB prescaler = /1 -> 84 MHz
 8000318:	4b13      	ldr	r3, [pc, #76]	@ (8000368 <SystemClock_Config+0xb0>)
 800031a:	4a13      	ldr	r2, [pc, #76]	@ (8000368 <SystemClock_Config+0xb0>)
 800031c:	689b      	ldr	r3, [r3, #8]
 800031e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;  // APB1 prescaler = /2 -> 42 MHz
 8000320:	4b11      	ldr	r3, [pc, #68]	@ (8000368 <SystemClock_Config+0xb0>)
 8000322:	689b      	ldr	r3, [r3, #8]
 8000324:	4a10      	ldr	r2, [pc, #64]	@ (8000368 <SystemClock_Config+0xb0>)
 8000326:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800032a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;  // APB2 prescaler = /1 -> 84 MHz
 800032c:	4b0e      	ldr	r3, [pc, #56]	@ (8000368 <SystemClock_Config+0xb0>)
 800032e:	4a0e      	ldr	r2, [pc, #56]	@ (8000368 <SystemClock_Config+0xb0>)
 8000330:	689b      	ldr	r3, [r3, #8]
 8000332:	6093      	str	r3, [r2, #8]

    // 7. Select PLL as system clock
    RCC->CFGR &= ~RCC_CFGR_SW;         // Clear SW bits
 8000334:	4b0c      	ldr	r3, [pc, #48]	@ (8000368 <SystemClock_Config+0xb0>)
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	4a0b      	ldr	r2, [pc, #44]	@ (8000368 <SystemClock_Config+0xb0>)
 800033a:	f023 0303 	bic.w	r3, r3, #3
 800033e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;      // Select PLL as system clock
 8000340:	4b09      	ldr	r3, [pc, #36]	@ (8000368 <SystemClock_Config+0xb0>)
 8000342:	689b      	ldr	r3, [r3, #8]
 8000344:	4a08      	ldr	r2, [pc, #32]	@ (8000368 <SystemClock_Config+0xb0>)
 8000346:	f043 0302 	orr.w	r3, r3, #2
 800034a:	6093      	str	r3, [r2, #8]
    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL); // Wait till PLL is system clock
 800034c:	bf00      	nop
 800034e:	4b06      	ldr	r3, [pc, #24]	@ (8000368 <SystemClock_Config+0xb0>)
 8000350:	689b      	ldr	r3, [r3, #8]
 8000352:	f003 030c 	and.w	r3, r3, #12
 8000356:	2b08      	cmp	r3, #8
 8000358:	d1f9      	bne.n	800034e <SystemClock_Config+0x96>
}
 800035a:	bf00      	nop
 800035c:	bf00      	nop
 800035e:	46bd      	mov	sp, r7
 8000360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	40023800 	.word	0x40023800
 800036c:	07015410 	.word	0x07015410
 8000370:	40023c00 	.word	0x40023c00

08000374 <TIM2_Init>:

//======================================================
//TIMER INITIALIZE
//======================================================
void TIM2_Init(void) {
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
    // Enable TIM2 clock
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000378:	4b2e      	ldr	r3, [pc, #184]	@ (8000434 <TIM2_Init+0xc0>)
 800037a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800037c:	4a2d      	ldr	r2, [pc, #180]	@ (8000434 <TIM2_Init+0xc0>)
 800037e:	f043 0301 	orr.w	r3, r3, #1
 8000382:	6413      	str	r3, [r2, #64]	@ 0x40

    // Set prescaler and auto-reload for 1kHz PWM
    TIM2->PSC = 3;     // 84MHz / (3+1) = 21MHz
 8000384:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000388:	2203      	movs	r2, #3
 800038a:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 1000;   // PWM frequency ~ 20.9Khz
 800038c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000390:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000394:	62da      	str	r2, [r3, #44]	@ 0x2c

    // PWM mode 1, preload enable for CH1-CH4
    TIM2->CCMR1 |= (6 << 4) | TIM_CCMR1_OC1PE;  // CH1
 8000396:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003a0:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 80003a4:	6193      	str	r3, [r2, #24]
    TIM2->CCMR1 |= (6 << 12) | TIM_CCMR1_OC2PE; // CH2
 80003a6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003b0:	f443 43d0 	orr.w	r3, r3, #26624	@ 0x6800
 80003b4:	6193      	str	r3, [r2, #24]
    TIM2->CCMR2 |= (6 << 4) | TIM_CCMR2_OC3PE;  // CH3
 80003b6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003ba:	69db      	ldr	r3, [r3, #28]
 80003bc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003c0:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 80003c4:	61d3      	str	r3, [r2, #28]
    TIM2->CCMR2 |= (6 << 12) | TIM_CCMR2_OC4PE; // CH4
 80003c6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003ca:	69db      	ldr	r3, [r3, #28]
 80003cc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003d0:	f443 43d0 	orr.w	r3, r3, #26624	@ 0x6800
 80003d4:	61d3      	str	r3, [r2, #28]

    // Enable outputs
    TIM2->CCER |= TIM_CCER_CC1E | TIM_CCER_CC2E |
 80003d6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003da:	6a1b      	ldr	r3, [r3, #32]
 80003dc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003e0:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 80003e4:	f043 0311 	orr.w	r3, r3, #17
 80003e8:	6213      	str	r3, [r2, #32]
                  TIM_CCER_CC3E | TIM_CCER_CC4E;

    // Force update
    TIM2->EGR |= TIM_EGR_UG;
 80003ea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003ee:	695b      	ldr	r3, [r3, #20]
 80003f0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003f4:	f043 0301 	orr.w	r3, r3, #1
 80003f8:	6153      	str	r3, [r2, #20]

    // Set duty cycle = 0
    TIM2->CCR1 = 0;
 80003fa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003fe:	2200      	movs	r2, #0
 8000400:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2->CCR2 = 0;
 8000402:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000406:	2200      	movs	r2, #0
 8000408:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM2->CCR3 = 0;
 800040a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800040e:	2200      	movs	r2, #0
 8000410:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2->CCR4 = 0;
 8000412:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000416:	2200      	movs	r2, #0
 8000418:	641a      	str	r2, [r3, #64]	@ 0x40

    // Enable counter
    TIM2->CR1 |= TIM_CR1_CEN;
 800041a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000424:	f043 0301 	orr.w	r3, r3, #1
 8000428:	6013      	str	r3, [r2, #0]
}
 800042a:	bf00      	nop
 800042c:	46bd      	mov	sp, r7
 800042e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000432:	4770      	bx	lr
 8000434:	40023800 	.word	0x40023800

08000438 <TIM3_Init>:

void TIM3_Init(void) {
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800043c:	4b24      	ldr	r3, [pc, #144]	@ (80004d0 <TIM3_Init+0x98>)
 800043e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000440:	4a23      	ldr	r2, [pc, #140]	@ (80004d0 <TIM3_Init+0x98>)
 8000442:	f043 0302 	orr.w	r3, r3, #2
 8000446:	6413      	str	r3, [r2, #64]	@ 0x40
    TIM3->PSC = 3;
 8000448:	4b22      	ldr	r3, [pc, #136]	@ (80004d4 <TIM3_Init+0x9c>)
 800044a:	2203      	movs	r2, #3
 800044c:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM3->ARR = 1000;
 800044e:	4b21      	ldr	r3, [pc, #132]	@ (80004d4 <TIM3_Init+0x9c>)
 8000450:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000454:	62da      	str	r2, [r3, #44]	@ 0x2c

    TIM3->CCMR1 |= (6 << 4) | TIM_CCMR1_OC1PE;
 8000456:	4b1f      	ldr	r3, [pc, #124]	@ (80004d4 <TIM3_Init+0x9c>)
 8000458:	699b      	ldr	r3, [r3, #24]
 800045a:	4a1e      	ldr	r2, [pc, #120]	@ (80004d4 <TIM3_Init+0x9c>)
 800045c:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 8000460:	6193      	str	r3, [r2, #24]
    TIM3->CCMR1 |= (6 << 12) | TIM_CCMR1_OC2PE;
 8000462:	4b1c      	ldr	r3, [pc, #112]	@ (80004d4 <TIM3_Init+0x9c>)
 8000464:	699b      	ldr	r3, [r3, #24]
 8000466:	4a1b      	ldr	r2, [pc, #108]	@ (80004d4 <TIM3_Init+0x9c>)
 8000468:	f443 43d0 	orr.w	r3, r3, #26624	@ 0x6800
 800046c:	6193      	str	r3, [r2, #24]
    TIM3->CCMR2 |= (6 << 4) | TIM_CCMR2_OC3PE;
 800046e:	4b19      	ldr	r3, [pc, #100]	@ (80004d4 <TIM3_Init+0x9c>)
 8000470:	69db      	ldr	r3, [r3, #28]
 8000472:	4a18      	ldr	r2, [pc, #96]	@ (80004d4 <TIM3_Init+0x9c>)
 8000474:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 8000478:	61d3      	str	r3, [r2, #28]
    TIM3->CCMR2 |= (6 << 12) | TIM_CCMR2_OC4PE;
 800047a:	4b16      	ldr	r3, [pc, #88]	@ (80004d4 <TIM3_Init+0x9c>)
 800047c:	69db      	ldr	r3, [r3, #28]
 800047e:	4a15      	ldr	r2, [pc, #84]	@ (80004d4 <TIM3_Init+0x9c>)
 8000480:	f443 43d0 	orr.w	r3, r3, #26624	@ 0x6800
 8000484:	61d3      	str	r3, [r2, #28]

    TIM3->CCER |= TIM_CCER_CC1E | TIM_CCER_CC2E |
 8000486:	4b13      	ldr	r3, [pc, #76]	@ (80004d4 <TIM3_Init+0x9c>)
 8000488:	6a1b      	ldr	r3, [r3, #32]
 800048a:	4a12      	ldr	r2, [pc, #72]	@ (80004d4 <TIM3_Init+0x9c>)
 800048c:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 8000490:	f043 0311 	orr.w	r3, r3, #17
 8000494:	6213      	str	r3, [r2, #32]
                  TIM_CCER_CC3E | TIM_CCER_CC4E;

    TIM3->EGR |= TIM_EGR_UG;
 8000496:	4b0f      	ldr	r3, [pc, #60]	@ (80004d4 <TIM3_Init+0x9c>)
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	4a0e      	ldr	r2, [pc, #56]	@ (80004d4 <TIM3_Init+0x9c>)
 800049c:	f043 0301 	orr.w	r3, r3, #1
 80004a0:	6153      	str	r3, [r2, #20]

    TIM3->CCR1 = 0;
 80004a2:	4b0c      	ldr	r3, [pc, #48]	@ (80004d4 <TIM3_Init+0x9c>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3->CCR2 = 0;
 80004a8:	4b0a      	ldr	r3, [pc, #40]	@ (80004d4 <TIM3_Init+0x9c>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3->CCR3 = 0;
 80004ae:	4b09      	ldr	r3, [pc, #36]	@ (80004d4 <TIM3_Init+0x9c>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM3->CCR4 = 0;
 80004b4:	4b07      	ldr	r3, [pc, #28]	@ (80004d4 <TIM3_Init+0x9c>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	641a      	str	r2, [r3, #64]	@ 0x40

    TIM3->CR1 |= TIM_CR1_CEN;
 80004ba:	4b06      	ldr	r3, [pc, #24]	@ (80004d4 <TIM3_Init+0x9c>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	4a05      	ldr	r2, [pc, #20]	@ (80004d4 <TIM3_Init+0x9c>)
 80004c0:	f043 0301 	orr.w	r3, r3, #1
 80004c4:	6013      	str	r3, [r2, #0]
}
 80004c6:	bf00      	nop
 80004c8:	46bd      	mov	sp, r7
 80004ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ce:	4770      	bx	lr
 80004d0:	40023800 	.word	0x40023800
 80004d4:	40000400 	.word	0x40000400

080004d8 <TIM4_Init>:

void TIM4_Init(void) {
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 80004dc:	4b24      	ldr	r3, [pc, #144]	@ (8000570 <TIM4_Init+0x98>)
 80004de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004e0:	4a23      	ldr	r2, [pc, #140]	@ (8000570 <TIM4_Init+0x98>)
 80004e2:	f043 0304 	orr.w	r3, r3, #4
 80004e6:	6413      	str	r3, [r2, #64]	@ 0x40
    TIM4->PSC = 3;
 80004e8:	4b22      	ldr	r3, [pc, #136]	@ (8000574 <TIM4_Init+0x9c>)
 80004ea:	2203      	movs	r2, #3
 80004ec:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM4->ARR = 1000;
 80004ee:	4b21      	ldr	r3, [pc, #132]	@ (8000574 <TIM4_Init+0x9c>)
 80004f0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80004f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    TIM4->CCMR1 |= (6 << 4) | TIM_CCMR1_OC1PE;
 80004f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000574 <TIM4_Init+0x9c>)
 80004f8:	699b      	ldr	r3, [r3, #24]
 80004fa:	4a1e      	ldr	r2, [pc, #120]	@ (8000574 <TIM4_Init+0x9c>)
 80004fc:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 8000500:	6193      	str	r3, [r2, #24]
    TIM4->CCMR1 |= (6 << 12) | TIM_CCMR1_OC2PE;
 8000502:	4b1c      	ldr	r3, [pc, #112]	@ (8000574 <TIM4_Init+0x9c>)
 8000504:	699b      	ldr	r3, [r3, #24]
 8000506:	4a1b      	ldr	r2, [pc, #108]	@ (8000574 <TIM4_Init+0x9c>)
 8000508:	f443 43d0 	orr.w	r3, r3, #26624	@ 0x6800
 800050c:	6193      	str	r3, [r2, #24]
    TIM4->CCMR2 |= (6 << 4) | TIM_CCMR2_OC3PE;
 800050e:	4b19      	ldr	r3, [pc, #100]	@ (8000574 <TIM4_Init+0x9c>)
 8000510:	69db      	ldr	r3, [r3, #28]
 8000512:	4a18      	ldr	r2, [pc, #96]	@ (8000574 <TIM4_Init+0x9c>)
 8000514:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 8000518:	61d3      	str	r3, [r2, #28]
    TIM4->CCMR2 |= (6 << 12) | TIM_CCMR2_OC4PE;
 800051a:	4b16      	ldr	r3, [pc, #88]	@ (8000574 <TIM4_Init+0x9c>)
 800051c:	69db      	ldr	r3, [r3, #28]
 800051e:	4a15      	ldr	r2, [pc, #84]	@ (8000574 <TIM4_Init+0x9c>)
 8000520:	f443 43d0 	orr.w	r3, r3, #26624	@ 0x6800
 8000524:	61d3      	str	r3, [r2, #28]

    TIM4->CCER |= TIM_CCER_CC1E | TIM_CCER_CC2E |
 8000526:	4b13      	ldr	r3, [pc, #76]	@ (8000574 <TIM4_Init+0x9c>)
 8000528:	6a1b      	ldr	r3, [r3, #32]
 800052a:	4a12      	ldr	r2, [pc, #72]	@ (8000574 <TIM4_Init+0x9c>)
 800052c:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 8000530:	f043 0311 	orr.w	r3, r3, #17
 8000534:	6213      	str	r3, [r2, #32]
                  TIM_CCER_CC3E | TIM_CCER_CC4E;

    TIM4->EGR |= TIM_EGR_UG;
 8000536:	4b0f      	ldr	r3, [pc, #60]	@ (8000574 <TIM4_Init+0x9c>)
 8000538:	695b      	ldr	r3, [r3, #20]
 800053a:	4a0e      	ldr	r2, [pc, #56]	@ (8000574 <TIM4_Init+0x9c>)
 800053c:	f043 0301 	orr.w	r3, r3, #1
 8000540:	6153      	str	r3, [r2, #20]

    TIM4->CCR1 = 0;
 8000542:	4b0c      	ldr	r3, [pc, #48]	@ (8000574 <TIM4_Init+0x9c>)
 8000544:	2200      	movs	r2, #0
 8000546:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM4->CCR2 = 0;
 8000548:	4b0a      	ldr	r3, [pc, #40]	@ (8000574 <TIM4_Init+0x9c>)
 800054a:	2200      	movs	r2, #0
 800054c:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM4->CCR3 = 0;
 800054e:	4b09      	ldr	r3, [pc, #36]	@ (8000574 <TIM4_Init+0x9c>)
 8000550:	2200      	movs	r2, #0
 8000552:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM4->CCR4 = 0;
 8000554:	4b07      	ldr	r3, [pc, #28]	@ (8000574 <TIM4_Init+0x9c>)
 8000556:	2200      	movs	r2, #0
 8000558:	641a      	str	r2, [r3, #64]	@ 0x40

    TIM4->CR1 |= TIM_CR1_CEN;
 800055a:	4b06      	ldr	r3, [pc, #24]	@ (8000574 <TIM4_Init+0x9c>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4a05      	ldr	r2, [pc, #20]	@ (8000574 <TIM4_Init+0x9c>)
 8000560:	f043 0301 	orr.w	r3, r3, #1
 8000564:	6013      	str	r3, [r2, #0]
}
 8000566:	bf00      	nop
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr
 8000570:	40023800 	.word	0x40023800
 8000574:	40000800 	.word	0x40000800

08000578 <GPIO_Init>:

//======================================================
//GPIO INITIALIZE
//======================================================
void GPIO_Init(void) {
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
    // Enable GPIOA and GPIOB clock
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 800057c:	4b66      	ldr	r3, [pc, #408]	@ (8000718 <GPIO_Init+0x1a0>)
 800057e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000580:	4a65      	ldr	r2, [pc, #404]	@ (8000718 <GPIO_Init+0x1a0>)
 8000582:	f043 0301 	orr.w	r3, r3, #1
 8000586:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000588:	4b63      	ldr	r3, [pc, #396]	@ (8000718 <GPIO_Init+0x1a0>)
 800058a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058c:	4a62      	ldr	r2, [pc, #392]	@ (8000718 <GPIO_Init+0x1a0>)
 800058e:	f043 0302 	orr.w	r3, r3, #2
 8000592:	6313      	str	r3, [r2, #48]	@ 0x30


    // SET TIMER PIN FOR Alternate Function
    // PA0–PA3 (TIM2_CH1–CH4)
    GPIOA->MODER &= ~(0xFF << (0 * 2));          // Clear mode bits for PA0–PA3
 8000594:	4b61      	ldr	r3, [pc, #388]	@ (800071c <GPIO_Init+0x1a4>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a60      	ldr	r2, [pc, #384]	@ (800071c <GPIO_Init+0x1a4>)
 800059a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800059e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (0xAA << (0 * 2));          // Set mode = AF (10)
 80005a0:	4b5e      	ldr	r3, [pc, #376]	@ (800071c <GPIO_Init+0x1a4>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a5d      	ldr	r2, [pc, #372]	@ (800071c <GPIO_Init+0x1a4>)
 80005a6:	f043 03aa 	orr.w	r3, r3, #170	@ 0xaa
 80005aa:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= ~0xFFFF;                    // Clear AFRL[15:0]
 80005ac:	4b5b      	ldr	r3, [pc, #364]	@ (800071c <GPIO_Init+0x1a4>)
 80005ae:	6a1b      	ldr	r3, [r3, #32]
 80005b0:	4a5a      	ldr	r2, [pc, #360]	@ (800071c <GPIO_Init+0x1a4>)
 80005b2:	0c1b      	lsrs	r3, r3, #16
 80005b4:	041b      	lsls	r3, r3, #16
 80005b6:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (0x1111 << 0);              // AF1 for PA0–PA3
 80005b8:	4b58      	ldr	r3, [pc, #352]	@ (800071c <GPIO_Init+0x1a4>)
 80005ba:	6a1b      	ldr	r3, [r3, #32]
 80005bc:	4a57      	ldr	r2, [pc, #348]	@ (800071c <GPIO_Init+0x1a4>)
 80005be:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 80005c2:	f043 0311 	orr.w	r3, r3, #17
 80005c6:	6213      	str	r3, [r2, #32]

    // PA6–PA7 (TIM3_CH1–CH2), AF2
    GPIOA->MODER &= ~(0xF << (6 * 2));
 80005c8:	4b54      	ldr	r3, [pc, #336]	@ (800071c <GPIO_Init+0x1a4>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a53      	ldr	r2, [pc, #332]	@ (800071c <GPIO_Init+0x1a4>)
 80005ce:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80005d2:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (0xA << (6 * 2));
 80005d4:	4b51      	ldr	r3, [pc, #324]	@ (800071c <GPIO_Init+0x1a4>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a50      	ldr	r2, [pc, #320]	@ (800071c <GPIO_Init+0x1a4>)
 80005da:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 80005de:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= ~(0xFF << (6 * 4));
 80005e0:	4b4e      	ldr	r3, [pc, #312]	@ (800071c <GPIO_Init+0x1a4>)
 80005e2:	6a1b      	ldr	r3, [r3, #32]
 80005e4:	4a4d      	ldr	r2, [pc, #308]	@ (800071c <GPIO_Init+0x1a4>)
 80005e6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80005ea:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |=  (0x22 << (6 * 4));
 80005ec:	4b4b      	ldr	r3, [pc, #300]	@ (800071c <GPIO_Init+0x1a4>)
 80005ee:	6a1b      	ldr	r3, [r3, #32]
 80005f0:	4a4a      	ldr	r2, [pc, #296]	@ (800071c <GPIO_Init+0x1a4>)
 80005f2:	f043 5308 	orr.w	r3, r3, #570425344	@ 0x22000000
 80005f6:	6213      	str	r3, [r2, #32]

    // PB0–PB1 (TIM3_CH3–CH4), AF2
    GPIOB->MODER &= ~(0xF << (0 * 2));
 80005f8:	4b49      	ldr	r3, [pc, #292]	@ (8000720 <GPIO_Init+0x1a8>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a48      	ldr	r2, [pc, #288]	@ (8000720 <GPIO_Init+0x1a8>)
 80005fe:	f023 030f 	bic.w	r3, r3, #15
 8000602:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (0xA << (0 * 2));
 8000604:	4b46      	ldr	r3, [pc, #280]	@ (8000720 <GPIO_Init+0x1a8>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a45      	ldr	r2, [pc, #276]	@ (8000720 <GPIO_Init+0x1a8>)
 800060a:	f043 030a 	orr.w	r3, r3, #10
 800060e:	6013      	str	r3, [r2, #0]
    GPIOB->AFR[0] &= ~(0xFF << (0 * 4));
 8000610:	4b43      	ldr	r3, [pc, #268]	@ (8000720 <GPIO_Init+0x1a8>)
 8000612:	6a1b      	ldr	r3, [r3, #32]
 8000614:	4a42      	ldr	r2, [pc, #264]	@ (8000720 <GPIO_Init+0x1a8>)
 8000616:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800061a:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[0] |=  (0x22 << (0 * 4));
 800061c:	4b40      	ldr	r3, [pc, #256]	@ (8000720 <GPIO_Init+0x1a8>)
 800061e:	6a1b      	ldr	r3, [r3, #32]
 8000620:	4a3f      	ldr	r2, [pc, #252]	@ (8000720 <GPIO_Init+0x1a8>)
 8000622:	f043 0322 	orr.w	r3, r3, #34	@ 0x22
 8000626:	6213      	str	r3, [r2, #32]

    // PB6–PB9 (TIM4_CH1–CH4), AF2
    GPIOB->MODER &= ~(0xFF << (6 * 2));
 8000628:	4b3d      	ldr	r3, [pc, #244]	@ (8000720 <GPIO_Init+0x1a8>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a3c      	ldr	r2, [pc, #240]	@ (8000720 <GPIO_Init+0x1a8>)
 800062e:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 8000632:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (0xAA << (6 * 2));
 8000634:	4b3a      	ldr	r3, [pc, #232]	@ (8000720 <GPIO_Init+0x1a8>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a39      	ldr	r2, [pc, #228]	@ (8000720 <GPIO_Init+0x1a8>)
 800063a:	f443 232a 	orr.w	r3, r3, #696320	@ 0xaa000
 800063e:	6013      	str	r3, [r2, #0]

    GPIOB->AFR[0] &= ~((0xF << (6 * 4)) | (0xF << (7 * 4)));
 8000640:	4b37      	ldr	r3, [pc, #220]	@ (8000720 <GPIO_Init+0x1a8>)
 8000642:	6a1b      	ldr	r3, [r3, #32]
 8000644:	4a36      	ldr	r2, [pc, #216]	@ (8000720 <GPIO_Init+0x1a8>)
 8000646:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800064a:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[0] |=  ((0x2 << (6 * 4)) | (0x2 << (7 * 4)));
 800064c:	4b34      	ldr	r3, [pc, #208]	@ (8000720 <GPIO_Init+0x1a8>)
 800064e:	6a1b      	ldr	r3, [r3, #32]
 8000650:	4a33      	ldr	r2, [pc, #204]	@ (8000720 <GPIO_Init+0x1a8>)
 8000652:	f043 5308 	orr.w	r3, r3, #570425344	@ 0x22000000
 8000656:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[1] &= ~((0xF << (0 * 4)) | (0xF << (1 * 4)));
 8000658:	4b31      	ldr	r3, [pc, #196]	@ (8000720 <GPIO_Init+0x1a8>)
 800065a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800065c:	4a30      	ldr	r2, [pc, #192]	@ (8000720 <GPIO_Init+0x1a8>)
 800065e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000662:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->AFR[1] |=  ((0x2 << (0 * 4)) | (0x2 << (1 * 4)));
 8000664:	4b2e      	ldr	r3, [pc, #184]	@ (8000720 <GPIO_Init+0x1a8>)
 8000666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000668:	4a2d      	ldr	r2, [pc, #180]	@ (8000720 <GPIO_Init+0x1a8>)
 800066a:	f043 0322 	orr.w	r3, r3, #34	@ 0x22
 800066e:	6253      	str	r3, [r2, #36]	@ 0x24


    // SET INPUT PIN FOR HALL SENSOR ( PA5 6 7)
    GPIOA->MODER &= ~(0b11 << (5 * 2));  // Clear PA5
 8000670:	4b2a      	ldr	r3, [pc, #168]	@ (800071c <GPIO_Init+0x1a4>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a29      	ldr	r2, [pc, #164]	@ (800071c <GPIO_Init+0x1a4>)
 8000676:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800067a:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~(0b11 << (6 * 2));  // Clear PA6
 800067c:	4b27      	ldr	r3, [pc, #156]	@ (800071c <GPIO_Init+0x1a4>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a26      	ldr	r2, [pc, #152]	@ (800071c <GPIO_Init+0x1a4>)
 8000682:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000686:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~(0b11 << (7 * 2));  // Clear PA7
 8000688:	4b24      	ldr	r3, [pc, #144]	@ (800071c <GPIO_Init+0x1a4>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a23      	ldr	r2, [pc, #140]	@ (800071c <GPIO_Init+0x1a4>)
 800068e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000692:	6013      	str	r3, [r2, #0]

    GPIOA->PUPDR &= ~(0b11 << (5 * 2));
 8000694:	4b21      	ldr	r3, [pc, #132]	@ (800071c <GPIO_Init+0x1a4>)
 8000696:	68db      	ldr	r3, [r3, #12]
 8000698:	4a20      	ldr	r2, [pc, #128]	@ (800071c <GPIO_Init+0x1a4>)
 800069a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800069e:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR |=  (0b01 << (5 * 2));  // Pull-up cho PA5
 80006a0:	4b1e      	ldr	r3, [pc, #120]	@ (800071c <GPIO_Init+0x1a4>)
 80006a2:	68db      	ldr	r3, [r3, #12]
 80006a4:	4a1d      	ldr	r2, [pc, #116]	@ (800071c <GPIO_Init+0x1a4>)
 80006a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80006aa:	60d3      	str	r3, [r2, #12]

    GPIOA->PUPDR &= ~(0b11 << (6 * 2));
 80006ac:	4b1b      	ldr	r3, [pc, #108]	@ (800071c <GPIO_Init+0x1a4>)
 80006ae:	68db      	ldr	r3, [r3, #12]
 80006b0:	4a1a      	ldr	r2, [pc, #104]	@ (800071c <GPIO_Init+0x1a4>)
 80006b2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80006b6:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR |=  (0b01 << (6 * 2));  // Pull-up cho PA6
 80006b8:	4b18      	ldr	r3, [pc, #96]	@ (800071c <GPIO_Init+0x1a4>)
 80006ba:	68db      	ldr	r3, [r3, #12]
 80006bc:	4a17      	ldr	r2, [pc, #92]	@ (800071c <GPIO_Init+0x1a4>)
 80006be:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80006c2:	60d3      	str	r3, [r2, #12]

    GPIOA->PUPDR &= ~(0b11 << (7 * 2));
 80006c4:	4b15      	ldr	r3, [pc, #84]	@ (800071c <GPIO_Init+0x1a4>)
 80006c6:	68db      	ldr	r3, [r3, #12]
 80006c8:	4a14      	ldr	r2, [pc, #80]	@ (800071c <GPIO_Init+0x1a4>)
 80006ca:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006ce:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR |=  (0b01 << (7 * 2));  // Pull-up cho PA7
 80006d0:	4b12      	ldr	r3, [pc, #72]	@ (800071c <GPIO_Init+0x1a4>)
 80006d2:	68db      	ldr	r3, [r3, #12]
 80006d4:	4a11      	ldr	r2, [pc, #68]	@ (800071c <GPIO_Init+0x1a4>)
 80006d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006da:	60d3      	str	r3, [r2, #12]

    //SET PA9 (TX) và PA10 (RX) ở AF7 FOR USART1
    GPIOA->MODER &= ~((0b11 << (9 * 2)) | (0b11 << (10 * 2))); // Clear
 80006dc:	4b0f      	ldr	r3, [pc, #60]	@ (800071c <GPIO_Init+0x1a4>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a0e      	ldr	r2, [pc, #56]	@ (800071c <GPIO_Init+0x1a4>)
 80006e2:	f423 1370 	bic.w	r3, r3, #3932160	@ 0x3c0000
 80006e6:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  ((0b10 << (9 * 2)) | (0b10 << (10 * 2))); // AF mode
 80006e8:	4b0c      	ldr	r3, [pc, #48]	@ (800071c <GPIO_Init+0x1a4>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a0b      	ldr	r2, [pc, #44]	@ (800071c <GPIO_Init+0x1a4>)
 80006ee:	f443 1320 	orr.w	r3, r3, #2621440	@ 0x280000
 80006f2:	6013      	str	r3, [r2, #0]

    GPIOA->AFR[1] &= ~((0xF << (1 * 4)) | (0xF << (2 * 4)));   // Clear AFRH9/10
 80006f4:	4b09      	ldr	r3, [pc, #36]	@ (800071c <GPIO_Init+0x1a4>)
 80006f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006f8:	4a08      	ldr	r2, [pc, #32]	@ (800071c <GPIO_Init+0x1a4>)
 80006fa:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80006fe:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOA->AFR[1] |=  ((0x7 << (1 * 4)) | (0x7 << (2 * 4)));   // AF7 = USART1
 8000700:	4b06      	ldr	r3, [pc, #24]	@ (800071c <GPIO_Init+0x1a4>)
 8000702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000704:	4a05      	ldr	r2, [pc, #20]	@ (800071c <GPIO_Init+0x1a4>)
 8000706:	f443 63ee 	orr.w	r3, r3, #1904	@ 0x770
 800070a:	6253      	str	r3, [r2, #36]	@ 0x24

}
 800070c:	bf00      	nop
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800
 800071c:	40020000 	.word	0x40020000
 8000720:	40020400 	.word	0x40020400

08000724 <USART1_UART_Init>:

//======================================================
//UART INITIALIZE
//======================================================
void USART1_UART_Init(void) {
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN;  // Enable USART1 (nằm trên APB2)
 8000728:	4b0e      	ldr	r3, [pc, #56]	@ (8000764 <USART1_UART_Init+0x40>)
 800072a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800072c:	4a0d      	ldr	r2, [pc, #52]	@ (8000764 <USART1_UART_Init+0x40>)
 800072e:	f043 0310 	orr.w	r3, r3, #16
 8000732:	6453      	str	r3, [r2, #68]	@ 0x44

    USART1->CR1 = 0;  // Tắt USART trước khi cấu hình
 8000734:	4b0c      	ldr	r3, [pc, #48]	@ (8000768 <USART1_UART_Init+0x44>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]

    // Baudrate: ví dụ 115200 với PCLK2 = 84MHz
    // USARTDIV = 84MHz / (16 * 115200) ≈ 45.5625
    // Mantissa = 45, Fraction = 0.5625 * 16 ≈ 9 → BRR = 0x2D9
    USART1->BRR = (45 << 4) | 9;
 800073a:	4b0b      	ldr	r3, [pc, #44]	@ (8000768 <USART1_UART_Init+0x44>)
 800073c:	f240 22d9 	movw	r2, #729	@ 0x2d9
 8000740:	609a      	str	r2, [r3, #8]

    // 8-bit data, 1 stop bit, no parity, no flow control
    USART1->CR1 |= USART_CR1_TE | USART_CR1_RE;  // Enable TX + RX
 8000742:	4b09      	ldr	r3, [pc, #36]	@ (8000768 <USART1_UART_Init+0x44>)
 8000744:	68db      	ldr	r3, [r3, #12]
 8000746:	4a08      	ldr	r2, [pc, #32]	@ (8000768 <USART1_UART_Init+0x44>)
 8000748:	f043 030c 	orr.w	r3, r3, #12
 800074c:	60d3      	str	r3, [r2, #12]
    USART1->CR1 |= USART_CR1_UE;                 // Bật USART
 800074e:	4b06      	ldr	r3, [pc, #24]	@ (8000768 <USART1_UART_Init+0x44>)
 8000750:	68db      	ldr	r3, [r3, #12]
 8000752:	4a05      	ldr	r2, [pc, #20]	@ (8000768 <USART1_UART_Init+0x44>)
 8000754:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000758:	60d3      	str	r3, [r2, #12]
}
 800075a:	bf00      	nop
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	40023800 	.word	0x40023800
 8000768:	40011000 	.word	0x40011000

0800076c <handleCommutation>:
//FUNCTIONS
//======================================================

//Function use to handle the hall sequences, provided through "Steps",
//and given the value "pwmVal" to change duty cycle for specific step.
void handleCommutation(uint8_t step, uint8_t pwmVal) {
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	460a      	mov	r2, r1
 8000776:	71fb      	strb	r3, [r7, #7]
 8000778:	4613      	mov	r3, r2
 800077a:	71bb      	strb	r3, [r7, #6]
    switch (step) {
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	2b05      	cmp	r3, #5
 8000780:	f200 809a 	bhi.w	80008b8 <handleCommutation+0x14c>
 8000784:	a201      	add	r2, pc, #4	@ (adr r2, 800078c <handleCommutation+0x20>)
 8000786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800078a:	bf00      	nop
 800078c:	080007a5 	.word	0x080007a5
 8000790:	080007d3 	.word	0x080007d3
 8000794:	08000801 	.word	0x08000801
 8000798:	0800082f 	.word	0x0800082f
 800079c:	0800085d 	.word	0x0800085d
 80007a0:	0800088b 	.word	0x0800088b
        case 0:
            SET_PWM_1_H3(pwmVal);
 80007a4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007a8:	79bb      	ldrb	r3, [r7, #6]
 80007aa:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SET_PWM_1_L2(lowMax);
 80007ac:	4b46      	ldr	r3, [pc, #280]	@ (80008c8 <handleCommutation+0x15c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	635a      	str	r2, [r3, #52]	@ 0x34
            SET_PWM_1_H1(highMin);
 80007b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007b6:	2200      	movs	r2, #0
 80007b8:	635a      	str	r2, [r3, #52]	@ 0x34
            SET_PWM_1_H2(highMin);
 80007ba:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007be:	2200      	movs	r2, #0
 80007c0:	639a      	str	r2, [r3, #56]	@ 0x38
            SET_PWM_1_L1(lowMin);
 80007c2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007c6:	22ff      	movs	r2, #255	@ 0xff
 80007c8:	641a      	str	r2, [r3, #64]	@ 0x40
            SET_PWM_1_L3(lowMin);
 80007ca:	4b3f      	ldr	r3, [pc, #252]	@ (80008c8 <handleCommutation+0x15c>)
 80007cc:	22ff      	movs	r2, #255	@ 0xff
 80007ce:	639a      	str	r2, [r3, #56]	@ 0x38
            break;
 80007d0:	e073      	b.n	80008ba <handleCommutation+0x14e>
        case 1:
			SET_PWM_1_H2(pwmVal);
 80007d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007d6:	79bb      	ldrb	r3, [r7, #6]
 80007d8:	6393      	str	r3, [r2, #56]	@ 0x38
			SET_PWM_1_L1(lowMax);
 80007da:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007de:	2200      	movs	r2, #0
 80007e0:	641a      	str	r2, [r3, #64]	@ 0x40
			SET_PWM_1_H1(highMin);
 80007e2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007e6:	2200      	movs	r2, #0
 80007e8:	635a      	str	r2, [r3, #52]	@ 0x34
			SET_PWM_1_H3(highMin);
 80007ea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007ee:	2200      	movs	r2, #0
 80007f0:	63da      	str	r2, [r3, #60]	@ 0x3c
			SET_PWM_1_L2(lowMin);
 80007f2:	4b35      	ldr	r3, [pc, #212]	@ (80008c8 <handleCommutation+0x15c>)
 80007f4:	22ff      	movs	r2, #255	@ 0xff
 80007f6:	635a      	str	r2, [r3, #52]	@ 0x34
			SET_PWM_1_L3(lowMin);
 80007f8:	4b33      	ldr	r3, [pc, #204]	@ (80008c8 <handleCommutation+0x15c>)
 80007fa:	22ff      	movs	r2, #255	@ 0xff
 80007fc:	639a      	str	r2, [r3, #56]	@ 0x38
            break;
 80007fe:	e05c      	b.n	80008ba <handleCommutation+0x14e>
        case 2:
            SET_PWM_1_H3(pwmVal);
 8000800:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000804:	79bb      	ldrb	r3, [r7, #6]
 8000806:	63d3      	str	r3, [r2, #60]	@ 0x3c
			SET_PWM_1_L1(lowMax);
 8000808:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800080c:	2200      	movs	r2, #0
 800080e:	641a      	str	r2, [r3, #64]	@ 0x40
			SET_PWM_1_H1(highMin);
 8000810:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000814:	2200      	movs	r2, #0
 8000816:	635a      	str	r2, [r3, #52]	@ 0x34
			SET_PWM_1_H2(highMin);
 8000818:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800081c:	2200      	movs	r2, #0
 800081e:	639a      	str	r2, [r3, #56]	@ 0x38
			SET_PWM_1_L2(lowMin);
 8000820:	4b29      	ldr	r3, [pc, #164]	@ (80008c8 <handleCommutation+0x15c>)
 8000822:	22ff      	movs	r2, #255	@ 0xff
 8000824:	635a      	str	r2, [r3, #52]	@ 0x34
			SET_PWM_1_L3(lowMin);
 8000826:	4b28      	ldr	r3, [pc, #160]	@ (80008c8 <handleCommutation+0x15c>)
 8000828:	22ff      	movs	r2, #255	@ 0xff
 800082a:	639a      	str	r2, [r3, #56]	@ 0x38
            break;
 800082c:	e045      	b.n	80008ba <handleCommutation+0x14e>
        case 3:
            SET_PWM_1_H1(pwmVal);
 800082e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000832:	79bb      	ldrb	r3, [r7, #6]
 8000834:	6353      	str	r3, [r2, #52]	@ 0x34
			SET_PWM_1_L3(lowMax);
 8000836:	4b24      	ldr	r3, [pc, #144]	@ (80008c8 <handleCommutation+0x15c>)
 8000838:	2200      	movs	r2, #0
 800083a:	639a      	str	r2, [r3, #56]	@ 0x38
			SET_PWM_1_H2(highMin);
 800083c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000840:	2200      	movs	r2, #0
 8000842:	639a      	str	r2, [r3, #56]	@ 0x38
			SET_PWM_1_H3(highMin);
 8000844:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000848:	2200      	movs	r2, #0
 800084a:	63da      	str	r2, [r3, #60]	@ 0x3c
			SET_PWM_1_L1(lowMin);
 800084c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000850:	22ff      	movs	r2, #255	@ 0xff
 8000852:	641a      	str	r2, [r3, #64]	@ 0x40
			SET_PWM_1_L2(lowMin);
 8000854:	4b1c      	ldr	r3, [pc, #112]	@ (80008c8 <handleCommutation+0x15c>)
 8000856:	22ff      	movs	r2, #255	@ 0xff
 8000858:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 800085a:	e02e      	b.n	80008ba <handleCommutation+0x14e>
        case 4:
            SET_PWM_1_H1(pwmVal);
 800085c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000860:	79bb      	ldrb	r3, [r7, #6]
 8000862:	6353      	str	r3, [r2, #52]	@ 0x34
			SET_PWM_1_L2(lowMax);
 8000864:	4b18      	ldr	r3, [pc, #96]	@ (80008c8 <handleCommutation+0x15c>)
 8000866:	2200      	movs	r2, #0
 8000868:	635a      	str	r2, [r3, #52]	@ 0x34
			SET_PWM_1_H2(highMin);
 800086a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800086e:	2200      	movs	r2, #0
 8000870:	639a      	str	r2, [r3, #56]	@ 0x38
			SET_PWM_1_H3(highMin);
 8000872:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000876:	2200      	movs	r2, #0
 8000878:	63da      	str	r2, [r3, #60]	@ 0x3c
			SET_PWM_1_L1(lowMin);
 800087a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800087e:	22ff      	movs	r2, #255	@ 0xff
 8000880:	641a      	str	r2, [r3, #64]	@ 0x40
			SET_PWM_1_L3(lowMin);
 8000882:	4b11      	ldr	r3, [pc, #68]	@ (80008c8 <handleCommutation+0x15c>)
 8000884:	22ff      	movs	r2, #255	@ 0xff
 8000886:	639a      	str	r2, [r3, #56]	@ 0x38
            break;
 8000888:	e017      	b.n	80008ba <handleCommutation+0x14e>
        case 5:
            SET_PWM_1_H2(pwmVal);
 800088a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800088e:	79bb      	ldrb	r3, [r7, #6]
 8000890:	6393      	str	r3, [r2, #56]	@ 0x38
			SET_PWM_1_L3(lowMax);
 8000892:	4b0d      	ldr	r3, [pc, #52]	@ (80008c8 <handleCommutation+0x15c>)
 8000894:	2200      	movs	r2, #0
 8000896:	639a      	str	r2, [r3, #56]	@ 0x38
			SET_PWM_1_H1(highMin);
 8000898:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800089c:	2200      	movs	r2, #0
 800089e:	635a      	str	r2, [r3, #52]	@ 0x34
			SET_PWM_1_H3(highMin);
 80008a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008a4:	2200      	movs	r2, #0
 80008a6:	63da      	str	r2, [r3, #60]	@ 0x3c
			SET_PWM_1_L1(lowMin);
 80008a8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008ac:	22ff      	movs	r2, #255	@ 0xff
 80008ae:	641a      	str	r2, [r3, #64]	@ 0x40
			SET_PWM_1_L2(lowMin);
 80008b0:	4b05      	ldr	r3, [pc, #20]	@ (80008c8 <handleCommutation+0x15c>)
 80008b2:	22ff      	movs	r2, #255	@ 0xff
 80008b4:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 80008b6:	e000      	b.n	80008ba <handleCommutation+0x14e>
        default: break;
 80008b8:	bf00      	nop
    }
}
 80008ba:	bf00      	nop
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	40000400 	.word	0x40000400

080008cc <readHallSensor>:

int readHallSensor(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
    uint32_t idr = GPIOA->IDR;
 80008d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000944 <readHallSensor+0x78>)
 80008d4:	691b      	ldr	r3, [r3, #16]
 80008d6:	607b      	str	r3, [r7, #4]
    uint8_t hallA = (idr >> 5) & 0x01;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	095b      	lsrs	r3, r3, #5
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	70fb      	strb	r3, [r7, #3]
    uint8_t hallB = (idr >> 6) & 0x01;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	099b      	lsrs	r3, r3, #6
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	70bb      	strb	r3, [r7, #2]
    uint8_t hallC = (idr >> 7) & 0x01;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	09db      	lsrs	r3, r3, #7
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	707b      	strb	r3, [r7, #1]

    hallState = (hallA << 2) | (hallB << 1) | hallC;
 80008fc:	78fb      	ldrb	r3, [r7, #3]
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	b25a      	sxtb	r2, r3
 8000902:	78bb      	ldrb	r3, [r7, #2]
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	b25b      	sxtb	r3, r3
 8000908:	4313      	orrs	r3, r2
 800090a:	b25a      	sxtb	r2, r3
 800090c:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8000910:	4313      	orrs	r3, r2
 8000912:	b25b      	sxtb	r3, r3
 8000914:	b2da      	uxtb	r2, r3
 8000916:	4b0c      	ldr	r3, [pc, #48]	@ (8000948 <readHallSensor+0x7c>)
 8000918:	701a      	strb	r2, [r3, #0]

    int8_t step = hallCWLookup[hallState];
 800091a:	4b0b      	ldr	r3, [pc, #44]	@ (8000948 <readHallSensor+0x7c>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	b2db      	uxtb	r3, r3
 8000920:	461a      	mov	r2, r3
 8000922:	4b0a      	ldr	r3, [pc, #40]	@ (800094c <readHallSensor+0x80>)
 8000924:	5c9b      	ldrb	r3, [r3, r2]
 8000926:	703b      	strb	r3, [r7, #0]
    if (step >= 0) return step;
 8000928:	f997 3000 	ldrsb.w	r3, [r7]
 800092c:	2b00      	cmp	r3, #0
 800092e:	db02      	blt.n	8000936 <readHallSensor+0x6a>
 8000930:	f997 3000 	ldrsb.w	r3, [r7]
 8000934:	e000      	b.n	8000938 <readHallSensor+0x6c>
    return 0;
 8000936:	2300      	movs	r3, #0
}
 8000938:	4618      	mov	r0, r3
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr
 8000944:	40020000 	.word	0x40020000
 8000948:	2000017e 	.word	0x2000017e
 800094c:	080070cc 	.word	0x080070cc

08000950 <EXTI9_5_IRQHandler>:
//Interupted is called when HALL SENSOR got a change of data
//used to find the right hall sequence, and provide the next step for handleCommutation
void EXTI9_5_IRQHandler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
    bufferAdd(readHallSensor());
 8000954:	f7ff ffba 	bl	80008cc <readHallSensor>
 8000958:	4603      	mov	r3, r0
 800095a:	b2db      	uxtb	r3, r3
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fc33 	bl	80001c8 <bufferAdd>

    EXTI->PR |= (1 << 5);
 8000962:	4b0a      	ldr	r3, [pc, #40]	@ (800098c <EXTI9_5_IRQHandler+0x3c>)
 8000964:	695b      	ldr	r3, [r3, #20]
 8000966:	4a09      	ldr	r2, [pc, #36]	@ (800098c <EXTI9_5_IRQHandler+0x3c>)
 8000968:	f043 0320 	orr.w	r3, r3, #32
 800096c:	6153      	str	r3, [r2, #20]
    EXTI->PR |= (1 << 6);
 800096e:	4b07      	ldr	r3, [pc, #28]	@ (800098c <EXTI9_5_IRQHandler+0x3c>)
 8000970:	695b      	ldr	r3, [r3, #20]
 8000972:	4a06      	ldr	r2, [pc, #24]	@ (800098c <EXTI9_5_IRQHandler+0x3c>)
 8000974:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000978:	6153      	str	r3, [r2, #20]
    EXTI->PR |= (1 << 7);
 800097a:	4b04      	ldr	r3, [pc, #16]	@ (800098c <EXTI9_5_IRQHandler+0x3c>)
 800097c:	695b      	ldr	r3, [r3, #20]
 800097e:	4a03      	ldr	r2, [pc, #12]	@ (800098c <EXTI9_5_IRQHandler+0x3c>)
 8000980:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000984:	6153      	str	r3, [r2, #20]
}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40013c00 	.word	0x40013c00

08000990 <BLDC_Start>:

//Function initialize the BLDC, by picking the first HALL sequence,
//or create 1 if its undefined
void BLDC_Start() {
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
    bufferAdd(readHallSensor());
 8000994:	f7ff ff9a 	bl	80008cc <readHallSensor>
 8000998:	4603      	mov	r3, r0
 800099a:	b2db      	uxtb	r3, r3
 800099c:	4618      	mov	r0, r3
 800099e:	f7ff fc13 	bl	80001c8 <bufferAdd>
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
	...

080009a8 <main>:
//======================================================
//MAIN
//======================================================

int main(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  STM32_Init();
 80009ac:	f7ff fc70 	bl	8000290 <STM32_Init>
  BLDC_Start();
 80009b0:	f7ff ffee 	bl	8000990 <BLDC_Start>

  //Program loop
  while (1)
  {
	//Handling Buffers
	if(isBufferReady()) {
 80009b4:	f7ff fc30 	bl	8000218 <isBufferReady>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d0fa      	beq.n	80009b4 <main+0xc>
		handleCommutation(bufferGet(), pwmVal);
 80009be:	f7ff fc3f 	bl	8000240 <bufferGet>
 80009c2:	4603      	mov	r3, r0
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	4a03      	ldr	r2, [pc, #12]	@ (80009d4 <main+0x2c>)
 80009c8:	7812      	ldrb	r2, [r2, #0]
 80009ca:	4611      	mov	r1, r2
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff fecd 	bl	800076c <handleCommutation>
	if(isBufferReady()) {
 80009d2:	e7ef      	b.n	80009b4 <main+0xc>
 80009d4:	20000000 	.word	0x20000000

080009d8 <Error_Handler>:

//======================================================
//ERROR HANDLER
//======================================================
void Error_Handler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
    printf("Error Handler invoked!\n");
 80009dc:	4802      	ldr	r0, [pc, #8]	@ (80009e8 <Error_Handler+0x10>)
 80009de:	f005 ffa5 	bl	800692c <puts>
    while(1);
 80009e2:	bf00      	nop
 80009e4:	e7fd      	b.n	80009e2 <Error_Handler+0xa>
 80009e6:	bf00      	nop
 80009e8:	0800706c 	.word	0x0800706c

080009ec <HAL_MspInit>:
#include "main.h"

void HAL_MspInit(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	4b10      	ldr	r3, [pc, #64]	@ (8000a38 <HAL_MspInit+0x4c>)
 80009f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009fa:	4a0f      	ldr	r2, [pc, #60]	@ (8000a38 <HAL_MspInit+0x4c>)
 80009fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a00:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a02:	4b0d      	ldr	r3, [pc, #52]	@ (8000a38 <HAL_MspInit+0x4c>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	603b      	str	r3, [r7, #0]
 8000a12:	4b09      	ldr	r3, [pc, #36]	@ (8000a38 <HAL_MspInit+0x4c>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a16:	4a08      	ldr	r2, [pc, #32]	@ (8000a38 <HAL_MspInit+0x4c>)
 8000a18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a1e:	4b06      	ldr	r3, [pc, #24]	@ (8000a38 <HAL_MspInit+0x4c>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	683b      	ldr	r3, [r7, #0]
}
 8000a2a:	bf00      	nop
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	40023800 	.word	0x40023800

08000a3c <SysTick_Handler>:
#include "stm32f4xx_it.h"

extern PCD_HandleTypeDef hpcd_USB_OTG_FS;

void SysTick_Handler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8000a40:	f000 f93e 	bl	8000cc0 <HAL_IncTick>
}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <OTG_FS_IRQHandler>:

void OTG_FS_IRQHandler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a4c:	4802      	ldr	r0, [pc, #8]	@ (8000a58 <OTG_FS_IRQHandler+0x10>)
 8000a4e:	f000 fd6d 	bl	800152c <HAL_PCD_IRQHandler>
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20001668 	.word	0x20001668

08000a5c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]
 8000a6c:	e00a      	b.n	8000a84 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a6e:	f3af 8000 	nop.w
 8000a72:	4601      	mov	r1, r0
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	1c5a      	adds	r2, r3, #1
 8000a78:	60ba      	str	r2, [r7, #8]
 8000a7a:	b2ca      	uxtb	r2, r1
 8000a7c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	3301      	adds	r3, #1
 8000a82:	617b      	str	r3, [r7, #20]
 8000a84:	697a      	ldr	r2, [r7, #20]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	dbf0      	blt.n	8000a6e <_read+0x12>
  }

  return len;
 8000a8c:	687b      	ldr	r3, [r7, #4]
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3718      	adds	r7, #24
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b086      	sub	sp, #24
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	60f8      	str	r0, [r7, #12]
 8000a9e:	60b9      	str	r1, [r7, #8]
 8000aa0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	617b      	str	r3, [r7, #20]
 8000aa6:	e009      	b.n	8000abc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	1c5a      	adds	r2, r3, #1
 8000aac:	60ba      	str	r2, [r7, #8]
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	617b      	str	r3, [r7, #20]
 8000abc:	697a      	ldr	r2, [r7, #20]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	dbf1      	blt.n	8000aa8 <_write+0x12>
  }
  return len;
 8000ac4:	687b      	ldr	r3, [r7, #4]
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3718      	adds	r7, #24
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <_close>:

int _close(int file)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	b083      	sub	sp, #12
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ad6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	b083      	sub	sp, #12
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
 8000aee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000af6:	605a      	str	r2, [r3, #4]
  return 0;
 8000af8:	2300      	movs	r3, #0
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <_isatty>:

int _isatty(int file)
{
 8000b06:	b480      	push	{r7}
 8000b08:	b083      	sub	sp, #12
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b0e:	2301      	movs	r3, #1
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b28:	2300      	movs	r3, #0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3714      	adds	r7, #20
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
	...

08000b38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b40:	4a14      	ldr	r2, [pc, #80]	@ (8000b94 <_sbrk+0x5c>)
 8000b42:	4b15      	ldr	r3, [pc, #84]	@ (8000b98 <_sbrk+0x60>)
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b4c:	4b13      	ldr	r3, [pc, #76]	@ (8000b9c <_sbrk+0x64>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d102      	bne.n	8000b5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b54:	4b11      	ldr	r3, [pc, #68]	@ (8000b9c <_sbrk+0x64>)
 8000b56:	4a12      	ldr	r2, [pc, #72]	@ (8000ba0 <_sbrk+0x68>)
 8000b58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b5a:	4b10      	ldr	r3, [pc, #64]	@ (8000b9c <_sbrk+0x64>)
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4413      	add	r3, r2
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d207      	bcs.n	8000b78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b68:	f006 f80e 	bl	8006b88 <__errno>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	220c      	movs	r2, #12
 8000b70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b72:	f04f 33ff 	mov.w	r3, #4294967295
 8000b76:	e009      	b.n	8000b8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b78:	4b08      	ldr	r3, [pc, #32]	@ (8000b9c <_sbrk+0x64>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b7e:	4b07      	ldr	r3, [pc, #28]	@ (8000b9c <_sbrk+0x64>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4413      	add	r3, r2
 8000b86:	4a05      	ldr	r2, [pc, #20]	@ (8000b9c <_sbrk+0x64>)
 8000b88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b8a:	68fb      	ldr	r3, [r7, #12]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3718      	adds	r7, #24
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20020000 	.word	0x20020000
 8000b98:	00000400 	.word	0x00000400
 8000b9c:	20000180 	.word	0x20000180
 8000ba0:	20001eb8 	.word	0x20001eb8

08000ba4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ba8:	4b06      	ldr	r3, [pc, #24]	@ (8000bc4 <SystemInit+0x20>)
 8000baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bae:	4a05      	ldr	r2, [pc, #20]	@ (8000bc4 <SystemInit+0x20>)
 8000bb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bc8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c00 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000bcc:	f7ff ffea 	bl	8000ba4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bd0:	480c      	ldr	r0, [pc, #48]	@ (8000c04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bd2:	490d      	ldr	r1, [pc, #52]	@ (8000c08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bd4:	4a0d      	ldr	r2, [pc, #52]	@ (8000c0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd8:	e002      	b.n	8000be0 <LoopCopyDataInit>

08000bda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bde:	3304      	adds	r3, #4

08000be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be4:	d3f9      	bcc.n	8000bda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000be6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000be8:	4c0a      	ldr	r4, [pc, #40]	@ (8000c14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bec:	e001      	b.n	8000bf2 <LoopFillZerobss>

08000bee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf0:	3204      	adds	r2, #4

08000bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf4:	d3fb      	bcc.n	8000bee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bf6:	f005 ffcd 	bl	8006b94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bfa:	f7ff fed5 	bl	80009a8 <main>
  bx  lr    
 8000bfe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c08:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 8000c0c:	080070dc 	.word	0x080070dc
  ldr r2, =_sbss
 8000c10:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 8000c14:	20001eb8 	.word	0x20001eb8

08000c18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c18:	e7fe      	b.n	8000c18 <ADC_IRQHandler>
	...

08000c1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c20:	4b0e      	ldr	r3, [pc, #56]	@ (8000c5c <HAL_Init+0x40>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a0d      	ldr	r2, [pc, #52]	@ (8000c5c <HAL_Init+0x40>)
 8000c26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c5c <HAL_Init+0x40>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a0a      	ldr	r2, [pc, #40]	@ (8000c5c <HAL_Init+0x40>)
 8000c32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c38:	4b08      	ldr	r3, [pc, #32]	@ (8000c5c <HAL_Init+0x40>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a07      	ldr	r2, [pc, #28]	@ (8000c5c <HAL_Init+0x40>)
 8000c3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c44:	2003      	movs	r0, #3
 8000c46:	f000 f94f 	bl	8000ee8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c4a:	200f      	movs	r0, #15
 8000c4c:	f000 f808 	bl	8000c60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c50:	f7ff fecc 	bl	80009ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c54:	2300      	movs	r3, #0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40023c00 	.word	0x40023c00

08000c60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c68:	4b12      	ldr	r3, [pc, #72]	@ (8000cb4 <HAL_InitTick+0x54>)
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	4b12      	ldr	r3, [pc, #72]	@ (8000cb8 <HAL_InitTick+0x58>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	4619      	mov	r1, r3
 8000c72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f000 f967 	bl	8000f52 <HAL_SYSTICK_Config>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e00e      	b.n	8000cac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2b0f      	cmp	r3, #15
 8000c92:	d80a      	bhi.n	8000caa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c94:	2200      	movs	r2, #0
 8000c96:	6879      	ldr	r1, [r7, #4]
 8000c98:	f04f 30ff 	mov.w	r0, #4294967295
 8000c9c:	f000 f92f 	bl	8000efe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ca0:	4a06      	ldr	r2, [pc, #24]	@ (8000cbc <HAL_InitTick+0x5c>)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e000      	b.n	8000cac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20000004 	.word	0x20000004
 8000cb8:	2000000c 	.word	0x2000000c
 8000cbc:	20000008 	.word	0x20000008

08000cc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc4:	4b06      	ldr	r3, [pc, #24]	@ (8000ce0 <HAL_IncTick+0x20>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	461a      	mov	r2, r3
 8000cca:	4b06      	ldr	r3, [pc, #24]	@ (8000ce4 <HAL_IncTick+0x24>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4413      	add	r3, r2
 8000cd0:	4a04      	ldr	r2, [pc, #16]	@ (8000ce4 <HAL_IncTick+0x24>)
 8000cd2:	6013      	str	r3, [r2, #0]
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	2000000c 	.word	0x2000000c
 8000ce4:	20000184 	.word	0x20000184

08000ce8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  return uwTick;
 8000cec:	4b03      	ldr	r3, [pc, #12]	@ (8000cfc <HAL_GetTick+0x14>)
 8000cee:	681b      	ldr	r3, [r3, #0]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	20000184 	.word	0x20000184

08000d00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d08:	f7ff ffee 	bl	8000ce8 <HAL_GetTick>
 8000d0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d18:	d005      	beq.n	8000d26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d44 <HAL_Delay+0x44>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	461a      	mov	r2, r3
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	4413      	add	r3, r2
 8000d24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d26:	bf00      	nop
 8000d28:	f7ff ffde 	bl	8000ce8 <HAL_GetTick>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	68fa      	ldr	r2, [r7, #12]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d8f7      	bhi.n	8000d28 <HAL_Delay+0x28>
  {
  }
}
 8000d38:	bf00      	nop
 8000d3a:	bf00      	nop
 8000d3c:	3710      	adds	r7, #16
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	2000000c 	.word	0x2000000c

08000d48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d58:	4b0c      	ldr	r3, [pc, #48]	@ (8000d8c <__NVIC_SetPriorityGrouping+0x44>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d5e:	68ba      	ldr	r2, [r7, #8]
 8000d60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d64:	4013      	ands	r3, r2
 8000d66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d7a:	4a04      	ldr	r2, [pc, #16]	@ (8000d8c <__NVIC_SetPriorityGrouping+0x44>)
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	60d3      	str	r3, [r2, #12]
}
 8000d80:	bf00      	nop
 8000d82:	3714      	adds	r7, #20
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d94:	4b04      	ldr	r3, [pc, #16]	@ (8000da8 <__NVIC_GetPriorityGrouping+0x18>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	0a1b      	lsrs	r3, r3, #8
 8000d9a:	f003 0307 	and.w	r3, r3, #7
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	db0b      	blt.n	8000dd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	f003 021f 	and.w	r2, r3, #31
 8000dc4:	4907      	ldr	r1, [pc, #28]	@ (8000de4 <__NVIC_EnableIRQ+0x38>)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	095b      	lsrs	r3, r3, #5
 8000dcc:	2001      	movs	r0, #1
 8000dce:	fa00 f202 	lsl.w	r2, r0, r2
 8000dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000e100 	.word	0xe000e100

08000de8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	6039      	str	r1, [r7, #0]
 8000df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	db0a      	blt.n	8000e12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	b2da      	uxtb	r2, r3
 8000e00:	490c      	ldr	r1, [pc, #48]	@ (8000e34 <__NVIC_SetPriority+0x4c>)
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	0112      	lsls	r2, r2, #4
 8000e08:	b2d2      	uxtb	r2, r2
 8000e0a:	440b      	add	r3, r1
 8000e0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e10:	e00a      	b.n	8000e28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	4908      	ldr	r1, [pc, #32]	@ (8000e38 <__NVIC_SetPriority+0x50>)
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	f003 030f 	and.w	r3, r3, #15
 8000e1e:	3b04      	subs	r3, #4
 8000e20:	0112      	lsls	r2, r2, #4
 8000e22:	b2d2      	uxtb	r2, r2
 8000e24:	440b      	add	r3, r1
 8000e26:	761a      	strb	r2, [r3, #24]
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	e000e100 	.word	0xe000e100
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b089      	sub	sp, #36	@ 0x24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	f1c3 0307 	rsb	r3, r3, #7
 8000e56:	2b04      	cmp	r3, #4
 8000e58:	bf28      	it	cs
 8000e5a:	2304      	movcs	r3, #4
 8000e5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	3304      	adds	r3, #4
 8000e62:	2b06      	cmp	r3, #6
 8000e64:	d902      	bls.n	8000e6c <NVIC_EncodePriority+0x30>
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	3b03      	subs	r3, #3
 8000e6a:	e000      	b.n	8000e6e <NVIC_EncodePriority+0x32>
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e70:	f04f 32ff 	mov.w	r2, #4294967295
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43da      	mvns	r2, r3
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	401a      	ands	r2, r3
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e84:	f04f 31ff 	mov.w	r1, #4294967295
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8e:	43d9      	mvns	r1, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e94:	4313      	orrs	r3, r2
         );
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3724      	adds	r7, #36	@ 0x24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
	...

08000ea4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000eb4:	d301      	bcc.n	8000eba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e00f      	b.n	8000eda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eba:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee4 <SysTick_Config+0x40>)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ec2:	210f      	movs	r1, #15
 8000ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec8:	f7ff ff8e 	bl	8000de8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ecc:	4b05      	ldr	r3, [pc, #20]	@ (8000ee4 <SysTick_Config+0x40>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ed2:	4b04      	ldr	r3, [pc, #16]	@ (8000ee4 <SysTick_Config+0x40>)
 8000ed4:	2207      	movs	r2, #7
 8000ed6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	e000e010 	.word	0xe000e010

08000ee8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f7ff ff29 	bl	8000d48 <__NVIC_SetPriorityGrouping>
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b086      	sub	sp, #24
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	4603      	mov	r3, r0
 8000f06:	60b9      	str	r1, [r7, #8]
 8000f08:	607a      	str	r2, [r7, #4]
 8000f0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f10:	f7ff ff3e 	bl	8000d90 <__NVIC_GetPriorityGrouping>
 8000f14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	68b9      	ldr	r1, [r7, #8]
 8000f1a:	6978      	ldr	r0, [r7, #20]
 8000f1c:	f7ff ff8e 	bl	8000e3c <NVIC_EncodePriority>
 8000f20:	4602      	mov	r2, r0
 8000f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f26:	4611      	mov	r1, r2
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff ff5d 	bl	8000de8 <__NVIC_SetPriority>
}
 8000f2e:	bf00      	nop
 8000f30:	3718      	adds	r7, #24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b082      	sub	sp, #8
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff ff31 	bl	8000dac <__NVIC_EnableIRQ>
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff ffa2 	bl	8000ea4 <SysTick_Config>
 8000f60:	4603      	mov	r3, r0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b089      	sub	sp, #36	@ 0x24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f76:	2300      	movs	r3, #0
 8000f78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f82:	2300      	movs	r3, #0
 8000f84:	61fb      	str	r3, [r7, #28]
 8000f86:	e16b      	b.n	8001260 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f88:	2201      	movs	r2, #1
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	697a      	ldr	r2, [r7, #20]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	f040 815a 	bne.w	800125a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f003 0303 	and.w	r3, r3, #3
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d005      	beq.n	8000fbe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d130      	bne.n	8001020 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	2203      	movs	r2, #3
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	68da      	ldr	r2, [r3, #12]
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4013      	ands	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	091b      	lsrs	r3, r3, #4
 800100a:	f003 0201 	and.w	r2, r3, #1
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4313      	orrs	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f003 0303 	and.w	r3, r3, #3
 8001028:	2b03      	cmp	r3, #3
 800102a:	d017      	beq.n	800105c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	2203      	movs	r2, #3
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4013      	ands	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	689a      	ldr	r2, [r3, #8]
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4313      	orrs	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 0303 	and.w	r3, r3, #3
 8001064:	2b02      	cmp	r3, #2
 8001066:	d123      	bne.n	80010b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	08da      	lsrs	r2, r3, #3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3208      	adds	r2, #8
 8001070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001074:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	f003 0307 	and.w	r3, r3, #7
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	220f      	movs	r2, #15
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4013      	ands	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	691a      	ldr	r2, [r3, #16]
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4313      	orrs	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	08da      	lsrs	r2, r3, #3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	3208      	adds	r2, #8
 80010aa:	69b9      	ldr	r1, [r7, #24]
 80010ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	2203      	movs	r2, #3
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 0203 	and.w	r2, r3, #3
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	f000 80b4 	beq.w	800125a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	4b60      	ldr	r3, [pc, #384]	@ (8001278 <HAL_GPIO_Init+0x30c>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010fa:	4a5f      	ldr	r2, [pc, #380]	@ (8001278 <HAL_GPIO_Init+0x30c>)
 80010fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001100:	6453      	str	r3, [r2, #68]	@ 0x44
 8001102:	4b5d      	ldr	r3, [pc, #372]	@ (8001278 <HAL_GPIO_Init+0x30c>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001106:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800110e:	4a5b      	ldr	r2, [pc, #364]	@ (800127c <HAL_GPIO_Init+0x310>)
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	089b      	lsrs	r3, r3, #2
 8001114:	3302      	adds	r3, #2
 8001116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800111a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	f003 0303 	and.w	r3, r3, #3
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	220f      	movs	r2, #15
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	43db      	mvns	r3, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4013      	ands	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a52      	ldr	r2, [pc, #328]	@ (8001280 <HAL_GPIO_Init+0x314>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d02b      	beq.n	8001192 <HAL_GPIO_Init+0x226>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a51      	ldr	r2, [pc, #324]	@ (8001284 <HAL_GPIO_Init+0x318>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d025      	beq.n	800118e <HAL_GPIO_Init+0x222>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a50      	ldr	r2, [pc, #320]	@ (8001288 <HAL_GPIO_Init+0x31c>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d01f      	beq.n	800118a <HAL_GPIO_Init+0x21e>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a4f      	ldr	r2, [pc, #316]	@ (800128c <HAL_GPIO_Init+0x320>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d019      	beq.n	8001186 <HAL_GPIO_Init+0x21a>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a4e      	ldr	r2, [pc, #312]	@ (8001290 <HAL_GPIO_Init+0x324>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d013      	beq.n	8001182 <HAL_GPIO_Init+0x216>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a4d      	ldr	r2, [pc, #308]	@ (8001294 <HAL_GPIO_Init+0x328>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d00d      	beq.n	800117e <HAL_GPIO_Init+0x212>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a4c      	ldr	r2, [pc, #304]	@ (8001298 <HAL_GPIO_Init+0x32c>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d007      	beq.n	800117a <HAL_GPIO_Init+0x20e>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a4b      	ldr	r2, [pc, #300]	@ (800129c <HAL_GPIO_Init+0x330>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d101      	bne.n	8001176 <HAL_GPIO_Init+0x20a>
 8001172:	2307      	movs	r3, #7
 8001174:	e00e      	b.n	8001194 <HAL_GPIO_Init+0x228>
 8001176:	2308      	movs	r3, #8
 8001178:	e00c      	b.n	8001194 <HAL_GPIO_Init+0x228>
 800117a:	2306      	movs	r3, #6
 800117c:	e00a      	b.n	8001194 <HAL_GPIO_Init+0x228>
 800117e:	2305      	movs	r3, #5
 8001180:	e008      	b.n	8001194 <HAL_GPIO_Init+0x228>
 8001182:	2304      	movs	r3, #4
 8001184:	e006      	b.n	8001194 <HAL_GPIO_Init+0x228>
 8001186:	2303      	movs	r3, #3
 8001188:	e004      	b.n	8001194 <HAL_GPIO_Init+0x228>
 800118a:	2302      	movs	r3, #2
 800118c:	e002      	b.n	8001194 <HAL_GPIO_Init+0x228>
 800118e:	2301      	movs	r3, #1
 8001190:	e000      	b.n	8001194 <HAL_GPIO_Init+0x228>
 8001192:	2300      	movs	r3, #0
 8001194:	69fa      	ldr	r2, [r7, #28]
 8001196:	f002 0203 	and.w	r2, r2, #3
 800119a:	0092      	lsls	r2, r2, #2
 800119c:	4093      	lsls	r3, r2
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011a4:	4935      	ldr	r1, [pc, #212]	@ (800127c <HAL_GPIO_Init+0x310>)
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	089b      	lsrs	r3, r3, #2
 80011aa:	3302      	adds	r3, #2
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011b2:	4b3b      	ldr	r3, [pc, #236]	@ (80012a0 <HAL_GPIO_Init+0x334>)
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	43db      	mvns	r3, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4013      	ands	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d003      	beq.n	80011d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011d6:	4a32      	ldr	r2, [pc, #200]	@ (80012a0 <HAL_GPIO_Init+0x334>)
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011dc:	4b30      	ldr	r3, [pc, #192]	@ (80012a0 <HAL_GPIO_Init+0x334>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	43db      	mvns	r3, r3
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4013      	ands	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d003      	beq.n	8001200 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001200:	4a27      	ldr	r2, [pc, #156]	@ (80012a0 <HAL_GPIO_Init+0x334>)
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001206:	4b26      	ldr	r3, [pc, #152]	@ (80012a0 <HAL_GPIO_Init+0x334>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	43db      	mvns	r3, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4013      	ands	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	4313      	orrs	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800122a:	4a1d      	ldr	r2, [pc, #116]	@ (80012a0 <HAL_GPIO_Init+0x334>)
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001230:	4b1b      	ldr	r3, [pc, #108]	@ (80012a0 <HAL_GPIO_Init+0x334>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	43db      	mvns	r3, r3
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d003      	beq.n	8001254 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	4313      	orrs	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001254:	4a12      	ldr	r2, [pc, #72]	@ (80012a0 <HAL_GPIO_Init+0x334>)
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3301      	adds	r3, #1
 800125e:	61fb      	str	r3, [r7, #28]
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	2b0f      	cmp	r3, #15
 8001264:	f67f ae90 	bls.w	8000f88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001268:	bf00      	nop
 800126a:	bf00      	nop
 800126c:	3724      	adds	r7, #36	@ 0x24
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	40023800 	.word	0x40023800
 800127c:	40013800 	.word	0x40013800
 8001280:	40020000 	.word	0x40020000
 8001284:	40020400 	.word	0x40020400
 8001288:	40020800 	.word	0x40020800
 800128c:	40020c00 	.word	0x40020c00
 8001290:	40021000 	.word	0x40021000
 8001294:	40021400 	.word	0x40021400
 8001298:	40021800 	.word	0x40021800
 800129c:	40021c00 	.word	0x40021c00
 80012a0:	40013c00 	.word	0x40013c00

080012a4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af02      	add	r7, sp, #8
 80012aa:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d101      	bne.n	80012b6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e101      	b.n	80014ba <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d106      	bne.n	80012d6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2200      	movs	r2, #0
 80012cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f004 feff 	bl	80060d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2203      	movs	r2, #3
 80012da:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80012e4:	d102      	bne.n	80012ec <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2200      	movs	r2, #0
 80012ea:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f001 fb4c 	bl	800298e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6818      	ldr	r0, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	7c1a      	ldrb	r2, [r3, #16]
 80012fe:	f88d 2000 	strb.w	r2, [sp]
 8001302:	3304      	adds	r3, #4
 8001304:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001306:	f001 fa2b 	bl	8002760 <USB_CoreInit>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d005      	beq.n	800131c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2202      	movs	r2, #2
 8001314:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e0ce      	b.n	80014ba <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2100      	movs	r1, #0
 8001322:	4618      	mov	r0, r3
 8001324:	f001 fb44 	bl	80029b0 <USB_SetCurrentMode>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d005      	beq.n	800133a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2202      	movs	r2, #2
 8001332:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e0bf      	b.n	80014ba <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800133a:	2300      	movs	r3, #0
 800133c:	73fb      	strb	r3, [r7, #15]
 800133e:	e04a      	b.n	80013d6 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001340:	7bfa      	ldrb	r2, [r7, #15]
 8001342:	6879      	ldr	r1, [r7, #4]
 8001344:	4613      	mov	r3, r2
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	4413      	add	r3, r2
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	440b      	add	r3, r1
 800134e:	3315      	adds	r3, #21
 8001350:	2201      	movs	r2, #1
 8001352:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001354:	7bfa      	ldrb	r2, [r7, #15]
 8001356:	6879      	ldr	r1, [r7, #4]
 8001358:	4613      	mov	r3, r2
 800135a:	00db      	lsls	r3, r3, #3
 800135c:	4413      	add	r3, r2
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	440b      	add	r3, r1
 8001362:	3314      	adds	r3, #20
 8001364:	7bfa      	ldrb	r2, [r7, #15]
 8001366:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001368:	7bfa      	ldrb	r2, [r7, #15]
 800136a:	7bfb      	ldrb	r3, [r7, #15]
 800136c:	b298      	uxth	r0, r3
 800136e:	6879      	ldr	r1, [r7, #4]
 8001370:	4613      	mov	r3, r2
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	4413      	add	r3, r2
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	440b      	add	r3, r1
 800137a:	332e      	adds	r3, #46	@ 0x2e
 800137c:	4602      	mov	r2, r0
 800137e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001380:	7bfa      	ldrb	r2, [r7, #15]
 8001382:	6879      	ldr	r1, [r7, #4]
 8001384:	4613      	mov	r3, r2
 8001386:	00db      	lsls	r3, r3, #3
 8001388:	4413      	add	r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	440b      	add	r3, r1
 800138e:	3318      	adds	r3, #24
 8001390:	2200      	movs	r2, #0
 8001392:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001394:	7bfa      	ldrb	r2, [r7, #15]
 8001396:	6879      	ldr	r1, [r7, #4]
 8001398:	4613      	mov	r3, r2
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	4413      	add	r3, r2
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	440b      	add	r3, r1
 80013a2:	331c      	adds	r3, #28
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80013a8:	7bfa      	ldrb	r2, [r7, #15]
 80013aa:	6879      	ldr	r1, [r7, #4]
 80013ac:	4613      	mov	r3, r2
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	4413      	add	r3, r2
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	440b      	add	r3, r1
 80013b6:	3320      	adds	r3, #32
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80013bc:	7bfa      	ldrb	r2, [r7, #15]
 80013be:	6879      	ldr	r1, [r7, #4]
 80013c0:	4613      	mov	r3, r2
 80013c2:	00db      	lsls	r3, r3, #3
 80013c4:	4413      	add	r3, r2
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	440b      	add	r3, r1
 80013ca:	3324      	adds	r3, #36	@ 0x24
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013d0:	7bfb      	ldrb	r3, [r7, #15]
 80013d2:	3301      	adds	r3, #1
 80013d4:	73fb      	strb	r3, [r7, #15]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	791b      	ldrb	r3, [r3, #4]
 80013da:	7bfa      	ldrb	r2, [r7, #15]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d3af      	bcc.n	8001340 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013e0:	2300      	movs	r3, #0
 80013e2:	73fb      	strb	r3, [r7, #15]
 80013e4:	e044      	b.n	8001470 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80013e6:	7bfa      	ldrb	r2, [r7, #15]
 80013e8:	6879      	ldr	r1, [r7, #4]
 80013ea:	4613      	mov	r3, r2
 80013ec:	00db      	lsls	r3, r3, #3
 80013ee:	4413      	add	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	440b      	add	r3, r1
 80013f4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80013f8:	2200      	movs	r2, #0
 80013fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80013fc:	7bfa      	ldrb	r2, [r7, #15]
 80013fe:	6879      	ldr	r1, [r7, #4]
 8001400:	4613      	mov	r3, r2
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	4413      	add	r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	440b      	add	r3, r1
 800140a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800140e:	7bfa      	ldrb	r2, [r7, #15]
 8001410:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001412:	7bfa      	ldrb	r2, [r7, #15]
 8001414:	6879      	ldr	r1, [r7, #4]
 8001416:	4613      	mov	r3, r2
 8001418:	00db      	lsls	r3, r3, #3
 800141a:	4413      	add	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	440b      	add	r3, r1
 8001420:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001424:	2200      	movs	r2, #0
 8001426:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001428:	7bfa      	ldrb	r2, [r7, #15]
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	4613      	mov	r3, r2
 800142e:	00db      	lsls	r3, r3, #3
 8001430:	4413      	add	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	440b      	add	r3, r1
 8001436:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800143e:	7bfa      	ldrb	r2, [r7, #15]
 8001440:	6879      	ldr	r1, [r7, #4]
 8001442:	4613      	mov	r3, r2
 8001444:	00db      	lsls	r3, r3, #3
 8001446:	4413      	add	r3, r2
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	440b      	add	r3, r1
 800144c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001454:	7bfa      	ldrb	r2, [r7, #15]
 8001456:	6879      	ldr	r1, [r7, #4]
 8001458:	4613      	mov	r3, r2
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	4413      	add	r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	440b      	add	r3, r1
 8001462:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800146a:	7bfb      	ldrb	r3, [r7, #15]
 800146c:	3301      	adds	r3, #1
 800146e:	73fb      	strb	r3, [r7, #15]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	791b      	ldrb	r3, [r3, #4]
 8001474:	7bfa      	ldrb	r2, [r7, #15]
 8001476:	429a      	cmp	r2, r3
 8001478:	d3b5      	bcc.n	80013e6 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6818      	ldr	r0, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	7c1a      	ldrb	r2, [r3, #16]
 8001482:	f88d 2000 	strb.w	r2, [sp]
 8001486:	3304      	adds	r3, #4
 8001488:	cb0e      	ldmia	r3, {r1, r2, r3}
 800148a:	f001 fadd 	bl	8002a48 <USB_DevInit>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d005      	beq.n	80014a0 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2202      	movs	r2, #2
 8001498:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e00c      	b.n	80014ba <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2201      	movs	r2, #1
 80014aa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f002 fb27 	bl	8003b06 <USB_DevDisconnect>

  return HAL_OK;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b084      	sub	sp, #16
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d101      	bne.n	80014de <HAL_PCD_Start+0x1c>
 80014da:	2302      	movs	r3, #2
 80014dc:	e022      	b.n	8001524 <HAL_PCD_Start+0x62>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2201      	movs	r2, #1
 80014e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d009      	beq.n	8001506 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d105      	bne.n	8001506 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014fe:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4618      	mov	r0, r3
 800150c:	f001 fa2e 	bl	800296c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4618      	mov	r0, r3
 8001516:	f002 fad5 	bl	8003ac4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001522:	2300      	movs	r3, #0
}
 8001524:	4618      	mov	r0, r3
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800152c:	b590      	push	{r4, r7, lr}
 800152e:	b08d      	sub	sp, #52	@ 0x34
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800153a:	6a3b      	ldr	r3, [r7, #32]
 800153c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4618      	mov	r0, r3
 8001544:	f002 fb93 	bl	8003c6e <USB_GetMode>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	f040 848c 	bne.w	8001e68 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4618      	mov	r0, r3
 8001556:	f002 faf7 	bl	8003b48 <USB_ReadInterrupts>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	f000 8482 	beq.w	8001e66 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	0a1b      	lsrs	r3, r3, #8
 800156c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f002 fae4 	bl	8003b48 <USB_ReadInterrupts>
 8001580:	4603      	mov	r3, r0
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b02      	cmp	r3, #2
 8001588:	d107      	bne.n	800159a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	695a      	ldr	r2, [r3, #20]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f002 0202 	and.w	r2, r2, #2
 8001598:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f002 fad2 	bl	8003b48 <USB_ReadInterrupts>
 80015a4:	4603      	mov	r3, r0
 80015a6:	f003 0310 	and.w	r3, r3, #16
 80015aa:	2b10      	cmp	r3, #16
 80015ac:	d161      	bne.n	8001672 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	699a      	ldr	r2, [r3, #24]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f022 0210 	bic.w	r2, r2, #16
 80015bc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80015be:	6a3b      	ldr	r3, [r7, #32]
 80015c0:	6a1b      	ldr	r3, [r3, #32]
 80015c2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	f003 020f 	and.w	r2, r3, #15
 80015ca:	4613      	mov	r3, r2
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	4413      	add	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	4413      	add	r3, r2
 80015da:	3304      	adds	r3, #4
 80015dc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	0c5b      	lsrs	r3, r3, #17
 80015e2:	f003 030f 	and.w	r3, r3, #15
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d124      	bne.n	8001634 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80015f0:	4013      	ands	r3, r2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d035      	beq.n	8001662 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	091b      	lsrs	r3, r3, #4
 80015fe:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001600:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001604:	b29b      	uxth	r3, r3
 8001606:	461a      	mov	r2, r3
 8001608:	6a38      	ldr	r0, [r7, #32]
 800160a:	f002 f909 	bl	8003820 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	68da      	ldr	r2, [r3, #12]
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	091b      	lsrs	r3, r3, #4
 8001616:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800161a:	441a      	add	r2, r3
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	695a      	ldr	r2, [r3, #20]
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	091b      	lsrs	r3, r3, #4
 8001628:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800162c:	441a      	add	r2, r3
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	615a      	str	r2, [r3, #20]
 8001632:	e016      	b.n	8001662 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	0c5b      	lsrs	r3, r3, #17
 8001638:	f003 030f 	and.w	r3, r3, #15
 800163c:	2b06      	cmp	r3, #6
 800163e:	d110      	bne.n	8001662 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001646:	2208      	movs	r2, #8
 8001648:	4619      	mov	r1, r3
 800164a:	6a38      	ldr	r0, [r7, #32]
 800164c:	f002 f8e8 	bl	8003820 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	695a      	ldr	r2, [r3, #20]
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	091b      	lsrs	r3, r3, #4
 8001658:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800165c:	441a      	add	r2, r3
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	699a      	ldr	r2, [r3, #24]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f042 0210 	orr.w	r2, r2, #16
 8001670:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f002 fa66 	bl	8003b48 <USB_ReadInterrupts>
 800167c:	4603      	mov	r3, r0
 800167e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001682:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001686:	f040 80a7 	bne.w	80017d8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800168a:	2300      	movs	r3, #0
 800168c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f002 fa6b 	bl	8003b6e <USB_ReadDevAllOutEpInterrupt>
 8001698:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800169a:	e099      	b.n	80017d0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800169c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	f000 808e 	beq.w	80017c4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016ae:	b2d2      	uxtb	r2, r2
 80016b0:	4611      	mov	r1, r2
 80016b2:	4618      	mov	r0, r3
 80016b4:	f002 fa8f 	bl	8003bd6 <USB_ReadDevOutEPInterrupt>
 80016b8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	f003 0301 	and.w	r3, r3, #1
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d00c      	beq.n	80016de <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80016c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c6:	015a      	lsls	r2, r3, #5
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	4413      	add	r3, r2
 80016cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80016d0:	461a      	mov	r2, r3
 80016d2:	2301      	movs	r3, #1
 80016d4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80016d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f000 fea3 	bl	8002424 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	f003 0308 	and.w	r3, r3, #8
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d00c      	beq.n	8001702 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80016e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ea:	015a      	lsls	r2, r3, #5
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	4413      	add	r3, r2
 80016f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80016f4:	461a      	mov	r2, r3
 80016f6:	2308      	movs	r3, #8
 80016f8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80016fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f000 ff79 	bl	80025f4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	f003 0310 	and.w	r3, r3, #16
 8001708:	2b00      	cmp	r3, #0
 800170a:	d008      	beq.n	800171e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800170c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170e:	015a      	lsls	r2, r3, #5
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	4413      	add	r3, r2
 8001714:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001718:	461a      	mov	r2, r3
 800171a:	2310      	movs	r3, #16
 800171c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d030      	beq.n	800178a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001728:	6a3b      	ldr	r3, [r7, #32]
 800172a:	695b      	ldr	r3, [r3, #20]
 800172c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001730:	2b80      	cmp	r3, #128	@ 0x80
 8001732:	d109      	bne.n	8001748 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	69fa      	ldr	r2, [r7, #28]
 800173e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001742:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001746:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001748:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800174a:	4613      	mov	r3, r2
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	4413      	add	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	4413      	add	r3, r2
 800175a:	3304      	adds	r3, #4
 800175c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	78db      	ldrb	r3, [r3, #3]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d108      	bne.n	8001778 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	2200      	movs	r2, #0
 800176a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800176c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800176e:	b2db      	uxtb	r3, r3
 8001770:	4619      	mov	r1, r3
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f004 fdb4 	bl	80062e0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800177a:	015a      	lsls	r2, r3, #5
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	4413      	add	r3, r2
 8001780:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001784:	461a      	mov	r2, r3
 8001786:	2302      	movs	r3, #2
 8001788:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	f003 0320 	and.w	r3, r3, #32
 8001790:	2b00      	cmp	r3, #0
 8001792:	d008      	beq.n	80017a6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001796:	015a      	lsls	r2, r3, #5
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	4413      	add	r3, r2
 800179c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017a0:	461a      	mov	r2, r3
 80017a2:	2320      	movs	r3, #32
 80017a4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d009      	beq.n	80017c4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80017b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b2:	015a      	lsls	r2, r3, #5
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	4413      	add	r3, r2
 80017b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017bc:	461a      	mov	r2, r3
 80017be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017c2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80017c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c6:	3301      	adds	r3, #1
 80017c8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80017ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017cc:	085b      	lsrs	r3, r3, #1
 80017ce:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80017d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f47f af62 	bne.w	800169c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f002 f9b3 	bl	8003b48 <USB_ReadInterrupts>
 80017e2:	4603      	mov	r3, r0
 80017e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017e8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80017ec:	f040 80db 	bne.w	80019a6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f002 f9d4 	bl	8003ba2 <USB_ReadDevAllInEpInterrupt>
 80017fa:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80017fc:	2300      	movs	r3, #0
 80017fe:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001800:	e0cd      	b.n	800199e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001804:	f003 0301 	and.w	r3, r3, #1
 8001808:	2b00      	cmp	r3, #0
 800180a:	f000 80c2 	beq.w	8001992 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001814:	b2d2      	uxtb	r2, r2
 8001816:	4611      	mov	r1, r2
 8001818:	4618      	mov	r0, r3
 800181a:	f002 f9fa 	bl	8003c12 <USB_ReadDevInEPInterrupt>
 800181e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	2b00      	cmp	r3, #0
 8001828:	d057      	beq.n	80018da <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800182a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800182c:	f003 030f 	and.w	r3, r3, #15
 8001830:	2201      	movs	r2, #1
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800183e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	43db      	mvns	r3, r3
 8001844:	69f9      	ldr	r1, [r7, #28]
 8001846:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800184a:	4013      	ands	r3, r2
 800184c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800184e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001850:	015a      	lsls	r2, r3, #5
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	4413      	add	r3, r2
 8001856:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800185a:	461a      	mov	r2, r3
 800185c:	2301      	movs	r3, #1
 800185e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	799b      	ldrb	r3, [r3, #6]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d132      	bne.n	80018ce <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800186c:	4613      	mov	r3, r2
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	4413      	add	r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	440b      	add	r3, r1
 8001876:	3320      	adds	r3, #32
 8001878:	6819      	ldr	r1, [r3, #0]
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800187e:	4613      	mov	r3, r2
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	4413      	add	r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	4403      	add	r3, r0
 8001888:	331c      	adds	r3, #28
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4419      	add	r1, r3
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001892:	4613      	mov	r3, r2
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	4413      	add	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	4403      	add	r3, r0
 800189c:	3320      	adds	r3, #32
 800189e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80018a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d113      	bne.n	80018ce <HAL_PCD_IRQHandler+0x3a2>
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018aa:	4613      	mov	r3, r2
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	4413      	add	r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	440b      	add	r3, r1
 80018b4:	3324      	adds	r3, #36	@ 0x24
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d108      	bne.n	80018ce <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6818      	ldr	r0, [r3, #0]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80018c6:	461a      	mov	r2, r3
 80018c8:	2101      	movs	r1, #1
 80018ca:	f002 fa01 	bl	8003cd0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80018ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	4619      	mov	r1, r3
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f004 fc7e 	bl	80061d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	f003 0308 	and.w	r3, r3, #8
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d008      	beq.n	80018f6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80018e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e6:	015a      	lsls	r2, r3, #5
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	4413      	add	r3, r2
 80018ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80018f0:	461a      	mov	r2, r3
 80018f2:	2308      	movs	r3, #8
 80018f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	f003 0310 	and.w	r3, r3, #16
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d008      	beq.n	8001912 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001902:	015a      	lsls	r2, r3, #5
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	4413      	add	r3, r2
 8001908:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800190c:	461a      	mov	r2, r3
 800190e:	2310      	movs	r3, #16
 8001910:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001918:	2b00      	cmp	r3, #0
 800191a:	d008      	beq.n	800192e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800191c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800191e:	015a      	lsls	r2, r3, #5
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	4413      	add	r3, r2
 8001924:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001928:	461a      	mov	r2, r3
 800192a:	2340      	movs	r3, #64	@ 0x40
 800192c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d023      	beq.n	8001980 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001938:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800193a:	6a38      	ldr	r0, [r7, #32]
 800193c:	f001 f9e8 	bl	8002d10 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001940:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001942:	4613      	mov	r3, r2
 8001944:	00db      	lsls	r3, r3, #3
 8001946:	4413      	add	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	3310      	adds	r3, #16
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	4413      	add	r3, r2
 8001950:	3304      	adds	r3, #4
 8001952:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	78db      	ldrb	r3, [r3, #3]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d108      	bne.n	800196e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	2200      	movs	r2, #0
 8001960:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001964:	b2db      	uxtb	r3, r3
 8001966:	4619      	mov	r1, r3
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f004 fccb 	bl	8006304 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800196e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001970:	015a      	lsls	r2, r3, #5
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	4413      	add	r3, r2
 8001976:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800197a:	461a      	mov	r2, r3
 800197c:	2302      	movs	r3, #2
 800197e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800198a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f000 fcbd 	bl	800230c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001994:	3301      	adds	r3, #1
 8001996:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800199a:	085b      	lsrs	r3, r3, #1
 800199c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800199e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f47f af2e 	bne.w	8001802 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f002 f8cc 	bl	8003b48 <USB_ReadInterrupts>
 80019b0:	4603      	mov	r3, r0
 80019b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80019b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80019ba:	d122      	bne.n	8001a02 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	69fa      	ldr	r2, [r7, #28]
 80019c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80019ca:	f023 0301 	bic.w	r3, r3, #1
 80019ce:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d108      	bne.n	80019ec <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80019e2:	2100      	movs	r1, #0
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f000 fea3 	bl	8002730 <HAL_PCDEx_LPM_Callback>
 80019ea:	e002      	b.n	80019f2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f004 fc69 	bl	80062c4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	695a      	ldr	r2, [r3, #20]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001a00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f002 f89e 	bl	8003b48 <USB_ReadInterrupts>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001a16:	d112      	bne.n	8001a3e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d102      	bne.n	8001a2e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f004 fc25 	bl	8006278 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	695a      	ldr	r2, [r3, #20]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001a3c:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f002 f880 	bl	8003b48 <USB_ReadInterrupts>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a52:	f040 80b7 	bne.w	8001bc4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	69fa      	ldr	r2, [r7, #28]
 8001a60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a64:	f023 0301 	bic.w	r3, r3, #1
 8001a68:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2110      	movs	r1, #16
 8001a70:	4618      	mov	r0, r3
 8001a72:	f001 f94d 	bl	8002d10 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a76:	2300      	movs	r3, #0
 8001a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a7a:	e046      	b.n	8001b0a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001a7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a7e:	015a      	lsls	r2, r3, #5
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	4413      	add	r3, r2
 8001a84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001a88:	461a      	mov	r2, r3
 8001a8a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001a8e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a92:	015a      	lsls	r2, r3, #5
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	4413      	add	r3, r2
 8001a98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001aa0:	0151      	lsls	r1, r2, #5
 8001aa2:	69fa      	ldr	r2, [r7, #28]
 8001aa4:	440a      	add	r2, r1
 8001aa6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001aaa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001aae:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ab2:	015a      	lsls	r2, r3, #5
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001abc:	461a      	mov	r2, r3
 8001abe:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001ac2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ac6:	015a      	lsls	r2, r3, #5
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	4413      	add	r3, r2
 8001acc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ad4:	0151      	lsls	r1, r2, #5
 8001ad6:	69fa      	ldr	r2, [r7, #28]
 8001ad8:	440a      	add	r2, r1
 8001ada:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001ade:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001ae2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ae6:	015a      	lsls	r2, r3, #5
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	4413      	add	r3, r2
 8001aec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001af4:	0151      	lsls	r1, r2, #5
 8001af6:	69fa      	ldr	r2, [r7, #28]
 8001af8:	440a      	add	r2, r1
 8001afa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001afe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001b02:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b06:	3301      	adds	r3, #1
 8001b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	791b      	ldrb	r3, [r3, #4]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d3b2      	bcc.n	8001a7c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	69fa      	ldr	r2, [r7, #28]
 8001b20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b24:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001b28:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	7bdb      	ldrb	r3, [r3, #15]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d016      	beq.n	8001b60 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001b3c:	69fa      	ldr	r2, [r7, #28]
 8001b3e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b42:	f043 030b 	orr.w	r3, r3, #11
 8001b46:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b52:	69fa      	ldr	r2, [r7, #28]
 8001b54:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b58:	f043 030b 	orr.w	r3, r3, #11
 8001b5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b5e:	e015      	b.n	8001b8c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b66:	695b      	ldr	r3, [r3, #20]
 8001b68:	69fa      	ldr	r2, [r7, #28]
 8001b6a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b6e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001b72:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001b76:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b7e:	691b      	ldr	r3, [r3, #16]
 8001b80:	69fa      	ldr	r2, [r7, #28]
 8001b82:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b86:	f043 030b 	orr.w	r3, r3, #11
 8001b8a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	69fa      	ldr	r2, [r7, #28]
 8001b96:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b9a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001b9e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6818      	ldr	r0, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001bae:	461a      	mov	r2, r3
 8001bb0:	f002 f88e 	bl	8003cd0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	695a      	ldr	r2, [r3, #20]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001bc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f001 ffbd 	bl	8003b48 <USB_ReadInterrupts>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001bd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001bd8:	d123      	bne.n	8001c22 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f002 f853 	bl	8003c8a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f001 f90a 	bl	8002e02 <USB_GetDevSpeed>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681c      	ldr	r4, [r3, #0]
 8001bfa:	f000 fda5 	bl	8002748 <HAL_RCC_GetHCLKFreq>
 8001bfe:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c04:	461a      	mov	r2, r3
 8001c06:	4620      	mov	r0, r4
 8001c08:	f000 fe0e 	bl	8002828 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f004 fb0a 	bl	8006226 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	695a      	ldr	r2, [r3, #20]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001c20:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f001 ff8e 	bl	8003b48 <USB_ReadInterrupts>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	f003 0308 	and.w	r3, r3, #8
 8001c32:	2b08      	cmp	r3, #8
 8001c34:	d10a      	bne.n	8001c4c <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f004 fae7 	bl	800620a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	695a      	ldr	r2, [r3, #20]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f002 0208 	and.w	r2, r2, #8
 8001c4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f001 ff79 	bl	8003b48 <USB_ReadInterrupts>
 8001c56:	4603      	mov	r3, r0
 8001c58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c5c:	2b80      	cmp	r3, #128	@ 0x80
 8001c5e:	d123      	bne.n	8001ca8 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001c60:	6a3b      	ldr	r3, [r7, #32]
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001c68:	6a3b      	ldr	r3, [r7, #32]
 8001c6a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c70:	e014      	b.n	8001c9c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c76:	4613      	mov	r3, r2
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	4413      	add	r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	440b      	add	r3, r1
 8001c80:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d105      	bne.n	8001c96 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	4619      	mov	r1, r3
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f000 fb0a 	bl	80022aa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c98:	3301      	adds	r3, #1
 8001c9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	791b      	ldrb	r3, [r3, #4]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d3e4      	bcc.n	8001c72 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f001 ff4b 	bl	8003b48 <USB_ReadInterrupts>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cb8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001cbc:	d13c      	bne.n	8001d38 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cc2:	e02b      	b.n	8001d1c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc6:	015a      	lsls	r2, r3, #5
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	4413      	add	r3, r2
 8001ccc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001cd4:	6879      	ldr	r1, [r7, #4]
 8001cd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cd8:	4613      	mov	r3, r2
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	4413      	add	r3, r2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	440b      	add	r3, r1
 8001ce2:	3318      	adds	r3, #24
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d115      	bne.n	8001d16 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001cea:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	da12      	bge.n	8001d16 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001cf0:	6879      	ldr	r1, [r7, #4]
 8001cf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	4413      	add	r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	440b      	add	r3, r1
 8001cfe:	3317      	adds	r3, #23
 8001d00:	2201      	movs	r2, #1
 8001d02:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	4619      	mov	r1, r3
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f000 faca 	bl	80022aa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d18:	3301      	adds	r3, #1
 8001d1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	791b      	ldrb	r3, [r3, #4]
 8001d20:	461a      	mov	r2, r3
 8001d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d3cd      	bcc.n	8001cc4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	695a      	ldr	r2, [r3, #20]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001d36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f001 ff03 	bl	8003b48 <USB_ReadInterrupts>
 8001d42:	4603      	mov	r3, r0
 8001d44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d48:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001d4c:	d156      	bne.n	8001dfc <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d4e:	2301      	movs	r3, #1
 8001d50:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d52:	e045      	b.n	8001de0 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d56:	015a      	lsls	r2, r3, #5
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d64:	6879      	ldr	r1, [r7, #4]
 8001d66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d68:	4613      	mov	r3, r2
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	4413      	add	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	440b      	add	r3, r1
 8001d72:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d12e      	bne.n	8001dda <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001d7c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	da2b      	bge.n	8001dda <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001d8e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d121      	bne.n	8001dda <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	4413      	add	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	440b      	add	r3, r1
 8001da4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001da8:	2201      	movs	r2, #1
 8001daa:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001dac:	6a3b      	ldr	r3, [r7, #32]
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001db4:	6a3b      	ldr	r3, [r7, #32]
 8001db6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001db8:	6a3b      	ldr	r3, [r7, #32]
 8001dba:	695b      	ldr	r3, [r3, #20]
 8001dbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d10a      	bne.n	8001dda <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	69fa      	ldr	r2, [r7, #28]
 8001dce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001dd2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dd6:	6053      	str	r3, [r2, #4]
            break;
 8001dd8:	e008      	b.n	8001dec <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ddc:	3301      	adds	r3, #1
 8001dde:	627b      	str	r3, [r7, #36]	@ 0x24
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	791b      	ldrb	r3, [r3, #4]
 8001de4:	461a      	mov	r2, r3
 8001de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d3b3      	bcc.n	8001d54 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	695a      	ldr	r2, [r3, #20]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001dfa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f001 fea1 	bl	8003b48 <USB_ReadInterrupts>
 8001e06:	4603      	mov	r3, r0
 8001e08:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e10:	d10a      	bne.n	8001e28 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f004 fa88 	bl	8006328 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	695a      	ldr	r2, [r3, #20]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001e26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f001 fe8b 	bl	8003b48 <USB_ReadInterrupts>
 8001e32:	4603      	mov	r3, r0
 8001e34:	f003 0304 	and.w	r3, r3, #4
 8001e38:	2b04      	cmp	r3, #4
 8001e3a:	d115      	bne.n	8001e68 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	f003 0304 	and.w	r3, r3, #4
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d002      	beq.n	8001e54 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f004 fa78 	bl	8006344 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6859      	ldr	r1, [r3, #4]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	430a      	orrs	r2, r1
 8001e62:	605a      	str	r2, [r3, #4]
 8001e64:	e000      	b.n	8001e68 <HAL_PCD_IRQHandler+0x93c>
      return;
 8001e66:	bf00      	nop
    }
  }
}
 8001e68:	3734      	adds	r7, #52	@ 0x34
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd90      	pop	{r4, r7, pc}

08001e6e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b082      	sub	sp, #8
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
 8001e76:	460b      	mov	r3, r1
 8001e78:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d101      	bne.n	8001e88 <HAL_PCD_SetAddress+0x1a>
 8001e84:	2302      	movs	r3, #2
 8001e86:	e012      	b.n	8001eae <HAL_PCD_SetAddress+0x40>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	78fa      	ldrb	r2, [r7, #3]
 8001e94:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	78fa      	ldrb	r2, [r7, #3]
 8001e9c:	4611      	mov	r1, r2
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f001 fdea 	bl	8003a78 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b084      	sub	sp, #16
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
 8001ebe:	4608      	mov	r0, r1
 8001ec0:	4611      	mov	r1, r2
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	70fb      	strb	r3, [r7, #3]
 8001ec8:	460b      	mov	r3, r1
 8001eca:	803b      	strh	r3, [r7, #0]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ed4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	da0f      	bge.n	8001efc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001edc:	78fb      	ldrb	r3, [r7, #3]
 8001ede:	f003 020f 	and.w	r2, r3, #15
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	4413      	add	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	3310      	adds	r3, #16
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	4413      	add	r3, r2
 8001ef0:	3304      	adds	r3, #4
 8001ef2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	705a      	strb	r2, [r3, #1]
 8001efa:	e00f      	b.n	8001f1c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001efc:	78fb      	ldrb	r3, [r7, #3]
 8001efe:	f003 020f 	and.w	r2, r3, #15
 8001f02:	4613      	mov	r3, r2
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	4413      	add	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	4413      	add	r3, r2
 8001f12:	3304      	adds	r3, #4
 8001f14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001f1c:	78fb      	ldrb	r3, [r7, #3]
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	b2da      	uxtb	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001f28:	883b      	ldrh	r3, [r7, #0]
 8001f2a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	78ba      	ldrb	r2, [r7, #2]
 8001f36:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	785b      	ldrb	r3, [r3, #1]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d004      	beq.n	8001f4a <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	461a      	mov	r2, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001f4a:	78bb      	ldrb	r3, [r7, #2]
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d102      	bne.n	8001f56 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2200      	movs	r2, #0
 8001f54:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d101      	bne.n	8001f64 <HAL_PCD_EP_Open+0xae>
 8001f60:	2302      	movs	r3, #2
 8001f62:	e00e      	b.n	8001f82 <HAL_PCD_EP_Open+0xcc>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68f9      	ldr	r1, [r7, #12]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f000 ff6a 	bl	8002e4c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001f80:	7afb      	ldrb	r3, [r7, #11]
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b084      	sub	sp, #16
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
 8001f92:	460b      	mov	r3, r1
 8001f94:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	da0f      	bge.n	8001fbe <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f9e:	78fb      	ldrb	r3, [r7, #3]
 8001fa0:	f003 020f 	and.w	r2, r3, #15
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	4413      	add	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	3310      	adds	r3, #16
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	3304      	adds	r3, #4
 8001fb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	705a      	strb	r2, [r3, #1]
 8001fbc:	e00f      	b.n	8001fde <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fbe:	78fb      	ldrb	r3, [r7, #3]
 8001fc0:	f003 020f 	and.w	r2, r3, #15
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	4413      	add	r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	3304      	adds	r3, #4
 8001fd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fde:	78fb      	ldrb	r3, [r7, #3]
 8001fe0:	f003 030f 	and.w	r3, r3, #15
 8001fe4:	b2da      	uxtb	r2, r3
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d101      	bne.n	8001ff8 <HAL_PCD_EP_Close+0x6e>
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	e00e      	b.n	8002016 <HAL_PCD_EP_Close+0x8c>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68f9      	ldr	r1, [r7, #12]
 8002006:	4618      	mov	r0, r3
 8002008:	f000 ffa8 	bl	8002f5c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b086      	sub	sp, #24
 8002022:	af00      	add	r7, sp, #0
 8002024:	60f8      	str	r0, [r7, #12]
 8002026:	607a      	str	r2, [r7, #4]
 8002028:	603b      	str	r3, [r7, #0]
 800202a:	460b      	mov	r3, r1
 800202c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800202e:	7afb      	ldrb	r3, [r7, #11]
 8002030:	f003 020f 	and.w	r2, r3, #15
 8002034:	4613      	mov	r3, r2
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	4413      	add	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	4413      	add	r3, r2
 8002044:	3304      	adds	r3, #4
 8002046:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	2200      	movs	r2, #0
 8002058:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	2200      	movs	r2, #0
 800205e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002060:	7afb      	ldrb	r3, [r7, #11]
 8002062:	f003 030f 	and.w	r3, r3, #15
 8002066:	b2da      	uxtb	r2, r3
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	799b      	ldrb	r3, [r3, #6]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d102      	bne.n	800207a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6818      	ldr	r0, [r3, #0]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	799b      	ldrb	r3, [r3, #6]
 8002082:	461a      	mov	r2, r3
 8002084:	6979      	ldr	r1, [r7, #20]
 8002086:	f001 f845 	bl	8003114 <USB_EPStartXfer>

  return HAL_OK;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	460b      	mov	r3, r1
 800209e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80020a0:	78fb      	ldrb	r3, [r7, #3]
 80020a2:	f003 020f 	and.w	r2, r3, #15
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	4613      	mov	r3, r2
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	4413      	add	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	440b      	add	r3, r1
 80020b2:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80020b6:	681b      	ldr	r3, [r3, #0]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	607a      	str	r2, [r7, #4]
 80020ce:	603b      	str	r3, [r7, #0]
 80020d0:	460b      	mov	r3, r1
 80020d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020d4:	7afb      	ldrb	r3, [r7, #11]
 80020d6:	f003 020f 	and.w	r2, r3, #15
 80020da:	4613      	mov	r3, r2
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	4413      	add	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	3310      	adds	r3, #16
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	4413      	add	r3, r2
 80020e8:	3304      	adds	r3, #4
 80020ea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	2200      	movs	r2, #0
 80020fc:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	2201      	movs	r2, #1
 8002102:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002104:	7afb      	ldrb	r3, [r7, #11]
 8002106:	f003 030f 	and.w	r3, r3, #15
 800210a:	b2da      	uxtb	r2, r3
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	799b      	ldrb	r3, [r3, #6]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d102      	bne.n	800211e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6818      	ldr	r0, [r3, #0]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	799b      	ldrb	r3, [r3, #6]
 8002126:	461a      	mov	r2, r3
 8002128:	6979      	ldr	r1, [r7, #20]
 800212a:	f000 fff3 	bl	8003114 <USB_EPStartXfer>

  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3718      	adds	r7, #24
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	460b      	mov	r3, r1
 8002142:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002144:	78fb      	ldrb	r3, [r7, #3]
 8002146:	f003 030f 	and.w	r3, r3, #15
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	7912      	ldrb	r2, [r2, #4]
 800214e:	4293      	cmp	r3, r2
 8002150:	d901      	bls.n	8002156 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e04f      	b.n	80021f6 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002156:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800215a:	2b00      	cmp	r3, #0
 800215c:	da0f      	bge.n	800217e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800215e:	78fb      	ldrb	r3, [r7, #3]
 8002160:	f003 020f 	and.w	r2, r3, #15
 8002164:	4613      	mov	r3, r2
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	4413      	add	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	3310      	adds	r3, #16
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	4413      	add	r3, r2
 8002172:	3304      	adds	r3, #4
 8002174:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2201      	movs	r2, #1
 800217a:	705a      	strb	r2, [r3, #1]
 800217c:	e00d      	b.n	800219a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800217e:	78fa      	ldrb	r2, [r7, #3]
 8002180:	4613      	mov	r3, r2
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	4413      	add	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	4413      	add	r3, r2
 8002190:	3304      	adds	r3, #4
 8002192:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2200      	movs	r2, #0
 8002198:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2201      	movs	r2, #1
 800219e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021a0:	78fb      	ldrb	r3, [r7, #3]
 80021a2:	f003 030f 	and.w	r3, r3, #15
 80021a6:	b2da      	uxtb	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d101      	bne.n	80021ba <HAL_PCD_EP_SetStall+0x82>
 80021b6:	2302      	movs	r3, #2
 80021b8:	e01d      	b.n	80021f6 <HAL_PCD_EP_SetStall+0xbe>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2201      	movs	r2, #1
 80021be:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68f9      	ldr	r1, [r7, #12]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f001 fb81 	bl	80038d0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021ce:	78fb      	ldrb	r3, [r7, #3]
 80021d0:	f003 030f 	and.w	r3, r3, #15
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d109      	bne.n	80021ec <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6818      	ldr	r0, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	7999      	ldrb	r1, [r3, #6]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80021e6:	461a      	mov	r2, r3
 80021e8:	f001 fd72 	bl	8003cd0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b084      	sub	sp, #16
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
 8002206:	460b      	mov	r3, r1
 8002208:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800220a:	78fb      	ldrb	r3, [r7, #3]
 800220c:	f003 030f 	and.w	r3, r3, #15
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	7912      	ldrb	r2, [r2, #4]
 8002214:	4293      	cmp	r3, r2
 8002216:	d901      	bls.n	800221c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e042      	b.n	80022a2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800221c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002220:	2b00      	cmp	r3, #0
 8002222:	da0f      	bge.n	8002244 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002224:	78fb      	ldrb	r3, [r7, #3]
 8002226:	f003 020f 	and.w	r2, r3, #15
 800222a:	4613      	mov	r3, r2
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	4413      	add	r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	3310      	adds	r3, #16
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	4413      	add	r3, r2
 8002238:	3304      	adds	r3, #4
 800223a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2201      	movs	r2, #1
 8002240:	705a      	strb	r2, [r3, #1]
 8002242:	e00f      	b.n	8002264 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002244:	78fb      	ldrb	r3, [r7, #3]
 8002246:	f003 020f 	and.w	r2, r3, #15
 800224a:	4613      	mov	r3, r2
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	4413      	add	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	4413      	add	r3, r2
 800225a:	3304      	adds	r3, #4
 800225c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2200      	movs	r2, #0
 8002262:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2200      	movs	r2, #0
 8002268:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800226a:	78fb      	ldrb	r3, [r7, #3]
 800226c:	f003 030f 	and.w	r3, r3, #15
 8002270:	b2da      	uxtb	r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800227c:	2b01      	cmp	r3, #1
 800227e:	d101      	bne.n	8002284 <HAL_PCD_EP_ClrStall+0x86>
 8002280:	2302      	movs	r3, #2
 8002282:	e00e      	b.n	80022a2 <HAL_PCD_EP_ClrStall+0xa4>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68f9      	ldr	r1, [r7, #12]
 8002292:	4618      	mov	r0, r3
 8002294:	f001 fb8a 	bl	80039ac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b084      	sub	sp, #16
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
 80022b2:	460b      	mov	r3, r1
 80022b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80022b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	da0c      	bge.n	80022d8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022be:	78fb      	ldrb	r3, [r7, #3]
 80022c0:	f003 020f 	and.w	r2, r3, #15
 80022c4:	4613      	mov	r3, r2
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	4413      	add	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	3310      	adds	r3, #16
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	4413      	add	r3, r2
 80022d2:	3304      	adds	r3, #4
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	e00c      	b.n	80022f2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022d8:	78fb      	ldrb	r3, [r7, #3]
 80022da:	f003 020f 	and.w	r2, r3, #15
 80022de:	4613      	mov	r3, r2
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	4413      	add	r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	4413      	add	r3, r2
 80022ee:	3304      	adds	r3, #4
 80022f0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68f9      	ldr	r1, [r7, #12]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f001 f9a9 	bl	8003650 <USB_EPStopXfer>
 80022fe:	4603      	mov	r3, r0
 8002300:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002302:	7afb      	ldrb	r3, [r7, #11]
}
 8002304:	4618      	mov	r0, r3
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b08a      	sub	sp, #40	@ 0x28
 8002310:	af02      	add	r7, sp, #8
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	4613      	mov	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	4413      	add	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	3310      	adds	r3, #16
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	4413      	add	r3, r2
 8002330:	3304      	adds	r3, #4
 8002332:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	695a      	ldr	r2, [r3, #20]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	429a      	cmp	r2, r3
 800233e:	d901      	bls.n	8002344 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e06b      	b.n	800241c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	691a      	ldr	r2, [r3, #16]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	695b      	ldr	r3, [r3, #20]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	69fa      	ldr	r2, [r7, #28]
 8002356:	429a      	cmp	r2, r3
 8002358:	d902      	bls.n	8002360 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	3303      	adds	r3, #3
 8002364:	089b      	lsrs	r3, r3, #2
 8002366:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002368:	e02a      	b.n	80023c0 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	691a      	ldr	r2, [r3, #16]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	69fa      	ldr	r2, [r7, #28]
 800237c:	429a      	cmp	r2, r3
 800237e:	d902      	bls.n	8002386 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	3303      	adds	r3, #3
 800238a:	089b      	lsrs	r3, r3, #2
 800238c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	68d9      	ldr	r1, [r3, #12]
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	b2da      	uxtb	r2, r3
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800239e:	9300      	str	r3, [sp, #0]
 80023a0:	4603      	mov	r3, r0
 80023a2:	6978      	ldr	r0, [r7, #20]
 80023a4:	f001 f9fe 	bl	80037a4 <USB_WritePacket>

    ep->xfer_buff  += len;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	68da      	ldr	r2, [r3, #12]
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	441a      	add	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	695a      	ldr	r2, [r3, #20]
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	441a      	add	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	015a      	lsls	r2, r3, #5
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	4413      	add	r3, r2
 80023c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d809      	bhi.n	80023ea <PCD_WriteEmptyTxFifo+0xde>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	695a      	ldr	r2, [r3, #20]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023de:	429a      	cmp	r2, r3
 80023e0:	d203      	bcs.n	80023ea <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1bf      	bne.n	800236a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	691a      	ldr	r2, [r3, #16]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d811      	bhi.n	800241a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	f003 030f 	and.w	r3, r3, #15
 80023fc:	2201      	movs	r2, #1
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800240a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	43db      	mvns	r3, r3
 8002410:	6939      	ldr	r1, [r7, #16]
 8002412:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002416:	4013      	ands	r3, r2
 8002418:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3720      	adds	r7, #32
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b088      	sub	sp, #32
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	333c      	adds	r3, #60	@ 0x3c
 800243c:	3304      	adds	r3, #4
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	015a      	lsls	r2, r3, #5
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	4413      	add	r3, r2
 800244a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	799b      	ldrb	r3, [r3, #6]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d17b      	bne.n	8002552 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	f003 0308 	and.w	r3, r3, #8
 8002460:	2b00      	cmp	r3, #0
 8002462:	d015      	beq.n	8002490 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	4a61      	ldr	r2, [pc, #388]	@ (80025ec <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002468:	4293      	cmp	r3, r2
 800246a:	f240 80b9 	bls.w	80025e0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002474:	2b00      	cmp	r3, #0
 8002476:	f000 80b3 	beq.w	80025e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	015a      	lsls	r2, r3, #5
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	4413      	add	r3, r2
 8002482:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002486:	461a      	mov	r2, r3
 8002488:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800248c:	6093      	str	r3, [r2, #8]
 800248e:	e0a7      	b.n	80025e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	f003 0320 	and.w	r3, r3, #32
 8002496:	2b00      	cmp	r3, #0
 8002498:	d009      	beq.n	80024ae <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	015a      	lsls	r2, r3, #5
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	4413      	add	r3, r2
 80024a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024a6:	461a      	mov	r2, r3
 80024a8:	2320      	movs	r3, #32
 80024aa:	6093      	str	r3, [r2, #8]
 80024ac:	e098      	b.n	80025e0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f040 8093 	bne.w	80025e0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	4a4b      	ldr	r2, [pc, #300]	@ (80025ec <PCD_EP_OutXfrComplete_int+0x1c8>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d90f      	bls.n	80024e2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00a      	beq.n	80024e2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	015a      	lsls	r2, r3, #5
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	4413      	add	r3, r2
 80024d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024d8:	461a      	mov	r2, r3
 80024da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80024de:	6093      	str	r3, [r2, #8]
 80024e0:	e07e      	b.n	80025e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80024e2:	683a      	ldr	r2, [r7, #0]
 80024e4:	4613      	mov	r3, r2
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	4413      	add	r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	4413      	add	r3, r2
 80024f4:	3304      	adds	r3, #4
 80024f6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6a1a      	ldr	r2, [r3, #32]
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	0159      	lsls	r1, r3, #5
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	440b      	add	r3, r1
 8002504:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800250e:	1ad2      	subs	r2, r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d114      	bne.n	8002544 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d109      	bne.n	8002536 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6818      	ldr	r0, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800252c:	461a      	mov	r2, r3
 800252e:	2101      	movs	r1, #1
 8002530:	f001 fbce 	bl	8003cd0 <USB_EP0_OutStart>
 8002534:	e006      	b.n	8002544 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	68da      	ldr	r2, [r3, #12]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	441a      	add	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	b2db      	uxtb	r3, r3
 8002548:	4619      	mov	r1, r3
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f003 fe28 	bl	80061a0 <HAL_PCD_DataOutStageCallback>
 8002550:	e046      	b.n	80025e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	4a26      	ldr	r2, [pc, #152]	@ (80025f0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d124      	bne.n	80025a4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d00a      	beq.n	800257a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	015a      	lsls	r2, r3, #5
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	4413      	add	r3, r2
 800256c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002570:	461a      	mov	r2, r3
 8002572:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002576:	6093      	str	r3, [r2, #8]
 8002578:	e032      	b.n	80025e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	f003 0320 	and.w	r3, r3, #32
 8002580:	2b00      	cmp	r3, #0
 8002582:	d008      	beq.n	8002596 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	015a      	lsls	r2, r3, #5
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	4413      	add	r3, r2
 800258c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002590:	461a      	mov	r2, r3
 8002592:	2320      	movs	r3, #32
 8002594:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	b2db      	uxtb	r3, r3
 800259a:	4619      	mov	r1, r3
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f003 fdff 	bl	80061a0 <HAL_PCD_DataOutStageCallback>
 80025a2:	e01d      	b.n	80025e0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d114      	bne.n	80025d4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80025aa:	6879      	ldr	r1, [r7, #4]
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	4613      	mov	r3, r2
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	4413      	add	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	440b      	add	r3, r1
 80025b8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d108      	bne.n	80025d4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6818      	ldr	r0, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80025cc:	461a      	mov	r2, r3
 80025ce:	2100      	movs	r1, #0
 80025d0:	f001 fb7e 	bl	8003cd0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	4619      	mov	r1, r3
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f003 fde0 	bl	80061a0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3720      	adds	r7, #32
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	4f54300a 	.word	0x4f54300a
 80025f0:	4f54310a 	.word	0x4f54310a

080025f4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	333c      	adds	r3, #60	@ 0x3c
 800260c:	3304      	adds	r3, #4
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	015a      	lsls	r2, r3, #5
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	4413      	add	r3, r2
 800261a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	4a15      	ldr	r2, [pc, #84]	@ (800267c <PCD_EP_OutSetupPacket_int+0x88>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d90e      	bls.n	8002648 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002630:	2b00      	cmp	r3, #0
 8002632:	d009      	beq.n	8002648 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	015a      	lsls	r2, r3, #5
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	4413      	add	r3, r2
 800263c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002640:	461a      	mov	r2, r3
 8002642:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002646:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f003 fd97 	bl	800617c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	4a0a      	ldr	r2, [pc, #40]	@ (800267c <PCD_EP_OutSetupPacket_int+0x88>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d90c      	bls.n	8002670 <PCD_EP_OutSetupPacket_int+0x7c>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	799b      	ldrb	r3, [r3, #6]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d108      	bne.n	8002670 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6818      	ldr	r0, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002668:	461a      	mov	r2, r3
 800266a:	2101      	movs	r1, #1
 800266c:	f001 fb30 	bl	8003cd0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3718      	adds	r7, #24
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	4f54300a 	.word	0x4f54300a

08002680 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	460b      	mov	r3, r1
 800268a:	70fb      	strb	r3, [r7, #3]
 800268c:	4613      	mov	r3, r2
 800268e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002696:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002698:	78fb      	ldrb	r3, [r7, #3]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d107      	bne.n	80026ae <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800269e:	883b      	ldrh	r3, [r7, #0]
 80026a0:	0419      	lsls	r1, r3, #16
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68ba      	ldr	r2, [r7, #8]
 80026a8:	430a      	orrs	r2, r1
 80026aa:	629a      	str	r2, [r3, #40]	@ 0x28
 80026ac:	e028      	b.n	8002700 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026b4:	0c1b      	lsrs	r3, r3, #16
 80026b6:	68ba      	ldr	r2, [r7, #8]
 80026b8:	4413      	add	r3, r2
 80026ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80026bc:	2300      	movs	r3, #0
 80026be:	73fb      	strb	r3, [r7, #15]
 80026c0:	e00d      	b.n	80026de <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	7bfb      	ldrb	r3, [r7, #15]
 80026c8:	3340      	adds	r3, #64	@ 0x40
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4413      	add	r3, r2
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	0c1b      	lsrs	r3, r3, #16
 80026d2:	68ba      	ldr	r2, [r7, #8]
 80026d4:	4413      	add	r3, r2
 80026d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80026d8:	7bfb      	ldrb	r3, [r7, #15]
 80026da:	3301      	adds	r3, #1
 80026dc:	73fb      	strb	r3, [r7, #15]
 80026de:	7bfa      	ldrb	r2, [r7, #15]
 80026e0:	78fb      	ldrb	r3, [r7, #3]
 80026e2:	3b01      	subs	r3, #1
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d3ec      	bcc.n	80026c2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80026e8:	883b      	ldrh	r3, [r7, #0]
 80026ea:	0418      	lsls	r0, r3, #16
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6819      	ldr	r1, [r3, #0]
 80026f0:	78fb      	ldrb	r3, [r7, #3]
 80026f2:	3b01      	subs	r3, #1
 80026f4:	68ba      	ldr	r2, [r7, #8]
 80026f6:	4302      	orrs	r2, r0
 80026f8:	3340      	adds	r3, #64	@ 0x40
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	440b      	add	r3, r1
 80026fe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3714      	adds	r7, #20
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800270e:	b480      	push	{r7}
 8002710:	b083      	sub	sp, #12
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
 8002716:	460b      	mov	r3, r1
 8002718:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	887a      	ldrh	r2, [r7, #2]
 8002720:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	460b      	mov	r3, r1
 800273a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800274c:	4b03      	ldr	r3, [pc, #12]	@ (800275c <HAL_RCC_GetHCLKFreq+0x14>)
 800274e:	681b      	ldr	r3, [r3, #0]
}
 8002750:	4618      	mov	r0, r3
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	20000004 	.word	0x20000004

08002760 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002760:	b084      	sub	sp, #16
 8002762:	b580      	push	{r7, lr}
 8002764:	b084      	sub	sp, #16
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
 800276a:	f107 001c 	add.w	r0, r7, #28
 800276e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002772:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002776:	2b01      	cmp	r3, #1
 8002778:	d123      	bne.n	80027c2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800277e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800278e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80027a2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d105      	bne.n	80027b6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f001 fae8 	bl	8003d8c <USB_CoreReset>
 80027bc:	4603      	mov	r3, r0
 80027be:	73fb      	strb	r3, [r7, #15]
 80027c0:	e01b      	b.n	80027fa <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f001 fadc 	bl	8003d8c <USB_CoreReset>
 80027d4:	4603      	mov	r3, r0
 80027d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80027d8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d106      	bne.n	80027ee <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027e4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	639a      	str	r2, [r3, #56]	@ 0x38
 80027ec:	e005      	b.n	80027fa <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027f2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80027fa:	7fbb      	ldrb	r3, [r7, #30]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d10b      	bne.n	8002818 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f043 0206 	orr.w	r2, r3, #6
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f043 0220 	orr.w	r2, r3, #32
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002818:	7bfb      	ldrb	r3, [r7, #15]
}
 800281a:	4618      	mov	r0, r3
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002824:	b004      	add	sp, #16
 8002826:	4770      	bx	lr

08002828 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002828:	b480      	push	{r7}
 800282a:	b087      	sub	sp, #28
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	4613      	mov	r3, r2
 8002834:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002836:	79fb      	ldrb	r3, [r7, #7]
 8002838:	2b02      	cmp	r3, #2
 800283a:	d165      	bne.n	8002908 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	4a41      	ldr	r2, [pc, #260]	@ (8002944 <USB_SetTurnaroundTime+0x11c>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d906      	bls.n	8002852 <USB_SetTurnaroundTime+0x2a>
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	4a40      	ldr	r2, [pc, #256]	@ (8002948 <USB_SetTurnaroundTime+0x120>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d202      	bcs.n	8002852 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800284c:	230f      	movs	r3, #15
 800284e:	617b      	str	r3, [r7, #20]
 8002850:	e062      	b.n	8002918 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	4a3c      	ldr	r2, [pc, #240]	@ (8002948 <USB_SetTurnaroundTime+0x120>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d306      	bcc.n	8002868 <USB_SetTurnaroundTime+0x40>
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	4a3b      	ldr	r2, [pc, #236]	@ (800294c <USB_SetTurnaroundTime+0x124>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d202      	bcs.n	8002868 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002862:	230e      	movs	r3, #14
 8002864:	617b      	str	r3, [r7, #20]
 8002866:	e057      	b.n	8002918 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	4a38      	ldr	r2, [pc, #224]	@ (800294c <USB_SetTurnaroundTime+0x124>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d306      	bcc.n	800287e <USB_SetTurnaroundTime+0x56>
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	4a37      	ldr	r2, [pc, #220]	@ (8002950 <USB_SetTurnaroundTime+0x128>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d202      	bcs.n	800287e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002878:	230d      	movs	r3, #13
 800287a:	617b      	str	r3, [r7, #20]
 800287c:	e04c      	b.n	8002918 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	4a33      	ldr	r2, [pc, #204]	@ (8002950 <USB_SetTurnaroundTime+0x128>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d306      	bcc.n	8002894 <USB_SetTurnaroundTime+0x6c>
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	4a32      	ldr	r2, [pc, #200]	@ (8002954 <USB_SetTurnaroundTime+0x12c>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d802      	bhi.n	8002894 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800288e:	230c      	movs	r3, #12
 8002890:	617b      	str	r3, [r7, #20]
 8002892:	e041      	b.n	8002918 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	4a2f      	ldr	r2, [pc, #188]	@ (8002954 <USB_SetTurnaroundTime+0x12c>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d906      	bls.n	80028aa <USB_SetTurnaroundTime+0x82>
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	4a2e      	ldr	r2, [pc, #184]	@ (8002958 <USB_SetTurnaroundTime+0x130>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d802      	bhi.n	80028aa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80028a4:	230b      	movs	r3, #11
 80028a6:	617b      	str	r3, [r7, #20]
 80028a8:	e036      	b.n	8002918 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	4a2a      	ldr	r2, [pc, #168]	@ (8002958 <USB_SetTurnaroundTime+0x130>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d906      	bls.n	80028c0 <USB_SetTurnaroundTime+0x98>
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	4a29      	ldr	r2, [pc, #164]	@ (800295c <USB_SetTurnaroundTime+0x134>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d802      	bhi.n	80028c0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80028ba:	230a      	movs	r3, #10
 80028bc:	617b      	str	r3, [r7, #20]
 80028be:	e02b      	b.n	8002918 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	4a26      	ldr	r2, [pc, #152]	@ (800295c <USB_SetTurnaroundTime+0x134>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d906      	bls.n	80028d6 <USB_SetTurnaroundTime+0xae>
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	4a25      	ldr	r2, [pc, #148]	@ (8002960 <USB_SetTurnaroundTime+0x138>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d202      	bcs.n	80028d6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80028d0:	2309      	movs	r3, #9
 80028d2:	617b      	str	r3, [r7, #20]
 80028d4:	e020      	b.n	8002918 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	4a21      	ldr	r2, [pc, #132]	@ (8002960 <USB_SetTurnaroundTime+0x138>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d306      	bcc.n	80028ec <USB_SetTurnaroundTime+0xc4>
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	4a20      	ldr	r2, [pc, #128]	@ (8002964 <USB_SetTurnaroundTime+0x13c>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d802      	bhi.n	80028ec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80028e6:	2308      	movs	r3, #8
 80028e8:	617b      	str	r3, [r7, #20]
 80028ea:	e015      	b.n	8002918 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	4a1d      	ldr	r2, [pc, #116]	@ (8002964 <USB_SetTurnaroundTime+0x13c>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d906      	bls.n	8002902 <USB_SetTurnaroundTime+0xda>
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	4a1c      	ldr	r2, [pc, #112]	@ (8002968 <USB_SetTurnaroundTime+0x140>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d202      	bcs.n	8002902 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80028fc:	2307      	movs	r3, #7
 80028fe:	617b      	str	r3, [r7, #20]
 8002900:	e00a      	b.n	8002918 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002902:	2306      	movs	r3, #6
 8002904:	617b      	str	r3, [r7, #20]
 8002906:	e007      	b.n	8002918 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002908:	79fb      	ldrb	r3, [r7, #7]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d102      	bne.n	8002914 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800290e:	2309      	movs	r3, #9
 8002910:	617b      	str	r3, [r7, #20]
 8002912:	e001      	b.n	8002918 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002914:	2309      	movs	r3, #9
 8002916:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	68da      	ldr	r2, [r3, #12]
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	029b      	lsls	r3, r3, #10
 800292c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8002930:	431a      	orrs	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002936:	2300      	movs	r3, #0
}
 8002938:	4618      	mov	r0, r3
 800293a:	371c      	adds	r7, #28
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr
 8002944:	00d8acbf 	.word	0x00d8acbf
 8002948:	00e4e1c0 	.word	0x00e4e1c0
 800294c:	00f42400 	.word	0x00f42400
 8002950:	01067380 	.word	0x01067380
 8002954:	011a499f 	.word	0x011a499f
 8002958:	01312cff 	.word	0x01312cff
 800295c:	014ca43f 	.word	0x014ca43f
 8002960:	016e3600 	.word	0x016e3600
 8002964:	01a6ab1f 	.word	0x01a6ab1f
 8002968:	01e84800 	.word	0x01e84800

0800296c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f043 0201 	orr.w	r2, r3, #1
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr

0800298e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800298e:	b480      	push	{r7}
 8002990:	b083      	sub	sp, #12
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f023 0201 	bic.w	r2, r3, #1
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	460b      	mov	r3, r1
 80029ba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80029bc:	2300      	movs	r3, #0
 80029be:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80029cc:	78fb      	ldrb	r3, [r7, #3]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d115      	bne.n	80029fe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80029de:	200a      	movs	r0, #10
 80029e0:	f7fe f98e 	bl	8000d00 <HAL_Delay>
      ms += 10U;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	330a      	adds	r3, #10
 80029e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f001 f93f 	bl	8003c6e <USB_GetMode>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d01e      	beq.n	8002a34 <USB_SetCurrentMode+0x84>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2bc7      	cmp	r3, #199	@ 0xc7
 80029fa:	d9f0      	bls.n	80029de <USB_SetCurrentMode+0x2e>
 80029fc:	e01a      	b.n	8002a34 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80029fe:	78fb      	ldrb	r3, [r7, #3]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d115      	bne.n	8002a30 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002a10:	200a      	movs	r0, #10
 8002a12:	f7fe f975 	bl	8000d00 <HAL_Delay>
      ms += 10U;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	330a      	adds	r3, #10
 8002a1a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f001 f926 	bl	8003c6e <USB_GetMode>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d005      	beq.n	8002a34 <USB_SetCurrentMode+0x84>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2bc7      	cmp	r3, #199	@ 0xc7
 8002a2c:	d9f0      	bls.n	8002a10 <USB_SetCurrentMode+0x60>
 8002a2e:	e001      	b.n	8002a34 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e005      	b.n	8002a40 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2bc8      	cmp	r3, #200	@ 0xc8
 8002a38:	d101      	bne.n	8002a3e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e000      	b.n	8002a40 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002a48:	b084      	sub	sp, #16
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b086      	sub	sp, #24
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
 8002a52:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002a56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002a62:	2300      	movs	r3, #0
 8002a64:	613b      	str	r3, [r7, #16]
 8002a66:	e009      	b.n	8002a7c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	3340      	adds	r3, #64	@ 0x40
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4413      	add	r3, r2
 8002a72:	2200      	movs	r2, #0
 8002a74:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	613b      	str	r3, [r7, #16]
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	2b0e      	cmp	r3, #14
 8002a80:	d9f2      	bls.n	8002a68 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002a82:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d11c      	bne.n	8002ac4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a98:	f043 0302 	orr.w	r3, r3, #2
 8002a9c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aa2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aae:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aba:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	639a      	str	r2, [r3, #56]	@ 0x38
 8002ac2:	e00b      	b.n	8002adc <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ac8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ad4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002ae8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d10d      	bne.n	8002b0c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002af0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d104      	bne.n	8002b02 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002af8:	2100      	movs	r1, #0
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f968 	bl	8002dd0 <USB_SetDevSpeed>
 8002b00:	e008      	b.n	8002b14 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002b02:	2101      	movs	r1, #1
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 f963 	bl	8002dd0 <USB_SetDevSpeed>
 8002b0a:	e003      	b.n	8002b14 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002b0c:	2103      	movs	r1, #3
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f95e 	bl	8002dd0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002b14:	2110      	movs	r1, #16
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f8fa 	bl	8002d10 <USB_FlushTxFifo>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f924 	bl	8002d74 <USB_FlushRxFifo>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	2300      	movs	r3, #0
 8002b40:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b48:	461a      	mov	r2, r3
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b54:	461a      	mov	r2, r3
 8002b56:	2300      	movs	r3, #0
 8002b58:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	613b      	str	r3, [r7, #16]
 8002b5e:	e043      	b.n	8002be8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	015a      	lsls	r2, r3, #5
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4413      	add	r3, r2
 8002b68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002b72:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002b76:	d118      	bne.n	8002baa <USB_DevInit+0x162>
    {
      if (i == 0U)
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10a      	bne.n	8002b94 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	015a      	lsls	r2, r3, #5
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	4413      	add	r3, r2
 8002b86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002b90:	6013      	str	r3, [r2, #0]
 8002b92:	e013      	b.n	8002bbc <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	015a      	lsls	r2, r3, #5
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002ba6:	6013      	str	r3, [r2, #0]
 8002ba8:	e008      	b.n	8002bbc <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	015a      	lsls	r2, r3, #5
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	2300      	movs	r3, #0
 8002bba:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	015a      	lsls	r2, r3, #5
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002bc8:	461a      	mov	r2, r3
 8002bca:	2300      	movs	r3, #0
 8002bcc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	015a      	lsls	r2, r3, #5
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002bda:	461a      	mov	r2, r3
 8002bdc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002be0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	3301      	adds	r3, #1
 8002be6:	613b      	str	r3, [r7, #16]
 8002be8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002bec:	461a      	mov	r2, r3
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d3b5      	bcc.n	8002b60 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	613b      	str	r3, [r7, #16]
 8002bf8:	e043      	b.n	8002c82 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	015a      	lsls	r2, r3, #5
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	4413      	add	r3, r2
 8002c02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002c0c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002c10:	d118      	bne.n	8002c44 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d10a      	bne.n	8002c2e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	015a      	lsls	r2, r3, #5
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4413      	add	r3, r2
 8002c20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c24:	461a      	mov	r2, r3
 8002c26:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002c2a:	6013      	str	r3, [r2, #0]
 8002c2c:	e013      	b.n	8002c56 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	015a      	lsls	r2, r3, #5
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	4413      	add	r3, r2
 8002c36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002c40:	6013      	str	r3, [r2, #0]
 8002c42:	e008      	b.n	8002c56 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	015a      	lsls	r2, r3, #5
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c50:	461a      	mov	r2, r3
 8002c52:	2300      	movs	r3, #0
 8002c54:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	015a      	lsls	r2, r3, #5
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c62:	461a      	mov	r2, r3
 8002c64:	2300      	movs	r3, #0
 8002c66:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	015a      	lsls	r2, r3, #5
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	4413      	add	r3, r2
 8002c70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c74:	461a      	mov	r2, r3
 8002c76:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002c7a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	3301      	adds	r3, #1
 8002c80:	613b      	str	r3, [r7, #16]
 8002c82:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002c86:	461a      	mov	r2, r3
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d3b5      	bcc.n	8002bfa <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ca0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8002cae:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002cb0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d105      	bne.n	8002cc4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	f043 0210 	orr.w	r2, r3, #16
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	699a      	ldr	r2, [r3, #24]
 8002cc8:	4b10      	ldr	r3, [pc, #64]	@ (8002d0c <USB_DevInit+0x2c4>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002cd0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d005      	beq.n	8002ce4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	f043 0208 	orr.w	r2, r3, #8
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002ce4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d107      	bne.n	8002cfc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002cf4:	f043 0304 	orr.w	r3, r3, #4
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002cfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3718      	adds	r7, #24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002d08:	b004      	add	sp, #16
 8002d0a:	4770      	bx	lr
 8002d0c:	803c3800 	.word	0x803c3800

08002d10 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	3301      	adds	r3, #1
 8002d22:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002d2a:	d901      	bls.n	8002d30 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e01b      	b.n	8002d68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	daf2      	bge.n	8002d1e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	019b      	lsls	r3, r3, #6
 8002d40:	f043 0220 	orr.w	r2, r3, #32
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002d54:	d901      	bls.n	8002d5a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e006      	b.n	8002d68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	f003 0320 	and.w	r3, r3, #32
 8002d62:	2b20      	cmp	r3, #32
 8002d64:	d0f0      	beq.n	8002d48 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3714      	adds	r7, #20
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	3301      	adds	r3, #1
 8002d84:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002d8c:	d901      	bls.n	8002d92 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e018      	b.n	8002dc4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	daf2      	bge.n	8002d80 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2210      	movs	r2, #16
 8002da2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	3301      	adds	r3, #1
 8002da8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002db0:	d901      	bls.n	8002db6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e006      	b.n	8002dc4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	f003 0310 	and.w	r3, r3, #16
 8002dbe:	2b10      	cmp	r3, #16
 8002dc0:	d0f0      	beq.n	8002da4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3714      	adds	r7, #20
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	460b      	mov	r3, r1
 8002dda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	78fb      	ldrb	r3, [r7, #3]
 8002dea:	68f9      	ldr	r1, [r7, #12]
 8002dec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002df0:	4313      	orrs	r3, r2
 8002df2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3714      	adds	r7, #20
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8002e02:	b480      	push	{r7}
 8002e04:	b087      	sub	sp, #28
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f003 0306 	and.w	r3, r3, #6
 8002e1a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d102      	bne.n	8002e28 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8002e22:	2300      	movs	r3, #0
 8002e24:	75fb      	strb	r3, [r7, #23]
 8002e26:	e00a      	b.n	8002e3e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d002      	beq.n	8002e34 <USB_GetDevSpeed+0x32>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2b06      	cmp	r3, #6
 8002e32:	d102      	bne.n	8002e3a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8002e34:	2302      	movs	r3, #2
 8002e36:	75fb      	strb	r3, [r7, #23]
 8002e38:	e001      	b.n	8002e3e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8002e3a:	230f      	movs	r3, #15
 8002e3c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8002e3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	371c      	adds	r7, #28
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	785b      	ldrb	r3, [r3, #1]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d13a      	bne.n	8002ede <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e6e:	69da      	ldr	r2, [r3, #28]
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	f003 030f 	and.w	r3, r3, #15
 8002e78:	2101      	movs	r1, #1
 8002e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	68f9      	ldr	r1, [r7, #12]
 8002e82:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002e86:	4313      	orrs	r3, r2
 8002e88:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	015a      	lsls	r2, r3, #5
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	4413      	add	r3, r2
 8002e92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d155      	bne.n	8002f4c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	015a      	lsls	r2, r3, #5
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	791b      	ldrb	r3, [r3, #4]
 8002eba:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002ebc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	059b      	lsls	r3, r3, #22
 8002ec2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	68ba      	ldr	r2, [r7, #8]
 8002ec8:	0151      	lsls	r1, r2, #5
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	440a      	add	r2, r1
 8002ece:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002ed2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ed6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002eda:	6013      	str	r3, [r2, #0]
 8002edc:	e036      	b.n	8002f4c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ee4:	69da      	ldr	r2, [r3, #28]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	f003 030f 	and.w	r3, r3, #15
 8002eee:	2101      	movs	r1, #1
 8002ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef4:	041b      	lsls	r3, r3, #16
 8002ef6:	68f9      	ldr	r1, [r7, #12]
 8002ef8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002efc:	4313      	orrs	r3, r2
 8002efe:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	015a      	lsls	r2, r3, #5
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	4413      	add	r3, r2
 8002f08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d11a      	bne.n	8002f4c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	015a      	lsls	r2, r3, #5
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	791b      	ldrb	r3, [r3, #4]
 8002f30:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8002f32:	430b      	orrs	r3, r1
 8002f34:	4313      	orrs	r3, r2
 8002f36:	68ba      	ldr	r2, [r7, #8]
 8002f38:	0151      	lsls	r1, r2, #5
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	440a      	add	r2, r1
 8002f3e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002f42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f4a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3714      	adds	r7, #20
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
	...

08002f5c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	785b      	ldrb	r3, [r3, #1]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d161      	bne.n	800303c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	015a      	lsls	r2, r3, #5
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	4413      	add	r3, r2
 8002f80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002f8a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002f8e:	d11f      	bne.n	8002fd0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	015a      	lsls	r2, r3, #5
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	4413      	add	r3, r2
 8002f98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	0151      	lsls	r1, r2, #5
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	440a      	add	r2, r1
 8002fa6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002faa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002fae:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	015a      	lsls	r2, r3, #5
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68ba      	ldr	r2, [r7, #8]
 8002fc0:	0151      	lsls	r1, r2, #5
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	440a      	add	r2, r1
 8002fc6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002fca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002fce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fd6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	f003 030f 	and.w	r3, r3, #15
 8002fe0:	2101      	movs	r1, #1
 8002fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	68f9      	ldr	r1, [r7, #12]
 8002fec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ffa:	69da      	ldr	r2, [r3, #28]
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	f003 030f 	and.w	r3, r3, #15
 8003004:	2101      	movs	r1, #1
 8003006:	fa01 f303 	lsl.w	r3, r1, r3
 800300a:	b29b      	uxth	r3, r3
 800300c:	43db      	mvns	r3, r3
 800300e:	68f9      	ldr	r1, [r7, #12]
 8003010:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003014:	4013      	ands	r3, r2
 8003016:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	015a      	lsls	r2, r3, #5
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4413      	add	r3, r2
 8003020:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	0159      	lsls	r1, r3, #5
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	440b      	add	r3, r1
 800302e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003032:	4619      	mov	r1, r3
 8003034:	4b35      	ldr	r3, [pc, #212]	@ (800310c <USB_DeactivateEndpoint+0x1b0>)
 8003036:	4013      	ands	r3, r2
 8003038:	600b      	str	r3, [r1, #0]
 800303a:	e060      	b.n	80030fe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	015a      	lsls	r2, r3, #5
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	4413      	add	r3, r2
 8003044:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800304e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003052:	d11f      	bne.n	8003094 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	015a      	lsls	r2, r3, #5
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	4413      	add	r3, r2
 800305c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68ba      	ldr	r2, [r7, #8]
 8003064:	0151      	lsls	r1, r2, #5
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	440a      	add	r2, r1
 800306a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800306e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003072:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	015a      	lsls	r2, r3, #5
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	4413      	add	r3, r2
 800307c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68ba      	ldr	r2, [r7, #8]
 8003084:	0151      	lsls	r1, r2, #5
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	440a      	add	r2, r1
 800308a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800308e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003092:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800309a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	f003 030f 	and.w	r3, r3, #15
 80030a4:	2101      	movs	r1, #1
 80030a6:	fa01 f303 	lsl.w	r3, r1, r3
 80030aa:	041b      	lsls	r3, r3, #16
 80030ac:	43db      	mvns	r3, r3
 80030ae:	68f9      	ldr	r1, [r7, #12]
 80030b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80030b4:	4013      	ands	r3, r2
 80030b6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030be:	69da      	ldr	r2, [r3, #28]
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	f003 030f 	and.w	r3, r3, #15
 80030c8:	2101      	movs	r1, #1
 80030ca:	fa01 f303 	lsl.w	r3, r1, r3
 80030ce:	041b      	lsls	r3, r3, #16
 80030d0:	43db      	mvns	r3, r3
 80030d2:	68f9      	ldr	r1, [r7, #12]
 80030d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80030d8:	4013      	ands	r3, r2
 80030da:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	015a      	lsls	r2, r3, #5
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	4413      	add	r3, r2
 80030e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	0159      	lsls	r1, r3, #5
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	440b      	add	r3, r1
 80030f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030f6:	4619      	mov	r1, r3
 80030f8:	4b05      	ldr	r3, [pc, #20]	@ (8003110 <USB_DeactivateEndpoint+0x1b4>)
 80030fa:	4013      	ands	r3, r2
 80030fc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3714      	adds	r7, #20
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	ec337800 	.word	0xec337800
 8003110:	eff37800 	.word	0xeff37800

08003114 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b08a      	sub	sp, #40	@ 0x28
 8003118:	af02      	add	r7, sp, #8
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	4613      	mov	r3, r2
 8003120:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	785b      	ldrb	r3, [r3, #1]
 8003130:	2b01      	cmp	r3, #1
 8003132:	f040 817f 	bne.w	8003434 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d132      	bne.n	80031a4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	015a      	lsls	r2, r3, #5
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	4413      	add	r3, r2
 8003146:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	0151      	lsls	r1, r2, #5
 8003150:	69fa      	ldr	r2, [r7, #28]
 8003152:	440a      	add	r2, r1
 8003154:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003158:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800315c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003160:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	015a      	lsls	r2, r3, #5
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	4413      	add	r3, r2
 800316a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	0151      	lsls	r1, r2, #5
 8003174:	69fa      	ldr	r2, [r7, #28]
 8003176:	440a      	add	r2, r1
 8003178:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800317c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003180:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	015a      	lsls	r2, r3, #5
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	4413      	add	r3, r2
 800318a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	0151      	lsls	r1, r2, #5
 8003194:	69fa      	ldr	r2, [r7, #28]
 8003196:	440a      	add	r2, r1
 8003198:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800319c:	0cdb      	lsrs	r3, r3, #19
 800319e:	04db      	lsls	r3, r3, #19
 80031a0:	6113      	str	r3, [r2, #16]
 80031a2:	e097      	b.n	80032d4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	015a      	lsls	r2, r3, #5
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	4413      	add	r3, r2
 80031ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	0151      	lsls	r1, r2, #5
 80031b6:	69fa      	ldr	r2, [r7, #28]
 80031b8:	440a      	add	r2, r1
 80031ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80031be:	0cdb      	lsrs	r3, r3, #19
 80031c0:	04db      	lsls	r3, r3, #19
 80031c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	015a      	lsls	r2, r3, #5
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	4413      	add	r3, r2
 80031cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	0151      	lsls	r1, r2, #5
 80031d6:	69fa      	ldr	r2, [r7, #28]
 80031d8:	440a      	add	r2, r1
 80031da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80031de:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80031e2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80031e6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d11a      	bne.n	8003224 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	691a      	ldr	r2, [r3, #16]
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d903      	bls.n	8003202 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	689a      	ldr	r2, [r3, #8]
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	015a      	lsls	r2, r3, #5
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	4413      	add	r3, r2
 800320a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	0151      	lsls	r1, r2, #5
 8003214:	69fa      	ldr	r2, [r7, #28]
 8003216:	440a      	add	r2, r1
 8003218:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800321c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003220:	6113      	str	r3, [r2, #16]
 8003222:	e044      	b.n	80032ae <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	691a      	ldr	r2, [r3, #16]
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	4413      	add	r3, r2
 800322e:	1e5a      	subs	r2, r3, #1
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	fbb2 f3f3 	udiv	r3, r2, r3
 8003238:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	015a      	lsls	r2, r3, #5
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	4413      	add	r3, r2
 8003242:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003246:	691a      	ldr	r2, [r3, #16]
 8003248:	8afb      	ldrh	r3, [r7, #22]
 800324a:	04d9      	lsls	r1, r3, #19
 800324c:	4ba4      	ldr	r3, [pc, #656]	@ (80034e0 <USB_EPStartXfer+0x3cc>)
 800324e:	400b      	ands	r3, r1
 8003250:	69b9      	ldr	r1, [r7, #24]
 8003252:	0148      	lsls	r0, r1, #5
 8003254:	69f9      	ldr	r1, [r7, #28]
 8003256:	4401      	add	r1, r0
 8003258:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800325c:	4313      	orrs	r3, r2
 800325e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	791b      	ldrb	r3, [r3, #4]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d122      	bne.n	80032ae <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	015a      	lsls	r2, r3, #5
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	4413      	add	r3, r2
 8003270:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	0151      	lsls	r1, r2, #5
 800327a:	69fa      	ldr	r2, [r7, #28]
 800327c:	440a      	add	r2, r1
 800327e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003282:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8003286:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	015a      	lsls	r2, r3, #5
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	4413      	add	r3, r2
 8003290:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003294:	691a      	ldr	r2, [r3, #16]
 8003296:	8afb      	ldrh	r3, [r7, #22]
 8003298:	075b      	lsls	r3, r3, #29
 800329a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800329e:	69b9      	ldr	r1, [r7, #24]
 80032a0:	0148      	lsls	r0, r1, #5
 80032a2:	69f9      	ldr	r1, [r7, #28]
 80032a4:	4401      	add	r1, r0
 80032a6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80032aa:	4313      	orrs	r3, r2
 80032ac:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	015a      	lsls	r2, r3, #5
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	4413      	add	r3, r2
 80032b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032ba:	691a      	ldr	r2, [r3, #16]
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	691b      	ldr	r3, [r3, #16]
 80032c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032c4:	69b9      	ldr	r1, [r7, #24]
 80032c6:	0148      	lsls	r0, r1, #5
 80032c8:	69f9      	ldr	r1, [r7, #28]
 80032ca:	4401      	add	r1, r0
 80032cc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80032d0:	4313      	orrs	r3, r2
 80032d2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80032d4:	79fb      	ldrb	r3, [r7, #7]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d14b      	bne.n	8003372 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d009      	beq.n	80032f6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	015a      	lsls	r2, r3, #5
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	4413      	add	r3, r2
 80032ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032ee:	461a      	mov	r2, r3
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	69db      	ldr	r3, [r3, #28]
 80032f4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	791b      	ldrb	r3, [r3, #4]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d128      	bne.n	8003350 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800330a:	2b00      	cmp	r3, #0
 800330c:	d110      	bne.n	8003330 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	015a      	lsls	r2, r3, #5
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	4413      	add	r3, r2
 8003316:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	0151      	lsls	r1, r2, #5
 8003320:	69fa      	ldr	r2, [r7, #28]
 8003322:	440a      	add	r2, r1
 8003324:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003328:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800332c:	6013      	str	r3, [r2, #0]
 800332e:	e00f      	b.n	8003350 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	015a      	lsls	r2, r3, #5
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	4413      	add	r3, r2
 8003338:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	69ba      	ldr	r2, [r7, #24]
 8003340:	0151      	lsls	r1, r2, #5
 8003342:	69fa      	ldr	r2, [r7, #28]
 8003344:	440a      	add	r2, r1
 8003346:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800334a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800334e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	015a      	lsls	r2, r3, #5
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	4413      	add	r3, r2
 8003358:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	0151      	lsls	r1, r2, #5
 8003362:	69fa      	ldr	r2, [r7, #28]
 8003364:	440a      	add	r2, r1
 8003366:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800336a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800336e:	6013      	str	r3, [r2, #0]
 8003370:	e166      	b.n	8003640 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	015a      	lsls	r2, r3, #5
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	4413      	add	r3, r2
 800337a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	0151      	lsls	r1, r2, #5
 8003384:	69fa      	ldr	r2, [r7, #28]
 8003386:	440a      	add	r2, r1
 8003388:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800338c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003390:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	791b      	ldrb	r3, [r3, #4]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d015      	beq.n	80033c6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f000 814e 	beq.w	8003640 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	f003 030f 	and.w	r3, r3, #15
 80033b4:	2101      	movs	r1, #1
 80033b6:	fa01 f303 	lsl.w	r3, r1, r3
 80033ba:	69f9      	ldr	r1, [r7, #28]
 80033bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80033c0:	4313      	orrs	r3, r2
 80033c2:	634b      	str	r3, [r1, #52]	@ 0x34
 80033c4:	e13c      	b.n	8003640 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d110      	bne.n	80033f8 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	015a      	lsls	r2, r3, #5
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	4413      	add	r3, r2
 80033de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	0151      	lsls	r1, r2, #5
 80033e8:	69fa      	ldr	r2, [r7, #28]
 80033ea:	440a      	add	r2, r1
 80033ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80033f0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80033f4:	6013      	str	r3, [r2, #0]
 80033f6:	e00f      	b.n	8003418 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	015a      	lsls	r2, r3, #5
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	4413      	add	r3, r2
 8003400:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	0151      	lsls	r1, r2, #5
 800340a:	69fa      	ldr	r2, [r7, #28]
 800340c:	440a      	add	r2, r1
 800340e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003412:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003416:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	68d9      	ldr	r1, [r3, #12]
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	781a      	ldrb	r2, [r3, #0]
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	b298      	uxth	r0, r3
 8003426:	79fb      	ldrb	r3, [r7, #7]
 8003428:	9300      	str	r3, [sp, #0]
 800342a:	4603      	mov	r3, r0
 800342c:	68f8      	ldr	r0, [r7, #12]
 800342e:	f000 f9b9 	bl	80037a4 <USB_WritePacket>
 8003432:	e105      	b.n	8003640 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	015a      	lsls	r2, r3, #5
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	4413      	add	r3, r2
 800343c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	69ba      	ldr	r2, [r7, #24]
 8003444:	0151      	lsls	r1, r2, #5
 8003446:	69fa      	ldr	r2, [r7, #28]
 8003448:	440a      	add	r2, r1
 800344a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800344e:	0cdb      	lsrs	r3, r3, #19
 8003450:	04db      	lsls	r3, r3, #19
 8003452:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	015a      	lsls	r2, r3, #5
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	4413      	add	r3, r2
 800345c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	69ba      	ldr	r2, [r7, #24]
 8003464:	0151      	lsls	r1, r2, #5
 8003466:	69fa      	ldr	r2, [r7, #28]
 8003468:	440a      	add	r2, r1
 800346a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800346e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003472:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003476:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d132      	bne.n	80034e4 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	689a      	ldr	r2, [r3, #8]
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	689a      	ldr	r2, [r3, #8]
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	015a      	lsls	r2, r3, #5
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	4413      	add	r3, r2
 800349e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034a2:	691a      	ldr	r2, [r3, #16]
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ac:	69b9      	ldr	r1, [r7, #24]
 80034ae:	0148      	lsls	r0, r1, #5
 80034b0:	69f9      	ldr	r1, [r7, #28]
 80034b2:	4401      	add	r1, r0
 80034b4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80034b8:	4313      	orrs	r3, r2
 80034ba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	015a      	lsls	r2, r3, #5
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	4413      	add	r3, r2
 80034c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	0151      	lsls	r1, r2, #5
 80034ce:	69fa      	ldr	r2, [r7, #28]
 80034d0:	440a      	add	r2, r1
 80034d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80034d6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80034da:	6113      	str	r3, [r2, #16]
 80034dc:	e062      	b.n	80035a4 <USB_EPStartXfer+0x490>
 80034de:	bf00      	nop
 80034e0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d123      	bne.n	8003534 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	015a      	lsls	r2, r3, #5
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	4413      	add	r3, r2
 80034f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034f8:	691a      	ldr	r2, [r3, #16]
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003502:	69b9      	ldr	r1, [r7, #24]
 8003504:	0148      	lsls	r0, r1, #5
 8003506:	69f9      	ldr	r1, [r7, #28]
 8003508:	4401      	add	r1, r0
 800350a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800350e:	4313      	orrs	r3, r2
 8003510:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	015a      	lsls	r2, r3, #5
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	4413      	add	r3, r2
 800351a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	0151      	lsls	r1, r2, #5
 8003524:	69fa      	ldr	r2, [r7, #28]
 8003526:	440a      	add	r2, r1
 8003528:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800352c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003530:	6113      	str	r3, [r2, #16]
 8003532:	e037      	b.n	80035a4 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	691a      	ldr	r2, [r3, #16]
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	4413      	add	r3, r2
 800353e:	1e5a      	subs	r2, r3, #1
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	fbb2 f3f3 	udiv	r3, r2, r3
 8003548:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	8afa      	ldrh	r2, [r7, #22]
 8003550:	fb03 f202 	mul.w	r2, r3, r2
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	015a      	lsls	r2, r3, #5
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	4413      	add	r3, r2
 8003560:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003564:	691a      	ldr	r2, [r3, #16]
 8003566:	8afb      	ldrh	r3, [r7, #22]
 8003568:	04d9      	lsls	r1, r3, #19
 800356a:	4b38      	ldr	r3, [pc, #224]	@ (800364c <USB_EPStartXfer+0x538>)
 800356c:	400b      	ands	r3, r1
 800356e:	69b9      	ldr	r1, [r7, #24]
 8003570:	0148      	lsls	r0, r1, #5
 8003572:	69f9      	ldr	r1, [r7, #28]
 8003574:	4401      	add	r1, r0
 8003576:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800357a:	4313      	orrs	r3, r2
 800357c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	015a      	lsls	r2, r3, #5
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	4413      	add	r3, r2
 8003586:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800358a:	691a      	ldr	r2, [r3, #16]
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	6a1b      	ldr	r3, [r3, #32]
 8003590:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003594:	69b9      	ldr	r1, [r7, #24]
 8003596:	0148      	lsls	r0, r1, #5
 8003598:	69f9      	ldr	r1, [r7, #28]
 800359a:	4401      	add	r1, r0
 800359c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80035a0:	4313      	orrs	r3, r2
 80035a2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80035a4:	79fb      	ldrb	r3, [r7, #7]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d10d      	bne.n	80035c6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d009      	beq.n	80035c6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	68d9      	ldr	r1, [r3, #12]
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	015a      	lsls	r2, r3, #5
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	4413      	add	r3, r2
 80035be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035c2:	460a      	mov	r2, r1
 80035c4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	791b      	ldrb	r3, [r3, #4]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d128      	bne.n	8003620 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d110      	bne.n	8003600 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	015a      	lsls	r2, r3, #5
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	4413      	add	r3, r2
 80035e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	0151      	lsls	r1, r2, #5
 80035f0:	69fa      	ldr	r2, [r7, #28]
 80035f2:	440a      	add	r2, r1
 80035f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80035f8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80035fc:	6013      	str	r3, [r2, #0]
 80035fe:	e00f      	b.n	8003620 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	015a      	lsls	r2, r3, #5
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	4413      	add	r3, r2
 8003608:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	69ba      	ldr	r2, [r7, #24]
 8003610:	0151      	lsls	r1, r2, #5
 8003612:	69fa      	ldr	r2, [r7, #28]
 8003614:	440a      	add	r2, r1
 8003616:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800361a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800361e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	015a      	lsls	r2, r3, #5
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	4413      	add	r3, r2
 8003628:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	0151      	lsls	r1, r2, #5
 8003632:	69fa      	ldr	r2, [r7, #28]
 8003634:	440a      	add	r2, r1
 8003636:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800363a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800363e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3720      	adds	r7, #32
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	1ff80000 	.word	0x1ff80000

08003650 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003650:	b480      	push	{r7}
 8003652:	b087      	sub	sp, #28
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800365a:	2300      	movs	r3, #0
 800365c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800365e:	2300      	movs	r3, #0
 8003660:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	785b      	ldrb	r3, [r3, #1]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d14a      	bne.n	8003704 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	015a      	lsls	r2, r3, #5
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	4413      	add	r3, r2
 8003678:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003682:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003686:	f040 8086 	bne.w	8003796 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	015a      	lsls	r2, r3, #5
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	4413      	add	r3, r2
 8003694:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	7812      	ldrb	r2, [r2, #0]
 800369e:	0151      	lsls	r1, r2, #5
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	440a      	add	r2, r1
 80036a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80036a8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80036ac:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	015a      	lsls	r2, r3, #5
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	4413      	add	r3, r2
 80036b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	7812      	ldrb	r2, [r2, #0]
 80036c2:	0151      	lsls	r1, r2, #5
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	440a      	add	r2, r1
 80036c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80036cc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80036d0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	3301      	adds	r3, #1
 80036d6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f242 7210 	movw	r2, #10000	@ 0x2710
 80036de:	4293      	cmp	r3, r2
 80036e0:	d902      	bls.n	80036e8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	75fb      	strb	r3, [r7, #23]
          break;
 80036e6:	e056      	b.n	8003796 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	015a      	lsls	r2, r3, #5
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	4413      	add	r3, r2
 80036f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80036fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003700:	d0e7      	beq.n	80036d2 <USB_EPStopXfer+0x82>
 8003702:	e048      	b.n	8003796 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	015a      	lsls	r2, r3, #5
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	4413      	add	r3, r2
 800370e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003718:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800371c:	d13b      	bne.n	8003796 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	015a      	lsls	r2, r3, #5
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	4413      	add	r3, r2
 8003728:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	7812      	ldrb	r2, [r2, #0]
 8003732:	0151      	lsls	r1, r2, #5
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	440a      	add	r2, r1
 8003738:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800373c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003740:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	015a      	lsls	r2, r3, #5
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	4413      	add	r3, r2
 800374c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	7812      	ldrb	r2, [r2, #0]
 8003756:	0151      	lsls	r1, r2, #5
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	440a      	add	r2, r1
 800375c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003760:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003764:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	3301      	adds	r3, #1
 800376a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003772:	4293      	cmp	r3, r2
 8003774:	d902      	bls.n	800377c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	75fb      	strb	r3, [r7, #23]
          break;
 800377a:	e00c      	b.n	8003796 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	015a      	lsls	r2, r3, #5
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	4413      	add	r3, r2
 8003786:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003790:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003794:	d0e7      	beq.n	8003766 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003796:	7dfb      	ldrb	r3, [r7, #23]
}
 8003798:	4618      	mov	r0, r3
 800379a:	371c      	adds	r7, #28
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b089      	sub	sp, #36	@ 0x24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	4611      	mov	r1, r2
 80037b0:	461a      	mov	r2, r3
 80037b2:	460b      	mov	r3, r1
 80037b4:	71fb      	strb	r3, [r7, #7]
 80037b6:	4613      	mov	r3, r2
 80037b8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80037c2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d123      	bne.n	8003812 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80037ca:	88bb      	ldrh	r3, [r7, #4]
 80037cc:	3303      	adds	r3, #3
 80037ce:	089b      	lsrs	r3, r3, #2
 80037d0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80037d2:	2300      	movs	r3, #0
 80037d4:	61bb      	str	r3, [r7, #24]
 80037d6:	e018      	b.n	800380a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80037d8:	79fb      	ldrb	r3, [r7, #7]
 80037da:	031a      	lsls	r2, r3, #12
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	4413      	add	r3, r2
 80037e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037e4:	461a      	mov	r2, r3
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	6013      	str	r3, [r2, #0]
      pSrc++;
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	3301      	adds	r3, #1
 80037f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	3301      	adds	r3, #1
 80037f6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	3301      	adds	r3, #1
 80037fc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	3301      	adds	r3, #1
 8003802:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	3301      	adds	r3, #1
 8003808:	61bb      	str	r3, [r7, #24]
 800380a:	69ba      	ldr	r2, [r7, #24]
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	429a      	cmp	r2, r3
 8003810:	d3e2      	bcc.n	80037d8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	3724      	adds	r7, #36	@ 0x24
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003820:	b480      	push	{r7}
 8003822:	b08b      	sub	sp, #44	@ 0x2c
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	4613      	mov	r3, r2
 800382c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003836:	88fb      	ldrh	r3, [r7, #6]
 8003838:	089b      	lsrs	r3, r3, #2
 800383a:	b29b      	uxth	r3, r3
 800383c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800383e:	88fb      	ldrh	r3, [r7, #6]
 8003840:	f003 0303 	and.w	r3, r3, #3
 8003844:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003846:	2300      	movs	r3, #0
 8003848:	623b      	str	r3, [r7, #32]
 800384a:	e014      	b.n	8003876 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003856:	601a      	str	r2, [r3, #0]
    pDest++;
 8003858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800385a:	3301      	adds	r3, #1
 800385c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800385e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003860:	3301      	adds	r3, #1
 8003862:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003866:	3301      	adds	r3, #1
 8003868:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800386a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800386c:	3301      	adds	r3, #1
 800386e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8003870:	6a3b      	ldr	r3, [r7, #32]
 8003872:	3301      	adds	r3, #1
 8003874:	623b      	str	r3, [r7, #32]
 8003876:	6a3a      	ldr	r2, [r7, #32]
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	429a      	cmp	r2, r3
 800387c:	d3e6      	bcc.n	800384c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800387e:	8bfb      	ldrh	r3, [r7, #30]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d01e      	beq.n	80038c2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003884:	2300      	movs	r3, #0
 8003886:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800388e:	461a      	mov	r2, r3
 8003890:	f107 0310 	add.w	r3, r7, #16
 8003894:	6812      	ldr	r2, [r2, #0]
 8003896:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	6a3b      	ldr	r3, [r7, #32]
 800389c:	b2db      	uxtb	r3, r3
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	fa22 f303 	lsr.w	r3, r2, r3
 80038a4:	b2da      	uxtb	r2, r3
 80038a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a8:	701a      	strb	r2, [r3, #0]
      i++;
 80038aa:	6a3b      	ldr	r3, [r7, #32]
 80038ac:	3301      	adds	r3, #1
 80038ae:	623b      	str	r3, [r7, #32]
      pDest++;
 80038b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b2:	3301      	adds	r3, #1
 80038b4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80038b6:	8bfb      	ldrh	r3, [r7, #30]
 80038b8:	3b01      	subs	r3, #1
 80038ba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80038bc:	8bfb      	ldrh	r3, [r7, #30]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1ea      	bne.n	8003898 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80038c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	372c      	adds	r7, #44	@ 0x2c
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	785b      	ldrb	r3, [r3, #1]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d12c      	bne.n	8003946 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	015a      	lsls	r2, r3, #5
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	4413      	add	r3, r2
 80038f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	db12      	blt.n	8003924 <USB_EPSetStall+0x54>
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00f      	beq.n	8003924 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	015a      	lsls	r2, r3, #5
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	4413      	add	r3, r2
 800390c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	0151      	lsls	r1, r2, #5
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	440a      	add	r2, r1
 800391a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800391e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003922:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	015a      	lsls	r2, r3, #5
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	4413      	add	r3, r2
 800392c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68ba      	ldr	r2, [r7, #8]
 8003934:	0151      	lsls	r1, r2, #5
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	440a      	add	r2, r1
 800393a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800393e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003942:	6013      	str	r3, [r2, #0]
 8003944:	e02b      	b.n	800399e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	015a      	lsls	r2, r3, #5
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	4413      	add	r3, r2
 800394e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	db12      	blt.n	800397e <USB_EPSetStall+0xae>
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00f      	beq.n	800397e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	015a      	lsls	r2, r3, #5
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	4413      	add	r3, r2
 8003966:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68ba      	ldr	r2, [r7, #8]
 800396e:	0151      	lsls	r1, r2, #5
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	440a      	add	r2, r1
 8003974:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003978:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800397c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	015a      	lsls	r2, r3, #5
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	4413      	add	r3, r2
 8003986:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68ba      	ldr	r2, [r7, #8]
 800398e:	0151      	lsls	r1, r2, #5
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	440a      	add	r2, r1
 8003994:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003998:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800399c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3714      	adds	r7, #20
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	785b      	ldrb	r3, [r3, #1]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d128      	bne.n	8003a1a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	015a      	lsls	r2, r3, #5
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	4413      	add	r3, r2
 80039d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68ba      	ldr	r2, [r7, #8]
 80039d8:	0151      	lsls	r1, r2, #5
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	440a      	add	r2, r1
 80039de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80039e2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80039e6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	791b      	ldrb	r3, [r3, #4]
 80039ec:	2b03      	cmp	r3, #3
 80039ee:	d003      	beq.n	80039f8 <USB_EPClearStall+0x4c>
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	791b      	ldrb	r3, [r3, #4]
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d138      	bne.n	8003a6a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	015a      	lsls	r2, r3, #5
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4413      	add	r3, r2
 8003a00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68ba      	ldr	r2, [r7, #8]
 8003a08:	0151      	lsls	r1, r2, #5
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	440a      	add	r2, r1
 8003a0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003a12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a16:	6013      	str	r3, [r2, #0]
 8003a18:	e027      	b.n	8003a6a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	015a      	lsls	r2, r3, #5
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	4413      	add	r3, r2
 8003a22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	0151      	lsls	r1, r2, #5
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	440a      	add	r2, r1
 8003a30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003a34:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003a38:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	791b      	ldrb	r3, [r3, #4]
 8003a3e:	2b03      	cmp	r3, #3
 8003a40:	d003      	beq.n	8003a4a <USB_EPClearStall+0x9e>
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	791b      	ldrb	r3, [r3, #4]
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d10f      	bne.n	8003a6a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	015a      	lsls	r2, r3, #5
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	4413      	add	r3, r2
 8003a52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68ba      	ldr	r2, [r7, #8]
 8003a5a:	0151      	lsls	r1, r2, #5
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	440a      	add	r2, r1
 8003a60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003a64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a68:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3714      	adds	r7, #20
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	460b      	mov	r3, r1
 8003a82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a96:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003a9a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	78fb      	ldrb	r3, [r7, #3]
 8003aa6:	011b      	lsls	r3, r3, #4
 8003aa8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8003aac:	68f9      	ldr	r1, [r7, #12]
 8003aae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3714      	adds	r7, #20
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b085      	sub	sp, #20
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003ade:	f023 0303 	bic.w	r3, r3, #3
 8003ae2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003af2:	f023 0302 	bic.w	r3, r3, #2
 8003af6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3714      	adds	r7, #20
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr

08003b06 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003b06:	b480      	push	{r7}
 8003b08:	b085      	sub	sp, #20
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003b20:	f023 0303 	bic.w	r3, r3, #3
 8003b24:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b34:	f043 0302 	orr.w	r3, r3, #2
 8003b38:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3714      	adds	r7, #20
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003b60:	68fb      	ldr	r3, [r7, #12]
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3714      	adds	r7, #20
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr

08003b6e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8003b6e:	b480      	push	{r7}
 8003b70:	b085      	sub	sp, #20
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b8a:	69db      	ldr	r3, [r3, #28]
 8003b8c:	68ba      	ldr	r2, [r7, #8]
 8003b8e:	4013      	ands	r3, r2
 8003b90:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	0c1b      	lsrs	r3, r3, #16
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3714      	adds	r7, #20
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr

08003ba2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	b085      	sub	sp, #20
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bbe:	69db      	ldr	r3, [r3, #28]
 8003bc0:	68ba      	ldr	r2, [r7, #8]
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	b29b      	uxth	r3, r3
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3714      	adds	r7, #20
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr

08003bd6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	b085      	sub	sp, #20
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
 8003bde:	460b      	mov	r3, r1
 8003be0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003be6:	78fb      	ldrb	r3, [r7, #3]
 8003be8:	015a      	lsls	r2, r3, #5
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	4413      	add	r3, r2
 8003bee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	68ba      	ldr	r2, [r7, #8]
 8003c00:	4013      	ands	r3, r2
 8003c02:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003c04:	68bb      	ldr	r3, [r7, #8]
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3714      	adds	r7, #20
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr

08003c12 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b087      	sub	sp, #28
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c34:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8003c36:	78fb      	ldrb	r3, [r7, #3]
 8003c38:	f003 030f 	and.w	r3, r3, #15
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c42:	01db      	lsls	r3, r3, #7
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003c4c:	78fb      	ldrb	r3, [r7, #3]
 8003c4e:	015a      	lsls	r2, r3, #5
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	4413      	add	r3, r2
 8003c54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003c60:	68bb      	ldr	r3, [r7, #8]
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	371c      	adds	r7, #28
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr

08003c6e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003c6e:	b480      	push	{r7}
 8003c70:	b083      	sub	sp, #12
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	f003 0301 	and.w	r3, r3, #1
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	370c      	adds	r7, #12
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr

08003c8a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b085      	sub	sp, #20
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ca4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003ca8:	f023 0307 	bic.w	r3, r3, #7
 8003cac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003cbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cc0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3714      	adds	r7, #20
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b087      	sub	sp, #28
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	460b      	mov	r3, r1
 8003cda:	607a      	str	r2, [r7, #4]
 8003cdc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	333c      	adds	r3, #60	@ 0x3c
 8003ce6:	3304      	adds	r3, #4
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	4a26      	ldr	r2, [pc, #152]	@ (8003d88 <USB_EP0_OutStart+0xb8>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d90a      	bls.n	8003d0a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d00:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d04:	d101      	bne.n	8003d0a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8003d06:	2300      	movs	r3, #0
 8003d08:	e037      	b.n	8003d7a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d10:	461a      	mov	r2, r3
 8003d12:	2300      	movs	r3, #0
 8003d14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d24:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003d28:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d38:	f043 0318 	orr.w	r3, r3, #24
 8003d3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	697a      	ldr	r2, [r7, #20]
 8003d48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d4c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8003d50:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8003d52:	7afb      	ldrb	r3, [r7, #11]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d10f      	bne.n	8003d78 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d5e:	461a      	mov	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	697a      	ldr	r2, [r7, #20]
 8003d6e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d72:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8003d76:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	371c      	adds	r7, #28
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	4f54300a 	.word	0x4f54300a

08003d8c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d94:	2300      	movs	r3, #0
 8003d96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003da4:	d901      	bls.n	8003daa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e01b      	b.n	8003de2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	daf2      	bge.n	8003d98 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003db2:	2300      	movs	r3, #0
 8003db4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	f043 0201 	orr.w	r2, r3, #1
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003dce:	d901      	bls.n	8003dd4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e006      	b.n	8003de2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d0f0      	beq.n	8003dc2 <USB_CoreReset+0x36>

  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3714      	adds	r7, #20
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
	...

08003df0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	460b      	mov	r3, r1
 8003dfa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8003dfc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8003e00:	f002 fc38 	bl	8006674 <USBD_static_malloc>
 8003e04:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d109      	bne.n	8003e20 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	32b0      	adds	r2, #176	@ 0xb0
 8003e16:	2100      	movs	r1, #0
 8003e18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	e0d4      	b.n	8003fca <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8003e20:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8003e24:	2100      	movs	r1, #0
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f002 fe60 	bl	8006aec <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	32b0      	adds	r2, #176	@ 0xb0
 8003e36:	68f9      	ldr	r1, [r7, #12]
 8003e38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	32b0      	adds	r2, #176	@ 0xb0
 8003e46:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	7c1b      	ldrb	r3, [r3, #16]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d138      	bne.n	8003eca <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8003e58:	4b5e      	ldr	r3, [pc, #376]	@ (8003fd4 <USBD_CDC_Init+0x1e4>)
 8003e5a:	7819      	ldrb	r1, [r3, #0]
 8003e5c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003e60:	2202      	movs	r2, #2
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f002 fae3 	bl	800642e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8003e68:	4b5a      	ldr	r3, [pc, #360]	@ (8003fd4 <USBD_CDC_Init+0x1e4>)
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	f003 020f 	and.w	r2, r3, #15
 8003e70:	6879      	ldr	r1, [r7, #4]
 8003e72:	4613      	mov	r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	4413      	add	r3, r2
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	440b      	add	r3, r1
 8003e7c:	3324      	adds	r3, #36	@ 0x24
 8003e7e:	2201      	movs	r2, #1
 8003e80:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8003e82:	4b55      	ldr	r3, [pc, #340]	@ (8003fd8 <USBD_CDC_Init+0x1e8>)
 8003e84:	7819      	ldrb	r1, [r3, #0]
 8003e86:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f002 face 	bl	800642e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8003e92:	4b51      	ldr	r3, [pc, #324]	@ (8003fd8 <USBD_CDC_Init+0x1e8>)
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	f003 020f 	and.w	r2, r3, #15
 8003e9a:	6879      	ldr	r1, [r7, #4]
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	4413      	add	r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	440b      	add	r3, r1
 8003ea6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003eaa:	2201      	movs	r2, #1
 8003eac:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8003eae:	4b4b      	ldr	r3, [pc, #300]	@ (8003fdc <USBD_CDC_Init+0x1ec>)
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	f003 020f 	and.w	r2, r3, #15
 8003eb6:	6879      	ldr	r1, [r7, #4]
 8003eb8:	4613      	mov	r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4413      	add	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	440b      	add	r3, r1
 8003ec2:	3326      	adds	r3, #38	@ 0x26
 8003ec4:	2210      	movs	r2, #16
 8003ec6:	801a      	strh	r2, [r3, #0]
 8003ec8:	e035      	b.n	8003f36 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8003eca:	4b42      	ldr	r3, [pc, #264]	@ (8003fd4 <USBD_CDC_Init+0x1e4>)
 8003ecc:	7819      	ldrb	r1, [r3, #0]
 8003ece:	2340      	movs	r3, #64	@ 0x40
 8003ed0:	2202      	movs	r2, #2
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f002 faab 	bl	800642e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8003ed8:	4b3e      	ldr	r3, [pc, #248]	@ (8003fd4 <USBD_CDC_Init+0x1e4>)
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	f003 020f 	and.w	r2, r3, #15
 8003ee0:	6879      	ldr	r1, [r7, #4]
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	4413      	add	r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	440b      	add	r3, r1
 8003eec:	3324      	adds	r3, #36	@ 0x24
 8003eee:	2201      	movs	r2, #1
 8003ef0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8003ef2:	4b39      	ldr	r3, [pc, #228]	@ (8003fd8 <USBD_CDC_Init+0x1e8>)
 8003ef4:	7819      	ldrb	r1, [r3, #0]
 8003ef6:	2340      	movs	r3, #64	@ 0x40
 8003ef8:	2202      	movs	r2, #2
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f002 fa97 	bl	800642e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8003f00:	4b35      	ldr	r3, [pc, #212]	@ (8003fd8 <USBD_CDC_Init+0x1e8>)
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	f003 020f 	and.w	r2, r3, #15
 8003f08:	6879      	ldr	r1, [r7, #4]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	4413      	add	r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	440b      	add	r3, r1
 8003f14:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003f18:	2201      	movs	r2, #1
 8003f1a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8003f1c:	4b2f      	ldr	r3, [pc, #188]	@ (8003fdc <USBD_CDC_Init+0x1ec>)
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	f003 020f 	and.w	r2, r3, #15
 8003f24:	6879      	ldr	r1, [r7, #4]
 8003f26:	4613      	mov	r3, r2
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	4413      	add	r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	440b      	add	r3, r1
 8003f30:	3326      	adds	r3, #38	@ 0x26
 8003f32:	2210      	movs	r2, #16
 8003f34:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8003f36:	4b29      	ldr	r3, [pc, #164]	@ (8003fdc <USBD_CDC_Init+0x1ec>)
 8003f38:	7819      	ldrb	r1, [r3, #0]
 8003f3a:	2308      	movs	r3, #8
 8003f3c:	2203      	movs	r2, #3
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f002 fa75 	bl	800642e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8003f44:	4b25      	ldr	r3, [pc, #148]	@ (8003fdc <USBD_CDC_Init+0x1ec>)
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	f003 020f 	and.w	r2, r3, #15
 8003f4c:	6879      	ldr	r1, [r7, #4]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	4413      	add	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	440b      	add	r3, r1
 8003f58:	3324      	adds	r3, #36	@ 0x24
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	33b0      	adds	r3, #176	@ 0xb0
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	4413      	add	r3, r2
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d101      	bne.n	8003f98 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8003f94:	2302      	movs	r3, #2
 8003f96:	e018      	b.n	8003fca <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	7c1b      	ldrb	r3, [r3, #16]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d10a      	bne.n	8003fb6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8003fa0:	4b0d      	ldr	r3, [pc, #52]	@ (8003fd8 <USBD_CDC_Init+0x1e8>)
 8003fa2:	7819      	ldrb	r1, [r3, #0]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003faa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f002 fb2c 	bl	800660c <USBD_LL_PrepareReceive>
 8003fb4:	e008      	b.n	8003fc8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8003fb6:	4b08      	ldr	r3, [pc, #32]	@ (8003fd8 <USBD_CDC_Init+0x1e8>)
 8003fb8:	7819      	ldrb	r1, [r3, #0]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003fc0:	2340      	movs	r3, #64	@ 0x40
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f002 fb22 	bl	800660c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3710      	adds	r7, #16
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	20000097 	.word	0x20000097
 8003fd8:	20000098 	.word	0x20000098
 8003fdc:	20000099 	.word	0x20000099

08003fe0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	460b      	mov	r3, r1
 8003fea:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8003fec:	4b3a      	ldr	r3, [pc, #232]	@ (80040d8 <USBD_CDC_DeInit+0xf8>)
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f002 fa41 	bl	800647a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8003ff8:	4b37      	ldr	r3, [pc, #220]	@ (80040d8 <USBD_CDC_DeInit+0xf8>)
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	f003 020f 	and.w	r2, r3, #15
 8004000:	6879      	ldr	r1, [r7, #4]
 8004002:	4613      	mov	r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	4413      	add	r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	440b      	add	r3, r1
 800400c:	3324      	adds	r3, #36	@ 0x24
 800400e:	2200      	movs	r2, #0
 8004010:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004012:	4b32      	ldr	r3, [pc, #200]	@ (80040dc <USBD_CDC_DeInit+0xfc>)
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	4619      	mov	r1, r3
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f002 fa2e 	bl	800647a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800401e:	4b2f      	ldr	r3, [pc, #188]	@ (80040dc <USBD_CDC_DeInit+0xfc>)
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	f003 020f 	and.w	r2, r3, #15
 8004026:	6879      	ldr	r1, [r7, #4]
 8004028:	4613      	mov	r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	4413      	add	r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	440b      	add	r3, r1
 8004032:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004036:	2200      	movs	r2, #0
 8004038:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800403a:	4b29      	ldr	r3, [pc, #164]	@ (80040e0 <USBD_CDC_DeInit+0x100>)
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	4619      	mov	r1, r3
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f002 fa1a 	bl	800647a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004046:	4b26      	ldr	r3, [pc, #152]	@ (80040e0 <USBD_CDC_DeInit+0x100>)
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	f003 020f 	and.w	r2, r3, #15
 800404e:	6879      	ldr	r1, [r7, #4]
 8004050:	4613      	mov	r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4413      	add	r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	440b      	add	r3, r1
 800405a:	3324      	adds	r3, #36	@ 0x24
 800405c:	2200      	movs	r2, #0
 800405e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004060:	4b1f      	ldr	r3, [pc, #124]	@ (80040e0 <USBD_CDC_DeInit+0x100>)
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	f003 020f 	and.w	r2, r3, #15
 8004068:	6879      	ldr	r1, [r7, #4]
 800406a:	4613      	mov	r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	4413      	add	r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	440b      	add	r3, r1
 8004074:	3326      	adds	r3, #38	@ 0x26
 8004076:	2200      	movs	r2, #0
 8004078:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	32b0      	adds	r2, #176	@ 0xb0
 8004084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d01f      	beq.n	80040cc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	33b0      	adds	r3, #176	@ 0xb0
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	4413      	add	r3, r2
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	32b0      	adds	r2, #176	@ 0xb0
 80040aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040ae:	4618      	mov	r0, r3
 80040b0:	f002 faee 	bl	8006690 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	32b0      	adds	r2, #176	@ 0xb0
 80040be:	2100      	movs	r1, #0
 80040c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	20000097 	.word	0x20000097
 80040dc:	20000098 	.word	0x20000098
 80040e0:	20000099 	.word	0x20000099

080040e4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	32b0      	adds	r2, #176	@ 0xb0
 80040f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040fc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80040fe:	2300      	movs	r3, #0
 8004100:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004102:	2300      	movs	r3, #0
 8004104:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004106:	2300      	movs	r3, #0
 8004108:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d101      	bne.n	8004114 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004110:	2303      	movs	r3, #3
 8004112:	e0bf      	b.n	8004294 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800411c:	2b00      	cmp	r3, #0
 800411e:	d050      	beq.n	80041c2 <USBD_CDC_Setup+0xde>
 8004120:	2b20      	cmp	r3, #32
 8004122:	f040 80af 	bne.w	8004284 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	88db      	ldrh	r3, [r3, #6]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d03a      	beq.n	80041a4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	b25b      	sxtb	r3, r3
 8004134:	2b00      	cmp	r3, #0
 8004136:	da1b      	bge.n	8004170 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	33b0      	adds	r3, #176	@ 0xb0
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	4413      	add	r3, r2
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800414e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	88d2      	ldrh	r2, [r2, #6]
 8004154:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	88db      	ldrh	r3, [r3, #6]
 800415a:	2b07      	cmp	r3, #7
 800415c:	bf28      	it	cs
 800415e:	2307      	movcs	r3, #7
 8004160:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	89fa      	ldrh	r2, [r7, #14]
 8004166:	4619      	mov	r1, r3
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f001 fd53 	bl	8005c14 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800416e:	e090      	b.n	8004292 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	785a      	ldrb	r2, [r3, #1]
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	88db      	ldrh	r3, [r3, #6]
 800417e:	2b3f      	cmp	r3, #63	@ 0x3f
 8004180:	d803      	bhi.n	800418a <USBD_CDC_Setup+0xa6>
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	88db      	ldrh	r3, [r3, #6]
 8004186:	b2da      	uxtb	r2, r3
 8004188:	e000      	b.n	800418c <USBD_CDC_Setup+0xa8>
 800418a:	2240      	movs	r2, #64	@ 0x40
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8004192:	6939      	ldr	r1, [r7, #16]
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800419a:	461a      	mov	r2, r3
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f001 fd65 	bl	8005c6c <USBD_CtlPrepareRx>
      break;
 80041a2:	e076      	b.n	8004292 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	33b0      	adds	r3, #176	@ 0xb0
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	4413      	add	r3, r2
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	7850      	ldrb	r0, [r2, #1]
 80041ba:	2200      	movs	r2, #0
 80041bc:	6839      	ldr	r1, [r7, #0]
 80041be:	4798      	blx	r3
      break;
 80041c0:	e067      	b.n	8004292 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	785b      	ldrb	r3, [r3, #1]
 80041c6:	2b0b      	cmp	r3, #11
 80041c8:	d851      	bhi.n	800426e <USBD_CDC_Setup+0x18a>
 80041ca:	a201      	add	r2, pc, #4	@ (adr r2, 80041d0 <USBD_CDC_Setup+0xec>)
 80041cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d0:	08004201 	.word	0x08004201
 80041d4:	0800427d 	.word	0x0800427d
 80041d8:	0800426f 	.word	0x0800426f
 80041dc:	0800426f 	.word	0x0800426f
 80041e0:	0800426f 	.word	0x0800426f
 80041e4:	0800426f 	.word	0x0800426f
 80041e8:	0800426f 	.word	0x0800426f
 80041ec:	0800426f 	.word	0x0800426f
 80041f0:	0800426f 	.word	0x0800426f
 80041f4:	0800426f 	.word	0x0800426f
 80041f8:	0800422b 	.word	0x0800422b
 80041fc:	08004255 	.word	0x08004255
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004206:	b2db      	uxtb	r3, r3
 8004208:	2b03      	cmp	r3, #3
 800420a:	d107      	bne.n	800421c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800420c:	f107 030a 	add.w	r3, r7, #10
 8004210:	2202      	movs	r2, #2
 8004212:	4619      	mov	r1, r3
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f001 fcfd 	bl	8005c14 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800421a:	e032      	b.n	8004282 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800421c:	6839      	ldr	r1, [r7, #0]
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f001 fc7b 	bl	8005b1a <USBD_CtlError>
            ret = USBD_FAIL;
 8004224:	2303      	movs	r3, #3
 8004226:	75fb      	strb	r3, [r7, #23]
          break;
 8004228:	e02b      	b.n	8004282 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b03      	cmp	r3, #3
 8004234:	d107      	bne.n	8004246 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004236:	f107 030d 	add.w	r3, r7, #13
 800423a:	2201      	movs	r2, #1
 800423c:	4619      	mov	r1, r3
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f001 fce8 	bl	8005c14 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004244:	e01d      	b.n	8004282 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004246:	6839      	ldr	r1, [r7, #0]
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f001 fc66 	bl	8005b1a <USBD_CtlError>
            ret = USBD_FAIL;
 800424e:	2303      	movs	r3, #3
 8004250:	75fb      	strb	r3, [r7, #23]
          break;
 8004252:	e016      	b.n	8004282 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800425a:	b2db      	uxtb	r3, r3
 800425c:	2b03      	cmp	r3, #3
 800425e:	d00f      	beq.n	8004280 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8004260:	6839      	ldr	r1, [r7, #0]
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f001 fc59 	bl	8005b1a <USBD_CtlError>
            ret = USBD_FAIL;
 8004268:	2303      	movs	r3, #3
 800426a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800426c:	e008      	b.n	8004280 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800426e:	6839      	ldr	r1, [r7, #0]
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f001 fc52 	bl	8005b1a <USBD_CtlError>
          ret = USBD_FAIL;
 8004276:	2303      	movs	r3, #3
 8004278:	75fb      	strb	r3, [r7, #23]
          break;
 800427a:	e002      	b.n	8004282 <USBD_CDC_Setup+0x19e>
          break;
 800427c:	bf00      	nop
 800427e:	e008      	b.n	8004292 <USBD_CDC_Setup+0x1ae>
          break;
 8004280:	bf00      	nop
      }
      break;
 8004282:	e006      	b.n	8004292 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8004284:	6839      	ldr	r1, [r7, #0]
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f001 fc47 	bl	8005b1a <USBD_CtlError>
      ret = USBD_FAIL;
 800428c:	2303      	movs	r3, #3
 800428e:	75fb      	strb	r3, [r7, #23]
      break;
 8004290:	bf00      	nop
  }

  return (uint8_t)ret;
 8004292:	7dfb      	ldrb	r3, [r7, #23]
}
 8004294:	4618      	mov	r0, r3
 8004296:	3718      	adds	r7, #24
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	460b      	mov	r3, r1
 80042a6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80042ae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	32b0      	adds	r2, #176	@ 0xb0
 80042ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e065      	b.n	8004392 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	32b0      	adds	r2, #176	@ 0xb0
 80042d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042d4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80042d6:	78fb      	ldrb	r3, [r7, #3]
 80042d8:	f003 020f 	and.w	r2, r3, #15
 80042dc:	6879      	ldr	r1, [r7, #4]
 80042de:	4613      	mov	r3, r2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	4413      	add	r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	440b      	add	r3, r1
 80042e8:	3318      	adds	r3, #24
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d02f      	beq.n	8004350 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80042f0:	78fb      	ldrb	r3, [r7, #3]
 80042f2:	f003 020f 	and.w	r2, r3, #15
 80042f6:	6879      	ldr	r1, [r7, #4]
 80042f8:	4613      	mov	r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4413      	add	r3, r2
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	440b      	add	r3, r1
 8004302:	3318      	adds	r3, #24
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	78fb      	ldrb	r3, [r7, #3]
 8004308:	f003 010f 	and.w	r1, r3, #15
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	460b      	mov	r3, r1
 8004310:	00db      	lsls	r3, r3, #3
 8004312:	440b      	add	r3, r1
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	4403      	add	r3, r0
 8004318:	331c      	adds	r3, #28
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	fbb2 f1f3 	udiv	r1, r2, r3
 8004320:	fb01 f303 	mul.w	r3, r1, r3
 8004324:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004326:	2b00      	cmp	r3, #0
 8004328:	d112      	bne.n	8004350 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800432a:	78fb      	ldrb	r3, [r7, #3]
 800432c:	f003 020f 	and.w	r2, r3, #15
 8004330:	6879      	ldr	r1, [r7, #4]
 8004332:	4613      	mov	r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	4413      	add	r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	440b      	add	r3, r1
 800433c:	3318      	adds	r3, #24
 800433e:	2200      	movs	r2, #0
 8004340:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004342:	78f9      	ldrb	r1, [r7, #3]
 8004344:	2300      	movs	r3, #0
 8004346:	2200      	movs	r2, #0
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f002 f93e 	bl	80065ca <USBD_LL_Transmit>
 800434e:	e01f      	b.n	8004390 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	2200      	movs	r2, #0
 8004354:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	33b0      	adds	r3, #176	@ 0xb0
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	4413      	add	r3, r2
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d010      	beq.n	8004390 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	33b0      	adds	r3, #176	@ 0xb0
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	4413      	add	r3, r2
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	68ba      	ldr	r2, [r7, #8]
 8004382:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8004386:	68ba      	ldr	r2, [r7, #8]
 8004388:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800438c:	78fa      	ldrb	r2, [r7, #3]
 800438e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3710      	adds	r7, #16
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800439a:	b580      	push	{r7, lr}
 800439c:	b084      	sub	sp, #16
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
 80043a2:	460b      	mov	r3, r1
 80043a4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	32b0      	adds	r2, #176	@ 0xb0
 80043b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043b4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	32b0      	adds	r2, #176	@ 0xb0
 80043c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d101      	bne.n	80043cc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e01a      	b.n	8004402 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80043cc:	78fb      	ldrb	r3, [r7, #3]
 80043ce:	4619      	mov	r1, r3
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f002 f93c 	bl	800664e <USBD_LL_GetRxDataSize>
 80043d6:	4602      	mov	r2, r0
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	33b0      	adds	r3, #176	@ 0xb0
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	4413      	add	r3, r2
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80043fc:	4611      	mov	r1, r2
 80043fe:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3710      	adds	r7, #16
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800440a:	b580      	push	{r7, lr}
 800440c:	b084      	sub	sp, #16
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	32b0      	adds	r2, #176	@ 0xb0
 800441c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004420:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d101      	bne.n	800442c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004428:	2303      	movs	r3, #3
 800442a:	e024      	b.n	8004476 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	33b0      	adds	r3, #176	@ 0xb0
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	4413      	add	r3, r2
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d019      	beq.n	8004474 <USBD_CDC_EP0_RxReady+0x6a>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8004446:	2bff      	cmp	r3, #255	@ 0xff
 8004448:	d014      	beq.n	8004474 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	33b0      	adds	r3, #176	@ 0xb0
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	4413      	add	r3, r2
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8004462:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800446a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	22ff      	movs	r2, #255	@ 0xff
 8004470:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3710      	adds	r7, #16
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
	...

08004480 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b086      	sub	sp, #24
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004488:	2182      	movs	r1, #130	@ 0x82
 800448a:	4818      	ldr	r0, [pc, #96]	@ (80044ec <USBD_CDC_GetFSCfgDesc+0x6c>)
 800448c:	f000 fd0f 	bl	8004eae <USBD_GetEpDesc>
 8004490:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004492:	2101      	movs	r1, #1
 8004494:	4815      	ldr	r0, [pc, #84]	@ (80044ec <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004496:	f000 fd0a 	bl	8004eae <USBD_GetEpDesc>
 800449a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800449c:	2181      	movs	r1, #129	@ 0x81
 800449e:	4813      	ldr	r0, [pc, #76]	@ (80044ec <USBD_CDC_GetFSCfgDesc+0x6c>)
 80044a0:	f000 fd05 	bl	8004eae <USBD_GetEpDesc>
 80044a4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d002      	beq.n	80044b2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	2210      	movs	r2, #16
 80044b0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d006      	beq.n	80044c6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80044c0:	711a      	strb	r2, [r3, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d006      	beq.n	80044da <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80044d4:	711a      	strb	r2, [r3, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2243      	movs	r2, #67	@ 0x43
 80044de:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80044e0:	4b02      	ldr	r3, [pc, #8]	@ (80044ec <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3718      	adds	r7, #24
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	20000054 	.word	0x20000054

080044f0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80044f8:	2182      	movs	r1, #130	@ 0x82
 80044fa:	4818      	ldr	r0, [pc, #96]	@ (800455c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80044fc:	f000 fcd7 	bl	8004eae <USBD_GetEpDesc>
 8004500:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004502:	2101      	movs	r1, #1
 8004504:	4815      	ldr	r0, [pc, #84]	@ (800455c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004506:	f000 fcd2 	bl	8004eae <USBD_GetEpDesc>
 800450a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800450c:	2181      	movs	r1, #129	@ 0x81
 800450e:	4813      	ldr	r0, [pc, #76]	@ (800455c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004510:	f000 fccd 	bl	8004eae <USBD_GetEpDesc>
 8004514:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d002      	beq.n	8004522 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	2210      	movs	r2, #16
 8004520:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d006      	beq.n	8004536 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	2200      	movs	r2, #0
 800452c:	711a      	strb	r2, [r3, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	f042 0202 	orr.w	r2, r2, #2
 8004534:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d006      	beq.n	800454a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	711a      	strb	r2, [r3, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	f042 0202 	orr.w	r2, r2, #2
 8004548:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2243      	movs	r2, #67	@ 0x43
 800454e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004550:	4b02      	ldr	r3, [pc, #8]	@ (800455c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8004552:	4618      	mov	r0, r3
 8004554:	3718      	adds	r7, #24
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	20000054 	.word	0x20000054

08004560 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004568:	2182      	movs	r1, #130	@ 0x82
 800456a:	4818      	ldr	r0, [pc, #96]	@ (80045cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800456c:	f000 fc9f 	bl	8004eae <USBD_GetEpDesc>
 8004570:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004572:	2101      	movs	r1, #1
 8004574:	4815      	ldr	r0, [pc, #84]	@ (80045cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004576:	f000 fc9a 	bl	8004eae <USBD_GetEpDesc>
 800457a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800457c:	2181      	movs	r1, #129	@ 0x81
 800457e:	4813      	ldr	r0, [pc, #76]	@ (80045cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004580:	f000 fc95 	bl	8004eae <USBD_GetEpDesc>
 8004584:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d002      	beq.n	8004592 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	2210      	movs	r2, #16
 8004590:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d006      	beq.n	80045a6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	2200      	movs	r2, #0
 800459c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80045a0:	711a      	strb	r2, [r3, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d006      	beq.n	80045ba <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80045b4:	711a      	strb	r2, [r3, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2243      	movs	r2, #67	@ 0x43
 80045be:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80045c0:	4b02      	ldr	r3, [pc, #8]	@ (80045cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3718      	adds	r7, #24
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	20000054 	.word	0x20000054

080045d0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	220a      	movs	r2, #10
 80045dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80045de:	4b03      	ldr	r3, [pc, #12]	@ (80045ec <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr
 80045ec:	20000010 	.word	0x20000010

080045f0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d101      	bne.n	8004604 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004600:	2303      	movs	r3, #3
 8004602:	e009      	b.n	8004618 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	33b0      	adds	r3, #176	@ 0xb0
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	4413      	add	r3, r2
 8004612:	683a      	ldr	r2, [r7, #0]
 8004614:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004624:	b480      	push	{r7}
 8004626:	b087      	sub	sp, #28
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	32b0      	adds	r2, #176	@ 0xb0
 800463a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800463e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d101      	bne.n	800464a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8004646:	2303      	movs	r3, #3
 8004648:	e008      	b.n	800465c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	371c      	adds	r7, #28
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	32b0      	adds	r2, #176	@ 0xb0
 800467c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004680:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d101      	bne.n	800468c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004688:	2303      	movs	r3, #3
 800468a:	e004      	b.n	8004696 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	683a      	ldr	r2, [r7, #0]
 8004690:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3714      	adds	r7, #20
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
	...

080046a4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	32b0      	adds	r2, #176	@ 0xb0
 80046b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046ba:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	32b0      	adds	r2, #176	@ 0xb0
 80046c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e018      	b.n	8004704 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	7c1b      	ldrb	r3, [r3, #16]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10a      	bne.n	80046f0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80046da:	4b0c      	ldr	r3, [pc, #48]	@ (800470c <USBD_CDC_ReceivePacket+0x68>)
 80046dc:	7819      	ldrb	r1, [r3, #0]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80046e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f001 ff8f 	bl	800660c <USBD_LL_PrepareReceive>
 80046ee:	e008      	b.n	8004702 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80046f0:	4b06      	ldr	r3, [pc, #24]	@ (800470c <USBD_CDC_ReceivePacket+0x68>)
 80046f2:	7819      	ldrb	r1, [r3, #0]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80046fa:	2340      	movs	r3, #64	@ 0x40
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f001 ff85 	bl	800660c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3710      	adds	r7, #16
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	20000098 	.word	0x20000098

08004710 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	4613      	mov	r3, r2
 800471c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d101      	bne.n	8004728 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004724:	2303      	movs	r3, #3
 8004726:	e01f      	b.n	8004768 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2200      	movs	r2, #0
 800472c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d003      	beq.n	800474e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	68ba      	ldr	r2, [r7, #8]
 800474a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2201      	movs	r2, #1
 8004752:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	79fa      	ldrb	r2, [r7, #7]
 800475a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800475c:	68f8      	ldr	r0, [r7, #12]
 800475e:	f001 fdff 	bl	8006360 <USBD_LL_Init>
 8004762:	4603      	mov	r3, r0
 8004764:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004766:	7dfb      	ldrb	r3, [r7, #23]
}
 8004768:	4618      	mov	r0, r3
 800476a:	3718      	adds	r7, #24
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800477a:	2300      	movs	r3, #0
 800477c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d101      	bne.n	8004788 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004784:	2303      	movs	r3, #3
 8004786:	e025      	b.n	80047d4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	683a      	ldr	r2, [r7, #0]
 800478c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	32ae      	adds	r2, #174	@ 0xae
 800479a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800479e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00f      	beq.n	80047c4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	32ae      	adds	r2, #174	@ 0xae
 80047ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047b4:	f107 020e 	add.w	r2, r7, #14
 80047b8:	4610      	mov	r0, r2
 80047ba:	4798      	blx	r3
 80047bc:	4602      	mov	r2, r0
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80047ca:	1c5a      	adds	r2, r3, #1
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3710      	adds	r7, #16
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f001 fe07 	bl	80063f8 <USBD_LL_Start>
 80047ea:	4603      	mov	r3, r0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3708      	adds	r7, #8
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80047fc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80047fe:	4618      	mov	r0, r3
 8004800:	370c      	adds	r7, #12
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr

0800480a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800480a:	b580      	push	{r7, lr}
 800480c:	b084      	sub	sp, #16
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
 8004812:	460b      	mov	r3, r1
 8004814:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004816:	2300      	movs	r3, #0
 8004818:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004820:	2b00      	cmp	r3, #0
 8004822:	d009      	beq.n	8004838 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	78fa      	ldrb	r2, [r7, #3]
 800482e:	4611      	mov	r1, r2
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	4798      	blx	r3
 8004834:	4603      	mov	r3, r0
 8004836:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004838:	7bfb      	ldrb	r3, [r7, #15]
}
 800483a:	4618      	mov	r0, r3
 800483c:	3710      	adds	r7, #16
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}

08004842 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004842:	b580      	push	{r7, lr}
 8004844:	b084      	sub	sp, #16
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
 800484a:	460b      	mov	r3, r1
 800484c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800484e:	2300      	movs	r3, #0
 8004850:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	78fa      	ldrb	r2, [r7, #3]
 800485c:	4611      	mov	r1, r2
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	4798      	blx	r3
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d001      	beq.n	800486c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8004868:	2303      	movs	r3, #3
 800486a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800486c:	7bfb      	ldrb	r3, [r7, #15]
}
 800486e:	4618      	mov	r0, r3
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b084      	sub	sp, #16
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
 800487e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004886:	6839      	ldr	r1, [r7, #0]
 8004888:	4618      	mov	r0, r3
 800488a:	f001 f90c 	bl	8005aa6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2201      	movs	r2, #1
 8004892:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800489c:	461a      	mov	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80048aa:	f003 031f 	and.w	r3, r3, #31
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d01a      	beq.n	80048e8 <USBD_LL_SetupStage+0x72>
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d822      	bhi.n	80048fc <USBD_LL_SetupStage+0x86>
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d002      	beq.n	80048c0 <USBD_LL_SetupStage+0x4a>
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d00a      	beq.n	80048d4 <USBD_LL_SetupStage+0x5e>
 80048be:	e01d      	b.n	80048fc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80048c6:	4619      	mov	r1, r3
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 fb63 	bl	8004f94 <USBD_StdDevReq>
 80048ce:	4603      	mov	r3, r0
 80048d0:	73fb      	strb	r3, [r7, #15]
      break;
 80048d2:	e020      	b.n	8004916 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80048da:	4619      	mov	r1, r3
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 fbcb 	bl	8005078 <USBD_StdItfReq>
 80048e2:	4603      	mov	r3, r0
 80048e4:	73fb      	strb	r3, [r7, #15]
      break;
 80048e6:	e016      	b.n	8004916 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80048ee:	4619      	mov	r1, r3
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 fc2d 	bl	8005150 <USBD_StdEPReq>
 80048f6:	4603      	mov	r3, r0
 80048f8:	73fb      	strb	r3, [r7, #15]
      break;
 80048fa:	e00c      	b.n	8004916 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004902:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004906:	b2db      	uxtb	r3, r3
 8004908:	4619      	mov	r1, r3
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f001 fdd4 	bl	80064b8 <USBD_LL_StallEP>
 8004910:	4603      	mov	r3, r0
 8004912:	73fb      	strb	r3, [r7, #15]
      break;
 8004914:	bf00      	nop
  }

  return ret;
 8004916:	7bfb      	ldrb	r3, [r7, #15]
}
 8004918:	4618      	mov	r0, r3
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	460b      	mov	r3, r1
 800492a:	607a      	str	r2, [r7, #4]
 800492c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800492e:	2300      	movs	r3, #0
 8004930:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8004932:	7afb      	ldrb	r3, [r7, #11]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d16e      	bne.n	8004a16 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800493e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004946:	2b03      	cmp	r3, #3
 8004948:	f040 8098 	bne.w	8004a7c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	689a      	ldr	r2, [r3, #8]
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	429a      	cmp	r2, r3
 8004956:	d913      	bls.n	8004980 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	689a      	ldr	r2, [r3, #8]
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	1ad2      	subs	r2, r2, r3
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	68da      	ldr	r2, [r3, #12]
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	4293      	cmp	r3, r2
 8004970:	bf28      	it	cs
 8004972:	4613      	movcs	r3, r2
 8004974:	461a      	mov	r2, r3
 8004976:	6879      	ldr	r1, [r7, #4]
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	f001 f994 	bl	8005ca6 <USBD_CtlContinueRx>
 800497e:	e07d      	b.n	8004a7c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004986:	f003 031f 	and.w	r3, r3, #31
 800498a:	2b02      	cmp	r3, #2
 800498c:	d014      	beq.n	80049b8 <USBD_LL_DataOutStage+0x98>
 800498e:	2b02      	cmp	r3, #2
 8004990:	d81d      	bhi.n	80049ce <USBD_LL_DataOutStage+0xae>
 8004992:	2b00      	cmp	r3, #0
 8004994:	d002      	beq.n	800499c <USBD_LL_DataOutStage+0x7c>
 8004996:	2b01      	cmp	r3, #1
 8004998:	d003      	beq.n	80049a2 <USBD_LL_DataOutStage+0x82>
 800499a:	e018      	b.n	80049ce <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800499c:	2300      	movs	r3, #0
 800499e:	75bb      	strb	r3, [r7, #22]
            break;
 80049a0:	e018      	b.n	80049d4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	4619      	mov	r1, r3
 80049ac:	68f8      	ldr	r0, [r7, #12]
 80049ae:	f000 fa64 	bl	8004e7a <USBD_CoreFindIF>
 80049b2:	4603      	mov	r3, r0
 80049b4:	75bb      	strb	r3, [r7, #22]
            break;
 80049b6:	e00d      	b.n	80049d4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	4619      	mov	r1, r3
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	f000 fa66 	bl	8004e94 <USBD_CoreFindEP>
 80049c8:	4603      	mov	r3, r0
 80049ca:	75bb      	strb	r3, [r7, #22]
            break;
 80049cc:	e002      	b.n	80049d4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80049ce:	2300      	movs	r3, #0
 80049d0:	75bb      	strb	r3, [r7, #22]
            break;
 80049d2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80049d4:	7dbb      	ldrb	r3, [r7, #22]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d119      	bne.n	8004a0e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b03      	cmp	r3, #3
 80049e4:	d113      	bne.n	8004a0e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80049e6:	7dba      	ldrb	r2, [r7, #22]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	32ae      	adds	r2, #174	@ 0xae
 80049ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00b      	beq.n	8004a0e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80049f6:	7dba      	ldrb	r2, [r7, #22]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80049fe:	7dba      	ldrb	r2, [r7, #22]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	32ae      	adds	r2, #174	@ 0xae
 8004a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004a0e:	68f8      	ldr	r0, [r7, #12]
 8004a10:	f001 f95a 	bl	8005cc8 <USBD_CtlSendStatus>
 8004a14:	e032      	b.n	8004a7c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8004a16:	7afb      	ldrb	r3, [r7, #11]
 8004a18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	4619      	mov	r1, r3
 8004a20:	68f8      	ldr	r0, [r7, #12]
 8004a22:	f000 fa37 	bl	8004e94 <USBD_CoreFindEP>
 8004a26:	4603      	mov	r3, r0
 8004a28:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004a2a:	7dbb      	ldrb	r3, [r7, #22]
 8004a2c:	2bff      	cmp	r3, #255	@ 0xff
 8004a2e:	d025      	beq.n	8004a7c <USBD_LL_DataOutStage+0x15c>
 8004a30:	7dbb      	ldrb	r3, [r7, #22]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d122      	bne.n	8004a7c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2b03      	cmp	r3, #3
 8004a40:	d117      	bne.n	8004a72 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8004a42:	7dba      	ldrb	r2, [r7, #22]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	32ae      	adds	r2, #174	@ 0xae
 8004a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00f      	beq.n	8004a72 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8004a52:	7dba      	ldrb	r2, [r7, #22]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8004a5a:	7dba      	ldrb	r2, [r7, #22]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	32ae      	adds	r2, #174	@ 0xae
 8004a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	7afa      	ldrb	r2, [r7, #11]
 8004a68:	4611      	mov	r1, r2
 8004a6a:	68f8      	ldr	r0, [r7, #12]
 8004a6c:	4798      	blx	r3
 8004a6e:	4603      	mov	r3, r0
 8004a70:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8004a72:	7dfb      	ldrb	r3, [r7, #23]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d001      	beq.n	8004a7c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8004a78:	7dfb      	ldrb	r3, [r7, #23]
 8004a7a:	e000      	b.n	8004a7e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3718      	adds	r7, #24
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b086      	sub	sp, #24
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	60f8      	str	r0, [r7, #12]
 8004a8e:	460b      	mov	r3, r1
 8004a90:	607a      	str	r2, [r7, #4]
 8004a92:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8004a94:	7afb      	ldrb	r3, [r7, #11]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d16f      	bne.n	8004b7a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	3314      	adds	r3, #20
 8004a9e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d15a      	bne.n	8004b60 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	689a      	ldr	r2, [r3, #8]
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d914      	bls.n	8004ae0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	689a      	ldr	r2, [r3, #8]
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	1ad2      	subs	r2, r2, r3
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	461a      	mov	r2, r3
 8004aca:	6879      	ldr	r1, [r7, #4]
 8004acc:	68f8      	ldr	r0, [r7, #12]
 8004ace:	f001 f8bc 	bl	8005c4a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	2100      	movs	r1, #0
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	f001 fd97 	bl	800660c <USBD_LL_PrepareReceive>
 8004ade:	e03f      	b.n	8004b60 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	68da      	ldr	r2, [r3, #12]
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d11c      	bne.n	8004b26 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	685a      	ldr	r2, [r3, #4]
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d316      	bcc.n	8004b26 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	685a      	ldr	r2, [r3, #4]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d20f      	bcs.n	8004b26 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004b06:	2200      	movs	r2, #0
 8004b08:	2100      	movs	r1, #0
 8004b0a:	68f8      	ldr	r0, [r7, #12]
 8004b0c:	f001 f89d 	bl	8005c4a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004b18:	2300      	movs	r3, #0
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	2100      	movs	r1, #0
 8004b1e:	68f8      	ldr	r0, [r7, #12]
 8004b20:	f001 fd74 	bl	800660c <USBD_LL_PrepareReceive>
 8004b24:	e01c      	b.n	8004b60 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b03      	cmp	r3, #3
 8004b30:	d10f      	bne.n	8004b52 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d009      	beq.n	8004b52 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	68f8      	ldr	r0, [r7, #12]
 8004b50:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004b52:	2180      	movs	r1, #128	@ 0x80
 8004b54:	68f8      	ldr	r0, [r7, #12]
 8004b56:	f001 fcaf 	bl	80064b8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f001 f8c7 	bl	8005cee <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d03a      	beq.n	8004be0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8004b6a:	68f8      	ldr	r0, [r7, #12]
 8004b6c:	f7ff fe42 	bl	80047f4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8004b78:	e032      	b.n	8004be0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8004b7a:	7afb      	ldrb	r3, [r7, #11]
 8004b7c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	4619      	mov	r1, r3
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	f000 f985 	bl	8004e94 <USBD_CoreFindEP>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004b8e:	7dfb      	ldrb	r3, [r7, #23]
 8004b90:	2bff      	cmp	r3, #255	@ 0xff
 8004b92:	d025      	beq.n	8004be0 <USBD_LL_DataInStage+0x15a>
 8004b94:	7dfb      	ldrb	r3, [r7, #23]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d122      	bne.n	8004be0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	2b03      	cmp	r3, #3
 8004ba4:	d11c      	bne.n	8004be0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8004ba6:	7dfa      	ldrb	r2, [r7, #23]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	32ae      	adds	r2, #174	@ 0xae
 8004bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d014      	beq.n	8004be0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8004bb6:	7dfa      	ldrb	r2, [r7, #23]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8004bbe:	7dfa      	ldrb	r2, [r7, #23]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	32ae      	adds	r2, #174	@ 0xae
 8004bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	7afa      	ldrb	r2, [r7, #11]
 8004bcc:	4611      	mov	r1, r2
 8004bce:	68f8      	ldr	r0, [r7, #12]
 8004bd0:	4798      	blx	r3
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8004bd6:	7dbb      	ldrb	r3, [r7, #22]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d001      	beq.n	8004be0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8004bdc:	7dbb      	ldrb	r3, [r7, #22]
 8004bde:	e000      	b.n	8004be2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3718      	adds	r7, #24
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}

08004bea <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004bea:	b580      	push	{r7, lr}
 8004bec:	b084      	sub	sp, #16
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d014      	beq.n	8004c50 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00e      	beq.n	8004c50 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	6852      	ldr	r2, [r2, #4]
 8004c3e:	b2d2      	uxtb	r2, r2
 8004c40:	4611      	mov	r1, r2
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	4798      	blx	r3
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d001      	beq.n	8004c50 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004c50:	2340      	movs	r3, #64	@ 0x40
 8004c52:	2200      	movs	r2, #0
 8004c54:	2100      	movs	r1, #0
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f001 fbe9 	bl	800642e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2240      	movs	r2, #64	@ 0x40
 8004c68:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004c6c:	2340      	movs	r3, #64	@ 0x40
 8004c6e:	2200      	movs	r2, #0
 8004c70:	2180      	movs	r1, #128	@ 0x80
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f001 fbdb 	bl	800642e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2240      	movs	r2, #64	@ 0x40
 8004c82:	621a      	str	r2, [r3, #32]

  return ret;
 8004c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004c8e:	b480      	push	{r7}
 8004c90:	b083      	sub	sp, #12
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
 8004c96:	460b      	mov	r3, r1
 8004c98:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	78fa      	ldrb	r2, [r7, #3]
 8004c9e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	370c      	adds	r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr

08004cae <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004cae:	b480      	push	{r7}
 8004cb0:	b083      	sub	sp, #12
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	2b04      	cmp	r3, #4
 8004cc0:	d006      	beq.n	8004cd0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004cc8:	b2da      	uxtb	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2204      	movs	r2, #4
 8004cd4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	370c      	adds	r7, #12
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr

08004ce6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004ce6:	b480      	push	{r7}
 8004ce8:	b083      	sub	sp, #12
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b04      	cmp	r3, #4
 8004cf8:	d106      	bne.n	8004d08 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8004d00:	b2da      	uxtb	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr

08004d16 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b082      	sub	sp, #8
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2b03      	cmp	r3, #3
 8004d28:	d110      	bne.n	8004d4c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00b      	beq.n	8004d4c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004d3a:	69db      	ldr	r3, [r3, #28]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d005      	beq.n	8004d4c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004d46:	69db      	ldr	r3, [r3, #28]
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3708      	adds	r7, #8
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004d56:	b580      	push	{r7, lr}
 8004d58:	b082      	sub	sp, #8
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
 8004d5e:	460b      	mov	r3, r1
 8004d60:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	32ae      	adds	r2, #174	@ 0xae
 8004d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d101      	bne.n	8004d78 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e01c      	b.n	8004db2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	2b03      	cmp	r3, #3
 8004d82:	d115      	bne.n	8004db0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	32ae      	adds	r2, #174	@ 0xae
 8004d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d92:	6a1b      	ldr	r3, [r3, #32]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d00b      	beq.n	8004db0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	32ae      	adds	r2, #174	@ 0xae
 8004da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004da6:	6a1b      	ldr	r3, [r3, #32]
 8004da8:	78fa      	ldrb	r2, [r7, #3]
 8004daa:	4611      	mov	r1, r2
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3708      	adds	r7, #8
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}

08004dba <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004dba:	b580      	push	{r7, lr}
 8004dbc:	b082      	sub	sp, #8
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	32ae      	adds	r2, #174	@ 0xae
 8004dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d101      	bne.n	8004ddc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e01c      	b.n	8004e16 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	2b03      	cmp	r3, #3
 8004de6:	d115      	bne.n	8004e14 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	32ae      	adds	r2, #174	@ 0xae
 8004df2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00b      	beq.n	8004e14 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	32ae      	adds	r2, #174	@ 0xae
 8004e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e0c:	78fa      	ldrb	r2, [r7, #3]
 8004e0e:	4611      	mov	r1, r2
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004e1e:	b480      	push	{r7}
 8004e20:	b083      	sub	sp, #12
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00e      	beq.n	8004e70 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	6852      	ldr	r2, [r2, #4]
 8004e5e:	b2d2      	uxtb	r2, r2
 8004e60:	4611      	mov	r1, r2
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	4798      	blx	r3
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d001      	beq.n	8004e70 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b083      	sub	sp, #12
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
 8004e82:	460b      	mov	r3, r1
 8004e84:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8004e86:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8004ea0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	370c      	adds	r7, #12
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr

08004eae <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b086      	sub	sp, #24
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	885b      	ldrh	r3, [r3, #2]
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	7812      	ldrb	r2, [r2, #0]
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d91f      	bls.n	8004f14 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8004eda:	e013      	b.n	8004f04 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8004edc:	f107 030a 	add.w	r3, r7, #10
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	6978      	ldr	r0, [r7, #20]
 8004ee4:	f000 f81b 	bl	8004f1e <USBD_GetNextDesc>
 8004ee8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	785b      	ldrb	r3, [r3, #1]
 8004eee:	2b05      	cmp	r3, #5
 8004ef0:	d108      	bne.n	8004f04 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	789b      	ldrb	r3, [r3, #2]
 8004efa:	78fa      	ldrb	r2, [r7, #3]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d008      	beq.n	8004f12 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8004f00:	2300      	movs	r3, #0
 8004f02:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	885b      	ldrh	r3, [r3, #2]
 8004f08:	b29a      	uxth	r2, r3
 8004f0a:	897b      	ldrh	r3, [r7, #10]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d8e5      	bhi.n	8004edc <USBD_GetEpDesc+0x2e>
 8004f10:	e000      	b.n	8004f14 <USBD_GetEpDesc+0x66>
          break;
 8004f12:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8004f14:	693b      	ldr	r3, [r7, #16]
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3718      	adds	r7, #24
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}

08004f1e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8004f1e:	b480      	push	{r7}
 8004f20:	b085      	sub	sp, #20
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
 8004f26:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	881b      	ldrh	r3, [r3, #0]
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	7812      	ldrb	r2, [r2, #0]
 8004f34:	4413      	add	r3, r2
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	461a      	mov	r2, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4413      	add	r3, r2
 8004f46:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8004f48:	68fb      	ldr	r3, [r7, #12]
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3714      	adds	r7, #20
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr

08004f56 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8004f56:	b480      	push	{r7}
 8004f58:	b087      	sub	sp, #28
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004f74:	8a3b      	ldrh	r3, [r7, #16]
 8004f76:	021b      	lsls	r3, r3, #8
 8004f78:	b21a      	sxth	r2, r3
 8004f7a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	b21b      	sxth	r3, r3
 8004f82:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8004f84:	89fb      	ldrh	r3, [r7, #14]
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	371c      	adds	r7, #28
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
	...

08004f94 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004faa:	2b40      	cmp	r3, #64	@ 0x40
 8004fac:	d005      	beq.n	8004fba <USBD_StdDevReq+0x26>
 8004fae:	2b40      	cmp	r3, #64	@ 0x40
 8004fb0:	d857      	bhi.n	8005062 <USBD_StdDevReq+0xce>
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00f      	beq.n	8004fd6 <USBD_StdDevReq+0x42>
 8004fb6:	2b20      	cmp	r3, #32
 8004fb8:	d153      	bne.n	8005062 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	32ae      	adds	r2, #174	@ 0xae
 8004fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	6839      	ldr	r1, [r7, #0]
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	4798      	blx	r3
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	73fb      	strb	r3, [r7, #15]
      break;
 8004fd4:	e04a      	b.n	800506c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	785b      	ldrb	r3, [r3, #1]
 8004fda:	2b09      	cmp	r3, #9
 8004fdc:	d83b      	bhi.n	8005056 <USBD_StdDevReq+0xc2>
 8004fde:	a201      	add	r2, pc, #4	@ (adr r2, 8004fe4 <USBD_StdDevReq+0x50>)
 8004fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe4:	08005039 	.word	0x08005039
 8004fe8:	0800504d 	.word	0x0800504d
 8004fec:	08005057 	.word	0x08005057
 8004ff0:	08005043 	.word	0x08005043
 8004ff4:	08005057 	.word	0x08005057
 8004ff8:	08005017 	.word	0x08005017
 8004ffc:	0800500d 	.word	0x0800500d
 8005000:	08005057 	.word	0x08005057
 8005004:	0800502f 	.word	0x0800502f
 8005008:	08005021 	.word	0x08005021
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800500c:	6839      	ldr	r1, [r7, #0]
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 fa3c 	bl	800548c <USBD_GetDescriptor>
          break;
 8005014:	e024      	b.n	8005060 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005016:	6839      	ldr	r1, [r7, #0]
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 fba1 	bl	8005760 <USBD_SetAddress>
          break;
 800501e:	e01f      	b.n	8005060 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005020:	6839      	ldr	r1, [r7, #0]
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 fbe0 	bl	80057e8 <USBD_SetConfig>
 8005028:	4603      	mov	r3, r0
 800502a:	73fb      	strb	r3, [r7, #15]
          break;
 800502c:	e018      	b.n	8005060 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800502e:	6839      	ldr	r1, [r7, #0]
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f000 fc83 	bl	800593c <USBD_GetConfig>
          break;
 8005036:	e013      	b.n	8005060 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005038:	6839      	ldr	r1, [r7, #0]
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 fcb4 	bl	80059a8 <USBD_GetStatus>
          break;
 8005040:	e00e      	b.n	8005060 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005042:	6839      	ldr	r1, [r7, #0]
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 fce3 	bl	8005a10 <USBD_SetFeature>
          break;
 800504a:	e009      	b.n	8005060 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800504c:	6839      	ldr	r1, [r7, #0]
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 fd07 	bl	8005a62 <USBD_ClrFeature>
          break;
 8005054:	e004      	b.n	8005060 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005056:	6839      	ldr	r1, [r7, #0]
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 fd5e 	bl	8005b1a <USBD_CtlError>
          break;
 800505e:	bf00      	nop
      }
      break;
 8005060:	e004      	b.n	800506c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005062:	6839      	ldr	r1, [r7, #0]
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 fd58 	bl	8005b1a <USBD_CtlError>
      break;
 800506a:	bf00      	nop
  }

  return ret;
 800506c:	7bfb      	ldrb	r3, [r7, #15]
}
 800506e:	4618      	mov	r0, r3
 8005070:	3710      	adds	r7, #16
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop

08005078 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005082:	2300      	movs	r3, #0
 8005084:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800508e:	2b40      	cmp	r3, #64	@ 0x40
 8005090:	d005      	beq.n	800509e <USBD_StdItfReq+0x26>
 8005092:	2b40      	cmp	r3, #64	@ 0x40
 8005094:	d852      	bhi.n	800513c <USBD_StdItfReq+0xc4>
 8005096:	2b00      	cmp	r3, #0
 8005098:	d001      	beq.n	800509e <USBD_StdItfReq+0x26>
 800509a:	2b20      	cmp	r3, #32
 800509c:	d14e      	bne.n	800513c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	3b01      	subs	r3, #1
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d840      	bhi.n	800512e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	889b      	ldrh	r3, [r3, #4]
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d836      	bhi.n	8005124 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	889b      	ldrh	r3, [r3, #4]
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	4619      	mov	r1, r3
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f7ff fedb 	bl	8004e7a <USBD_CoreFindIF>
 80050c4:	4603      	mov	r3, r0
 80050c6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80050c8:	7bbb      	ldrb	r3, [r7, #14]
 80050ca:	2bff      	cmp	r3, #255	@ 0xff
 80050cc:	d01d      	beq.n	800510a <USBD_StdItfReq+0x92>
 80050ce:	7bbb      	ldrb	r3, [r7, #14]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d11a      	bne.n	800510a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80050d4:	7bba      	ldrb	r2, [r7, #14]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	32ae      	adds	r2, #174	@ 0xae
 80050da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00f      	beq.n	8005104 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80050e4:	7bba      	ldrb	r2, [r7, #14]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80050ec:	7bba      	ldrb	r2, [r7, #14]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	32ae      	adds	r2, #174	@ 0xae
 80050f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	6839      	ldr	r1, [r7, #0]
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	4798      	blx	r3
 80050fe:	4603      	mov	r3, r0
 8005100:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005102:	e004      	b.n	800510e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005104:	2303      	movs	r3, #3
 8005106:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005108:	e001      	b.n	800510e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800510a:	2303      	movs	r3, #3
 800510c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	88db      	ldrh	r3, [r3, #6]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d110      	bne.n	8005138 <USBD_StdItfReq+0xc0>
 8005116:	7bfb      	ldrb	r3, [r7, #15]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d10d      	bne.n	8005138 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 fdd3 	bl	8005cc8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005122:	e009      	b.n	8005138 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005124:	6839      	ldr	r1, [r7, #0]
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 fcf7 	bl	8005b1a <USBD_CtlError>
          break;
 800512c:	e004      	b.n	8005138 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800512e:	6839      	ldr	r1, [r7, #0]
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 fcf2 	bl	8005b1a <USBD_CtlError>
          break;
 8005136:	e000      	b.n	800513a <USBD_StdItfReq+0xc2>
          break;
 8005138:	bf00      	nop
      }
      break;
 800513a:	e004      	b.n	8005146 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800513c:	6839      	ldr	r1, [r7, #0]
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 fceb 	bl	8005b1a <USBD_CtlError>
      break;
 8005144:	bf00      	nop
  }

  return ret;
 8005146:	7bfb      	ldrb	r3, [r7, #15]
}
 8005148:	4618      	mov	r0, r3
 800514a:	3710      	adds	r7, #16
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800515a:	2300      	movs	r3, #0
 800515c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	889b      	ldrh	r3, [r3, #4]
 8005162:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800516c:	2b40      	cmp	r3, #64	@ 0x40
 800516e:	d007      	beq.n	8005180 <USBD_StdEPReq+0x30>
 8005170:	2b40      	cmp	r3, #64	@ 0x40
 8005172:	f200 817f 	bhi.w	8005474 <USBD_StdEPReq+0x324>
 8005176:	2b00      	cmp	r3, #0
 8005178:	d02a      	beq.n	80051d0 <USBD_StdEPReq+0x80>
 800517a:	2b20      	cmp	r3, #32
 800517c:	f040 817a 	bne.w	8005474 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005180:	7bbb      	ldrb	r3, [r7, #14]
 8005182:	4619      	mov	r1, r3
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f7ff fe85 	bl	8004e94 <USBD_CoreFindEP>
 800518a:	4603      	mov	r3, r0
 800518c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800518e:	7b7b      	ldrb	r3, [r7, #13]
 8005190:	2bff      	cmp	r3, #255	@ 0xff
 8005192:	f000 8174 	beq.w	800547e <USBD_StdEPReq+0x32e>
 8005196:	7b7b      	ldrb	r3, [r7, #13]
 8005198:	2b00      	cmp	r3, #0
 800519a:	f040 8170 	bne.w	800547e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800519e:	7b7a      	ldrb	r2, [r7, #13]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80051a6:	7b7a      	ldrb	r2, [r7, #13]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	32ae      	adds	r2, #174	@ 0xae
 80051ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	f000 8163 	beq.w	800547e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80051b8:	7b7a      	ldrb	r2, [r7, #13]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	32ae      	adds	r2, #174	@ 0xae
 80051be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	6839      	ldr	r1, [r7, #0]
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	4798      	blx	r3
 80051ca:	4603      	mov	r3, r0
 80051cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80051ce:	e156      	b.n	800547e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	785b      	ldrb	r3, [r3, #1]
 80051d4:	2b03      	cmp	r3, #3
 80051d6:	d008      	beq.n	80051ea <USBD_StdEPReq+0x9a>
 80051d8:	2b03      	cmp	r3, #3
 80051da:	f300 8145 	bgt.w	8005468 <USBD_StdEPReq+0x318>
 80051de:	2b00      	cmp	r3, #0
 80051e0:	f000 809b 	beq.w	800531a <USBD_StdEPReq+0x1ca>
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d03c      	beq.n	8005262 <USBD_StdEPReq+0x112>
 80051e8:	e13e      	b.n	8005468 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d002      	beq.n	80051fc <USBD_StdEPReq+0xac>
 80051f6:	2b03      	cmp	r3, #3
 80051f8:	d016      	beq.n	8005228 <USBD_StdEPReq+0xd8>
 80051fa:	e02c      	b.n	8005256 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80051fc:	7bbb      	ldrb	r3, [r7, #14]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00d      	beq.n	800521e <USBD_StdEPReq+0xce>
 8005202:	7bbb      	ldrb	r3, [r7, #14]
 8005204:	2b80      	cmp	r3, #128	@ 0x80
 8005206:	d00a      	beq.n	800521e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005208:	7bbb      	ldrb	r3, [r7, #14]
 800520a:	4619      	mov	r1, r3
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f001 f953 	bl	80064b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005212:	2180      	movs	r1, #128	@ 0x80
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f001 f94f 	bl	80064b8 <USBD_LL_StallEP>
 800521a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800521c:	e020      	b.n	8005260 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800521e:	6839      	ldr	r1, [r7, #0]
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 fc7a 	bl	8005b1a <USBD_CtlError>
              break;
 8005226:	e01b      	b.n	8005260 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	885b      	ldrh	r3, [r3, #2]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d10e      	bne.n	800524e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005230:	7bbb      	ldrb	r3, [r7, #14]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00b      	beq.n	800524e <USBD_StdEPReq+0xfe>
 8005236:	7bbb      	ldrb	r3, [r7, #14]
 8005238:	2b80      	cmp	r3, #128	@ 0x80
 800523a:	d008      	beq.n	800524e <USBD_StdEPReq+0xfe>
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	88db      	ldrh	r3, [r3, #6]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d104      	bne.n	800524e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005244:	7bbb      	ldrb	r3, [r7, #14]
 8005246:	4619      	mov	r1, r3
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f001 f935 	bl	80064b8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 fd3a 	bl	8005cc8 <USBD_CtlSendStatus>

              break;
 8005254:	e004      	b.n	8005260 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005256:	6839      	ldr	r1, [r7, #0]
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 fc5e 	bl	8005b1a <USBD_CtlError>
              break;
 800525e:	bf00      	nop
          }
          break;
 8005260:	e107      	b.n	8005472 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005268:	b2db      	uxtb	r3, r3
 800526a:	2b02      	cmp	r3, #2
 800526c:	d002      	beq.n	8005274 <USBD_StdEPReq+0x124>
 800526e:	2b03      	cmp	r3, #3
 8005270:	d016      	beq.n	80052a0 <USBD_StdEPReq+0x150>
 8005272:	e04b      	b.n	800530c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005274:	7bbb      	ldrb	r3, [r7, #14]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00d      	beq.n	8005296 <USBD_StdEPReq+0x146>
 800527a:	7bbb      	ldrb	r3, [r7, #14]
 800527c:	2b80      	cmp	r3, #128	@ 0x80
 800527e:	d00a      	beq.n	8005296 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005280:	7bbb      	ldrb	r3, [r7, #14]
 8005282:	4619      	mov	r1, r3
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f001 f917 	bl	80064b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800528a:	2180      	movs	r1, #128	@ 0x80
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f001 f913 	bl	80064b8 <USBD_LL_StallEP>
 8005292:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005294:	e040      	b.n	8005318 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005296:	6839      	ldr	r1, [r7, #0]
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 fc3e 	bl	8005b1a <USBD_CtlError>
              break;
 800529e:	e03b      	b.n	8005318 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	885b      	ldrh	r3, [r3, #2]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d136      	bne.n	8005316 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80052a8:	7bbb      	ldrb	r3, [r7, #14]
 80052aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d004      	beq.n	80052bc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80052b2:	7bbb      	ldrb	r3, [r7, #14]
 80052b4:	4619      	mov	r1, r3
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f001 f91d 	bl	80064f6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 fd03 	bl	8005cc8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80052c2:	7bbb      	ldrb	r3, [r7, #14]
 80052c4:	4619      	mov	r1, r3
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f7ff fde4 	bl	8004e94 <USBD_CoreFindEP>
 80052cc:	4603      	mov	r3, r0
 80052ce:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80052d0:	7b7b      	ldrb	r3, [r7, #13]
 80052d2:	2bff      	cmp	r3, #255	@ 0xff
 80052d4:	d01f      	beq.n	8005316 <USBD_StdEPReq+0x1c6>
 80052d6:	7b7b      	ldrb	r3, [r7, #13]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d11c      	bne.n	8005316 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80052dc:	7b7a      	ldrb	r2, [r7, #13]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80052e4:	7b7a      	ldrb	r2, [r7, #13]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	32ae      	adds	r2, #174	@ 0xae
 80052ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d010      	beq.n	8005316 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80052f4:	7b7a      	ldrb	r2, [r7, #13]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	32ae      	adds	r2, #174	@ 0xae
 80052fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	6839      	ldr	r1, [r7, #0]
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	4798      	blx	r3
 8005306:	4603      	mov	r3, r0
 8005308:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800530a:	e004      	b.n	8005316 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800530c:	6839      	ldr	r1, [r7, #0]
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 fc03 	bl	8005b1a <USBD_CtlError>
              break;
 8005314:	e000      	b.n	8005318 <USBD_StdEPReq+0x1c8>
              break;
 8005316:	bf00      	nop
          }
          break;
 8005318:	e0ab      	b.n	8005472 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b02      	cmp	r3, #2
 8005324:	d002      	beq.n	800532c <USBD_StdEPReq+0x1dc>
 8005326:	2b03      	cmp	r3, #3
 8005328:	d032      	beq.n	8005390 <USBD_StdEPReq+0x240>
 800532a:	e097      	b.n	800545c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800532c:	7bbb      	ldrb	r3, [r7, #14]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d007      	beq.n	8005342 <USBD_StdEPReq+0x1f2>
 8005332:	7bbb      	ldrb	r3, [r7, #14]
 8005334:	2b80      	cmp	r3, #128	@ 0x80
 8005336:	d004      	beq.n	8005342 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005338:	6839      	ldr	r1, [r7, #0]
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 fbed 	bl	8005b1a <USBD_CtlError>
                break;
 8005340:	e091      	b.n	8005466 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005342:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005346:	2b00      	cmp	r3, #0
 8005348:	da0b      	bge.n	8005362 <USBD_StdEPReq+0x212>
 800534a:	7bbb      	ldrb	r3, [r7, #14]
 800534c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005350:	4613      	mov	r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	4413      	add	r3, r2
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	3310      	adds	r3, #16
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	4413      	add	r3, r2
 800535e:	3304      	adds	r3, #4
 8005360:	e00b      	b.n	800537a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005362:	7bbb      	ldrb	r3, [r7, #14]
 8005364:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005368:	4613      	mov	r3, r2
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	4413      	add	r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	4413      	add	r3, r2
 8005378:	3304      	adds	r3, #4
 800537a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	2200      	movs	r2, #0
 8005380:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	2202      	movs	r2, #2
 8005386:	4619      	mov	r1, r3
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 fc43 	bl	8005c14 <USBD_CtlSendData>
              break;
 800538e:	e06a      	b.n	8005466 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005390:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005394:	2b00      	cmp	r3, #0
 8005396:	da11      	bge.n	80053bc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005398:	7bbb      	ldrb	r3, [r7, #14]
 800539a:	f003 020f 	and.w	r2, r3, #15
 800539e:	6879      	ldr	r1, [r7, #4]
 80053a0:	4613      	mov	r3, r2
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	4413      	add	r3, r2
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	440b      	add	r3, r1
 80053aa:	3324      	adds	r3, #36	@ 0x24
 80053ac:	881b      	ldrh	r3, [r3, #0]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d117      	bne.n	80053e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80053b2:	6839      	ldr	r1, [r7, #0]
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 fbb0 	bl	8005b1a <USBD_CtlError>
                  break;
 80053ba:	e054      	b.n	8005466 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80053bc:	7bbb      	ldrb	r3, [r7, #14]
 80053be:	f003 020f 	and.w	r2, r3, #15
 80053c2:	6879      	ldr	r1, [r7, #4]
 80053c4:	4613      	mov	r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	4413      	add	r3, r2
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	440b      	add	r3, r1
 80053ce:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80053d2:	881b      	ldrh	r3, [r3, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d104      	bne.n	80053e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80053d8:	6839      	ldr	r1, [r7, #0]
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 fb9d 	bl	8005b1a <USBD_CtlError>
                  break;
 80053e0:	e041      	b.n	8005466 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80053e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	da0b      	bge.n	8005402 <USBD_StdEPReq+0x2b2>
 80053ea:	7bbb      	ldrb	r3, [r7, #14]
 80053ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80053f0:	4613      	mov	r3, r2
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	4413      	add	r3, r2
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	3310      	adds	r3, #16
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	4413      	add	r3, r2
 80053fe:	3304      	adds	r3, #4
 8005400:	e00b      	b.n	800541a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005402:	7bbb      	ldrb	r3, [r7, #14]
 8005404:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005408:	4613      	mov	r3, r2
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	4413      	add	r3, r2
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	4413      	add	r3, r2
 8005418:	3304      	adds	r3, #4
 800541a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800541c:	7bbb      	ldrb	r3, [r7, #14]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d002      	beq.n	8005428 <USBD_StdEPReq+0x2d8>
 8005422:	7bbb      	ldrb	r3, [r7, #14]
 8005424:	2b80      	cmp	r3, #128	@ 0x80
 8005426:	d103      	bne.n	8005430 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	2200      	movs	r2, #0
 800542c:	601a      	str	r2, [r3, #0]
 800542e:	e00e      	b.n	800544e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005430:	7bbb      	ldrb	r3, [r7, #14]
 8005432:	4619      	mov	r1, r3
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f001 f87d 	bl	8006534 <USBD_LL_IsStallEP>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d003      	beq.n	8005448 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	2201      	movs	r2, #1
 8005444:	601a      	str	r2, [r3, #0]
 8005446:	e002      	b.n	800544e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	2200      	movs	r2, #0
 800544c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	2202      	movs	r2, #2
 8005452:	4619      	mov	r1, r3
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 fbdd 	bl	8005c14 <USBD_CtlSendData>
              break;
 800545a:	e004      	b.n	8005466 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800545c:	6839      	ldr	r1, [r7, #0]
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 fb5b 	bl	8005b1a <USBD_CtlError>
              break;
 8005464:	bf00      	nop
          }
          break;
 8005466:	e004      	b.n	8005472 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005468:	6839      	ldr	r1, [r7, #0]
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 fb55 	bl	8005b1a <USBD_CtlError>
          break;
 8005470:	bf00      	nop
      }
      break;
 8005472:	e005      	b.n	8005480 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005474:	6839      	ldr	r1, [r7, #0]
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 fb4f 	bl	8005b1a <USBD_CtlError>
      break;
 800547c:	e000      	b.n	8005480 <USBD_StdEPReq+0x330>
      break;
 800547e:	bf00      	nop
  }

  return ret;
 8005480:	7bfb      	ldrb	r3, [r7, #15]
}
 8005482:	4618      	mov	r0, r3
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
	...

0800548c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005496:	2300      	movs	r3, #0
 8005498:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800549a:	2300      	movs	r3, #0
 800549c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800549e:	2300      	movs	r3, #0
 80054a0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	885b      	ldrh	r3, [r3, #2]
 80054a6:	0a1b      	lsrs	r3, r3, #8
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	3b01      	subs	r3, #1
 80054ac:	2b06      	cmp	r3, #6
 80054ae:	f200 8128 	bhi.w	8005702 <USBD_GetDescriptor+0x276>
 80054b2:	a201      	add	r2, pc, #4	@ (adr r2, 80054b8 <USBD_GetDescriptor+0x2c>)
 80054b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b8:	080054d5 	.word	0x080054d5
 80054bc:	080054ed 	.word	0x080054ed
 80054c0:	0800552d 	.word	0x0800552d
 80054c4:	08005703 	.word	0x08005703
 80054c8:	08005703 	.word	0x08005703
 80054cc:	080056a3 	.word	0x080056a3
 80054d0:	080056cf 	.word	0x080056cf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	7c12      	ldrb	r2, [r2, #16]
 80054e0:	f107 0108 	add.w	r1, r7, #8
 80054e4:	4610      	mov	r0, r2
 80054e6:	4798      	blx	r3
 80054e8:	60f8      	str	r0, [r7, #12]
      break;
 80054ea:	e112      	b.n	8005712 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	7c1b      	ldrb	r3, [r3, #16]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d10d      	bne.n	8005510 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80054fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054fc:	f107 0208 	add.w	r2, r7, #8
 8005500:	4610      	mov	r0, r2
 8005502:	4798      	blx	r3
 8005504:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	3301      	adds	r3, #1
 800550a:	2202      	movs	r2, #2
 800550c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800550e:	e100      	b.n	8005712 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005518:	f107 0208 	add.w	r2, r7, #8
 800551c:	4610      	mov	r0, r2
 800551e:	4798      	blx	r3
 8005520:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	3301      	adds	r3, #1
 8005526:	2202      	movs	r2, #2
 8005528:	701a      	strb	r2, [r3, #0]
      break;
 800552a:	e0f2      	b.n	8005712 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	885b      	ldrh	r3, [r3, #2]
 8005530:	b2db      	uxtb	r3, r3
 8005532:	2b05      	cmp	r3, #5
 8005534:	f200 80ac 	bhi.w	8005690 <USBD_GetDescriptor+0x204>
 8005538:	a201      	add	r2, pc, #4	@ (adr r2, 8005540 <USBD_GetDescriptor+0xb4>)
 800553a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800553e:	bf00      	nop
 8005540:	08005559 	.word	0x08005559
 8005544:	0800558d 	.word	0x0800558d
 8005548:	080055c1 	.word	0x080055c1
 800554c:	080055f5 	.word	0x080055f5
 8005550:	08005629 	.word	0x08005629
 8005554:	0800565d 	.word	0x0800565d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00b      	beq.n	800557c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	7c12      	ldrb	r2, [r2, #16]
 8005570:	f107 0108 	add.w	r1, r7, #8
 8005574:	4610      	mov	r0, r2
 8005576:	4798      	blx	r3
 8005578:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800557a:	e091      	b.n	80056a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800557c:	6839      	ldr	r1, [r7, #0]
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 facb 	bl	8005b1a <USBD_CtlError>
            err++;
 8005584:	7afb      	ldrb	r3, [r7, #11]
 8005586:	3301      	adds	r3, #1
 8005588:	72fb      	strb	r3, [r7, #11]
          break;
 800558a:	e089      	b.n	80056a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d00b      	beq.n	80055b0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	7c12      	ldrb	r2, [r2, #16]
 80055a4:	f107 0108 	add.w	r1, r7, #8
 80055a8:	4610      	mov	r0, r2
 80055aa:	4798      	blx	r3
 80055ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80055ae:	e077      	b.n	80056a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80055b0:	6839      	ldr	r1, [r7, #0]
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 fab1 	bl	8005b1a <USBD_CtlError>
            err++;
 80055b8:	7afb      	ldrb	r3, [r7, #11]
 80055ba:	3301      	adds	r3, #1
 80055bc:	72fb      	strb	r3, [r7, #11]
          break;
 80055be:	e06f      	b.n	80056a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00b      	beq.n	80055e4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	7c12      	ldrb	r2, [r2, #16]
 80055d8:	f107 0108 	add.w	r1, r7, #8
 80055dc:	4610      	mov	r0, r2
 80055de:	4798      	blx	r3
 80055e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80055e2:	e05d      	b.n	80056a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80055e4:	6839      	ldr	r1, [r7, #0]
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 fa97 	bl	8005b1a <USBD_CtlError>
            err++;
 80055ec:	7afb      	ldrb	r3, [r7, #11]
 80055ee:	3301      	adds	r3, #1
 80055f0:	72fb      	strb	r3, [r7, #11]
          break;
 80055f2:	e055      	b.n	80056a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00b      	beq.n	8005618 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	7c12      	ldrb	r2, [r2, #16]
 800560c:	f107 0108 	add.w	r1, r7, #8
 8005610:	4610      	mov	r0, r2
 8005612:	4798      	blx	r3
 8005614:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005616:	e043      	b.n	80056a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005618:	6839      	ldr	r1, [r7, #0]
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 fa7d 	bl	8005b1a <USBD_CtlError>
            err++;
 8005620:	7afb      	ldrb	r3, [r7, #11]
 8005622:	3301      	adds	r3, #1
 8005624:	72fb      	strb	r3, [r7, #11]
          break;
 8005626:	e03b      	b.n	80056a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800562e:	695b      	ldr	r3, [r3, #20]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00b      	beq.n	800564c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800563a:	695b      	ldr	r3, [r3, #20]
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	7c12      	ldrb	r2, [r2, #16]
 8005640:	f107 0108 	add.w	r1, r7, #8
 8005644:	4610      	mov	r0, r2
 8005646:	4798      	blx	r3
 8005648:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800564a:	e029      	b.n	80056a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800564c:	6839      	ldr	r1, [r7, #0]
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 fa63 	bl	8005b1a <USBD_CtlError>
            err++;
 8005654:	7afb      	ldrb	r3, [r7, #11]
 8005656:	3301      	adds	r3, #1
 8005658:	72fb      	strb	r3, [r7, #11]
          break;
 800565a:	e021      	b.n	80056a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005662:	699b      	ldr	r3, [r3, #24]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d00b      	beq.n	8005680 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	7c12      	ldrb	r2, [r2, #16]
 8005674:	f107 0108 	add.w	r1, r7, #8
 8005678:	4610      	mov	r0, r2
 800567a:	4798      	blx	r3
 800567c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800567e:	e00f      	b.n	80056a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005680:	6839      	ldr	r1, [r7, #0]
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 fa49 	bl	8005b1a <USBD_CtlError>
            err++;
 8005688:	7afb      	ldrb	r3, [r7, #11]
 800568a:	3301      	adds	r3, #1
 800568c:	72fb      	strb	r3, [r7, #11]
          break;
 800568e:	e007      	b.n	80056a0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005690:	6839      	ldr	r1, [r7, #0]
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 fa41 	bl	8005b1a <USBD_CtlError>
          err++;
 8005698:	7afb      	ldrb	r3, [r7, #11]
 800569a:	3301      	adds	r3, #1
 800569c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800569e:	bf00      	nop
      }
      break;
 80056a0:	e037      	b.n	8005712 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	7c1b      	ldrb	r3, [r3, #16]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d109      	bne.n	80056be <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80056b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056b2:	f107 0208 	add.w	r2, r7, #8
 80056b6:	4610      	mov	r0, r2
 80056b8:	4798      	blx	r3
 80056ba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80056bc:	e029      	b.n	8005712 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80056be:	6839      	ldr	r1, [r7, #0]
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 fa2a 	bl	8005b1a <USBD_CtlError>
        err++;
 80056c6:	7afb      	ldrb	r3, [r7, #11]
 80056c8:	3301      	adds	r3, #1
 80056ca:	72fb      	strb	r3, [r7, #11]
      break;
 80056cc:	e021      	b.n	8005712 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	7c1b      	ldrb	r3, [r3, #16]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d10d      	bne.n	80056f2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80056dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056de:	f107 0208 	add.w	r2, r7, #8
 80056e2:	4610      	mov	r0, r2
 80056e4:	4798      	blx	r3
 80056e6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	3301      	adds	r3, #1
 80056ec:	2207      	movs	r2, #7
 80056ee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80056f0:	e00f      	b.n	8005712 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80056f2:	6839      	ldr	r1, [r7, #0]
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f000 fa10 	bl	8005b1a <USBD_CtlError>
        err++;
 80056fa:	7afb      	ldrb	r3, [r7, #11]
 80056fc:	3301      	adds	r3, #1
 80056fe:	72fb      	strb	r3, [r7, #11]
      break;
 8005700:	e007      	b.n	8005712 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005702:	6839      	ldr	r1, [r7, #0]
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 fa08 	bl	8005b1a <USBD_CtlError>
      err++;
 800570a:	7afb      	ldrb	r3, [r7, #11]
 800570c:	3301      	adds	r3, #1
 800570e:	72fb      	strb	r3, [r7, #11]
      break;
 8005710:	bf00      	nop
  }

  if (err != 0U)
 8005712:	7afb      	ldrb	r3, [r7, #11]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d11e      	bne.n	8005756 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	88db      	ldrh	r3, [r3, #6]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d016      	beq.n	800574e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005720:	893b      	ldrh	r3, [r7, #8]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00e      	beq.n	8005744 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	88da      	ldrh	r2, [r3, #6]
 800572a:	893b      	ldrh	r3, [r7, #8]
 800572c:	4293      	cmp	r3, r2
 800572e:	bf28      	it	cs
 8005730:	4613      	movcs	r3, r2
 8005732:	b29b      	uxth	r3, r3
 8005734:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005736:	893b      	ldrh	r3, [r7, #8]
 8005738:	461a      	mov	r2, r3
 800573a:	68f9      	ldr	r1, [r7, #12]
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 fa69 	bl	8005c14 <USBD_CtlSendData>
 8005742:	e009      	b.n	8005758 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005744:	6839      	ldr	r1, [r7, #0]
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 f9e7 	bl	8005b1a <USBD_CtlError>
 800574c:	e004      	b.n	8005758 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 faba 	bl	8005cc8 <USBD_CtlSendStatus>
 8005754:	e000      	b.n	8005758 <USBD_GetDescriptor+0x2cc>
    return;
 8005756:	bf00      	nop
  }
}
 8005758:	3710      	adds	r7, #16
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop

08005760 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	889b      	ldrh	r3, [r3, #4]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d131      	bne.n	80057d6 <USBD_SetAddress+0x76>
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	88db      	ldrh	r3, [r3, #6]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d12d      	bne.n	80057d6 <USBD_SetAddress+0x76>
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	885b      	ldrh	r3, [r3, #2]
 800577e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005780:	d829      	bhi.n	80057d6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	885b      	ldrh	r3, [r3, #2]
 8005786:	b2db      	uxtb	r3, r3
 8005788:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800578c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2b03      	cmp	r3, #3
 8005798:	d104      	bne.n	80057a4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800579a:	6839      	ldr	r1, [r7, #0]
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f000 f9bc 	bl	8005b1a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057a2:	e01d      	b.n	80057e0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	7bfa      	ldrb	r2, [r7, #15]
 80057a8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80057ac:	7bfb      	ldrb	r3, [r7, #15]
 80057ae:	4619      	mov	r1, r3
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 feeb 	bl	800658c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 fa86 	bl	8005cc8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80057bc:	7bfb      	ldrb	r3, [r7, #15]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d004      	beq.n	80057cc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2202      	movs	r2, #2
 80057c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057ca:	e009      	b.n	80057e0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057d4:	e004      	b.n	80057e0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80057d6:	6839      	ldr	r1, [r7, #0]
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f000 f99e 	bl	8005b1a <USBD_CtlError>
  }
}
 80057de:	bf00      	nop
 80057e0:	bf00      	nop
 80057e2:	3710      	adds	r7, #16
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80057f2:	2300      	movs	r3, #0
 80057f4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	885b      	ldrh	r3, [r3, #2]
 80057fa:	b2da      	uxtb	r2, r3
 80057fc:	4b4e      	ldr	r3, [pc, #312]	@ (8005938 <USBD_SetConfig+0x150>)
 80057fe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005800:	4b4d      	ldr	r3, [pc, #308]	@ (8005938 <USBD_SetConfig+0x150>)
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	2b01      	cmp	r3, #1
 8005806:	d905      	bls.n	8005814 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005808:	6839      	ldr	r1, [r7, #0]
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 f985 	bl	8005b1a <USBD_CtlError>
    return USBD_FAIL;
 8005810:	2303      	movs	r3, #3
 8005812:	e08c      	b.n	800592e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800581a:	b2db      	uxtb	r3, r3
 800581c:	2b02      	cmp	r3, #2
 800581e:	d002      	beq.n	8005826 <USBD_SetConfig+0x3e>
 8005820:	2b03      	cmp	r3, #3
 8005822:	d029      	beq.n	8005878 <USBD_SetConfig+0x90>
 8005824:	e075      	b.n	8005912 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005826:	4b44      	ldr	r3, [pc, #272]	@ (8005938 <USBD_SetConfig+0x150>)
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d020      	beq.n	8005870 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800582e:	4b42      	ldr	r3, [pc, #264]	@ (8005938 <USBD_SetConfig+0x150>)
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	461a      	mov	r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005838:	4b3f      	ldr	r3, [pc, #252]	@ (8005938 <USBD_SetConfig+0x150>)
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	4619      	mov	r1, r3
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f7fe ffe3 	bl	800480a <USBD_SetClassConfig>
 8005844:	4603      	mov	r3, r0
 8005846:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005848:	7bfb      	ldrb	r3, [r7, #15]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d008      	beq.n	8005860 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800584e:	6839      	ldr	r1, [r7, #0]
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 f962 	bl	8005b1a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2202      	movs	r2, #2
 800585a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800585e:	e065      	b.n	800592c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 fa31 	bl	8005cc8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2203      	movs	r2, #3
 800586a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800586e:	e05d      	b.n	800592c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 fa29 	bl	8005cc8 <USBD_CtlSendStatus>
      break;
 8005876:	e059      	b.n	800592c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005878:	4b2f      	ldr	r3, [pc, #188]	@ (8005938 <USBD_SetConfig+0x150>)
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d112      	bne.n	80058a6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2202      	movs	r2, #2
 8005884:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8005888:	4b2b      	ldr	r3, [pc, #172]	@ (8005938 <USBD_SetConfig+0x150>)
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	461a      	mov	r2, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005892:	4b29      	ldr	r3, [pc, #164]	@ (8005938 <USBD_SetConfig+0x150>)
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	4619      	mov	r1, r3
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f7fe ffd2 	bl	8004842 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 fa12 	bl	8005cc8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80058a4:	e042      	b.n	800592c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80058a6:	4b24      	ldr	r3, [pc, #144]	@ (8005938 <USBD_SetConfig+0x150>)
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	461a      	mov	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d02a      	beq.n	800590a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	4619      	mov	r1, r3
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f7fe ffc0 	bl	8004842 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80058c2:	4b1d      	ldr	r3, [pc, #116]	@ (8005938 <USBD_SetConfig+0x150>)
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	461a      	mov	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80058cc:	4b1a      	ldr	r3, [pc, #104]	@ (8005938 <USBD_SetConfig+0x150>)
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	4619      	mov	r1, r3
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f7fe ff99 	bl	800480a <USBD_SetClassConfig>
 80058d8:	4603      	mov	r3, r0
 80058da:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80058dc:	7bfb      	ldrb	r3, [r7, #15]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00f      	beq.n	8005902 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80058e2:	6839      	ldr	r1, [r7, #0]
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f000 f918 	bl	8005b1a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	4619      	mov	r1, r3
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f7fe ffa5 	bl	8004842 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2202      	movs	r2, #2
 80058fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8005900:	e014      	b.n	800592c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 f9e0 	bl	8005cc8 <USBD_CtlSendStatus>
      break;
 8005908:	e010      	b.n	800592c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 f9dc 	bl	8005cc8 <USBD_CtlSendStatus>
      break;
 8005910:	e00c      	b.n	800592c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8005912:	6839      	ldr	r1, [r7, #0]
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 f900 	bl	8005b1a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800591a:	4b07      	ldr	r3, [pc, #28]	@ (8005938 <USBD_SetConfig+0x150>)
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	4619      	mov	r1, r3
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f7fe ff8e 	bl	8004842 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005926:	2303      	movs	r3, #3
 8005928:	73fb      	strb	r3, [r7, #15]
      break;
 800592a:	bf00      	nop
  }

  return ret;
 800592c:	7bfb      	ldrb	r3, [r7, #15]
}
 800592e:	4618      	mov	r0, r3
 8005930:	3710      	adds	r7, #16
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	20000188 	.word	0x20000188

0800593c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	88db      	ldrh	r3, [r3, #6]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d004      	beq.n	8005958 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800594e:	6839      	ldr	r1, [r7, #0]
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 f8e2 	bl	8005b1a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005956:	e023      	b.n	80059a0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800595e:	b2db      	uxtb	r3, r3
 8005960:	2b02      	cmp	r3, #2
 8005962:	dc02      	bgt.n	800596a <USBD_GetConfig+0x2e>
 8005964:	2b00      	cmp	r3, #0
 8005966:	dc03      	bgt.n	8005970 <USBD_GetConfig+0x34>
 8005968:	e015      	b.n	8005996 <USBD_GetConfig+0x5a>
 800596a:	2b03      	cmp	r3, #3
 800596c:	d00b      	beq.n	8005986 <USBD_GetConfig+0x4a>
 800596e:	e012      	b.n	8005996 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	3308      	adds	r3, #8
 800597a:	2201      	movs	r2, #1
 800597c:	4619      	mov	r1, r3
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 f948 	bl	8005c14 <USBD_CtlSendData>
        break;
 8005984:	e00c      	b.n	80059a0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	3304      	adds	r3, #4
 800598a:	2201      	movs	r2, #1
 800598c:	4619      	mov	r1, r3
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 f940 	bl	8005c14 <USBD_CtlSendData>
        break;
 8005994:	e004      	b.n	80059a0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005996:	6839      	ldr	r1, [r7, #0]
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 f8be 	bl	8005b1a <USBD_CtlError>
        break;
 800599e:	bf00      	nop
}
 80059a0:	bf00      	nop
 80059a2:	3708      	adds	r7, #8
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	3b01      	subs	r3, #1
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d81e      	bhi.n	80059fe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	88db      	ldrh	r3, [r3, #6]
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	d004      	beq.n	80059d2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80059c8:	6839      	ldr	r1, [r7, #0]
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 f8a5 	bl	8005b1a <USBD_CtlError>
        break;
 80059d0:	e01a      	b.n	8005a08 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2201      	movs	r2, #1
 80059d6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d005      	beq.n	80059ee <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	f043 0202 	orr.w	r2, r3, #2
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	330c      	adds	r3, #12
 80059f2:	2202      	movs	r2, #2
 80059f4:	4619      	mov	r1, r3
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 f90c 	bl	8005c14 <USBD_CtlSendData>
      break;
 80059fc:	e004      	b.n	8005a08 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80059fe:	6839      	ldr	r1, [r7, #0]
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 f88a 	bl	8005b1a <USBD_CtlError>
      break;
 8005a06:	bf00      	nop
  }
}
 8005a08:	bf00      	nop
 8005a0a:	3708      	adds	r7, #8
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	885b      	ldrh	r3, [r3, #2]
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d107      	bne.n	8005a32 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2201      	movs	r2, #1
 8005a26:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 f94c 	bl	8005cc8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8005a30:	e013      	b.n	8005a5a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	885b      	ldrh	r3, [r3, #2]
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d10b      	bne.n	8005a52 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	889b      	ldrh	r3, [r3, #4]
 8005a3e:	0a1b      	lsrs	r3, r3, #8
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	b2da      	uxtb	r2, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 f93c 	bl	8005cc8 <USBD_CtlSendStatus>
}
 8005a50:	e003      	b.n	8005a5a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8005a52:	6839      	ldr	r1, [r7, #0]
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 f860 	bl	8005b1a <USBD_CtlError>
}
 8005a5a:	bf00      	nop
 8005a5c:	3708      	adds	r7, #8
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}

08005a62 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a62:	b580      	push	{r7, lr}
 8005a64:	b082      	sub	sp, #8
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
 8005a6a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	3b01      	subs	r3, #1
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	d80b      	bhi.n	8005a92 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	885b      	ldrh	r3, [r3, #2]
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d10c      	bne.n	8005a9c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 f91c 	bl	8005cc8 <USBD_CtlSendStatus>
      }
      break;
 8005a90:	e004      	b.n	8005a9c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005a92:	6839      	ldr	r1, [r7, #0]
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 f840 	bl	8005b1a <USBD_CtlError>
      break;
 8005a9a:	e000      	b.n	8005a9e <USBD_ClrFeature+0x3c>
      break;
 8005a9c:	bf00      	nop
  }
}
 8005a9e:	bf00      	nop
 8005aa0:	3708      	adds	r7, #8
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}

08005aa6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005aa6:	b580      	push	{r7, lr}
 8005aa8:	b084      	sub	sp, #16
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
 8005aae:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	781a      	ldrb	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	3301      	adds	r3, #1
 8005ac0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	781a      	ldrb	r2, [r3, #0]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	3301      	adds	r3, #1
 8005ace:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f7ff fa40 	bl	8004f56 <SWAPBYTE>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	461a      	mov	r2, r3
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005aea:	68f8      	ldr	r0, [r7, #12]
 8005aec:	f7ff fa33 	bl	8004f56 <SWAPBYTE>
 8005af0:	4603      	mov	r3, r0
 8005af2:	461a      	mov	r2, r3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	3301      	adds	r3, #1
 8005afc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	3301      	adds	r3, #1
 8005b02:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005b04:	68f8      	ldr	r0, [r7, #12]
 8005b06:	f7ff fa26 	bl	8004f56 <SWAPBYTE>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	80da      	strh	r2, [r3, #6]
}
 8005b12:	bf00      	nop
 8005b14:	3710      	adds	r7, #16
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}

08005b1a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b1a:	b580      	push	{r7, lr}
 8005b1c:	b082      	sub	sp, #8
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
 8005b22:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005b24:	2180      	movs	r1, #128	@ 0x80
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 fcc6 	bl	80064b8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005b2c:	2100      	movs	r1, #0
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 fcc2 	bl	80064b8 <USBD_LL_StallEP>
}
 8005b34:	bf00      	nop
 8005b36:	3708      	adds	r7, #8
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b086      	sub	sp, #24
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d042      	beq.n	8005bd8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8005b56:	6938      	ldr	r0, [r7, #16]
 8005b58:	f000 f842 	bl	8005be0 <USBD_GetLen>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	3301      	adds	r3, #1
 8005b60:	005b      	lsls	r3, r3, #1
 8005b62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b66:	d808      	bhi.n	8005b7a <USBD_GetString+0x3e>
 8005b68:	6938      	ldr	r0, [r7, #16]
 8005b6a:	f000 f839 	bl	8005be0 <USBD_GetLen>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	3301      	adds	r3, #1
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	005b      	lsls	r3, r3, #1
 8005b76:	b29a      	uxth	r2, r3
 8005b78:	e001      	b.n	8005b7e <USBD_GetString+0x42>
 8005b7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005b82:	7dfb      	ldrb	r3, [r7, #23]
 8005b84:	68ba      	ldr	r2, [r7, #8]
 8005b86:	4413      	add	r3, r2
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	7812      	ldrb	r2, [r2, #0]
 8005b8c:	701a      	strb	r2, [r3, #0]
  idx++;
 8005b8e:	7dfb      	ldrb	r3, [r7, #23]
 8005b90:	3301      	adds	r3, #1
 8005b92:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005b94:	7dfb      	ldrb	r3, [r7, #23]
 8005b96:	68ba      	ldr	r2, [r7, #8]
 8005b98:	4413      	add	r3, r2
 8005b9a:	2203      	movs	r2, #3
 8005b9c:	701a      	strb	r2, [r3, #0]
  idx++;
 8005b9e:	7dfb      	ldrb	r3, [r7, #23]
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005ba4:	e013      	b.n	8005bce <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8005ba6:	7dfb      	ldrb	r3, [r7, #23]
 8005ba8:	68ba      	ldr	r2, [r7, #8]
 8005baa:	4413      	add	r3, r2
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	7812      	ldrb	r2, [r2, #0]
 8005bb0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	613b      	str	r3, [r7, #16]
    idx++;
 8005bb8:	7dfb      	ldrb	r3, [r7, #23]
 8005bba:	3301      	adds	r3, #1
 8005bbc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005bbe:	7dfb      	ldrb	r3, [r7, #23]
 8005bc0:	68ba      	ldr	r2, [r7, #8]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	701a      	strb	r2, [r3, #0]
    idx++;
 8005bc8:	7dfb      	ldrb	r3, [r7, #23]
 8005bca:	3301      	adds	r3, #1
 8005bcc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d1e7      	bne.n	8005ba6 <USBD_GetString+0x6a>
 8005bd6:	e000      	b.n	8005bda <USBD_GetString+0x9e>
    return;
 8005bd8:	bf00      	nop
  }
}
 8005bda:	3718      	adds	r7, #24
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005be8:	2300      	movs	r3, #0
 8005bea:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005bf0:	e005      	b.n	8005bfe <USBD_GetLen+0x1e>
  {
    len++;
 8005bf2:	7bfb      	ldrb	r3, [r7, #15]
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1f5      	bne.n	8005bf2 <USBD_GetLen+0x12>
  }

  return len;
 8005c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3714      	adds	r7, #20
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2202      	movs	r2, #2
 8005c24:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	68ba      	ldr	r2, [r7, #8]
 8005c38:	2100      	movs	r1, #0
 8005c3a:	68f8      	ldr	r0, [r7, #12]
 8005c3c:	f000 fcc5 	bl	80065ca <USBD_LL_Transmit>

  return USBD_OK;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3710      	adds	r7, #16
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005c4a:	b580      	push	{r7, lr}
 8005c4c:	b084      	sub	sp, #16
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	60f8      	str	r0, [r7, #12]
 8005c52:	60b9      	str	r1, [r7, #8]
 8005c54:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	68ba      	ldr	r2, [r7, #8]
 8005c5a:	2100      	movs	r1, #0
 8005c5c:	68f8      	ldr	r0, [r7, #12]
 8005c5e:	f000 fcb4 	bl	80065ca <USBD_LL_Transmit>

  return USBD_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3710      	adds	r7, #16
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2203      	movs	r2, #3
 8005c7c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	68ba      	ldr	r2, [r7, #8]
 8005c94:	2100      	movs	r1, #0
 8005c96:	68f8      	ldr	r0, [r7, #12]
 8005c98:	f000 fcb8 	bl	800660c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b084      	sub	sp, #16
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	60f8      	str	r0, [r7, #12]
 8005cae:	60b9      	str	r1, [r7, #8]
 8005cb0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	68ba      	ldr	r2, [r7, #8]
 8005cb6:	2100      	movs	r1, #0
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	f000 fca7 	bl	800660c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005cbe:	2300      	movs	r3, #0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3710      	adds	r7, #16
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2204      	movs	r2, #4
 8005cd4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005cd8:	2300      	movs	r3, #0
 8005cda:	2200      	movs	r2, #0
 8005cdc:	2100      	movs	r1, #0
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 fc73 	bl	80065ca <USBD_LL_Transmit>

  return USBD_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3708      	adds	r7, #8
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}

08005cee <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b082      	sub	sp, #8
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2205      	movs	r2, #5
 8005cfa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005cfe:	2300      	movs	r3, #0
 8005d00:	2200      	movs	r2, #0
 8005d02:	2100      	movs	r1, #0
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 fc81 	bl	800660c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3708      	adds	r7, #8
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005d18:	2200      	movs	r2, #0
 8005d1a:	4912      	ldr	r1, [pc, #72]	@ (8005d64 <MX_USB_DEVICE_Init+0x50>)
 8005d1c:	4812      	ldr	r0, [pc, #72]	@ (8005d68 <MX_USB_DEVICE_Init+0x54>)
 8005d1e:	f7fe fcf7 	bl	8004710 <USBD_Init>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d001      	beq.n	8005d2c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005d28:	f7fa fe56 	bl	80009d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005d2c:	490f      	ldr	r1, [pc, #60]	@ (8005d6c <MX_USB_DEVICE_Init+0x58>)
 8005d2e:	480e      	ldr	r0, [pc, #56]	@ (8005d68 <MX_USB_DEVICE_Init+0x54>)
 8005d30:	f7fe fd1e 	bl	8004770 <USBD_RegisterClass>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d001      	beq.n	8005d3e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005d3a:	f7fa fe4d 	bl	80009d8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005d3e:	490c      	ldr	r1, [pc, #48]	@ (8005d70 <MX_USB_DEVICE_Init+0x5c>)
 8005d40:	4809      	ldr	r0, [pc, #36]	@ (8005d68 <MX_USB_DEVICE_Init+0x54>)
 8005d42:	f7fe fc55 	bl	80045f0 <USBD_CDC_RegisterInterface>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d001      	beq.n	8005d50 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005d4c:	f7fa fe44 	bl	80009d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005d50:	4805      	ldr	r0, [pc, #20]	@ (8005d68 <MX_USB_DEVICE_Init+0x54>)
 8005d52:	f7fe fd43 	bl	80047dc <USBD_Start>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d001      	beq.n	8005d60 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005d5c:	f7fa fe3c 	bl	80009d8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005d60:	bf00      	nop
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	200000b0 	.word	0x200000b0
 8005d68:	2000018c 	.word	0x2000018c
 8005d6c:	2000001c 	.word	0x2000001c
 8005d70:	2000009c 	.word	0x2000009c

08005d74 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005d78:	2200      	movs	r2, #0
 8005d7a:	4905      	ldr	r1, [pc, #20]	@ (8005d90 <CDC_Init_FS+0x1c>)
 8005d7c:	4805      	ldr	r0, [pc, #20]	@ (8005d94 <CDC_Init_FS+0x20>)
 8005d7e:	f7fe fc51 	bl	8004624 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005d82:	4905      	ldr	r1, [pc, #20]	@ (8005d98 <CDC_Init_FS+0x24>)
 8005d84:	4803      	ldr	r0, [pc, #12]	@ (8005d94 <CDC_Init_FS+0x20>)
 8005d86:	f7fe fc6f 	bl	8004668 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8005d8a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	20000c68 	.word	0x20000c68
 8005d94:	2000018c 	.word	0x2000018c
 8005d98:	20000468 	.word	0x20000468

08005d9c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005da0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	4603      	mov	r3, r0
 8005db4:	6039      	str	r1, [r7, #0]
 8005db6:	71fb      	strb	r3, [r7, #7]
 8005db8:	4613      	mov	r3, r2
 8005dba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005dbc:	79fb      	ldrb	r3, [r7, #7]
 8005dbe:	2b23      	cmp	r3, #35	@ 0x23
 8005dc0:	d84a      	bhi.n	8005e58 <CDC_Control_FS+0xac>
 8005dc2:	a201      	add	r2, pc, #4	@ (adr r2, 8005dc8 <CDC_Control_FS+0x1c>)
 8005dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc8:	08005e59 	.word	0x08005e59
 8005dcc:	08005e59 	.word	0x08005e59
 8005dd0:	08005e59 	.word	0x08005e59
 8005dd4:	08005e59 	.word	0x08005e59
 8005dd8:	08005e59 	.word	0x08005e59
 8005ddc:	08005e59 	.word	0x08005e59
 8005de0:	08005e59 	.word	0x08005e59
 8005de4:	08005e59 	.word	0x08005e59
 8005de8:	08005e59 	.word	0x08005e59
 8005dec:	08005e59 	.word	0x08005e59
 8005df0:	08005e59 	.word	0x08005e59
 8005df4:	08005e59 	.word	0x08005e59
 8005df8:	08005e59 	.word	0x08005e59
 8005dfc:	08005e59 	.word	0x08005e59
 8005e00:	08005e59 	.word	0x08005e59
 8005e04:	08005e59 	.word	0x08005e59
 8005e08:	08005e59 	.word	0x08005e59
 8005e0c:	08005e59 	.word	0x08005e59
 8005e10:	08005e59 	.word	0x08005e59
 8005e14:	08005e59 	.word	0x08005e59
 8005e18:	08005e59 	.word	0x08005e59
 8005e1c:	08005e59 	.word	0x08005e59
 8005e20:	08005e59 	.word	0x08005e59
 8005e24:	08005e59 	.word	0x08005e59
 8005e28:	08005e59 	.word	0x08005e59
 8005e2c:	08005e59 	.word	0x08005e59
 8005e30:	08005e59 	.word	0x08005e59
 8005e34:	08005e59 	.word	0x08005e59
 8005e38:	08005e59 	.word	0x08005e59
 8005e3c:	08005e59 	.word	0x08005e59
 8005e40:	08005e59 	.word	0x08005e59
 8005e44:	08005e59 	.word	0x08005e59
 8005e48:	08005e59 	.word	0x08005e59
 8005e4c:	08005e59 	.word	0x08005e59
 8005e50:	08005e59 	.word	0x08005e59
 8005e54:	08005e59 	.word	0x08005e59
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8005e58:	bf00      	nop
  }

  return (USBD_OK);
 8005e5a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	370c      	adds	r7, #12
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005e72:	6879      	ldr	r1, [r7, #4]
 8005e74:	4805      	ldr	r0, [pc, #20]	@ (8005e8c <CDC_Receive_FS+0x24>)
 8005e76:	f7fe fbf7 	bl	8004668 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005e7a:	4804      	ldr	r0, [pc, #16]	@ (8005e8c <CDC_Receive_FS+0x24>)
 8005e7c:	f7fe fc12 	bl	80046a4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8005e80:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3708      	adds	r7, #8
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	2000018c 	.word	0x2000018c

08005e90 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b087      	sub	sp, #28
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8005ea2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	371c      	adds	r7, #28
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr
	...

08005eb4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	4603      	mov	r3, r0
 8005ebc:	6039      	str	r1, [r7, #0]
 8005ebe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	2212      	movs	r2, #18
 8005ec4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005ec6:	4b03      	ldr	r3, [pc, #12]	@ (8005ed4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr
 8005ed4:	200000cc 	.word	0x200000cc

08005ed8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	4603      	mov	r3, r0
 8005ee0:	6039      	str	r1, [r7, #0]
 8005ee2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	2204      	movs	r2, #4
 8005ee8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005eea:	4b03      	ldr	r3, [pc, #12]	@ (8005ef8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	370c      	adds	r7, #12
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr
 8005ef8:	200000e0 	.word	0x200000e0

08005efc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	4603      	mov	r3, r0
 8005f04:	6039      	str	r1, [r7, #0]
 8005f06:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005f08:	79fb      	ldrb	r3, [r7, #7]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d105      	bne.n	8005f1a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005f0e:	683a      	ldr	r2, [r7, #0]
 8005f10:	4907      	ldr	r1, [pc, #28]	@ (8005f30 <USBD_FS_ProductStrDescriptor+0x34>)
 8005f12:	4808      	ldr	r0, [pc, #32]	@ (8005f34 <USBD_FS_ProductStrDescriptor+0x38>)
 8005f14:	f7ff fe12 	bl	8005b3c <USBD_GetString>
 8005f18:	e004      	b.n	8005f24 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005f1a:	683a      	ldr	r2, [r7, #0]
 8005f1c:	4904      	ldr	r1, [pc, #16]	@ (8005f30 <USBD_FS_ProductStrDescriptor+0x34>)
 8005f1e:	4805      	ldr	r0, [pc, #20]	@ (8005f34 <USBD_FS_ProductStrDescriptor+0x38>)
 8005f20:	f7ff fe0c 	bl	8005b3c <USBD_GetString>
  }
  return USBD_StrDesc;
 8005f24:	4b02      	ldr	r3, [pc, #8]	@ (8005f30 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3708      	adds	r7, #8
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	20001468 	.word	0x20001468
 8005f34:	08007084 	.word	0x08007084

08005f38 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b082      	sub	sp, #8
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	4603      	mov	r3, r0
 8005f40:	6039      	str	r1, [r7, #0]
 8005f42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005f44:	683a      	ldr	r2, [r7, #0]
 8005f46:	4904      	ldr	r1, [pc, #16]	@ (8005f58 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005f48:	4804      	ldr	r0, [pc, #16]	@ (8005f5c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005f4a:	f7ff fdf7 	bl	8005b3c <USBD_GetString>
  return USBD_StrDesc;
 8005f4e:	4b02      	ldr	r3, [pc, #8]	@ (8005f58 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3708      	adds	r7, #8
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	20001468 	.word	0x20001468
 8005f5c:	0800709c 	.word	0x0800709c

08005f60 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	4603      	mov	r3, r0
 8005f68:	6039      	str	r1, [r7, #0]
 8005f6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	221a      	movs	r2, #26
 8005f70:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005f72:	f000 f843 	bl	8005ffc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005f76:	4b02      	ldr	r3, [pc, #8]	@ (8005f80 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3708      	adds	r7, #8
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	200000e4 	.word	0x200000e4

08005f84 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	6039      	str	r1, [r7, #0]
 8005f8e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005f90:	79fb      	ldrb	r3, [r7, #7]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d105      	bne.n	8005fa2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005f96:	683a      	ldr	r2, [r7, #0]
 8005f98:	4907      	ldr	r1, [pc, #28]	@ (8005fb8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005f9a:	4808      	ldr	r0, [pc, #32]	@ (8005fbc <USBD_FS_ConfigStrDescriptor+0x38>)
 8005f9c:	f7ff fdce 	bl	8005b3c <USBD_GetString>
 8005fa0:	e004      	b.n	8005fac <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005fa2:	683a      	ldr	r2, [r7, #0]
 8005fa4:	4904      	ldr	r1, [pc, #16]	@ (8005fb8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005fa6:	4805      	ldr	r0, [pc, #20]	@ (8005fbc <USBD_FS_ConfigStrDescriptor+0x38>)
 8005fa8:	f7ff fdc8 	bl	8005b3c <USBD_GetString>
  }
  return USBD_StrDesc;
 8005fac:	4b02      	ldr	r3, [pc, #8]	@ (8005fb8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3708      	adds	r7, #8
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	20001468 	.word	0x20001468
 8005fbc:	080070b0 	.word	0x080070b0

08005fc0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b082      	sub	sp, #8
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	6039      	str	r1, [r7, #0]
 8005fca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005fcc:	79fb      	ldrb	r3, [r7, #7]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d105      	bne.n	8005fde <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005fd2:	683a      	ldr	r2, [r7, #0]
 8005fd4:	4907      	ldr	r1, [pc, #28]	@ (8005ff4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005fd6:	4808      	ldr	r0, [pc, #32]	@ (8005ff8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005fd8:	f7ff fdb0 	bl	8005b3c <USBD_GetString>
 8005fdc:	e004      	b.n	8005fe8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005fde:	683a      	ldr	r2, [r7, #0]
 8005fe0:	4904      	ldr	r1, [pc, #16]	@ (8005ff4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005fe2:	4805      	ldr	r0, [pc, #20]	@ (8005ff8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005fe4:	f7ff fdaa 	bl	8005b3c <USBD_GetString>
  }
  return USBD_StrDesc;
 8005fe8:	4b02      	ldr	r3, [pc, #8]	@ (8005ff4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3708      	adds	r7, #8
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	20001468 	.word	0x20001468
 8005ff8:	080070bc 	.word	0x080070bc

08005ffc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006002:	4b0f      	ldr	r3, [pc, #60]	@ (8006040 <Get_SerialNum+0x44>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006008:	4b0e      	ldr	r3, [pc, #56]	@ (8006044 <Get_SerialNum+0x48>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800600e:	4b0e      	ldr	r3, [pc, #56]	@ (8006048 <Get_SerialNum+0x4c>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4413      	add	r3, r2
 800601a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d009      	beq.n	8006036 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006022:	2208      	movs	r2, #8
 8006024:	4909      	ldr	r1, [pc, #36]	@ (800604c <Get_SerialNum+0x50>)
 8006026:	68f8      	ldr	r0, [r7, #12]
 8006028:	f000 f814 	bl	8006054 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800602c:	2204      	movs	r2, #4
 800602e:	4908      	ldr	r1, [pc, #32]	@ (8006050 <Get_SerialNum+0x54>)
 8006030:	68b8      	ldr	r0, [r7, #8]
 8006032:	f000 f80f 	bl	8006054 <IntToUnicode>
  }
}
 8006036:	bf00      	nop
 8006038:	3710      	adds	r7, #16
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	1fff7a10 	.word	0x1fff7a10
 8006044:	1fff7a14 	.word	0x1fff7a14
 8006048:	1fff7a18 	.word	0x1fff7a18
 800604c:	200000e6 	.word	0x200000e6
 8006050:	200000f6 	.word	0x200000f6

08006054 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006054:	b480      	push	{r7}
 8006056:	b087      	sub	sp, #28
 8006058:	af00      	add	r7, sp, #0
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	4613      	mov	r3, r2
 8006060:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006062:	2300      	movs	r3, #0
 8006064:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006066:	2300      	movs	r3, #0
 8006068:	75fb      	strb	r3, [r7, #23]
 800606a:	e027      	b.n	80060bc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	0f1b      	lsrs	r3, r3, #28
 8006070:	2b09      	cmp	r3, #9
 8006072:	d80b      	bhi.n	800608c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	0f1b      	lsrs	r3, r3, #28
 8006078:	b2da      	uxtb	r2, r3
 800607a:	7dfb      	ldrb	r3, [r7, #23]
 800607c:	005b      	lsls	r3, r3, #1
 800607e:	4619      	mov	r1, r3
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	440b      	add	r3, r1
 8006084:	3230      	adds	r2, #48	@ 0x30
 8006086:	b2d2      	uxtb	r2, r2
 8006088:	701a      	strb	r2, [r3, #0]
 800608a:	e00a      	b.n	80060a2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	0f1b      	lsrs	r3, r3, #28
 8006090:	b2da      	uxtb	r2, r3
 8006092:	7dfb      	ldrb	r3, [r7, #23]
 8006094:	005b      	lsls	r3, r3, #1
 8006096:	4619      	mov	r1, r3
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	440b      	add	r3, r1
 800609c:	3237      	adds	r2, #55	@ 0x37
 800609e:	b2d2      	uxtb	r2, r2
 80060a0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	011b      	lsls	r3, r3, #4
 80060a6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80060a8:	7dfb      	ldrb	r3, [r7, #23]
 80060aa:	005b      	lsls	r3, r3, #1
 80060ac:	3301      	adds	r3, #1
 80060ae:	68ba      	ldr	r2, [r7, #8]
 80060b0:	4413      	add	r3, r2
 80060b2:	2200      	movs	r2, #0
 80060b4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80060b6:	7dfb      	ldrb	r3, [r7, #23]
 80060b8:	3301      	adds	r3, #1
 80060ba:	75fb      	strb	r3, [r7, #23]
 80060bc:	7dfa      	ldrb	r2, [r7, #23]
 80060be:	79fb      	ldrb	r3, [r7, #7]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d3d3      	bcc.n	800606c <IntToUnicode+0x18>
  }
}
 80060c4:	bf00      	nop
 80060c6:	bf00      	nop
 80060c8:	371c      	adds	r7, #28
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr
	...

080060d4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b08a      	sub	sp, #40	@ 0x28
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060dc:	f107 0314 	add.w	r3, r7, #20
 80060e0:	2200      	movs	r2, #0
 80060e2:	601a      	str	r2, [r3, #0]
 80060e4:	605a      	str	r2, [r3, #4]
 80060e6:	609a      	str	r2, [r3, #8]
 80060e8:	60da      	str	r2, [r3, #12]
 80060ea:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80060f4:	d13a      	bne.n	800616c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060f6:	2300      	movs	r3, #0
 80060f8:	613b      	str	r3, [r7, #16]
 80060fa:	4b1e      	ldr	r3, [pc, #120]	@ (8006174 <HAL_PCD_MspInit+0xa0>)
 80060fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060fe:	4a1d      	ldr	r2, [pc, #116]	@ (8006174 <HAL_PCD_MspInit+0xa0>)
 8006100:	f043 0301 	orr.w	r3, r3, #1
 8006104:	6313      	str	r3, [r2, #48]	@ 0x30
 8006106:	4b1b      	ldr	r3, [pc, #108]	@ (8006174 <HAL_PCD_MspInit+0xa0>)
 8006108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800610a:	f003 0301 	and.w	r3, r3, #1
 800610e:	613b      	str	r3, [r7, #16]
 8006110:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006112:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8006116:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006118:	2302      	movs	r3, #2
 800611a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800611c:	2300      	movs	r3, #0
 800611e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006120:	2303      	movs	r3, #3
 8006122:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006124:	230a      	movs	r3, #10
 8006126:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006128:	f107 0314 	add.w	r3, r7, #20
 800612c:	4619      	mov	r1, r3
 800612e:	4812      	ldr	r0, [pc, #72]	@ (8006178 <HAL_PCD_MspInit+0xa4>)
 8006130:	f7fa ff1c 	bl	8000f6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006134:	4b0f      	ldr	r3, [pc, #60]	@ (8006174 <HAL_PCD_MspInit+0xa0>)
 8006136:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006138:	4a0e      	ldr	r2, [pc, #56]	@ (8006174 <HAL_PCD_MspInit+0xa0>)
 800613a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800613e:	6353      	str	r3, [r2, #52]	@ 0x34
 8006140:	2300      	movs	r3, #0
 8006142:	60fb      	str	r3, [r7, #12]
 8006144:	4b0b      	ldr	r3, [pc, #44]	@ (8006174 <HAL_PCD_MspInit+0xa0>)
 8006146:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006148:	4a0a      	ldr	r2, [pc, #40]	@ (8006174 <HAL_PCD_MspInit+0xa0>)
 800614a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800614e:	6453      	str	r3, [r2, #68]	@ 0x44
 8006150:	4b08      	ldr	r3, [pc, #32]	@ (8006174 <HAL_PCD_MspInit+0xa0>)
 8006152:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006154:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006158:	60fb      	str	r3, [r7, #12]
 800615a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800615c:	2200      	movs	r2, #0
 800615e:	2100      	movs	r1, #0
 8006160:	2043      	movs	r0, #67	@ 0x43
 8006162:	f7fa fecc 	bl	8000efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006166:	2043      	movs	r0, #67	@ 0x43
 8006168:	f7fa fee5 	bl	8000f36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800616c:	bf00      	nop
 800616e:	3728      	adds	r7, #40	@ 0x28
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}
 8006174:	40023800 	.word	0x40023800
 8006178:	40020000 	.word	0x40020000

0800617c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b082      	sub	sp, #8
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006190:	4619      	mov	r1, r3
 8006192:	4610      	mov	r0, r2
 8006194:	f7fe fb6f 	bl	8004876 <USBD_LL_SetupStage>
}
 8006198:	bf00      	nop
 800619a:	3708      	adds	r7, #8
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	460b      	mov	r3, r1
 80061aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80061b2:	78fa      	ldrb	r2, [r7, #3]
 80061b4:	6879      	ldr	r1, [r7, #4]
 80061b6:	4613      	mov	r3, r2
 80061b8:	00db      	lsls	r3, r3, #3
 80061ba:	4413      	add	r3, r2
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	440b      	add	r3, r1
 80061c0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	78fb      	ldrb	r3, [r7, #3]
 80061c8:	4619      	mov	r1, r3
 80061ca:	f7fe fba9 	bl	8004920 <USBD_LL_DataOutStage>
}
 80061ce:	bf00      	nop
 80061d0:	3708      	adds	r7, #8
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80061d6:	b580      	push	{r7, lr}
 80061d8:	b082      	sub	sp, #8
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
 80061de:	460b      	mov	r3, r1
 80061e0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80061e8:	78fa      	ldrb	r2, [r7, #3]
 80061ea:	6879      	ldr	r1, [r7, #4]
 80061ec:	4613      	mov	r3, r2
 80061ee:	00db      	lsls	r3, r3, #3
 80061f0:	4413      	add	r3, r2
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	440b      	add	r3, r1
 80061f6:	3320      	adds	r3, #32
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	78fb      	ldrb	r3, [r7, #3]
 80061fc:	4619      	mov	r1, r3
 80061fe:	f7fe fc42 	bl	8004a86 <USBD_LL_DataInStage>
}
 8006202:	bf00      	nop
 8006204:	3708      	adds	r7, #8
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800620a:	b580      	push	{r7, lr}
 800620c:	b082      	sub	sp, #8
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006218:	4618      	mov	r0, r3
 800621a:	f7fe fd7c 	bl	8004d16 <USBD_LL_SOF>
}
 800621e:	bf00      	nop
 8006220:	3708      	adds	r7, #8
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006226:	b580      	push	{r7, lr}
 8006228:	b084      	sub	sp, #16
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800622e:	2301      	movs	r3, #1
 8006230:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	79db      	ldrb	r3, [r3, #7]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d102      	bne.n	8006240 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800623a:	2300      	movs	r3, #0
 800623c:	73fb      	strb	r3, [r7, #15]
 800623e:	e008      	b.n	8006252 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	79db      	ldrb	r3, [r3, #7]
 8006244:	2b02      	cmp	r3, #2
 8006246:	d102      	bne.n	800624e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006248:	2301      	movs	r3, #1
 800624a:	73fb      	strb	r3, [r7, #15]
 800624c:	e001      	b.n	8006252 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800624e:	f7fa fbc3 	bl	80009d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006258:	7bfa      	ldrb	r2, [r7, #15]
 800625a:	4611      	mov	r1, r2
 800625c:	4618      	mov	r0, r3
 800625e:	f7fe fd16 	bl	8004c8e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006268:	4618      	mov	r0, r3
 800626a:	f7fe fcbe 	bl	8004bea <USBD_LL_Reset>
}
 800626e:	bf00      	nop
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
	...

08006278 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006286:	4618      	mov	r0, r3
 8006288:	f7fe fd11 	bl	8004cae <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	6812      	ldr	r2, [r2, #0]
 800629a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800629e:	f043 0301 	orr.w	r3, r3, #1
 80062a2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	7adb      	ldrb	r3, [r3, #11]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d005      	beq.n	80062b8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80062ac:	4b04      	ldr	r3, [pc, #16]	@ (80062c0 <HAL_PCD_SuspendCallback+0x48>)
 80062ae:	691b      	ldr	r3, [r3, #16]
 80062b0:	4a03      	ldr	r2, [pc, #12]	@ (80062c0 <HAL_PCD_SuspendCallback+0x48>)
 80062b2:	f043 0306 	orr.w	r3, r3, #6
 80062b6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80062b8:	bf00      	nop
 80062ba:	3708      	adds	r7, #8
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	e000ed00 	.word	0xe000ed00

080062c4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b082      	sub	sp, #8
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80062d2:	4618      	mov	r0, r3
 80062d4:	f7fe fd07 	bl	8004ce6 <USBD_LL_Resume>
}
 80062d8:	bf00      	nop
 80062da:	3708      	adds	r7, #8
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	460b      	mov	r3, r1
 80062ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80062f2:	78fa      	ldrb	r2, [r7, #3]
 80062f4:	4611      	mov	r1, r2
 80062f6:	4618      	mov	r0, r3
 80062f8:	f7fe fd5f 	bl	8004dba <USBD_LL_IsoOUTIncomplete>
}
 80062fc:	bf00      	nop
 80062fe:	3708      	adds	r7, #8
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	460b      	mov	r3, r1
 800630e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006316:	78fa      	ldrb	r2, [r7, #3]
 8006318:	4611      	mov	r1, r2
 800631a:	4618      	mov	r0, r3
 800631c:	f7fe fd1b 	bl	8004d56 <USBD_LL_IsoINIncomplete>
}
 8006320:	bf00      	nop
 8006322:	3708      	adds	r7, #8
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b082      	sub	sp, #8
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006336:	4618      	mov	r0, r3
 8006338:	f7fe fd71 	bl	8004e1e <USBD_LL_DevConnected>
}
 800633c:	bf00      	nop
 800633e:	3708      	adds	r7, #8
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006352:	4618      	mov	r0, r3
 8006354:	f7fe fd6e 	bl	8004e34 <USBD_LL_DevDisconnected>
}
 8006358:	bf00      	nop
 800635a:	3708      	adds	r7, #8
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b082      	sub	sp, #8
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d13c      	bne.n	80063ea <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006370:	4a20      	ldr	r2, [pc, #128]	@ (80063f4 <USBD_LL_Init+0x94>)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a1e      	ldr	r2, [pc, #120]	@ (80063f4 <USBD_LL_Init+0x94>)
 800637c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006380:	4b1c      	ldr	r3, [pc, #112]	@ (80063f4 <USBD_LL_Init+0x94>)
 8006382:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8006386:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006388:	4b1a      	ldr	r3, [pc, #104]	@ (80063f4 <USBD_LL_Init+0x94>)
 800638a:	2204      	movs	r2, #4
 800638c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800638e:	4b19      	ldr	r3, [pc, #100]	@ (80063f4 <USBD_LL_Init+0x94>)
 8006390:	2202      	movs	r2, #2
 8006392:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006394:	4b17      	ldr	r3, [pc, #92]	@ (80063f4 <USBD_LL_Init+0x94>)
 8006396:	2200      	movs	r2, #0
 8006398:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800639a:	4b16      	ldr	r3, [pc, #88]	@ (80063f4 <USBD_LL_Init+0x94>)
 800639c:	2202      	movs	r2, #2
 800639e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80063a0:	4b14      	ldr	r3, [pc, #80]	@ (80063f4 <USBD_LL_Init+0x94>)
 80063a2:	2200      	movs	r2, #0
 80063a4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80063a6:	4b13      	ldr	r3, [pc, #76]	@ (80063f4 <USBD_LL_Init+0x94>)
 80063a8:	2200      	movs	r2, #0
 80063aa:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80063ac:	4b11      	ldr	r3, [pc, #68]	@ (80063f4 <USBD_LL_Init+0x94>)
 80063ae:	2200      	movs	r2, #0
 80063b0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80063b2:	4b10      	ldr	r3, [pc, #64]	@ (80063f4 <USBD_LL_Init+0x94>)
 80063b4:	2200      	movs	r2, #0
 80063b6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80063b8:	4b0e      	ldr	r3, [pc, #56]	@ (80063f4 <USBD_LL_Init+0x94>)
 80063ba:	2200      	movs	r2, #0
 80063bc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80063be:	480d      	ldr	r0, [pc, #52]	@ (80063f4 <USBD_LL_Init+0x94>)
 80063c0:	f7fa ff70 	bl	80012a4 <HAL_PCD_Init>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d001      	beq.n	80063ce <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80063ca:	f7fa fb05 	bl	80009d8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80063ce:	2180      	movs	r1, #128	@ 0x80
 80063d0:	4808      	ldr	r0, [pc, #32]	@ (80063f4 <USBD_LL_Init+0x94>)
 80063d2:	f7fc f99c 	bl	800270e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80063d6:	2240      	movs	r2, #64	@ 0x40
 80063d8:	2100      	movs	r1, #0
 80063da:	4806      	ldr	r0, [pc, #24]	@ (80063f4 <USBD_LL_Init+0x94>)
 80063dc:	f7fc f950 	bl	8002680 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80063e0:	2280      	movs	r2, #128	@ 0x80
 80063e2:	2101      	movs	r1, #1
 80063e4:	4803      	ldr	r0, [pc, #12]	@ (80063f4 <USBD_LL_Init+0x94>)
 80063e6:	f7fc f94b 	bl	8002680 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3708      	adds	r7, #8
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}
 80063f4:	20001668 	.word	0x20001668

080063f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006400:	2300      	movs	r3, #0
 8006402:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006404:	2300      	movs	r3, #0
 8006406:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800640e:	4618      	mov	r0, r3
 8006410:	f7fb f857 	bl	80014c2 <HAL_PCD_Start>
 8006414:	4603      	mov	r3, r0
 8006416:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006418:	7bfb      	ldrb	r3, [r7, #15]
 800641a:	4618      	mov	r0, r3
 800641c:	f000 f942 	bl	80066a4 <USBD_Get_USB_Status>
 8006420:	4603      	mov	r3, r0
 8006422:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006424:	7bbb      	ldrb	r3, [r7, #14]
}
 8006426:	4618      	mov	r0, r3
 8006428:	3710      	adds	r7, #16
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}

0800642e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800642e:	b580      	push	{r7, lr}
 8006430:	b084      	sub	sp, #16
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
 8006436:	4608      	mov	r0, r1
 8006438:	4611      	mov	r1, r2
 800643a:	461a      	mov	r2, r3
 800643c:	4603      	mov	r3, r0
 800643e:	70fb      	strb	r3, [r7, #3]
 8006440:	460b      	mov	r3, r1
 8006442:	70bb      	strb	r3, [r7, #2]
 8006444:	4613      	mov	r3, r2
 8006446:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006448:	2300      	movs	r3, #0
 800644a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800644c:	2300      	movs	r3, #0
 800644e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006456:	78bb      	ldrb	r3, [r7, #2]
 8006458:	883a      	ldrh	r2, [r7, #0]
 800645a:	78f9      	ldrb	r1, [r7, #3]
 800645c:	f7fb fd2b 	bl	8001eb6 <HAL_PCD_EP_Open>
 8006460:	4603      	mov	r3, r0
 8006462:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006464:	7bfb      	ldrb	r3, [r7, #15]
 8006466:	4618      	mov	r0, r3
 8006468:	f000 f91c 	bl	80066a4 <USBD_Get_USB_Status>
 800646c:	4603      	mov	r3, r0
 800646e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006470:	7bbb      	ldrb	r3, [r7, #14]
}
 8006472:	4618      	mov	r0, r3
 8006474:	3710      	adds	r7, #16
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}

0800647a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800647a:	b580      	push	{r7, lr}
 800647c:	b084      	sub	sp, #16
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
 8006482:	460b      	mov	r3, r1
 8006484:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006486:	2300      	movs	r3, #0
 8006488:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800648a:	2300      	movs	r3, #0
 800648c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006494:	78fa      	ldrb	r2, [r7, #3]
 8006496:	4611      	mov	r1, r2
 8006498:	4618      	mov	r0, r3
 800649a:	f7fb fd76 	bl	8001f8a <HAL_PCD_EP_Close>
 800649e:	4603      	mov	r3, r0
 80064a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80064a2:	7bfb      	ldrb	r3, [r7, #15]
 80064a4:	4618      	mov	r0, r3
 80064a6:	f000 f8fd 	bl	80066a4 <USBD_Get_USB_Status>
 80064aa:	4603      	mov	r3, r0
 80064ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80064ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3710      	adds	r7, #16
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	460b      	mov	r3, r1
 80064c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80064c4:	2300      	movs	r3, #0
 80064c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80064c8:	2300      	movs	r3, #0
 80064ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80064d2:	78fa      	ldrb	r2, [r7, #3]
 80064d4:	4611      	mov	r1, r2
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7fb fe2e 	bl	8002138 <HAL_PCD_EP_SetStall>
 80064dc:	4603      	mov	r3, r0
 80064de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80064e0:	7bfb      	ldrb	r3, [r7, #15]
 80064e2:	4618      	mov	r0, r3
 80064e4:	f000 f8de 	bl	80066a4 <USBD_Get_USB_Status>
 80064e8:	4603      	mov	r3, r0
 80064ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80064ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3710      	adds	r7, #16
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}

080064f6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80064f6:	b580      	push	{r7, lr}
 80064f8:	b084      	sub	sp, #16
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
 80064fe:	460b      	mov	r3, r1
 8006500:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006502:	2300      	movs	r3, #0
 8006504:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006506:	2300      	movs	r3, #0
 8006508:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006510:	78fa      	ldrb	r2, [r7, #3]
 8006512:	4611      	mov	r1, r2
 8006514:	4618      	mov	r0, r3
 8006516:	f7fb fe72 	bl	80021fe <HAL_PCD_EP_ClrStall>
 800651a:	4603      	mov	r3, r0
 800651c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800651e:	7bfb      	ldrb	r3, [r7, #15]
 8006520:	4618      	mov	r0, r3
 8006522:	f000 f8bf 	bl	80066a4 <USBD_Get_USB_Status>
 8006526:	4603      	mov	r3, r0
 8006528:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800652a:	7bbb      	ldrb	r3, [r7, #14]
}
 800652c:	4618      	mov	r0, r3
 800652e:	3710      	adds	r7, #16
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}

08006534 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006534:	b480      	push	{r7}
 8006536:	b085      	sub	sp, #20
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	460b      	mov	r3, r1
 800653e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006546:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006548:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800654c:	2b00      	cmp	r3, #0
 800654e:	da0b      	bge.n	8006568 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006550:	78fb      	ldrb	r3, [r7, #3]
 8006552:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006556:	68f9      	ldr	r1, [r7, #12]
 8006558:	4613      	mov	r3, r2
 800655a:	00db      	lsls	r3, r3, #3
 800655c:	4413      	add	r3, r2
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	440b      	add	r3, r1
 8006562:	3316      	adds	r3, #22
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	e00b      	b.n	8006580 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006568:	78fb      	ldrb	r3, [r7, #3]
 800656a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800656e:	68f9      	ldr	r1, [r7, #12]
 8006570:	4613      	mov	r3, r2
 8006572:	00db      	lsls	r3, r3, #3
 8006574:	4413      	add	r3, r2
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	440b      	add	r3, r1
 800657a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800657e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006580:	4618      	mov	r0, r3
 8006582:	3714      	adds	r7, #20
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	460b      	mov	r3, r1
 8006596:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006598:	2300      	movs	r3, #0
 800659a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800659c:	2300      	movs	r3, #0
 800659e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80065a6:	78fa      	ldrb	r2, [r7, #3]
 80065a8:	4611      	mov	r1, r2
 80065aa:	4618      	mov	r0, r3
 80065ac:	f7fb fc5f 	bl	8001e6e <HAL_PCD_SetAddress>
 80065b0:	4603      	mov	r3, r0
 80065b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80065b4:	7bfb      	ldrb	r3, [r7, #15]
 80065b6:	4618      	mov	r0, r3
 80065b8:	f000 f874 	bl	80066a4 <USBD_Get_USB_Status>
 80065bc:	4603      	mov	r3, r0
 80065be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80065c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3710      	adds	r7, #16
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}

080065ca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b086      	sub	sp, #24
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	60f8      	str	r0, [r7, #12]
 80065d2:	607a      	str	r2, [r7, #4]
 80065d4:	603b      	str	r3, [r7, #0]
 80065d6:	460b      	mov	r3, r1
 80065d8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80065da:	2300      	movs	r3, #0
 80065dc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80065de:	2300      	movs	r3, #0
 80065e0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80065e8:	7af9      	ldrb	r1, [r7, #11]
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	f7fb fd69 	bl	80020c4 <HAL_PCD_EP_Transmit>
 80065f2:	4603      	mov	r3, r0
 80065f4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80065f6:	7dfb      	ldrb	r3, [r7, #23]
 80065f8:	4618      	mov	r0, r3
 80065fa:	f000 f853 	bl	80066a4 <USBD_Get_USB_Status>
 80065fe:	4603      	mov	r3, r0
 8006600:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006602:	7dbb      	ldrb	r3, [r7, #22]
}
 8006604:	4618      	mov	r0, r3
 8006606:	3718      	adds	r7, #24
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b086      	sub	sp, #24
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	607a      	str	r2, [r7, #4]
 8006616:	603b      	str	r3, [r7, #0]
 8006618:	460b      	mov	r3, r1
 800661a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800661c:	2300      	movs	r3, #0
 800661e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006620:	2300      	movs	r3, #0
 8006622:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800662a:	7af9      	ldrb	r1, [r7, #11]
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	f7fb fcf5 	bl	800201e <HAL_PCD_EP_Receive>
 8006634:	4603      	mov	r3, r0
 8006636:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006638:	7dfb      	ldrb	r3, [r7, #23]
 800663a:	4618      	mov	r0, r3
 800663c:	f000 f832 	bl	80066a4 <USBD_Get_USB_Status>
 8006640:	4603      	mov	r3, r0
 8006642:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006644:	7dbb      	ldrb	r3, [r7, #22]
}
 8006646:	4618      	mov	r0, r3
 8006648:	3718      	adds	r7, #24
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}

0800664e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800664e:	b580      	push	{r7, lr}
 8006650:	b082      	sub	sp, #8
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
 8006656:	460b      	mov	r3, r1
 8006658:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006660:	78fa      	ldrb	r2, [r7, #3]
 8006662:	4611      	mov	r1, r2
 8006664:	4618      	mov	r0, r3
 8006666:	f7fb fd15 	bl	8002094 <HAL_PCD_EP_GetRxCount>
 800666a:	4603      	mov	r3, r0
}
 800666c:	4618      	mov	r0, r3
 800666e:	3708      	adds	r7, #8
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800667c:	4b03      	ldr	r3, [pc, #12]	@ (800668c <USBD_static_malloc+0x18>)
}
 800667e:	4618      	mov	r0, r3
 8006680:	370c      	adds	r7, #12
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr
 800668a:	bf00      	nop
 800668c:	20001b4c 	.word	0x20001b4c

08006690 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]

}
 8006698:	bf00      	nop
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b085      	sub	sp, #20
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	4603      	mov	r3, r0
 80066ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80066ae:	2300      	movs	r3, #0
 80066b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80066b2:	79fb      	ldrb	r3, [r7, #7]
 80066b4:	2b03      	cmp	r3, #3
 80066b6:	d817      	bhi.n	80066e8 <USBD_Get_USB_Status+0x44>
 80066b8:	a201      	add	r2, pc, #4	@ (adr r2, 80066c0 <USBD_Get_USB_Status+0x1c>)
 80066ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066be:	bf00      	nop
 80066c0:	080066d1 	.word	0x080066d1
 80066c4:	080066d7 	.word	0x080066d7
 80066c8:	080066dd 	.word	0x080066dd
 80066cc:	080066e3 	.word	0x080066e3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80066d0:	2300      	movs	r3, #0
 80066d2:	73fb      	strb	r3, [r7, #15]
    break;
 80066d4:	e00b      	b.n	80066ee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80066d6:	2303      	movs	r3, #3
 80066d8:	73fb      	strb	r3, [r7, #15]
    break;
 80066da:	e008      	b.n	80066ee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80066dc:	2301      	movs	r3, #1
 80066de:	73fb      	strb	r3, [r7, #15]
    break;
 80066e0:	e005      	b.n	80066ee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80066e2:	2303      	movs	r3, #3
 80066e4:	73fb      	strb	r3, [r7, #15]
    break;
 80066e6:	e002      	b.n	80066ee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80066e8:	2303      	movs	r3, #3
 80066ea:	73fb      	strb	r3, [r7, #15]
    break;
 80066ec:	bf00      	nop
  }
  return usb_status;
 80066ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3714      	adds	r7, #20
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <std>:
 80066fc:	2300      	movs	r3, #0
 80066fe:	b510      	push	{r4, lr}
 8006700:	4604      	mov	r4, r0
 8006702:	e9c0 3300 	strd	r3, r3, [r0]
 8006706:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800670a:	6083      	str	r3, [r0, #8]
 800670c:	8181      	strh	r1, [r0, #12]
 800670e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006710:	81c2      	strh	r2, [r0, #14]
 8006712:	6183      	str	r3, [r0, #24]
 8006714:	4619      	mov	r1, r3
 8006716:	2208      	movs	r2, #8
 8006718:	305c      	adds	r0, #92	@ 0x5c
 800671a:	f000 f9e7 	bl	8006aec <memset>
 800671e:	4b0d      	ldr	r3, [pc, #52]	@ (8006754 <std+0x58>)
 8006720:	6263      	str	r3, [r4, #36]	@ 0x24
 8006722:	4b0d      	ldr	r3, [pc, #52]	@ (8006758 <std+0x5c>)
 8006724:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006726:	4b0d      	ldr	r3, [pc, #52]	@ (800675c <std+0x60>)
 8006728:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800672a:	4b0d      	ldr	r3, [pc, #52]	@ (8006760 <std+0x64>)
 800672c:	6323      	str	r3, [r4, #48]	@ 0x30
 800672e:	4b0d      	ldr	r3, [pc, #52]	@ (8006764 <std+0x68>)
 8006730:	6224      	str	r4, [r4, #32]
 8006732:	429c      	cmp	r4, r3
 8006734:	d006      	beq.n	8006744 <std+0x48>
 8006736:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800673a:	4294      	cmp	r4, r2
 800673c:	d002      	beq.n	8006744 <std+0x48>
 800673e:	33d0      	adds	r3, #208	@ 0xd0
 8006740:	429c      	cmp	r4, r3
 8006742:	d105      	bne.n	8006750 <std+0x54>
 8006744:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800674c:	f000 ba46 	b.w	8006bdc <__retarget_lock_init_recursive>
 8006750:	bd10      	pop	{r4, pc}
 8006752:	bf00      	nop
 8006754:	0800693d 	.word	0x0800693d
 8006758:	0800695f 	.word	0x0800695f
 800675c:	08006997 	.word	0x08006997
 8006760:	080069bb 	.word	0x080069bb
 8006764:	20001d6c 	.word	0x20001d6c

08006768 <stdio_exit_handler>:
 8006768:	4a02      	ldr	r2, [pc, #8]	@ (8006774 <stdio_exit_handler+0xc>)
 800676a:	4903      	ldr	r1, [pc, #12]	@ (8006778 <stdio_exit_handler+0x10>)
 800676c:	4803      	ldr	r0, [pc, #12]	@ (800677c <stdio_exit_handler+0x14>)
 800676e:	f000 b869 	b.w	8006844 <_fwalk_sglue>
 8006772:	bf00      	nop
 8006774:	20000100 	.word	0x20000100
 8006778:	08006edd 	.word	0x08006edd
 800677c:	20000110 	.word	0x20000110

08006780 <cleanup_stdio>:
 8006780:	6841      	ldr	r1, [r0, #4]
 8006782:	4b0c      	ldr	r3, [pc, #48]	@ (80067b4 <cleanup_stdio+0x34>)
 8006784:	4299      	cmp	r1, r3
 8006786:	b510      	push	{r4, lr}
 8006788:	4604      	mov	r4, r0
 800678a:	d001      	beq.n	8006790 <cleanup_stdio+0x10>
 800678c:	f000 fba6 	bl	8006edc <_fflush_r>
 8006790:	68a1      	ldr	r1, [r4, #8]
 8006792:	4b09      	ldr	r3, [pc, #36]	@ (80067b8 <cleanup_stdio+0x38>)
 8006794:	4299      	cmp	r1, r3
 8006796:	d002      	beq.n	800679e <cleanup_stdio+0x1e>
 8006798:	4620      	mov	r0, r4
 800679a:	f000 fb9f 	bl	8006edc <_fflush_r>
 800679e:	68e1      	ldr	r1, [r4, #12]
 80067a0:	4b06      	ldr	r3, [pc, #24]	@ (80067bc <cleanup_stdio+0x3c>)
 80067a2:	4299      	cmp	r1, r3
 80067a4:	d004      	beq.n	80067b0 <cleanup_stdio+0x30>
 80067a6:	4620      	mov	r0, r4
 80067a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067ac:	f000 bb96 	b.w	8006edc <_fflush_r>
 80067b0:	bd10      	pop	{r4, pc}
 80067b2:	bf00      	nop
 80067b4:	20001d6c 	.word	0x20001d6c
 80067b8:	20001dd4 	.word	0x20001dd4
 80067bc:	20001e3c 	.word	0x20001e3c

080067c0 <global_stdio_init.part.0>:
 80067c0:	b510      	push	{r4, lr}
 80067c2:	4b0b      	ldr	r3, [pc, #44]	@ (80067f0 <global_stdio_init.part.0+0x30>)
 80067c4:	4c0b      	ldr	r4, [pc, #44]	@ (80067f4 <global_stdio_init.part.0+0x34>)
 80067c6:	4a0c      	ldr	r2, [pc, #48]	@ (80067f8 <global_stdio_init.part.0+0x38>)
 80067c8:	601a      	str	r2, [r3, #0]
 80067ca:	4620      	mov	r0, r4
 80067cc:	2200      	movs	r2, #0
 80067ce:	2104      	movs	r1, #4
 80067d0:	f7ff ff94 	bl	80066fc <std>
 80067d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80067d8:	2201      	movs	r2, #1
 80067da:	2109      	movs	r1, #9
 80067dc:	f7ff ff8e 	bl	80066fc <std>
 80067e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80067e4:	2202      	movs	r2, #2
 80067e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067ea:	2112      	movs	r1, #18
 80067ec:	f7ff bf86 	b.w	80066fc <std>
 80067f0:	20001ea4 	.word	0x20001ea4
 80067f4:	20001d6c 	.word	0x20001d6c
 80067f8:	08006769 	.word	0x08006769

080067fc <__sfp_lock_acquire>:
 80067fc:	4801      	ldr	r0, [pc, #4]	@ (8006804 <__sfp_lock_acquire+0x8>)
 80067fe:	f000 b9ee 	b.w	8006bde <__retarget_lock_acquire_recursive>
 8006802:	bf00      	nop
 8006804:	20001ead 	.word	0x20001ead

08006808 <__sfp_lock_release>:
 8006808:	4801      	ldr	r0, [pc, #4]	@ (8006810 <__sfp_lock_release+0x8>)
 800680a:	f000 b9e9 	b.w	8006be0 <__retarget_lock_release_recursive>
 800680e:	bf00      	nop
 8006810:	20001ead 	.word	0x20001ead

08006814 <__sinit>:
 8006814:	b510      	push	{r4, lr}
 8006816:	4604      	mov	r4, r0
 8006818:	f7ff fff0 	bl	80067fc <__sfp_lock_acquire>
 800681c:	6a23      	ldr	r3, [r4, #32]
 800681e:	b11b      	cbz	r3, 8006828 <__sinit+0x14>
 8006820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006824:	f7ff bff0 	b.w	8006808 <__sfp_lock_release>
 8006828:	4b04      	ldr	r3, [pc, #16]	@ (800683c <__sinit+0x28>)
 800682a:	6223      	str	r3, [r4, #32]
 800682c:	4b04      	ldr	r3, [pc, #16]	@ (8006840 <__sinit+0x2c>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d1f5      	bne.n	8006820 <__sinit+0xc>
 8006834:	f7ff ffc4 	bl	80067c0 <global_stdio_init.part.0>
 8006838:	e7f2      	b.n	8006820 <__sinit+0xc>
 800683a:	bf00      	nop
 800683c:	08006781 	.word	0x08006781
 8006840:	20001ea4 	.word	0x20001ea4

08006844 <_fwalk_sglue>:
 8006844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006848:	4607      	mov	r7, r0
 800684a:	4688      	mov	r8, r1
 800684c:	4614      	mov	r4, r2
 800684e:	2600      	movs	r6, #0
 8006850:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006854:	f1b9 0901 	subs.w	r9, r9, #1
 8006858:	d505      	bpl.n	8006866 <_fwalk_sglue+0x22>
 800685a:	6824      	ldr	r4, [r4, #0]
 800685c:	2c00      	cmp	r4, #0
 800685e:	d1f7      	bne.n	8006850 <_fwalk_sglue+0xc>
 8006860:	4630      	mov	r0, r6
 8006862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006866:	89ab      	ldrh	r3, [r5, #12]
 8006868:	2b01      	cmp	r3, #1
 800686a:	d907      	bls.n	800687c <_fwalk_sglue+0x38>
 800686c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006870:	3301      	adds	r3, #1
 8006872:	d003      	beq.n	800687c <_fwalk_sglue+0x38>
 8006874:	4629      	mov	r1, r5
 8006876:	4638      	mov	r0, r7
 8006878:	47c0      	blx	r8
 800687a:	4306      	orrs	r6, r0
 800687c:	3568      	adds	r5, #104	@ 0x68
 800687e:	e7e9      	b.n	8006854 <_fwalk_sglue+0x10>

08006880 <_puts_r>:
 8006880:	6a03      	ldr	r3, [r0, #32]
 8006882:	b570      	push	{r4, r5, r6, lr}
 8006884:	6884      	ldr	r4, [r0, #8]
 8006886:	4605      	mov	r5, r0
 8006888:	460e      	mov	r6, r1
 800688a:	b90b      	cbnz	r3, 8006890 <_puts_r+0x10>
 800688c:	f7ff ffc2 	bl	8006814 <__sinit>
 8006890:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006892:	07db      	lsls	r3, r3, #31
 8006894:	d405      	bmi.n	80068a2 <_puts_r+0x22>
 8006896:	89a3      	ldrh	r3, [r4, #12]
 8006898:	0598      	lsls	r0, r3, #22
 800689a:	d402      	bmi.n	80068a2 <_puts_r+0x22>
 800689c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800689e:	f000 f99e 	bl	8006bde <__retarget_lock_acquire_recursive>
 80068a2:	89a3      	ldrh	r3, [r4, #12]
 80068a4:	0719      	lsls	r1, r3, #28
 80068a6:	d502      	bpl.n	80068ae <_puts_r+0x2e>
 80068a8:	6923      	ldr	r3, [r4, #16]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d135      	bne.n	800691a <_puts_r+0x9a>
 80068ae:	4621      	mov	r1, r4
 80068b0:	4628      	mov	r0, r5
 80068b2:	f000 f8c5 	bl	8006a40 <__swsetup_r>
 80068b6:	b380      	cbz	r0, 800691a <_puts_r+0x9a>
 80068b8:	f04f 35ff 	mov.w	r5, #4294967295
 80068bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80068be:	07da      	lsls	r2, r3, #31
 80068c0:	d405      	bmi.n	80068ce <_puts_r+0x4e>
 80068c2:	89a3      	ldrh	r3, [r4, #12]
 80068c4:	059b      	lsls	r3, r3, #22
 80068c6:	d402      	bmi.n	80068ce <_puts_r+0x4e>
 80068c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80068ca:	f000 f989 	bl	8006be0 <__retarget_lock_release_recursive>
 80068ce:	4628      	mov	r0, r5
 80068d0:	bd70      	pop	{r4, r5, r6, pc}
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	da04      	bge.n	80068e0 <_puts_r+0x60>
 80068d6:	69a2      	ldr	r2, [r4, #24]
 80068d8:	429a      	cmp	r2, r3
 80068da:	dc17      	bgt.n	800690c <_puts_r+0x8c>
 80068dc:	290a      	cmp	r1, #10
 80068de:	d015      	beq.n	800690c <_puts_r+0x8c>
 80068e0:	6823      	ldr	r3, [r4, #0]
 80068e2:	1c5a      	adds	r2, r3, #1
 80068e4:	6022      	str	r2, [r4, #0]
 80068e6:	7019      	strb	r1, [r3, #0]
 80068e8:	68a3      	ldr	r3, [r4, #8]
 80068ea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80068ee:	3b01      	subs	r3, #1
 80068f0:	60a3      	str	r3, [r4, #8]
 80068f2:	2900      	cmp	r1, #0
 80068f4:	d1ed      	bne.n	80068d2 <_puts_r+0x52>
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	da11      	bge.n	800691e <_puts_r+0x9e>
 80068fa:	4622      	mov	r2, r4
 80068fc:	210a      	movs	r1, #10
 80068fe:	4628      	mov	r0, r5
 8006900:	f000 f85f 	bl	80069c2 <__swbuf_r>
 8006904:	3001      	adds	r0, #1
 8006906:	d0d7      	beq.n	80068b8 <_puts_r+0x38>
 8006908:	250a      	movs	r5, #10
 800690a:	e7d7      	b.n	80068bc <_puts_r+0x3c>
 800690c:	4622      	mov	r2, r4
 800690e:	4628      	mov	r0, r5
 8006910:	f000 f857 	bl	80069c2 <__swbuf_r>
 8006914:	3001      	adds	r0, #1
 8006916:	d1e7      	bne.n	80068e8 <_puts_r+0x68>
 8006918:	e7ce      	b.n	80068b8 <_puts_r+0x38>
 800691a:	3e01      	subs	r6, #1
 800691c:	e7e4      	b.n	80068e8 <_puts_r+0x68>
 800691e:	6823      	ldr	r3, [r4, #0]
 8006920:	1c5a      	adds	r2, r3, #1
 8006922:	6022      	str	r2, [r4, #0]
 8006924:	220a      	movs	r2, #10
 8006926:	701a      	strb	r2, [r3, #0]
 8006928:	e7ee      	b.n	8006908 <_puts_r+0x88>
	...

0800692c <puts>:
 800692c:	4b02      	ldr	r3, [pc, #8]	@ (8006938 <puts+0xc>)
 800692e:	4601      	mov	r1, r0
 8006930:	6818      	ldr	r0, [r3, #0]
 8006932:	f7ff bfa5 	b.w	8006880 <_puts_r>
 8006936:	bf00      	nop
 8006938:	2000010c 	.word	0x2000010c

0800693c <__sread>:
 800693c:	b510      	push	{r4, lr}
 800693e:	460c      	mov	r4, r1
 8006940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006944:	f000 f8fc 	bl	8006b40 <_read_r>
 8006948:	2800      	cmp	r0, #0
 800694a:	bfab      	itete	ge
 800694c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800694e:	89a3      	ldrhlt	r3, [r4, #12]
 8006950:	181b      	addge	r3, r3, r0
 8006952:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006956:	bfac      	ite	ge
 8006958:	6563      	strge	r3, [r4, #84]	@ 0x54
 800695a:	81a3      	strhlt	r3, [r4, #12]
 800695c:	bd10      	pop	{r4, pc}

0800695e <__swrite>:
 800695e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006962:	461f      	mov	r7, r3
 8006964:	898b      	ldrh	r3, [r1, #12]
 8006966:	05db      	lsls	r3, r3, #23
 8006968:	4605      	mov	r5, r0
 800696a:	460c      	mov	r4, r1
 800696c:	4616      	mov	r6, r2
 800696e:	d505      	bpl.n	800697c <__swrite+0x1e>
 8006970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006974:	2302      	movs	r3, #2
 8006976:	2200      	movs	r2, #0
 8006978:	f000 f8d0 	bl	8006b1c <_lseek_r>
 800697c:	89a3      	ldrh	r3, [r4, #12]
 800697e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006982:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006986:	81a3      	strh	r3, [r4, #12]
 8006988:	4632      	mov	r2, r6
 800698a:	463b      	mov	r3, r7
 800698c:	4628      	mov	r0, r5
 800698e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006992:	f000 b8e7 	b.w	8006b64 <_write_r>

08006996 <__sseek>:
 8006996:	b510      	push	{r4, lr}
 8006998:	460c      	mov	r4, r1
 800699a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800699e:	f000 f8bd 	bl	8006b1c <_lseek_r>
 80069a2:	1c43      	adds	r3, r0, #1
 80069a4:	89a3      	ldrh	r3, [r4, #12]
 80069a6:	bf15      	itete	ne
 80069a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80069aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80069ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80069b2:	81a3      	strheq	r3, [r4, #12]
 80069b4:	bf18      	it	ne
 80069b6:	81a3      	strhne	r3, [r4, #12]
 80069b8:	bd10      	pop	{r4, pc}

080069ba <__sclose>:
 80069ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069be:	f000 b89d 	b.w	8006afc <_close_r>

080069c2 <__swbuf_r>:
 80069c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069c4:	460e      	mov	r6, r1
 80069c6:	4614      	mov	r4, r2
 80069c8:	4605      	mov	r5, r0
 80069ca:	b118      	cbz	r0, 80069d4 <__swbuf_r+0x12>
 80069cc:	6a03      	ldr	r3, [r0, #32]
 80069ce:	b90b      	cbnz	r3, 80069d4 <__swbuf_r+0x12>
 80069d0:	f7ff ff20 	bl	8006814 <__sinit>
 80069d4:	69a3      	ldr	r3, [r4, #24]
 80069d6:	60a3      	str	r3, [r4, #8]
 80069d8:	89a3      	ldrh	r3, [r4, #12]
 80069da:	071a      	lsls	r2, r3, #28
 80069dc:	d501      	bpl.n	80069e2 <__swbuf_r+0x20>
 80069de:	6923      	ldr	r3, [r4, #16]
 80069e0:	b943      	cbnz	r3, 80069f4 <__swbuf_r+0x32>
 80069e2:	4621      	mov	r1, r4
 80069e4:	4628      	mov	r0, r5
 80069e6:	f000 f82b 	bl	8006a40 <__swsetup_r>
 80069ea:	b118      	cbz	r0, 80069f4 <__swbuf_r+0x32>
 80069ec:	f04f 37ff 	mov.w	r7, #4294967295
 80069f0:	4638      	mov	r0, r7
 80069f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069f4:	6823      	ldr	r3, [r4, #0]
 80069f6:	6922      	ldr	r2, [r4, #16]
 80069f8:	1a98      	subs	r0, r3, r2
 80069fa:	6963      	ldr	r3, [r4, #20]
 80069fc:	b2f6      	uxtb	r6, r6
 80069fe:	4283      	cmp	r3, r0
 8006a00:	4637      	mov	r7, r6
 8006a02:	dc05      	bgt.n	8006a10 <__swbuf_r+0x4e>
 8006a04:	4621      	mov	r1, r4
 8006a06:	4628      	mov	r0, r5
 8006a08:	f000 fa68 	bl	8006edc <_fflush_r>
 8006a0c:	2800      	cmp	r0, #0
 8006a0e:	d1ed      	bne.n	80069ec <__swbuf_r+0x2a>
 8006a10:	68a3      	ldr	r3, [r4, #8]
 8006a12:	3b01      	subs	r3, #1
 8006a14:	60a3      	str	r3, [r4, #8]
 8006a16:	6823      	ldr	r3, [r4, #0]
 8006a18:	1c5a      	adds	r2, r3, #1
 8006a1a:	6022      	str	r2, [r4, #0]
 8006a1c:	701e      	strb	r6, [r3, #0]
 8006a1e:	6962      	ldr	r2, [r4, #20]
 8006a20:	1c43      	adds	r3, r0, #1
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d004      	beq.n	8006a30 <__swbuf_r+0x6e>
 8006a26:	89a3      	ldrh	r3, [r4, #12]
 8006a28:	07db      	lsls	r3, r3, #31
 8006a2a:	d5e1      	bpl.n	80069f0 <__swbuf_r+0x2e>
 8006a2c:	2e0a      	cmp	r6, #10
 8006a2e:	d1df      	bne.n	80069f0 <__swbuf_r+0x2e>
 8006a30:	4621      	mov	r1, r4
 8006a32:	4628      	mov	r0, r5
 8006a34:	f000 fa52 	bl	8006edc <_fflush_r>
 8006a38:	2800      	cmp	r0, #0
 8006a3a:	d0d9      	beq.n	80069f0 <__swbuf_r+0x2e>
 8006a3c:	e7d6      	b.n	80069ec <__swbuf_r+0x2a>
	...

08006a40 <__swsetup_r>:
 8006a40:	b538      	push	{r3, r4, r5, lr}
 8006a42:	4b29      	ldr	r3, [pc, #164]	@ (8006ae8 <__swsetup_r+0xa8>)
 8006a44:	4605      	mov	r5, r0
 8006a46:	6818      	ldr	r0, [r3, #0]
 8006a48:	460c      	mov	r4, r1
 8006a4a:	b118      	cbz	r0, 8006a54 <__swsetup_r+0x14>
 8006a4c:	6a03      	ldr	r3, [r0, #32]
 8006a4e:	b90b      	cbnz	r3, 8006a54 <__swsetup_r+0x14>
 8006a50:	f7ff fee0 	bl	8006814 <__sinit>
 8006a54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a58:	0719      	lsls	r1, r3, #28
 8006a5a:	d422      	bmi.n	8006aa2 <__swsetup_r+0x62>
 8006a5c:	06da      	lsls	r2, r3, #27
 8006a5e:	d407      	bmi.n	8006a70 <__swsetup_r+0x30>
 8006a60:	2209      	movs	r2, #9
 8006a62:	602a      	str	r2, [r5, #0]
 8006a64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a68:	81a3      	strh	r3, [r4, #12]
 8006a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8006a6e:	e033      	b.n	8006ad8 <__swsetup_r+0x98>
 8006a70:	0758      	lsls	r0, r3, #29
 8006a72:	d512      	bpl.n	8006a9a <__swsetup_r+0x5a>
 8006a74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a76:	b141      	cbz	r1, 8006a8a <__swsetup_r+0x4a>
 8006a78:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a7c:	4299      	cmp	r1, r3
 8006a7e:	d002      	beq.n	8006a86 <__swsetup_r+0x46>
 8006a80:	4628      	mov	r0, r5
 8006a82:	f000 f8af 	bl	8006be4 <_free_r>
 8006a86:	2300      	movs	r3, #0
 8006a88:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a8a:	89a3      	ldrh	r3, [r4, #12]
 8006a8c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006a90:	81a3      	strh	r3, [r4, #12]
 8006a92:	2300      	movs	r3, #0
 8006a94:	6063      	str	r3, [r4, #4]
 8006a96:	6923      	ldr	r3, [r4, #16]
 8006a98:	6023      	str	r3, [r4, #0]
 8006a9a:	89a3      	ldrh	r3, [r4, #12]
 8006a9c:	f043 0308 	orr.w	r3, r3, #8
 8006aa0:	81a3      	strh	r3, [r4, #12]
 8006aa2:	6923      	ldr	r3, [r4, #16]
 8006aa4:	b94b      	cbnz	r3, 8006aba <__swsetup_r+0x7a>
 8006aa6:	89a3      	ldrh	r3, [r4, #12]
 8006aa8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006aac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ab0:	d003      	beq.n	8006aba <__swsetup_r+0x7a>
 8006ab2:	4621      	mov	r1, r4
 8006ab4:	4628      	mov	r0, r5
 8006ab6:	f000 fa5f 	bl	8006f78 <__smakebuf_r>
 8006aba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006abe:	f013 0201 	ands.w	r2, r3, #1
 8006ac2:	d00a      	beq.n	8006ada <__swsetup_r+0x9a>
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	60a2      	str	r2, [r4, #8]
 8006ac8:	6962      	ldr	r2, [r4, #20]
 8006aca:	4252      	negs	r2, r2
 8006acc:	61a2      	str	r2, [r4, #24]
 8006ace:	6922      	ldr	r2, [r4, #16]
 8006ad0:	b942      	cbnz	r2, 8006ae4 <__swsetup_r+0xa4>
 8006ad2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006ad6:	d1c5      	bne.n	8006a64 <__swsetup_r+0x24>
 8006ad8:	bd38      	pop	{r3, r4, r5, pc}
 8006ada:	0799      	lsls	r1, r3, #30
 8006adc:	bf58      	it	pl
 8006ade:	6962      	ldrpl	r2, [r4, #20]
 8006ae0:	60a2      	str	r2, [r4, #8]
 8006ae2:	e7f4      	b.n	8006ace <__swsetup_r+0x8e>
 8006ae4:	2000      	movs	r0, #0
 8006ae6:	e7f7      	b.n	8006ad8 <__swsetup_r+0x98>
 8006ae8:	2000010c 	.word	0x2000010c

08006aec <memset>:
 8006aec:	4402      	add	r2, r0
 8006aee:	4603      	mov	r3, r0
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d100      	bne.n	8006af6 <memset+0xa>
 8006af4:	4770      	bx	lr
 8006af6:	f803 1b01 	strb.w	r1, [r3], #1
 8006afa:	e7f9      	b.n	8006af0 <memset+0x4>

08006afc <_close_r>:
 8006afc:	b538      	push	{r3, r4, r5, lr}
 8006afe:	4d06      	ldr	r5, [pc, #24]	@ (8006b18 <_close_r+0x1c>)
 8006b00:	2300      	movs	r3, #0
 8006b02:	4604      	mov	r4, r0
 8006b04:	4608      	mov	r0, r1
 8006b06:	602b      	str	r3, [r5, #0]
 8006b08:	f7f9 ffe1 	bl	8000ace <_close>
 8006b0c:	1c43      	adds	r3, r0, #1
 8006b0e:	d102      	bne.n	8006b16 <_close_r+0x1a>
 8006b10:	682b      	ldr	r3, [r5, #0]
 8006b12:	b103      	cbz	r3, 8006b16 <_close_r+0x1a>
 8006b14:	6023      	str	r3, [r4, #0]
 8006b16:	bd38      	pop	{r3, r4, r5, pc}
 8006b18:	20001ea8 	.word	0x20001ea8

08006b1c <_lseek_r>:
 8006b1c:	b538      	push	{r3, r4, r5, lr}
 8006b1e:	4d07      	ldr	r5, [pc, #28]	@ (8006b3c <_lseek_r+0x20>)
 8006b20:	4604      	mov	r4, r0
 8006b22:	4608      	mov	r0, r1
 8006b24:	4611      	mov	r1, r2
 8006b26:	2200      	movs	r2, #0
 8006b28:	602a      	str	r2, [r5, #0]
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	f7f9 fff6 	bl	8000b1c <_lseek>
 8006b30:	1c43      	adds	r3, r0, #1
 8006b32:	d102      	bne.n	8006b3a <_lseek_r+0x1e>
 8006b34:	682b      	ldr	r3, [r5, #0]
 8006b36:	b103      	cbz	r3, 8006b3a <_lseek_r+0x1e>
 8006b38:	6023      	str	r3, [r4, #0]
 8006b3a:	bd38      	pop	{r3, r4, r5, pc}
 8006b3c:	20001ea8 	.word	0x20001ea8

08006b40 <_read_r>:
 8006b40:	b538      	push	{r3, r4, r5, lr}
 8006b42:	4d07      	ldr	r5, [pc, #28]	@ (8006b60 <_read_r+0x20>)
 8006b44:	4604      	mov	r4, r0
 8006b46:	4608      	mov	r0, r1
 8006b48:	4611      	mov	r1, r2
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	602a      	str	r2, [r5, #0]
 8006b4e:	461a      	mov	r2, r3
 8006b50:	f7f9 ff84 	bl	8000a5c <_read>
 8006b54:	1c43      	adds	r3, r0, #1
 8006b56:	d102      	bne.n	8006b5e <_read_r+0x1e>
 8006b58:	682b      	ldr	r3, [r5, #0]
 8006b5a:	b103      	cbz	r3, 8006b5e <_read_r+0x1e>
 8006b5c:	6023      	str	r3, [r4, #0]
 8006b5e:	bd38      	pop	{r3, r4, r5, pc}
 8006b60:	20001ea8 	.word	0x20001ea8

08006b64 <_write_r>:
 8006b64:	b538      	push	{r3, r4, r5, lr}
 8006b66:	4d07      	ldr	r5, [pc, #28]	@ (8006b84 <_write_r+0x20>)
 8006b68:	4604      	mov	r4, r0
 8006b6a:	4608      	mov	r0, r1
 8006b6c:	4611      	mov	r1, r2
 8006b6e:	2200      	movs	r2, #0
 8006b70:	602a      	str	r2, [r5, #0]
 8006b72:	461a      	mov	r2, r3
 8006b74:	f7f9 ff8f 	bl	8000a96 <_write>
 8006b78:	1c43      	adds	r3, r0, #1
 8006b7a:	d102      	bne.n	8006b82 <_write_r+0x1e>
 8006b7c:	682b      	ldr	r3, [r5, #0]
 8006b7e:	b103      	cbz	r3, 8006b82 <_write_r+0x1e>
 8006b80:	6023      	str	r3, [r4, #0]
 8006b82:	bd38      	pop	{r3, r4, r5, pc}
 8006b84:	20001ea8 	.word	0x20001ea8

08006b88 <__errno>:
 8006b88:	4b01      	ldr	r3, [pc, #4]	@ (8006b90 <__errno+0x8>)
 8006b8a:	6818      	ldr	r0, [r3, #0]
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	2000010c 	.word	0x2000010c

08006b94 <__libc_init_array>:
 8006b94:	b570      	push	{r4, r5, r6, lr}
 8006b96:	4d0d      	ldr	r5, [pc, #52]	@ (8006bcc <__libc_init_array+0x38>)
 8006b98:	4c0d      	ldr	r4, [pc, #52]	@ (8006bd0 <__libc_init_array+0x3c>)
 8006b9a:	1b64      	subs	r4, r4, r5
 8006b9c:	10a4      	asrs	r4, r4, #2
 8006b9e:	2600      	movs	r6, #0
 8006ba0:	42a6      	cmp	r6, r4
 8006ba2:	d109      	bne.n	8006bb8 <__libc_init_array+0x24>
 8006ba4:	4d0b      	ldr	r5, [pc, #44]	@ (8006bd4 <__libc_init_array+0x40>)
 8006ba6:	4c0c      	ldr	r4, [pc, #48]	@ (8006bd8 <__libc_init_array+0x44>)
 8006ba8:	f000 fa54 	bl	8007054 <_init>
 8006bac:	1b64      	subs	r4, r4, r5
 8006bae:	10a4      	asrs	r4, r4, #2
 8006bb0:	2600      	movs	r6, #0
 8006bb2:	42a6      	cmp	r6, r4
 8006bb4:	d105      	bne.n	8006bc2 <__libc_init_array+0x2e>
 8006bb6:	bd70      	pop	{r4, r5, r6, pc}
 8006bb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bbc:	4798      	blx	r3
 8006bbe:	3601      	adds	r6, #1
 8006bc0:	e7ee      	b.n	8006ba0 <__libc_init_array+0xc>
 8006bc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bc6:	4798      	blx	r3
 8006bc8:	3601      	adds	r6, #1
 8006bca:	e7f2      	b.n	8006bb2 <__libc_init_array+0x1e>
 8006bcc:	080070d4 	.word	0x080070d4
 8006bd0:	080070d4 	.word	0x080070d4
 8006bd4:	080070d4 	.word	0x080070d4
 8006bd8:	080070d8 	.word	0x080070d8

08006bdc <__retarget_lock_init_recursive>:
 8006bdc:	4770      	bx	lr

08006bde <__retarget_lock_acquire_recursive>:
 8006bde:	4770      	bx	lr

08006be0 <__retarget_lock_release_recursive>:
 8006be0:	4770      	bx	lr
	...

08006be4 <_free_r>:
 8006be4:	b538      	push	{r3, r4, r5, lr}
 8006be6:	4605      	mov	r5, r0
 8006be8:	2900      	cmp	r1, #0
 8006bea:	d041      	beq.n	8006c70 <_free_r+0x8c>
 8006bec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bf0:	1f0c      	subs	r4, r1, #4
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	bfb8      	it	lt
 8006bf6:	18e4      	addlt	r4, r4, r3
 8006bf8:	f000 f8e0 	bl	8006dbc <__malloc_lock>
 8006bfc:	4a1d      	ldr	r2, [pc, #116]	@ (8006c74 <_free_r+0x90>)
 8006bfe:	6813      	ldr	r3, [r2, #0]
 8006c00:	b933      	cbnz	r3, 8006c10 <_free_r+0x2c>
 8006c02:	6063      	str	r3, [r4, #4]
 8006c04:	6014      	str	r4, [r2, #0]
 8006c06:	4628      	mov	r0, r5
 8006c08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c0c:	f000 b8dc 	b.w	8006dc8 <__malloc_unlock>
 8006c10:	42a3      	cmp	r3, r4
 8006c12:	d908      	bls.n	8006c26 <_free_r+0x42>
 8006c14:	6820      	ldr	r0, [r4, #0]
 8006c16:	1821      	adds	r1, r4, r0
 8006c18:	428b      	cmp	r3, r1
 8006c1a:	bf01      	itttt	eq
 8006c1c:	6819      	ldreq	r1, [r3, #0]
 8006c1e:	685b      	ldreq	r3, [r3, #4]
 8006c20:	1809      	addeq	r1, r1, r0
 8006c22:	6021      	streq	r1, [r4, #0]
 8006c24:	e7ed      	b.n	8006c02 <_free_r+0x1e>
 8006c26:	461a      	mov	r2, r3
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	b10b      	cbz	r3, 8006c30 <_free_r+0x4c>
 8006c2c:	42a3      	cmp	r3, r4
 8006c2e:	d9fa      	bls.n	8006c26 <_free_r+0x42>
 8006c30:	6811      	ldr	r1, [r2, #0]
 8006c32:	1850      	adds	r0, r2, r1
 8006c34:	42a0      	cmp	r0, r4
 8006c36:	d10b      	bne.n	8006c50 <_free_r+0x6c>
 8006c38:	6820      	ldr	r0, [r4, #0]
 8006c3a:	4401      	add	r1, r0
 8006c3c:	1850      	adds	r0, r2, r1
 8006c3e:	4283      	cmp	r3, r0
 8006c40:	6011      	str	r1, [r2, #0]
 8006c42:	d1e0      	bne.n	8006c06 <_free_r+0x22>
 8006c44:	6818      	ldr	r0, [r3, #0]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	6053      	str	r3, [r2, #4]
 8006c4a:	4408      	add	r0, r1
 8006c4c:	6010      	str	r0, [r2, #0]
 8006c4e:	e7da      	b.n	8006c06 <_free_r+0x22>
 8006c50:	d902      	bls.n	8006c58 <_free_r+0x74>
 8006c52:	230c      	movs	r3, #12
 8006c54:	602b      	str	r3, [r5, #0]
 8006c56:	e7d6      	b.n	8006c06 <_free_r+0x22>
 8006c58:	6820      	ldr	r0, [r4, #0]
 8006c5a:	1821      	adds	r1, r4, r0
 8006c5c:	428b      	cmp	r3, r1
 8006c5e:	bf04      	itt	eq
 8006c60:	6819      	ldreq	r1, [r3, #0]
 8006c62:	685b      	ldreq	r3, [r3, #4]
 8006c64:	6063      	str	r3, [r4, #4]
 8006c66:	bf04      	itt	eq
 8006c68:	1809      	addeq	r1, r1, r0
 8006c6a:	6021      	streq	r1, [r4, #0]
 8006c6c:	6054      	str	r4, [r2, #4]
 8006c6e:	e7ca      	b.n	8006c06 <_free_r+0x22>
 8006c70:	bd38      	pop	{r3, r4, r5, pc}
 8006c72:	bf00      	nop
 8006c74:	20001eb4 	.word	0x20001eb4

08006c78 <sbrk_aligned>:
 8006c78:	b570      	push	{r4, r5, r6, lr}
 8006c7a:	4e0f      	ldr	r6, [pc, #60]	@ (8006cb8 <sbrk_aligned+0x40>)
 8006c7c:	460c      	mov	r4, r1
 8006c7e:	6831      	ldr	r1, [r6, #0]
 8006c80:	4605      	mov	r5, r0
 8006c82:	b911      	cbnz	r1, 8006c8a <sbrk_aligned+0x12>
 8006c84:	f000 f9d6 	bl	8007034 <_sbrk_r>
 8006c88:	6030      	str	r0, [r6, #0]
 8006c8a:	4621      	mov	r1, r4
 8006c8c:	4628      	mov	r0, r5
 8006c8e:	f000 f9d1 	bl	8007034 <_sbrk_r>
 8006c92:	1c43      	adds	r3, r0, #1
 8006c94:	d103      	bne.n	8006c9e <sbrk_aligned+0x26>
 8006c96:	f04f 34ff 	mov.w	r4, #4294967295
 8006c9a:	4620      	mov	r0, r4
 8006c9c:	bd70      	pop	{r4, r5, r6, pc}
 8006c9e:	1cc4      	adds	r4, r0, #3
 8006ca0:	f024 0403 	bic.w	r4, r4, #3
 8006ca4:	42a0      	cmp	r0, r4
 8006ca6:	d0f8      	beq.n	8006c9a <sbrk_aligned+0x22>
 8006ca8:	1a21      	subs	r1, r4, r0
 8006caa:	4628      	mov	r0, r5
 8006cac:	f000 f9c2 	bl	8007034 <_sbrk_r>
 8006cb0:	3001      	adds	r0, #1
 8006cb2:	d1f2      	bne.n	8006c9a <sbrk_aligned+0x22>
 8006cb4:	e7ef      	b.n	8006c96 <sbrk_aligned+0x1e>
 8006cb6:	bf00      	nop
 8006cb8:	20001eb0 	.word	0x20001eb0

08006cbc <_malloc_r>:
 8006cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cc0:	1ccd      	adds	r5, r1, #3
 8006cc2:	f025 0503 	bic.w	r5, r5, #3
 8006cc6:	3508      	adds	r5, #8
 8006cc8:	2d0c      	cmp	r5, #12
 8006cca:	bf38      	it	cc
 8006ccc:	250c      	movcc	r5, #12
 8006cce:	2d00      	cmp	r5, #0
 8006cd0:	4606      	mov	r6, r0
 8006cd2:	db01      	blt.n	8006cd8 <_malloc_r+0x1c>
 8006cd4:	42a9      	cmp	r1, r5
 8006cd6:	d904      	bls.n	8006ce2 <_malloc_r+0x26>
 8006cd8:	230c      	movs	r3, #12
 8006cda:	6033      	str	r3, [r6, #0]
 8006cdc:	2000      	movs	r0, #0
 8006cde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ce2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006db8 <_malloc_r+0xfc>
 8006ce6:	f000 f869 	bl	8006dbc <__malloc_lock>
 8006cea:	f8d8 3000 	ldr.w	r3, [r8]
 8006cee:	461c      	mov	r4, r3
 8006cf0:	bb44      	cbnz	r4, 8006d44 <_malloc_r+0x88>
 8006cf2:	4629      	mov	r1, r5
 8006cf4:	4630      	mov	r0, r6
 8006cf6:	f7ff ffbf 	bl	8006c78 <sbrk_aligned>
 8006cfa:	1c43      	adds	r3, r0, #1
 8006cfc:	4604      	mov	r4, r0
 8006cfe:	d158      	bne.n	8006db2 <_malloc_r+0xf6>
 8006d00:	f8d8 4000 	ldr.w	r4, [r8]
 8006d04:	4627      	mov	r7, r4
 8006d06:	2f00      	cmp	r7, #0
 8006d08:	d143      	bne.n	8006d92 <_malloc_r+0xd6>
 8006d0a:	2c00      	cmp	r4, #0
 8006d0c:	d04b      	beq.n	8006da6 <_malloc_r+0xea>
 8006d0e:	6823      	ldr	r3, [r4, #0]
 8006d10:	4639      	mov	r1, r7
 8006d12:	4630      	mov	r0, r6
 8006d14:	eb04 0903 	add.w	r9, r4, r3
 8006d18:	f000 f98c 	bl	8007034 <_sbrk_r>
 8006d1c:	4581      	cmp	r9, r0
 8006d1e:	d142      	bne.n	8006da6 <_malloc_r+0xea>
 8006d20:	6821      	ldr	r1, [r4, #0]
 8006d22:	1a6d      	subs	r5, r5, r1
 8006d24:	4629      	mov	r1, r5
 8006d26:	4630      	mov	r0, r6
 8006d28:	f7ff ffa6 	bl	8006c78 <sbrk_aligned>
 8006d2c:	3001      	adds	r0, #1
 8006d2e:	d03a      	beq.n	8006da6 <_malloc_r+0xea>
 8006d30:	6823      	ldr	r3, [r4, #0]
 8006d32:	442b      	add	r3, r5
 8006d34:	6023      	str	r3, [r4, #0]
 8006d36:	f8d8 3000 	ldr.w	r3, [r8]
 8006d3a:	685a      	ldr	r2, [r3, #4]
 8006d3c:	bb62      	cbnz	r2, 8006d98 <_malloc_r+0xdc>
 8006d3e:	f8c8 7000 	str.w	r7, [r8]
 8006d42:	e00f      	b.n	8006d64 <_malloc_r+0xa8>
 8006d44:	6822      	ldr	r2, [r4, #0]
 8006d46:	1b52      	subs	r2, r2, r5
 8006d48:	d420      	bmi.n	8006d8c <_malloc_r+0xd0>
 8006d4a:	2a0b      	cmp	r2, #11
 8006d4c:	d917      	bls.n	8006d7e <_malloc_r+0xc2>
 8006d4e:	1961      	adds	r1, r4, r5
 8006d50:	42a3      	cmp	r3, r4
 8006d52:	6025      	str	r5, [r4, #0]
 8006d54:	bf18      	it	ne
 8006d56:	6059      	strne	r1, [r3, #4]
 8006d58:	6863      	ldr	r3, [r4, #4]
 8006d5a:	bf08      	it	eq
 8006d5c:	f8c8 1000 	streq.w	r1, [r8]
 8006d60:	5162      	str	r2, [r4, r5]
 8006d62:	604b      	str	r3, [r1, #4]
 8006d64:	4630      	mov	r0, r6
 8006d66:	f000 f82f 	bl	8006dc8 <__malloc_unlock>
 8006d6a:	f104 000b 	add.w	r0, r4, #11
 8006d6e:	1d23      	adds	r3, r4, #4
 8006d70:	f020 0007 	bic.w	r0, r0, #7
 8006d74:	1ac2      	subs	r2, r0, r3
 8006d76:	bf1c      	itt	ne
 8006d78:	1a1b      	subne	r3, r3, r0
 8006d7a:	50a3      	strne	r3, [r4, r2]
 8006d7c:	e7af      	b.n	8006cde <_malloc_r+0x22>
 8006d7e:	6862      	ldr	r2, [r4, #4]
 8006d80:	42a3      	cmp	r3, r4
 8006d82:	bf0c      	ite	eq
 8006d84:	f8c8 2000 	streq.w	r2, [r8]
 8006d88:	605a      	strne	r2, [r3, #4]
 8006d8a:	e7eb      	b.n	8006d64 <_malloc_r+0xa8>
 8006d8c:	4623      	mov	r3, r4
 8006d8e:	6864      	ldr	r4, [r4, #4]
 8006d90:	e7ae      	b.n	8006cf0 <_malloc_r+0x34>
 8006d92:	463c      	mov	r4, r7
 8006d94:	687f      	ldr	r7, [r7, #4]
 8006d96:	e7b6      	b.n	8006d06 <_malloc_r+0x4a>
 8006d98:	461a      	mov	r2, r3
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	42a3      	cmp	r3, r4
 8006d9e:	d1fb      	bne.n	8006d98 <_malloc_r+0xdc>
 8006da0:	2300      	movs	r3, #0
 8006da2:	6053      	str	r3, [r2, #4]
 8006da4:	e7de      	b.n	8006d64 <_malloc_r+0xa8>
 8006da6:	230c      	movs	r3, #12
 8006da8:	6033      	str	r3, [r6, #0]
 8006daa:	4630      	mov	r0, r6
 8006dac:	f000 f80c 	bl	8006dc8 <__malloc_unlock>
 8006db0:	e794      	b.n	8006cdc <_malloc_r+0x20>
 8006db2:	6005      	str	r5, [r0, #0]
 8006db4:	e7d6      	b.n	8006d64 <_malloc_r+0xa8>
 8006db6:	bf00      	nop
 8006db8:	20001eb4 	.word	0x20001eb4

08006dbc <__malloc_lock>:
 8006dbc:	4801      	ldr	r0, [pc, #4]	@ (8006dc4 <__malloc_lock+0x8>)
 8006dbe:	f7ff bf0e 	b.w	8006bde <__retarget_lock_acquire_recursive>
 8006dc2:	bf00      	nop
 8006dc4:	20001eac 	.word	0x20001eac

08006dc8 <__malloc_unlock>:
 8006dc8:	4801      	ldr	r0, [pc, #4]	@ (8006dd0 <__malloc_unlock+0x8>)
 8006dca:	f7ff bf09 	b.w	8006be0 <__retarget_lock_release_recursive>
 8006dce:	bf00      	nop
 8006dd0:	20001eac 	.word	0x20001eac

08006dd4 <__sflush_r>:
 8006dd4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ddc:	0716      	lsls	r6, r2, #28
 8006dde:	4605      	mov	r5, r0
 8006de0:	460c      	mov	r4, r1
 8006de2:	d454      	bmi.n	8006e8e <__sflush_r+0xba>
 8006de4:	684b      	ldr	r3, [r1, #4]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	dc02      	bgt.n	8006df0 <__sflush_r+0x1c>
 8006dea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	dd48      	ble.n	8006e82 <__sflush_r+0xae>
 8006df0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006df2:	2e00      	cmp	r6, #0
 8006df4:	d045      	beq.n	8006e82 <__sflush_r+0xae>
 8006df6:	2300      	movs	r3, #0
 8006df8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006dfc:	682f      	ldr	r7, [r5, #0]
 8006dfe:	6a21      	ldr	r1, [r4, #32]
 8006e00:	602b      	str	r3, [r5, #0]
 8006e02:	d030      	beq.n	8006e66 <__sflush_r+0x92>
 8006e04:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006e06:	89a3      	ldrh	r3, [r4, #12]
 8006e08:	0759      	lsls	r1, r3, #29
 8006e0a:	d505      	bpl.n	8006e18 <__sflush_r+0x44>
 8006e0c:	6863      	ldr	r3, [r4, #4]
 8006e0e:	1ad2      	subs	r2, r2, r3
 8006e10:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006e12:	b10b      	cbz	r3, 8006e18 <__sflush_r+0x44>
 8006e14:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006e16:	1ad2      	subs	r2, r2, r3
 8006e18:	2300      	movs	r3, #0
 8006e1a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006e1c:	6a21      	ldr	r1, [r4, #32]
 8006e1e:	4628      	mov	r0, r5
 8006e20:	47b0      	blx	r6
 8006e22:	1c43      	adds	r3, r0, #1
 8006e24:	89a3      	ldrh	r3, [r4, #12]
 8006e26:	d106      	bne.n	8006e36 <__sflush_r+0x62>
 8006e28:	6829      	ldr	r1, [r5, #0]
 8006e2a:	291d      	cmp	r1, #29
 8006e2c:	d82b      	bhi.n	8006e86 <__sflush_r+0xb2>
 8006e2e:	4a2a      	ldr	r2, [pc, #168]	@ (8006ed8 <__sflush_r+0x104>)
 8006e30:	410a      	asrs	r2, r1
 8006e32:	07d6      	lsls	r6, r2, #31
 8006e34:	d427      	bmi.n	8006e86 <__sflush_r+0xb2>
 8006e36:	2200      	movs	r2, #0
 8006e38:	6062      	str	r2, [r4, #4]
 8006e3a:	04d9      	lsls	r1, r3, #19
 8006e3c:	6922      	ldr	r2, [r4, #16]
 8006e3e:	6022      	str	r2, [r4, #0]
 8006e40:	d504      	bpl.n	8006e4c <__sflush_r+0x78>
 8006e42:	1c42      	adds	r2, r0, #1
 8006e44:	d101      	bne.n	8006e4a <__sflush_r+0x76>
 8006e46:	682b      	ldr	r3, [r5, #0]
 8006e48:	b903      	cbnz	r3, 8006e4c <__sflush_r+0x78>
 8006e4a:	6560      	str	r0, [r4, #84]	@ 0x54
 8006e4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e4e:	602f      	str	r7, [r5, #0]
 8006e50:	b1b9      	cbz	r1, 8006e82 <__sflush_r+0xae>
 8006e52:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006e56:	4299      	cmp	r1, r3
 8006e58:	d002      	beq.n	8006e60 <__sflush_r+0x8c>
 8006e5a:	4628      	mov	r0, r5
 8006e5c:	f7ff fec2 	bl	8006be4 <_free_r>
 8006e60:	2300      	movs	r3, #0
 8006e62:	6363      	str	r3, [r4, #52]	@ 0x34
 8006e64:	e00d      	b.n	8006e82 <__sflush_r+0xae>
 8006e66:	2301      	movs	r3, #1
 8006e68:	4628      	mov	r0, r5
 8006e6a:	47b0      	blx	r6
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	1c50      	adds	r0, r2, #1
 8006e70:	d1c9      	bne.n	8006e06 <__sflush_r+0x32>
 8006e72:	682b      	ldr	r3, [r5, #0]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d0c6      	beq.n	8006e06 <__sflush_r+0x32>
 8006e78:	2b1d      	cmp	r3, #29
 8006e7a:	d001      	beq.n	8006e80 <__sflush_r+0xac>
 8006e7c:	2b16      	cmp	r3, #22
 8006e7e:	d11e      	bne.n	8006ebe <__sflush_r+0xea>
 8006e80:	602f      	str	r7, [r5, #0]
 8006e82:	2000      	movs	r0, #0
 8006e84:	e022      	b.n	8006ecc <__sflush_r+0xf8>
 8006e86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e8a:	b21b      	sxth	r3, r3
 8006e8c:	e01b      	b.n	8006ec6 <__sflush_r+0xf2>
 8006e8e:	690f      	ldr	r7, [r1, #16]
 8006e90:	2f00      	cmp	r7, #0
 8006e92:	d0f6      	beq.n	8006e82 <__sflush_r+0xae>
 8006e94:	0793      	lsls	r3, r2, #30
 8006e96:	680e      	ldr	r6, [r1, #0]
 8006e98:	bf08      	it	eq
 8006e9a:	694b      	ldreq	r3, [r1, #20]
 8006e9c:	600f      	str	r7, [r1, #0]
 8006e9e:	bf18      	it	ne
 8006ea0:	2300      	movne	r3, #0
 8006ea2:	eba6 0807 	sub.w	r8, r6, r7
 8006ea6:	608b      	str	r3, [r1, #8]
 8006ea8:	f1b8 0f00 	cmp.w	r8, #0
 8006eac:	dde9      	ble.n	8006e82 <__sflush_r+0xae>
 8006eae:	6a21      	ldr	r1, [r4, #32]
 8006eb0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006eb2:	4643      	mov	r3, r8
 8006eb4:	463a      	mov	r2, r7
 8006eb6:	4628      	mov	r0, r5
 8006eb8:	47b0      	blx	r6
 8006eba:	2800      	cmp	r0, #0
 8006ebc:	dc08      	bgt.n	8006ed0 <__sflush_r+0xfc>
 8006ebe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ec2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ec6:	81a3      	strh	r3, [r4, #12]
 8006ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ed0:	4407      	add	r7, r0
 8006ed2:	eba8 0800 	sub.w	r8, r8, r0
 8006ed6:	e7e7      	b.n	8006ea8 <__sflush_r+0xd4>
 8006ed8:	dfbffffe 	.word	0xdfbffffe

08006edc <_fflush_r>:
 8006edc:	b538      	push	{r3, r4, r5, lr}
 8006ede:	690b      	ldr	r3, [r1, #16]
 8006ee0:	4605      	mov	r5, r0
 8006ee2:	460c      	mov	r4, r1
 8006ee4:	b913      	cbnz	r3, 8006eec <_fflush_r+0x10>
 8006ee6:	2500      	movs	r5, #0
 8006ee8:	4628      	mov	r0, r5
 8006eea:	bd38      	pop	{r3, r4, r5, pc}
 8006eec:	b118      	cbz	r0, 8006ef6 <_fflush_r+0x1a>
 8006eee:	6a03      	ldr	r3, [r0, #32]
 8006ef0:	b90b      	cbnz	r3, 8006ef6 <_fflush_r+0x1a>
 8006ef2:	f7ff fc8f 	bl	8006814 <__sinit>
 8006ef6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d0f3      	beq.n	8006ee6 <_fflush_r+0xa>
 8006efe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006f00:	07d0      	lsls	r0, r2, #31
 8006f02:	d404      	bmi.n	8006f0e <_fflush_r+0x32>
 8006f04:	0599      	lsls	r1, r3, #22
 8006f06:	d402      	bmi.n	8006f0e <_fflush_r+0x32>
 8006f08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f0a:	f7ff fe68 	bl	8006bde <__retarget_lock_acquire_recursive>
 8006f0e:	4628      	mov	r0, r5
 8006f10:	4621      	mov	r1, r4
 8006f12:	f7ff ff5f 	bl	8006dd4 <__sflush_r>
 8006f16:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f18:	07da      	lsls	r2, r3, #31
 8006f1a:	4605      	mov	r5, r0
 8006f1c:	d4e4      	bmi.n	8006ee8 <_fflush_r+0xc>
 8006f1e:	89a3      	ldrh	r3, [r4, #12]
 8006f20:	059b      	lsls	r3, r3, #22
 8006f22:	d4e1      	bmi.n	8006ee8 <_fflush_r+0xc>
 8006f24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f26:	f7ff fe5b 	bl	8006be0 <__retarget_lock_release_recursive>
 8006f2a:	e7dd      	b.n	8006ee8 <_fflush_r+0xc>

08006f2c <__swhatbuf_r>:
 8006f2c:	b570      	push	{r4, r5, r6, lr}
 8006f2e:	460c      	mov	r4, r1
 8006f30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f34:	2900      	cmp	r1, #0
 8006f36:	b096      	sub	sp, #88	@ 0x58
 8006f38:	4615      	mov	r5, r2
 8006f3a:	461e      	mov	r6, r3
 8006f3c:	da0d      	bge.n	8006f5a <__swhatbuf_r+0x2e>
 8006f3e:	89a3      	ldrh	r3, [r4, #12]
 8006f40:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006f44:	f04f 0100 	mov.w	r1, #0
 8006f48:	bf14      	ite	ne
 8006f4a:	2340      	movne	r3, #64	@ 0x40
 8006f4c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006f50:	2000      	movs	r0, #0
 8006f52:	6031      	str	r1, [r6, #0]
 8006f54:	602b      	str	r3, [r5, #0]
 8006f56:	b016      	add	sp, #88	@ 0x58
 8006f58:	bd70      	pop	{r4, r5, r6, pc}
 8006f5a:	466a      	mov	r2, sp
 8006f5c:	f000 f848 	bl	8006ff0 <_fstat_r>
 8006f60:	2800      	cmp	r0, #0
 8006f62:	dbec      	blt.n	8006f3e <__swhatbuf_r+0x12>
 8006f64:	9901      	ldr	r1, [sp, #4]
 8006f66:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006f6a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006f6e:	4259      	negs	r1, r3
 8006f70:	4159      	adcs	r1, r3
 8006f72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006f76:	e7eb      	b.n	8006f50 <__swhatbuf_r+0x24>

08006f78 <__smakebuf_r>:
 8006f78:	898b      	ldrh	r3, [r1, #12]
 8006f7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f7c:	079d      	lsls	r5, r3, #30
 8006f7e:	4606      	mov	r6, r0
 8006f80:	460c      	mov	r4, r1
 8006f82:	d507      	bpl.n	8006f94 <__smakebuf_r+0x1c>
 8006f84:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006f88:	6023      	str	r3, [r4, #0]
 8006f8a:	6123      	str	r3, [r4, #16]
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	6163      	str	r3, [r4, #20]
 8006f90:	b003      	add	sp, #12
 8006f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f94:	ab01      	add	r3, sp, #4
 8006f96:	466a      	mov	r2, sp
 8006f98:	f7ff ffc8 	bl	8006f2c <__swhatbuf_r>
 8006f9c:	9f00      	ldr	r7, [sp, #0]
 8006f9e:	4605      	mov	r5, r0
 8006fa0:	4639      	mov	r1, r7
 8006fa2:	4630      	mov	r0, r6
 8006fa4:	f7ff fe8a 	bl	8006cbc <_malloc_r>
 8006fa8:	b948      	cbnz	r0, 8006fbe <__smakebuf_r+0x46>
 8006faa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fae:	059a      	lsls	r2, r3, #22
 8006fb0:	d4ee      	bmi.n	8006f90 <__smakebuf_r+0x18>
 8006fb2:	f023 0303 	bic.w	r3, r3, #3
 8006fb6:	f043 0302 	orr.w	r3, r3, #2
 8006fba:	81a3      	strh	r3, [r4, #12]
 8006fbc:	e7e2      	b.n	8006f84 <__smakebuf_r+0xc>
 8006fbe:	89a3      	ldrh	r3, [r4, #12]
 8006fc0:	6020      	str	r0, [r4, #0]
 8006fc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fc6:	81a3      	strh	r3, [r4, #12]
 8006fc8:	9b01      	ldr	r3, [sp, #4]
 8006fca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006fce:	b15b      	cbz	r3, 8006fe8 <__smakebuf_r+0x70>
 8006fd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fd4:	4630      	mov	r0, r6
 8006fd6:	f000 f81d 	bl	8007014 <_isatty_r>
 8006fda:	b128      	cbz	r0, 8006fe8 <__smakebuf_r+0x70>
 8006fdc:	89a3      	ldrh	r3, [r4, #12]
 8006fde:	f023 0303 	bic.w	r3, r3, #3
 8006fe2:	f043 0301 	orr.w	r3, r3, #1
 8006fe6:	81a3      	strh	r3, [r4, #12]
 8006fe8:	89a3      	ldrh	r3, [r4, #12]
 8006fea:	431d      	orrs	r5, r3
 8006fec:	81a5      	strh	r5, [r4, #12]
 8006fee:	e7cf      	b.n	8006f90 <__smakebuf_r+0x18>

08006ff0 <_fstat_r>:
 8006ff0:	b538      	push	{r3, r4, r5, lr}
 8006ff2:	4d07      	ldr	r5, [pc, #28]	@ (8007010 <_fstat_r+0x20>)
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	4604      	mov	r4, r0
 8006ff8:	4608      	mov	r0, r1
 8006ffa:	4611      	mov	r1, r2
 8006ffc:	602b      	str	r3, [r5, #0]
 8006ffe:	f7f9 fd72 	bl	8000ae6 <_fstat>
 8007002:	1c43      	adds	r3, r0, #1
 8007004:	d102      	bne.n	800700c <_fstat_r+0x1c>
 8007006:	682b      	ldr	r3, [r5, #0]
 8007008:	b103      	cbz	r3, 800700c <_fstat_r+0x1c>
 800700a:	6023      	str	r3, [r4, #0]
 800700c:	bd38      	pop	{r3, r4, r5, pc}
 800700e:	bf00      	nop
 8007010:	20001ea8 	.word	0x20001ea8

08007014 <_isatty_r>:
 8007014:	b538      	push	{r3, r4, r5, lr}
 8007016:	4d06      	ldr	r5, [pc, #24]	@ (8007030 <_isatty_r+0x1c>)
 8007018:	2300      	movs	r3, #0
 800701a:	4604      	mov	r4, r0
 800701c:	4608      	mov	r0, r1
 800701e:	602b      	str	r3, [r5, #0]
 8007020:	f7f9 fd71 	bl	8000b06 <_isatty>
 8007024:	1c43      	adds	r3, r0, #1
 8007026:	d102      	bne.n	800702e <_isatty_r+0x1a>
 8007028:	682b      	ldr	r3, [r5, #0]
 800702a:	b103      	cbz	r3, 800702e <_isatty_r+0x1a>
 800702c:	6023      	str	r3, [r4, #0]
 800702e:	bd38      	pop	{r3, r4, r5, pc}
 8007030:	20001ea8 	.word	0x20001ea8

08007034 <_sbrk_r>:
 8007034:	b538      	push	{r3, r4, r5, lr}
 8007036:	4d06      	ldr	r5, [pc, #24]	@ (8007050 <_sbrk_r+0x1c>)
 8007038:	2300      	movs	r3, #0
 800703a:	4604      	mov	r4, r0
 800703c:	4608      	mov	r0, r1
 800703e:	602b      	str	r3, [r5, #0]
 8007040:	f7f9 fd7a 	bl	8000b38 <_sbrk>
 8007044:	1c43      	adds	r3, r0, #1
 8007046:	d102      	bne.n	800704e <_sbrk_r+0x1a>
 8007048:	682b      	ldr	r3, [r5, #0]
 800704a:	b103      	cbz	r3, 800704e <_sbrk_r+0x1a>
 800704c:	6023      	str	r3, [r4, #0]
 800704e:	bd38      	pop	{r3, r4, r5, pc}
 8007050:	20001ea8 	.word	0x20001ea8

08007054 <_init>:
 8007054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007056:	bf00      	nop
 8007058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800705a:	bc08      	pop	{r3}
 800705c:	469e      	mov	lr, r3
 800705e:	4770      	bx	lr

08007060 <_fini>:
 8007060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007062:	bf00      	nop
 8007064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007066:	bc08      	pop	{r3}
 8007068:	469e      	mov	lr, r3
 800706a:	4770      	bx	lr
