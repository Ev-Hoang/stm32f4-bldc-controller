
BLDC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fc4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800714c  0800714c  0000814c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071b4  080071b4  0000915c  2**0
                  CONTENTS
  4 .ARM          00000000  080071b4  080071b4  0000915c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080071b4  080071b4  0000915c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071b4  080071b4  000081b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080071b8  080071b8  000081b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000015c  20000000  080071bc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000915c  2**0
                  CONTENTS
 10 .bss          00001d5c  2000015c  2000015c  0000915c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001eb8  20001eb8  0000915c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000915c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e593  00000000  00000000  0000918c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e33  00000000  00000000  0001771f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c60  00000000  00000000  0001a558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000912  00000000  00000000  0001b1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024a63  00000000  00000000  0001baca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011ed3  00000000  00000000  0004052d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf0bf  00000000  00000000  00052400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001214bf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003660  00000000  00000000  00121504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000046  00000000  00000000  00124b64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000015c 	.word	0x2000015c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007134 	.word	0x08007134

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000160 	.word	0x20000160
 80001c4:	08007134 	.word	0x08007134

080001c8 <bufferAdd>:

uint8_t bufferHead;
uint8_t bufferTail;
uint8_t arrayBuffer[BUFFER_SIZE];

void bufferAdd(uint8_t buffer) {
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
    uint8_t nextHead = (bufferHead + 1) % BUFFER_SIZE;
 80001d2:	4b0e      	ldr	r3, [pc, #56]	@ (800020c <bufferAdd+0x44>)
 80001d4:	781b      	ldrb	r3, [r3, #0]
 80001d6:	3301      	adds	r3, #1
 80001d8:	2b00      	cmp	r3, #0
 80001da:	f003 0301 	and.w	r3, r3, #1
 80001de:	bfb8      	it	lt
 80001e0:	425b      	neglt	r3, r3
 80001e2:	73fb      	strb	r3, [r7, #15]
    if (nextHead != bufferTail) {
 80001e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000210 <bufferAdd+0x48>)
 80001e6:	781b      	ldrb	r3, [r3, #0]
 80001e8:	7bfa      	ldrb	r2, [r7, #15]
 80001ea:	429a      	cmp	r2, r3
 80001ec:	d008      	beq.n	8000200 <bufferAdd+0x38>
        arrayBuffer[bufferHead] = buffer;
 80001ee:	4b07      	ldr	r3, [pc, #28]	@ (800020c <bufferAdd+0x44>)
 80001f0:	781b      	ldrb	r3, [r3, #0]
 80001f2:	4619      	mov	r1, r3
 80001f4:	4a07      	ldr	r2, [pc, #28]	@ (8000214 <bufferAdd+0x4c>)
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	5453      	strb	r3, [r2, r1]
        bufferHead = nextHead;
 80001fa:	4a04      	ldr	r2, [pc, #16]	@ (800020c <bufferAdd+0x44>)
 80001fc:	7bfb      	ldrb	r3, [r7, #15]
 80001fe:	7013      	strb	r3, [r2, #0]
    }
}
 8000200:	bf00      	nop
 8000202:	3714      	adds	r7, #20
 8000204:	46bd      	mov	sp, r7
 8000206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020a:	4770      	bx	lr
 800020c:	20000178 	.word	0x20000178
 8000210:	20000179 	.word	0x20000179
 8000214:	2000017c 	.word	0x2000017c

08000218 <bufferGet>:

int bufferGet() {
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
	if (bufferTail != bufferHead) {
 800021e:	4b0f      	ldr	r3, [pc, #60]	@ (800025c <bufferGet+0x44>)
 8000220:	781a      	ldrb	r2, [r3, #0]
 8000222:	4b0f      	ldr	r3, [pc, #60]	@ (8000260 <bufferGet+0x48>)
 8000224:	781b      	ldrb	r3, [r3, #0]
 8000226:	429a      	cmp	r2, r3
 8000228:	d012      	beq.n	8000250 <bufferGet+0x38>
	  uint8_t buffer = arrayBuffer[bufferTail];
 800022a:	4b0c      	ldr	r3, [pc, #48]	@ (800025c <bufferGet+0x44>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	4b0c      	ldr	r3, [pc, #48]	@ (8000264 <bufferGet+0x4c>)
 8000232:	5c9b      	ldrb	r3, [r3, r2]
 8000234:	71fb      	strb	r3, [r7, #7]
	  bufferTail = (bufferTail + 1) % BUFFER_SIZE;
 8000236:	4b09      	ldr	r3, [pc, #36]	@ (800025c <bufferGet+0x44>)
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	3301      	adds	r3, #1
 800023c:	2b00      	cmp	r3, #0
 800023e:	f003 0301 	and.w	r3, r3, #1
 8000242:	bfb8      	it	lt
 8000244:	425b      	neglt	r3, r3
 8000246:	b2da      	uxtb	r2, r3
 8000248:	4b04      	ldr	r3, [pc, #16]	@ (800025c <bufferGet+0x44>)
 800024a:	701a      	strb	r2, [r3, #0]
	  return buffer;
 800024c:	79fb      	ldrb	r3, [r7, #7]
 800024e:	e7ff      	b.n	8000250 <bufferGet+0x38>
	}
}
 8000250:	4618      	mov	r0, r3
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr
 800025c:	20000179 	.word	0x20000179
 8000260:	20000178 	.word	0x20000178
 8000264:	2000017c 	.word	0x2000017c

08000268 <STM32_Init>:

//======================================================
//STM32 FULL INITIALIZATION
//======================================================
void STM32_Init(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
	//HALL
	HAL_Init();
 800026c:	f000 fd46 	bl	8000cfc <HAL_Init>

	//SYSTEMCLOCK
	SystemClock_Config();
 8000270:	f000 f80e 	bl	8000290 <SystemClock_Config>

	//USB_DEVICE (USB_CDC)
	MX_USB_DEVICE_Init();
 8000274:	f005 fdbe 	bl	8005df4 <MX_USB_DEVICE_Init>

	//GPIO
	GPIO_Init();
 8000278:	f000 f96a 	bl	8000550 <GPIO_Init>

	//TIMER
	TIM2_Init();
 800027c:	f000 f866 	bl	800034c <TIM2_Init>
	TIM3_Init();
 8000280:	f000 f8c6 	bl	8000410 <TIM3_Init>
	TIM4_Init();
 8000284:	f000 f914 	bl	80004b0 <TIM4_Init>

	//COMMUNICATION UART
	USART1_UART_Init();
 8000288:	f000 fa38 	bl	80006fc <USART1_UART_Init>
}
 800028c:	bf00      	nop
 800028e:	bd80      	pop	{r7, pc}

08000290 <SystemClock_Config>:

//======================================================
//SYSTEMCLOCK CONFIG
//======================================================
void SystemClock_Config(void)
{
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
    // 1. Enable HSI (High-Speed Internal Clock)
    RCC->CR |= RCC_CR_HSION;
 8000294:	4b2a      	ldr	r3, [pc, #168]	@ (8000340 <SystemClock_Config+0xb0>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a29      	ldr	r2, [pc, #164]	@ (8000340 <SystemClock_Config+0xb0>)
 800029a:	f043 0301 	orr.w	r3, r3, #1
 800029e:	6013      	str	r3, [r2, #0]
    while ((RCC->CR & RCC_CR_HSIRDY) == 0); // Wait till HSI is ready
 80002a0:	bf00      	nop
 80002a2:	4b27      	ldr	r3, [pc, #156]	@ (8000340 <SystemClock_Config+0xb0>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	f003 0302 	and.w	r3, r3, #2
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d0f9      	beq.n	80002a2 <SystemClock_Config+0x12>

    // 2. Reset PLL
    RCC->CR &= ~RCC_CR_PLLON; // Turn off PLL
 80002ae:	4b24      	ldr	r3, [pc, #144]	@ (8000340 <SystemClock_Config+0xb0>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	4a23      	ldr	r2, [pc, #140]	@ (8000340 <SystemClock_Config+0xb0>)
 80002b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80002b8:	6013      	str	r3, [r2, #0]
    while (RCC->CR & RCC_CR_PLLRDY); // Wait PLL disabled
 80002ba:	bf00      	nop
 80002bc:	4b20      	ldr	r3, [pc, #128]	@ (8000340 <SystemClock_Config+0xb0>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d1f9      	bne.n	80002bc <SystemClock_Config+0x2c>
     * PLL_P = 4 (00: /2, 01: /4, ...)
     * PLL_Q = 7
     *
     * SYSCLK = ((16 MHz / 16) * 336) / 4 = 84 MHz
     */
    RCC->PLLCFGR = (16 << RCC_PLLCFGR_PLLM_Pos) |
 80002c8:	4b1d      	ldr	r3, [pc, #116]	@ (8000340 <SystemClock_Config+0xb0>)
 80002ca:	4a1e      	ldr	r2, [pc, #120]	@ (8000344 <SystemClock_Config+0xb4>)
 80002cc:	605a      	str	r2, [r3, #4]
                   (1 << RCC_PLLCFGR_PLLP_Pos) |  // PLLP = 4 -> 01b
                   (7 << RCC_PLLCFGR_PLLQ_Pos) |
                   (RCC_PLLCFGR_PLLSRC_HSI);      // PLL source = HSI

    // 4. Enable PLL
    RCC->CR |= RCC_CR_PLLON;
 80002ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000340 <SystemClock_Config+0xb0>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	4a1b      	ldr	r2, [pc, #108]	@ (8000340 <SystemClock_Config+0xb0>)
 80002d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80002d8:	6013      	str	r3, [r2, #0]
    while ((RCC->CR & RCC_CR_PLLRDY) == 0); // Wait till PLL is ready
 80002da:	bf00      	nop
 80002dc:	4b18      	ldr	r3, [pc, #96]	@ (8000340 <SystemClock_Config+0xb0>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d0f9      	beq.n	80002dc <SystemClock_Config+0x4c>

    // 5. Configure Flash Latency
    FLASH->ACR = FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_PRFTEN | FLASH_ACR_LATENCY_2WS;
 80002e8:	4b17      	ldr	r3, [pc, #92]	@ (8000348 <SystemClock_Config+0xb8>)
 80002ea:	f240 7202 	movw	r2, #1794	@ 0x702
 80002ee:	601a      	str	r2, [r3, #0]

    // 6. Set AHB, APB1, APB2 prescaler
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;   // AHB prescaler = /1 -> 84 MHz
 80002f0:	4b13      	ldr	r3, [pc, #76]	@ (8000340 <SystemClock_Config+0xb0>)
 80002f2:	4a13      	ldr	r2, [pc, #76]	@ (8000340 <SystemClock_Config+0xb0>)
 80002f4:	689b      	ldr	r3, [r3, #8]
 80002f6:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;  // APB1 prescaler = /2 -> 42 MHz
 80002f8:	4b11      	ldr	r3, [pc, #68]	@ (8000340 <SystemClock_Config+0xb0>)
 80002fa:	689b      	ldr	r3, [r3, #8]
 80002fc:	4a10      	ldr	r2, [pc, #64]	@ (8000340 <SystemClock_Config+0xb0>)
 80002fe:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000302:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;  // APB2 prescaler = /1 -> 84 MHz
 8000304:	4b0e      	ldr	r3, [pc, #56]	@ (8000340 <SystemClock_Config+0xb0>)
 8000306:	4a0e      	ldr	r2, [pc, #56]	@ (8000340 <SystemClock_Config+0xb0>)
 8000308:	689b      	ldr	r3, [r3, #8]
 800030a:	6093      	str	r3, [r2, #8]

    // 7. Select PLL as system clock
    RCC->CFGR &= ~RCC_CFGR_SW;         // Clear SW bits
 800030c:	4b0c      	ldr	r3, [pc, #48]	@ (8000340 <SystemClock_Config+0xb0>)
 800030e:	689b      	ldr	r3, [r3, #8]
 8000310:	4a0b      	ldr	r2, [pc, #44]	@ (8000340 <SystemClock_Config+0xb0>)
 8000312:	f023 0303 	bic.w	r3, r3, #3
 8000316:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;      // Select PLL as system clock
 8000318:	4b09      	ldr	r3, [pc, #36]	@ (8000340 <SystemClock_Config+0xb0>)
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	4a08      	ldr	r2, [pc, #32]	@ (8000340 <SystemClock_Config+0xb0>)
 800031e:	f043 0302 	orr.w	r3, r3, #2
 8000322:	6093      	str	r3, [r2, #8]
    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL); // Wait till PLL is system clock
 8000324:	bf00      	nop
 8000326:	4b06      	ldr	r3, [pc, #24]	@ (8000340 <SystemClock_Config+0xb0>)
 8000328:	689b      	ldr	r3, [r3, #8]
 800032a:	f003 030c 	and.w	r3, r3, #12
 800032e:	2b08      	cmp	r3, #8
 8000330:	d1f9      	bne.n	8000326 <SystemClock_Config+0x96>
}
 8000332:	bf00      	nop
 8000334:	bf00      	nop
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	40023800 	.word	0x40023800
 8000344:	07015410 	.word	0x07015410
 8000348:	40023c00 	.word	0x40023c00

0800034c <TIM2_Init>:

//======================================================
//TIMER INITIALIZE
//======================================================
void TIM2_Init(void) {
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
    // Enable TIM2 clock
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000350:	4b2e      	ldr	r3, [pc, #184]	@ (800040c <TIM2_Init+0xc0>)
 8000352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000354:	4a2d      	ldr	r2, [pc, #180]	@ (800040c <TIM2_Init+0xc0>)
 8000356:	f043 0301 	orr.w	r3, r3, #1
 800035a:	6413      	str	r3, [r2, #64]	@ 0x40

    // Set prescaler and auto-reload for 1kHz PWM
    TIM2->PSC = 3;     // 84MHz / (3+1) = 21MHz
 800035c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000360:	2203      	movs	r2, #3
 8000362:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 1000;   // PWM frequency ~ 20.9Khz
 8000364:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000368:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800036c:	62da      	str	r2, [r3, #44]	@ 0x2c

    // PWM mode 1, preload enable for CH1-CH4
    TIM2->CCMR1 |= (6 << 4) | TIM_CCMR1_OC1PE;  // CH1
 800036e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000378:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 800037c:	6193      	str	r3, [r2, #24]
    TIM2->CCMR1 |= (6 << 12) | TIM_CCMR1_OC2PE; // CH2
 800037e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000388:	f443 43d0 	orr.w	r3, r3, #26624	@ 0x6800
 800038c:	6193      	str	r3, [r2, #24]
    TIM2->CCMR2 |= (6 << 4) | TIM_CCMR2_OC3PE;  // CH3
 800038e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000392:	69db      	ldr	r3, [r3, #28]
 8000394:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000398:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 800039c:	61d3      	str	r3, [r2, #28]
    TIM2->CCMR2 |= (6 << 12) | TIM_CCMR2_OC4PE; // CH4
 800039e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003a2:	69db      	ldr	r3, [r3, #28]
 80003a4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003a8:	f443 43d0 	orr.w	r3, r3, #26624	@ 0x6800
 80003ac:	61d3      	str	r3, [r2, #28]

    // Enable outputs
    TIM2->CCER |= TIM_CCER_CC1E | TIM_CCER_CC2E |
 80003ae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003b2:	6a1b      	ldr	r3, [r3, #32]
 80003b4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003b8:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 80003bc:	f043 0311 	orr.w	r3, r3, #17
 80003c0:	6213      	str	r3, [r2, #32]
                  TIM_CCER_CC3E | TIM_CCER_CC4E;

    // Force update
    TIM2->EGR |= TIM_EGR_UG;
 80003c2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003c6:	695b      	ldr	r3, [r3, #20]
 80003c8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003cc:	f043 0301 	orr.w	r3, r3, #1
 80003d0:	6153      	str	r3, [r2, #20]

    // Set duty cycle = 0
    TIM2->CCR1 = 0;
 80003d2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003d6:	2200      	movs	r2, #0
 80003d8:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2->CCR2 = 0;
 80003da:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003de:	2200      	movs	r2, #0
 80003e0:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM2->CCR3 = 0;
 80003e2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003e6:	2200      	movs	r2, #0
 80003e8:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2->CCR4 = 0;
 80003ea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003ee:	2200      	movs	r2, #0
 80003f0:	641a      	str	r2, [r3, #64]	@ 0x40

    // Enable counter
    TIM2->CR1 |= TIM_CR1_CEN;
 80003f2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003fc:	f043 0301 	orr.w	r3, r3, #1
 8000400:	6013      	str	r3, [r2, #0]
}
 8000402:	bf00      	nop
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr
 800040c:	40023800 	.word	0x40023800

08000410 <TIM3_Init>:

void TIM3_Init(void) {
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000414:	4b24      	ldr	r3, [pc, #144]	@ (80004a8 <TIM3_Init+0x98>)
 8000416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000418:	4a23      	ldr	r2, [pc, #140]	@ (80004a8 <TIM3_Init+0x98>)
 800041a:	f043 0302 	orr.w	r3, r3, #2
 800041e:	6413      	str	r3, [r2, #64]	@ 0x40
    TIM3->PSC = 3;
 8000420:	4b22      	ldr	r3, [pc, #136]	@ (80004ac <TIM3_Init+0x9c>)
 8000422:	2203      	movs	r2, #3
 8000424:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM3->ARR = 1000;
 8000426:	4b21      	ldr	r3, [pc, #132]	@ (80004ac <TIM3_Init+0x9c>)
 8000428:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800042c:	62da      	str	r2, [r3, #44]	@ 0x2c

    TIM3->CCMR1 |= (6 << 4) | TIM_CCMR1_OC1PE;
 800042e:	4b1f      	ldr	r3, [pc, #124]	@ (80004ac <TIM3_Init+0x9c>)
 8000430:	699b      	ldr	r3, [r3, #24]
 8000432:	4a1e      	ldr	r2, [pc, #120]	@ (80004ac <TIM3_Init+0x9c>)
 8000434:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 8000438:	6193      	str	r3, [r2, #24]
    TIM3->CCMR1 |= (6 << 12) | TIM_CCMR1_OC2PE;
 800043a:	4b1c      	ldr	r3, [pc, #112]	@ (80004ac <TIM3_Init+0x9c>)
 800043c:	699b      	ldr	r3, [r3, #24]
 800043e:	4a1b      	ldr	r2, [pc, #108]	@ (80004ac <TIM3_Init+0x9c>)
 8000440:	f443 43d0 	orr.w	r3, r3, #26624	@ 0x6800
 8000444:	6193      	str	r3, [r2, #24]
    TIM3->CCMR2 |= (6 << 4) | TIM_CCMR2_OC3PE;
 8000446:	4b19      	ldr	r3, [pc, #100]	@ (80004ac <TIM3_Init+0x9c>)
 8000448:	69db      	ldr	r3, [r3, #28]
 800044a:	4a18      	ldr	r2, [pc, #96]	@ (80004ac <TIM3_Init+0x9c>)
 800044c:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 8000450:	61d3      	str	r3, [r2, #28]
    TIM3->CCMR2 |= (6 << 12) | TIM_CCMR2_OC4PE;
 8000452:	4b16      	ldr	r3, [pc, #88]	@ (80004ac <TIM3_Init+0x9c>)
 8000454:	69db      	ldr	r3, [r3, #28]
 8000456:	4a15      	ldr	r2, [pc, #84]	@ (80004ac <TIM3_Init+0x9c>)
 8000458:	f443 43d0 	orr.w	r3, r3, #26624	@ 0x6800
 800045c:	61d3      	str	r3, [r2, #28]

    TIM3->CCER |= TIM_CCER_CC1E | TIM_CCER_CC2E |
 800045e:	4b13      	ldr	r3, [pc, #76]	@ (80004ac <TIM3_Init+0x9c>)
 8000460:	6a1b      	ldr	r3, [r3, #32]
 8000462:	4a12      	ldr	r2, [pc, #72]	@ (80004ac <TIM3_Init+0x9c>)
 8000464:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 8000468:	f043 0311 	orr.w	r3, r3, #17
 800046c:	6213      	str	r3, [r2, #32]
                  TIM_CCER_CC3E | TIM_CCER_CC4E;

    TIM3->EGR |= TIM_EGR_UG;
 800046e:	4b0f      	ldr	r3, [pc, #60]	@ (80004ac <TIM3_Init+0x9c>)
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	4a0e      	ldr	r2, [pc, #56]	@ (80004ac <TIM3_Init+0x9c>)
 8000474:	f043 0301 	orr.w	r3, r3, #1
 8000478:	6153      	str	r3, [r2, #20]

    TIM3->CCR1 = 0;
 800047a:	4b0c      	ldr	r3, [pc, #48]	@ (80004ac <TIM3_Init+0x9c>)
 800047c:	2200      	movs	r2, #0
 800047e:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3->CCR2 = 0;
 8000480:	4b0a      	ldr	r3, [pc, #40]	@ (80004ac <TIM3_Init+0x9c>)
 8000482:	2200      	movs	r2, #0
 8000484:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3->CCR3 = 0;
 8000486:	4b09      	ldr	r3, [pc, #36]	@ (80004ac <TIM3_Init+0x9c>)
 8000488:	2200      	movs	r2, #0
 800048a:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM3->CCR4 = 0;
 800048c:	4b07      	ldr	r3, [pc, #28]	@ (80004ac <TIM3_Init+0x9c>)
 800048e:	2200      	movs	r2, #0
 8000490:	641a      	str	r2, [r3, #64]	@ 0x40

    TIM3->CR1 |= TIM_CR1_CEN;
 8000492:	4b06      	ldr	r3, [pc, #24]	@ (80004ac <TIM3_Init+0x9c>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	4a05      	ldr	r2, [pc, #20]	@ (80004ac <TIM3_Init+0x9c>)
 8000498:	f043 0301 	orr.w	r3, r3, #1
 800049c:	6013      	str	r3, [r2, #0]
}
 800049e:	bf00      	nop
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr
 80004a8:	40023800 	.word	0x40023800
 80004ac:	40000400 	.word	0x40000400

080004b0 <TIM4_Init>:

void TIM4_Init(void) {
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 80004b4:	4b24      	ldr	r3, [pc, #144]	@ (8000548 <TIM4_Init+0x98>)
 80004b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004b8:	4a23      	ldr	r2, [pc, #140]	@ (8000548 <TIM4_Init+0x98>)
 80004ba:	f043 0304 	orr.w	r3, r3, #4
 80004be:	6413      	str	r3, [r2, #64]	@ 0x40
    TIM4->PSC = 3;
 80004c0:	4b22      	ldr	r3, [pc, #136]	@ (800054c <TIM4_Init+0x9c>)
 80004c2:	2203      	movs	r2, #3
 80004c4:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM4->ARR = 1000;
 80004c6:	4b21      	ldr	r3, [pc, #132]	@ (800054c <TIM4_Init+0x9c>)
 80004c8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80004cc:	62da      	str	r2, [r3, #44]	@ 0x2c

    TIM4->CCMR1 |= (6 << 4) | TIM_CCMR1_OC1PE;
 80004ce:	4b1f      	ldr	r3, [pc, #124]	@ (800054c <TIM4_Init+0x9c>)
 80004d0:	699b      	ldr	r3, [r3, #24]
 80004d2:	4a1e      	ldr	r2, [pc, #120]	@ (800054c <TIM4_Init+0x9c>)
 80004d4:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 80004d8:	6193      	str	r3, [r2, #24]
    TIM4->CCMR1 |= (6 << 12) | TIM_CCMR1_OC2PE;
 80004da:	4b1c      	ldr	r3, [pc, #112]	@ (800054c <TIM4_Init+0x9c>)
 80004dc:	699b      	ldr	r3, [r3, #24]
 80004de:	4a1b      	ldr	r2, [pc, #108]	@ (800054c <TIM4_Init+0x9c>)
 80004e0:	f443 43d0 	orr.w	r3, r3, #26624	@ 0x6800
 80004e4:	6193      	str	r3, [r2, #24]
    TIM4->CCMR2 |= (6 << 4) | TIM_CCMR2_OC3PE;
 80004e6:	4b19      	ldr	r3, [pc, #100]	@ (800054c <TIM4_Init+0x9c>)
 80004e8:	69db      	ldr	r3, [r3, #28]
 80004ea:	4a18      	ldr	r2, [pc, #96]	@ (800054c <TIM4_Init+0x9c>)
 80004ec:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 80004f0:	61d3      	str	r3, [r2, #28]
    TIM4->CCMR2 |= (6 << 12) | TIM_CCMR2_OC4PE;
 80004f2:	4b16      	ldr	r3, [pc, #88]	@ (800054c <TIM4_Init+0x9c>)
 80004f4:	69db      	ldr	r3, [r3, #28]
 80004f6:	4a15      	ldr	r2, [pc, #84]	@ (800054c <TIM4_Init+0x9c>)
 80004f8:	f443 43d0 	orr.w	r3, r3, #26624	@ 0x6800
 80004fc:	61d3      	str	r3, [r2, #28]

    TIM4->CCER |= TIM_CCER_CC1E | TIM_CCER_CC2E |
 80004fe:	4b13      	ldr	r3, [pc, #76]	@ (800054c <TIM4_Init+0x9c>)
 8000500:	6a1b      	ldr	r3, [r3, #32]
 8000502:	4a12      	ldr	r2, [pc, #72]	@ (800054c <TIM4_Init+0x9c>)
 8000504:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 8000508:	f043 0311 	orr.w	r3, r3, #17
 800050c:	6213      	str	r3, [r2, #32]
                  TIM_CCER_CC3E | TIM_CCER_CC4E;

    TIM4->EGR |= TIM_EGR_UG;
 800050e:	4b0f      	ldr	r3, [pc, #60]	@ (800054c <TIM4_Init+0x9c>)
 8000510:	695b      	ldr	r3, [r3, #20]
 8000512:	4a0e      	ldr	r2, [pc, #56]	@ (800054c <TIM4_Init+0x9c>)
 8000514:	f043 0301 	orr.w	r3, r3, #1
 8000518:	6153      	str	r3, [r2, #20]

    TIM4->CCR1 = 0;
 800051a:	4b0c      	ldr	r3, [pc, #48]	@ (800054c <TIM4_Init+0x9c>)
 800051c:	2200      	movs	r2, #0
 800051e:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM4->CCR2 = 0;
 8000520:	4b0a      	ldr	r3, [pc, #40]	@ (800054c <TIM4_Init+0x9c>)
 8000522:	2200      	movs	r2, #0
 8000524:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM4->CCR3 = 0;
 8000526:	4b09      	ldr	r3, [pc, #36]	@ (800054c <TIM4_Init+0x9c>)
 8000528:	2200      	movs	r2, #0
 800052a:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM4->CCR4 = 0;
 800052c:	4b07      	ldr	r3, [pc, #28]	@ (800054c <TIM4_Init+0x9c>)
 800052e:	2200      	movs	r2, #0
 8000530:	641a      	str	r2, [r3, #64]	@ 0x40

    TIM4->CR1 |= TIM_CR1_CEN;
 8000532:	4b06      	ldr	r3, [pc, #24]	@ (800054c <TIM4_Init+0x9c>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4a05      	ldr	r2, [pc, #20]	@ (800054c <TIM4_Init+0x9c>)
 8000538:	f043 0301 	orr.w	r3, r3, #1
 800053c:	6013      	str	r3, [r2, #0]
}
 800053e:	bf00      	nop
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr
 8000548:	40023800 	.word	0x40023800
 800054c:	40000800 	.word	0x40000800

08000550 <GPIO_Init>:

//======================================================
//GPIO INITIALIZE
//======================================================
void GPIO_Init(void) {
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
    // Enable GPIOA and GPIOB clock
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000554:	4b66      	ldr	r3, [pc, #408]	@ (80006f0 <GPIO_Init+0x1a0>)
 8000556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000558:	4a65      	ldr	r2, [pc, #404]	@ (80006f0 <GPIO_Init+0x1a0>)
 800055a:	f043 0301 	orr.w	r3, r3, #1
 800055e:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000560:	4b63      	ldr	r3, [pc, #396]	@ (80006f0 <GPIO_Init+0x1a0>)
 8000562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000564:	4a62      	ldr	r2, [pc, #392]	@ (80006f0 <GPIO_Init+0x1a0>)
 8000566:	f043 0302 	orr.w	r3, r3, #2
 800056a:	6313      	str	r3, [r2, #48]	@ 0x30


    // SET TIMER PIN FOR Alternate Function
    // PA0–PA3 (TIM2_CH1–CH4)
    GPIOA->MODER &= ~(0xFF << (0 * 2));          // Clear mode bits for PA0–PA3
 800056c:	4b61      	ldr	r3, [pc, #388]	@ (80006f4 <GPIO_Init+0x1a4>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a60      	ldr	r2, [pc, #384]	@ (80006f4 <GPIO_Init+0x1a4>)
 8000572:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000576:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (0xAA << (0 * 2));          // Set mode = AF (10)
 8000578:	4b5e      	ldr	r3, [pc, #376]	@ (80006f4 <GPIO_Init+0x1a4>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a5d      	ldr	r2, [pc, #372]	@ (80006f4 <GPIO_Init+0x1a4>)
 800057e:	f043 03aa 	orr.w	r3, r3, #170	@ 0xaa
 8000582:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= ~0xFFFF;                    // Clear AFRL[15:0]
 8000584:	4b5b      	ldr	r3, [pc, #364]	@ (80006f4 <GPIO_Init+0x1a4>)
 8000586:	6a1b      	ldr	r3, [r3, #32]
 8000588:	4a5a      	ldr	r2, [pc, #360]	@ (80006f4 <GPIO_Init+0x1a4>)
 800058a:	0c1b      	lsrs	r3, r3, #16
 800058c:	041b      	lsls	r3, r3, #16
 800058e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (0x1111 << 0);              // AF1 for PA0–PA3
 8000590:	4b58      	ldr	r3, [pc, #352]	@ (80006f4 <GPIO_Init+0x1a4>)
 8000592:	6a1b      	ldr	r3, [r3, #32]
 8000594:	4a57      	ldr	r2, [pc, #348]	@ (80006f4 <GPIO_Init+0x1a4>)
 8000596:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 800059a:	f043 0311 	orr.w	r3, r3, #17
 800059e:	6213      	str	r3, [r2, #32]

    // PA6–PA7 (TIM3_CH1–CH2), AF2
    GPIOA->MODER &= ~(0xF << (6 * 2));
 80005a0:	4b54      	ldr	r3, [pc, #336]	@ (80006f4 <GPIO_Init+0x1a4>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a53      	ldr	r2, [pc, #332]	@ (80006f4 <GPIO_Init+0x1a4>)
 80005a6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80005aa:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (0xA << (6 * 2));
 80005ac:	4b51      	ldr	r3, [pc, #324]	@ (80006f4 <GPIO_Init+0x1a4>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a50      	ldr	r2, [pc, #320]	@ (80006f4 <GPIO_Init+0x1a4>)
 80005b2:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 80005b6:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= ~(0xFF << (6 * 4));
 80005b8:	4b4e      	ldr	r3, [pc, #312]	@ (80006f4 <GPIO_Init+0x1a4>)
 80005ba:	6a1b      	ldr	r3, [r3, #32]
 80005bc:	4a4d      	ldr	r2, [pc, #308]	@ (80006f4 <GPIO_Init+0x1a4>)
 80005be:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80005c2:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |=  (0x22 << (6 * 4));
 80005c4:	4b4b      	ldr	r3, [pc, #300]	@ (80006f4 <GPIO_Init+0x1a4>)
 80005c6:	6a1b      	ldr	r3, [r3, #32]
 80005c8:	4a4a      	ldr	r2, [pc, #296]	@ (80006f4 <GPIO_Init+0x1a4>)
 80005ca:	f043 5308 	orr.w	r3, r3, #570425344	@ 0x22000000
 80005ce:	6213      	str	r3, [r2, #32]

    // PB0–PB1 (TIM3_CH3–CH4), AF2
    GPIOB->MODER &= ~(0xF << (0 * 2));
 80005d0:	4b49      	ldr	r3, [pc, #292]	@ (80006f8 <GPIO_Init+0x1a8>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a48      	ldr	r2, [pc, #288]	@ (80006f8 <GPIO_Init+0x1a8>)
 80005d6:	f023 030f 	bic.w	r3, r3, #15
 80005da:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (0xA << (0 * 2));
 80005dc:	4b46      	ldr	r3, [pc, #280]	@ (80006f8 <GPIO_Init+0x1a8>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a45      	ldr	r2, [pc, #276]	@ (80006f8 <GPIO_Init+0x1a8>)
 80005e2:	f043 030a 	orr.w	r3, r3, #10
 80005e6:	6013      	str	r3, [r2, #0]
    GPIOB->AFR[0] &= ~(0xFF << (0 * 4));
 80005e8:	4b43      	ldr	r3, [pc, #268]	@ (80006f8 <GPIO_Init+0x1a8>)
 80005ea:	6a1b      	ldr	r3, [r3, #32]
 80005ec:	4a42      	ldr	r2, [pc, #264]	@ (80006f8 <GPIO_Init+0x1a8>)
 80005ee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80005f2:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[0] |=  (0x22 << (0 * 4));
 80005f4:	4b40      	ldr	r3, [pc, #256]	@ (80006f8 <GPIO_Init+0x1a8>)
 80005f6:	6a1b      	ldr	r3, [r3, #32]
 80005f8:	4a3f      	ldr	r2, [pc, #252]	@ (80006f8 <GPIO_Init+0x1a8>)
 80005fa:	f043 0322 	orr.w	r3, r3, #34	@ 0x22
 80005fe:	6213      	str	r3, [r2, #32]

    // PB6–PB9 (TIM4_CH1–CH4), AF2
    GPIOB->MODER &= ~(0xFF << (6 * 2));
 8000600:	4b3d      	ldr	r3, [pc, #244]	@ (80006f8 <GPIO_Init+0x1a8>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a3c      	ldr	r2, [pc, #240]	@ (80006f8 <GPIO_Init+0x1a8>)
 8000606:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 800060a:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (0xAA << (6 * 2));
 800060c:	4b3a      	ldr	r3, [pc, #232]	@ (80006f8 <GPIO_Init+0x1a8>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a39      	ldr	r2, [pc, #228]	@ (80006f8 <GPIO_Init+0x1a8>)
 8000612:	f443 232a 	orr.w	r3, r3, #696320	@ 0xaa000
 8000616:	6013      	str	r3, [r2, #0]

    GPIOB->AFR[0] &= ~((0xF << (6 * 4)) | (0xF << (7 * 4)));
 8000618:	4b37      	ldr	r3, [pc, #220]	@ (80006f8 <GPIO_Init+0x1a8>)
 800061a:	6a1b      	ldr	r3, [r3, #32]
 800061c:	4a36      	ldr	r2, [pc, #216]	@ (80006f8 <GPIO_Init+0x1a8>)
 800061e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8000622:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[0] |=  ((0x2 << (6 * 4)) | (0x2 << (7 * 4)));
 8000624:	4b34      	ldr	r3, [pc, #208]	@ (80006f8 <GPIO_Init+0x1a8>)
 8000626:	6a1b      	ldr	r3, [r3, #32]
 8000628:	4a33      	ldr	r2, [pc, #204]	@ (80006f8 <GPIO_Init+0x1a8>)
 800062a:	f043 5308 	orr.w	r3, r3, #570425344	@ 0x22000000
 800062e:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[1] &= ~((0xF << (0 * 4)) | (0xF << (1 * 4)));
 8000630:	4b31      	ldr	r3, [pc, #196]	@ (80006f8 <GPIO_Init+0x1a8>)
 8000632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000634:	4a30      	ldr	r2, [pc, #192]	@ (80006f8 <GPIO_Init+0x1a8>)
 8000636:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800063a:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->AFR[1] |=  ((0x2 << (0 * 4)) | (0x2 << (1 * 4)));
 800063c:	4b2e      	ldr	r3, [pc, #184]	@ (80006f8 <GPIO_Init+0x1a8>)
 800063e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000640:	4a2d      	ldr	r2, [pc, #180]	@ (80006f8 <GPIO_Init+0x1a8>)
 8000642:	f043 0322 	orr.w	r3, r3, #34	@ 0x22
 8000646:	6253      	str	r3, [r2, #36]	@ 0x24


    // SET INPUT PIN FOR HALL SENSOR ( PA5 6 7)
    GPIOA->MODER &= ~(0b11 << (5 * 2));  // Clear PA5
 8000648:	4b2a      	ldr	r3, [pc, #168]	@ (80006f4 <GPIO_Init+0x1a4>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a29      	ldr	r2, [pc, #164]	@ (80006f4 <GPIO_Init+0x1a4>)
 800064e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000652:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~(0b11 << (6 * 2));  // Clear PA6
 8000654:	4b27      	ldr	r3, [pc, #156]	@ (80006f4 <GPIO_Init+0x1a4>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a26      	ldr	r2, [pc, #152]	@ (80006f4 <GPIO_Init+0x1a4>)
 800065a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800065e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~(0b11 << (7 * 2));  // Clear PA7
 8000660:	4b24      	ldr	r3, [pc, #144]	@ (80006f4 <GPIO_Init+0x1a4>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a23      	ldr	r2, [pc, #140]	@ (80006f4 <GPIO_Init+0x1a4>)
 8000666:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800066a:	6013      	str	r3, [r2, #0]

    GPIOA->PUPDR &= ~(0b11 << (5 * 2));
 800066c:	4b21      	ldr	r3, [pc, #132]	@ (80006f4 <GPIO_Init+0x1a4>)
 800066e:	68db      	ldr	r3, [r3, #12]
 8000670:	4a20      	ldr	r2, [pc, #128]	@ (80006f4 <GPIO_Init+0x1a4>)
 8000672:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000676:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR |=  (0b01 << (5 * 2));  // Pull-up cho PA5
 8000678:	4b1e      	ldr	r3, [pc, #120]	@ (80006f4 <GPIO_Init+0x1a4>)
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	4a1d      	ldr	r2, [pc, #116]	@ (80006f4 <GPIO_Init+0x1a4>)
 800067e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000682:	60d3      	str	r3, [r2, #12]

    GPIOA->PUPDR &= ~(0b11 << (6 * 2));
 8000684:	4b1b      	ldr	r3, [pc, #108]	@ (80006f4 <GPIO_Init+0x1a4>)
 8000686:	68db      	ldr	r3, [r3, #12]
 8000688:	4a1a      	ldr	r2, [pc, #104]	@ (80006f4 <GPIO_Init+0x1a4>)
 800068a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800068e:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR |=  (0b01 << (6 * 2));  // Pull-up cho PA6
 8000690:	4b18      	ldr	r3, [pc, #96]	@ (80006f4 <GPIO_Init+0x1a4>)
 8000692:	68db      	ldr	r3, [r3, #12]
 8000694:	4a17      	ldr	r2, [pc, #92]	@ (80006f4 <GPIO_Init+0x1a4>)
 8000696:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800069a:	60d3      	str	r3, [r2, #12]

    GPIOA->PUPDR &= ~(0b11 << (7 * 2));
 800069c:	4b15      	ldr	r3, [pc, #84]	@ (80006f4 <GPIO_Init+0x1a4>)
 800069e:	68db      	ldr	r3, [r3, #12]
 80006a0:	4a14      	ldr	r2, [pc, #80]	@ (80006f4 <GPIO_Init+0x1a4>)
 80006a2:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006a6:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR |=  (0b01 << (7 * 2));  // Pull-up cho PA7
 80006a8:	4b12      	ldr	r3, [pc, #72]	@ (80006f4 <GPIO_Init+0x1a4>)
 80006aa:	68db      	ldr	r3, [r3, #12]
 80006ac:	4a11      	ldr	r2, [pc, #68]	@ (80006f4 <GPIO_Init+0x1a4>)
 80006ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006b2:	60d3      	str	r3, [r2, #12]

    //SET PA9 (TX) và PA10 (RX) ở AF7 FOR USART1
    GPIOA->MODER &= ~((0b11 << (9 * 2)) | (0b11 << (10 * 2))); // Clear
 80006b4:	4b0f      	ldr	r3, [pc, #60]	@ (80006f4 <GPIO_Init+0x1a4>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a0e      	ldr	r2, [pc, #56]	@ (80006f4 <GPIO_Init+0x1a4>)
 80006ba:	f423 1370 	bic.w	r3, r3, #3932160	@ 0x3c0000
 80006be:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  ((0b10 << (9 * 2)) | (0b10 << (10 * 2))); // AF mode
 80006c0:	4b0c      	ldr	r3, [pc, #48]	@ (80006f4 <GPIO_Init+0x1a4>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a0b      	ldr	r2, [pc, #44]	@ (80006f4 <GPIO_Init+0x1a4>)
 80006c6:	f443 1320 	orr.w	r3, r3, #2621440	@ 0x280000
 80006ca:	6013      	str	r3, [r2, #0]

    GPIOA->AFR[1] &= ~((0xF << (1 * 4)) | (0xF << (2 * 4)));   // Clear AFRH9/10
 80006cc:	4b09      	ldr	r3, [pc, #36]	@ (80006f4 <GPIO_Init+0x1a4>)
 80006ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006d0:	4a08      	ldr	r2, [pc, #32]	@ (80006f4 <GPIO_Init+0x1a4>)
 80006d2:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80006d6:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOA->AFR[1] |=  ((0x7 << (1 * 4)) | (0x7 << (2 * 4)));   // AF7 = USART1
 80006d8:	4b06      	ldr	r3, [pc, #24]	@ (80006f4 <GPIO_Init+0x1a4>)
 80006da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006dc:	4a05      	ldr	r2, [pc, #20]	@ (80006f4 <GPIO_Init+0x1a4>)
 80006de:	f443 63ee 	orr.w	r3, r3, #1904	@ 0x770
 80006e2:	6253      	str	r3, [r2, #36]	@ 0x24

}
 80006e4:	bf00      	nop
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40020000 	.word	0x40020000
 80006f8:	40020400 	.word	0x40020400

080006fc <USART1_UART_Init>:

//======================================================
//UART INITIALIZE
//======================================================
void USART1_UART_Init(void) {
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN;  // Enable USART1 (nằm trên APB2)
 8000700:	4b0e      	ldr	r3, [pc, #56]	@ (800073c <USART1_UART_Init+0x40>)
 8000702:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000704:	4a0d      	ldr	r2, [pc, #52]	@ (800073c <USART1_UART_Init+0x40>)
 8000706:	f043 0310 	orr.w	r3, r3, #16
 800070a:	6453      	str	r3, [r2, #68]	@ 0x44

    USART1->CR1 = 0;  // Tắt USART trước khi cấu hình
 800070c:	4b0c      	ldr	r3, [pc, #48]	@ (8000740 <USART1_UART_Init+0x44>)
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]

    // Baudrate: ví dụ 115200 với PCLK2 = 84MHz
    // USARTDIV = 84MHz / (16 * 115200) ≈ 45.5625
    // Mantissa = 45, Fraction = 0.5625 * 16 ≈ 9 → BRR = 0x2D9
    USART1->BRR = (45 << 4) | 9;
 8000712:	4b0b      	ldr	r3, [pc, #44]	@ (8000740 <USART1_UART_Init+0x44>)
 8000714:	f240 22d9 	movw	r2, #729	@ 0x2d9
 8000718:	609a      	str	r2, [r3, #8]

    // 8-bit data, 1 stop bit, no parity, no flow control
    USART1->CR1 |= USART_CR1_TE | USART_CR1_RE;  // Enable TX + RX
 800071a:	4b09      	ldr	r3, [pc, #36]	@ (8000740 <USART1_UART_Init+0x44>)
 800071c:	68db      	ldr	r3, [r3, #12]
 800071e:	4a08      	ldr	r2, [pc, #32]	@ (8000740 <USART1_UART_Init+0x44>)
 8000720:	f043 030c 	orr.w	r3, r3, #12
 8000724:	60d3      	str	r3, [r2, #12]
    USART1->CR1 |= USART_CR1_UE;                 // Bật USART
 8000726:	4b06      	ldr	r3, [pc, #24]	@ (8000740 <USART1_UART_Init+0x44>)
 8000728:	68db      	ldr	r3, [r3, #12]
 800072a:	4a05      	ldr	r2, [pc, #20]	@ (8000740 <USART1_UART_Init+0x44>)
 800072c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000730:	60d3      	str	r3, [r2, #12]
}
 8000732:	bf00      	nop
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	40023800 	.word	0x40023800
 8000740:	40011000 	.word	0x40011000

08000744 <handleCommutation>:
//FUNCTIONS
//======================================================

//Function use to handle the hall sequences, provided through "Steps",
//and given the value "pwmVal" to change duty cycle for specific step.
void handleCommutation(uint8_t step, uint8_t pwmVal) {
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	460a      	mov	r2, r1
 800074e:	71fb      	strb	r3, [r7, #7]
 8000750:	4613      	mov	r3, r2
 8000752:	71bb      	strb	r3, [r7, #6]
    switch (step) {
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	2b05      	cmp	r3, #5
 8000758:	dc14      	bgt.n	8000784 <handleCommutation+0x40>
 800075a:	2b00      	cmp	r3, #0
 800075c:	f2c0 80b7 	blt.w	80008ce <handleCommutation+0x18a>
 8000760:	2b05      	cmp	r3, #5
 8000762:	f200 80b4 	bhi.w	80008ce <handleCommutation+0x18a>
 8000766:	a201      	add	r2, pc, #4	@ (adr r2, 800076c <handleCommutation+0x28>)
 8000768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800076c:	0800078d 	.word	0x0800078d
 8000770:	080007bb 	.word	0x080007bb
 8000774:	080007e9 	.word	0x080007e9
 8000778:	08000817 	.word	0x08000817
 800077c:	08000845 	.word	0x08000845
 8000780:	08000873 	.word	0x08000873
 8000784:	2bff      	cmp	r3, #255	@ 0xff
 8000786:	f000 808b 	beq.w	80008a0 <handleCommutation+0x15c>
			SET_PWM_1_H3(highMin);
			SET_PWM_1_L1(lowMin);
			SET_PWM_1_L2(lowMin);
			SET_PWM_1_L3(lowMin);
    }
}
 800078a:	e0a0      	b.n	80008ce <handleCommutation+0x18a>
            SET_PWM_1_H3(pwmVal);
 800078c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000790:	79bb      	ldrb	r3, [r7, #6]
 8000792:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SET_PWM_1_L2(lowMax);
 8000794:	4b51      	ldr	r3, [pc, #324]	@ (80008dc <handleCommutation+0x198>)
 8000796:	2200      	movs	r2, #0
 8000798:	635a      	str	r2, [r3, #52]	@ 0x34
            SET_PWM_1_H1(highMin);
 800079a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800079e:	2200      	movs	r2, #0
 80007a0:	635a      	str	r2, [r3, #52]	@ 0x34
            SET_PWM_1_H2(highMin);
 80007a2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007a6:	2200      	movs	r2, #0
 80007a8:	639a      	str	r2, [r3, #56]	@ 0x38
            SET_PWM_1_L1(lowMin);
 80007aa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007ae:	22ff      	movs	r2, #255	@ 0xff
 80007b0:	641a      	str	r2, [r3, #64]	@ 0x40
            SET_PWM_1_L3(lowMin);
 80007b2:	4b4a      	ldr	r3, [pc, #296]	@ (80008dc <handleCommutation+0x198>)
 80007b4:	22ff      	movs	r2, #255	@ 0xff
 80007b6:	639a      	str	r2, [r3, #56]	@ 0x38
            break;
 80007b8:	e089      	b.n	80008ce <handleCommutation+0x18a>
			SET_PWM_1_H2(pwmVal);
 80007ba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007be:	79bb      	ldrb	r3, [r7, #6]
 80007c0:	6393      	str	r3, [r2, #56]	@ 0x38
			SET_PWM_1_L1(lowMax);
 80007c2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007c6:	2200      	movs	r2, #0
 80007c8:	641a      	str	r2, [r3, #64]	@ 0x40
			SET_PWM_1_H1(highMin);
 80007ca:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007ce:	2200      	movs	r2, #0
 80007d0:	635a      	str	r2, [r3, #52]	@ 0x34
			SET_PWM_1_H3(highMin);
 80007d2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007d6:	2200      	movs	r2, #0
 80007d8:	63da      	str	r2, [r3, #60]	@ 0x3c
			SET_PWM_1_L2(lowMin);
 80007da:	4b40      	ldr	r3, [pc, #256]	@ (80008dc <handleCommutation+0x198>)
 80007dc:	22ff      	movs	r2, #255	@ 0xff
 80007de:	635a      	str	r2, [r3, #52]	@ 0x34
			SET_PWM_1_L3(lowMin);
 80007e0:	4b3e      	ldr	r3, [pc, #248]	@ (80008dc <handleCommutation+0x198>)
 80007e2:	22ff      	movs	r2, #255	@ 0xff
 80007e4:	639a      	str	r2, [r3, #56]	@ 0x38
            break;
 80007e6:	e072      	b.n	80008ce <handleCommutation+0x18a>
            SET_PWM_1_H3(pwmVal);
 80007e8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007ec:	79bb      	ldrb	r3, [r7, #6]
 80007ee:	63d3      	str	r3, [r2, #60]	@ 0x3c
			SET_PWM_1_L1(lowMax);
 80007f0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007f4:	2200      	movs	r2, #0
 80007f6:	641a      	str	r2, [r3, #64]	@ 0x40
			SET_PWM_1_H1(highMin);
 80007f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007fc:	2200      	movs	r2, #0
 80007fe:	635a      	str	r2, [r3, #52]	@ 0x34
			SET_PWM_1_H2(highMin);
 8000800:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000804:	2200      	movs	r2, #0
 8000806:	639a      	str	r2, [r3, #56]	@ 0x38
			SET_PWM_1_L2(lowMin);
 8000808:	4b34      	ldr	r3, [pc, #208]	@ (80008dc <handleCommutation+0x198>)
 800080a:	22ff      	movs	r2, #255	@ 0xff
 800080c:	635a      	str	r2, [r3, #52]	@ 0x34
			SET_PWM_1_L3(lowMin);
 800080e:	4b33      	ldr	r3, [pc, #204]	@ (80008dc <handleCommutation+0x198>)
 8000810:	22ff      	movs	r2, #255	@ 0xff
 8000812:	639a      	str	r2, [r3, #56]	@ 0x38
            break;
 8000814:	e05b      	b.n	80008ce <handleCommutation+0x18a>
            SET_PWM_1_H1(pwmVal);
 8000816:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800081a:	79bb      	ldrb	r3, [r7, #6]
 800081c:	6353      	str	r3, [r2, #52]	@ 0x34
			SET_PWM_1_L3(lowMax);
 800081e:	4b2f      	ldr	r3, [pc, #188]	@ (80008dc <handleCommutation+0x198>)
 8000820:	2200      	movs	r2, #0
 8000822:	639a      	str	r2, [r3, #56]	@ 0x38
			SET_PWM_1_H2(highMin);
 8000824:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000828:	2200      	movs	r2, #0
 800082a:	639a      	str	r2, [r3, #56]	@ 0x38
			SET_PWM_1_H3(highMin);
 800082c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000830:	2200      	movs	r2, #0
 8000832:	63da      	str	r2, [r3, #60]	@ 0x3c
			SET_PWM_1_L1(lowMin);
 8000834:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000838:	22ff      	movs	r2, #255	@ 0xff
 800083a:	641a      	str	r2, [r3, #64]	@ 0x40
			SET_PWM_1_L2(lowMin);
 800083c:	4b27      	ldr	r3, [pc, #156]	@ (80008dc <handleCommutation+0x198>)
 800083e:	22ff      	movs	r2, #255	@ 0xff
 8000840:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 8000842:	e044      	b.n	80008ce <handleCommutation+0x18a>
            SET_PWM_1_H1(pwmVal);
 8000844:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000848:	79bb      	ldrb	r3, [r7, #6]
 800084a:	6353      	str	r3, [r2, #52]	@ 0x34
			SET_PWM_1_L2(lowMax);
 800084c:	4b23      	ldr	r3, [pc, #140]	@ (80008dc <handleCommutation+0x198>)
 800084e:	2200      	movs	r2, #0
 8000850:	635a      	str	r2, [r3, #52]	@ 0x34
			SET_PWM_1_H2(highMin);
 8000852:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000856:	2200      	movs	r2, #0
 8000858:	639a      	str	r2, [r3, #56]	@ 0x38
			SET_PWM_1_H3(highMin);
 800085a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800085e:	2200      	movs	r2, #0
 8000860:	63da      	str	r2, [r3, #60]	@ 0x3c
			SET_PWM_1_L1(lowMin);
 8000862:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000866:	22ff      	movs	r2, #255	@ 0xff
 8000868:	641a      	str	r2, [r3, #64]	@ 0x40
			SET_PWM_1_L3(lowMin);
 800086a:	4b1c      	ldr	r3, [pc, #112]	@ (80008dc <handleCommutation+0x198>)
 800086c:	22ff      	movs	r2, #255	@ 0xff
 800086e:	639a      	str	r2, [r3, #56]	@ 0x38
            break;
 8000870:	e02d      	b.n	80008ce <handleCommutation+0x18a>
            SET_PWM_1_H2(pwmVal);
 8000872:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000876:	79bb      	ldrb	r3, [r7, #6]
 8000878:	6393      	str	r3, [r2, #56]	@ 0x38
			SET_PWM_1_L3(lowMax);
 800087a:	4b18      	ldr	r3, [pc, #96]	@ (80008dc <handleCommutation+0x198>)
 800087c:	2200      	movs	r2, #0
 800087e:	639a      	str	r2, [r3, #56]	@ 0x38
			SET_PWM_1_H1(highMin);
 8000880:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000884:	2200      	movs	r2, #0
 8000886:	635a      	str	r2, [r3, #52]	@ 0x34
			SET_PWM_1_H3(highMin);
 8000888:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800088c:	2200      	movs	r2, #0
 800088e:	63da      	str	r2, [r3, #60]	@ 0x3c
			SET_PWM_1_L1(lowMin);
 8000890:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000894:	22ff      	movs	r2, #255	@ 0xff
 8000896:	641a      	str	r2, [r3, #64]	@ 0x40
			SET_PWM_1_L2(lowMin);
 8000898:	4b10      	ldr	r3, [pc, #64]	@ (80008dc <handleCommutation+0x198>)
 800089a:	22ff      	movs	r2, #255	@ 0xff
 800089c:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 800089e:	e016      	b.n	80008ce <handleCommutation+0x18a>
            SET_PWM_1_H1(highMin);
 80008a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008a4:	2200      	movs	r2, #0
 80008a6:	635a      	str	r2, [r3, #52]	@ 0x34
			SET_PWM_1_H2(highMin);
 80008a8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008ac:	2200      	movs	r2, #0
 80008ae:	639a      	str	r2, [r3, #56]	@ 0x38
			SET_PWM_1_H3(highMin);
 80008b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008b4:	2200      	movs	r2, #0
 80008b6:	63da      	str	r2, [r3, #60]	@ 0x3c
			SET_PWM_1_L1(lowMin);
 80008b8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008bc:	22ff      	movs	r2, #255	@ 0xff
 80008be:	641a      	str	r2, [r3, #64]	@ 0x40
			SET_PWM_1_L2(lowMin);
 80008c0:	4b06      	ldr	r3, [pc, #24]	@ (80008dc <handleCommutation+0x198>)
 80008c2:	22ff      	movs	r2, #255	@ 0xff
 80008c4:	635a      	str	r2, [r3, #52]	@ 0x34
			SET_PWM_1_L3(lowMin);
 80008c6:	4b05      	ldr	r3, [pc, #20]	@ (80008dc <handleCommutation+0x198>)
 80008c8:	22ff      	movs	r2, #255	@ 0xff
 80008ca:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80008cc:	e7ff      	b.n	80008ce <handleCommutation+0x18a>
 80008ce:	bf00      	nop
 80008d0:	370c      	adds	r7, #12
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	40000400 	.word	0x40000400

080008e0 <EXTI9_5_IRQHandler>:

//Interupted is called when HALL SENSOR got a change of data
//used to find the right hall sequence, and provide the next step for handleCommutation
void EXTI9_5_IRQHandler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
    // 1. Đọc trực tiếp giá trị các chân PA5, PA6, PA7 từ GPIOA->IDR
    uint32_t idr = GPIOA->IDR;
 80008e6:	4b38      	ldr	r3, [pc, #224]	@ (80009c8 <EXTI9_5_IRQHandler+0xe8>)
 80008e8:	691b      	ldr	r3, [r3, #16]
 80008ea:	607b      	str	r3, [r7, #4]
    uint8_t hallA = (idr >> 5) & 0x01;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	095b      	lsrs	r3, r3, #5
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	70fb      	strb	r3, [r7, #3]
    uint8_t hallB = (idr >> 6) & 0x01;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	099b      	lsrs	r3, r3, #6
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	70bb      	strb	r3, [r7, #2]
    uint8_t hallC = (idr >> 7) & 0x01;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	09db      	lsrs	r3, r3, #7
 8000908:	b2db      	uxtb	r3, r3
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	707b      	strb	r3, [r7, #1]

    // 2. Gộp thành hallState
    hallState = (hallA << 2) | (hallB << 1) | hallC;
 8000910:	78fb      	ldrb	r3, [r7, #3]
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	b25a      	sxtb	r2, r3
 8000916:	78bb      	ldrb	r3, [r7, #2]
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	b25b      	sxtb	r3, r3
 800091c:	4313      	orrs	r3, r2
 800091e:	b25a      	sxtb	r2, r3
 8000920:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8000924:	4313      	orrs	r3, r2
 8000926:	b25b      	sxtb	r3, r3
 8000928:	b2da      	uxtb	r2, r3
 800092a:	4b28      	ldr	r3, [pc, #160]	@ (80009cc <EXTI9_5_IRQHandler+0xec>)
 800092c:	701a      	strb	r2, [r3, #0]

    // 3. Tra bảng commutation
    switch (hallState) {
 800092e:	4b27      	ldr	r3, [pc, #156]	@ (80009cc <EXTI9_5_IRQHandler+0xec>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	b2db      	uxtb	r3, r3
 8000934:	3b01      	subs	r3, #1
 8000936:	2b05      	cmp	r3, #5
 8000938:	d826      	bhi.n	8000988 <EXTI9_5_IRQHandler+0xa8>
 800093a:	a201      	add	r2, pc, #4	@ (adr r2, 8000940 <EXTI9_5_IRQHandler+0x60>)
 800093c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000940:	08000959 	.word	0x08000959
 8000944:	08000969 	.word	0x08000969
 8000948:	08000961 	.word	0x08000961
 800094c:	08000979 	.word	0x08000979
 8000950:	08000981 	.word	0x08000981
 8000954:	08000971 	.word	0x08000971
        case 0b001: currentCommStep = 0; break;
 8000958:	4b1d      	ldr	r3, [pc, #116]	@ (80009d0 <EXTI9_5_IRQHandler+0xf0>)
 800095a:	2200      	movs	r2, #0
 800095c:	701a      	strb	r2, [r3, #0]
 800095e:	e017      	b.n	8000990 <EXTI9_5_IRQHandler+0xb0>
        case 0b011: currentCommStep = 1; break;
 8000960:	4b1b      	ldr	r3, [pc, #108]	@ (80009d0 <EXTI9_5_IRQHandler+0xf0>)
 8000962:	2201      	movs	r2, #1
 8000964:	701a      	strb	r2, [r3, #0]
 8000966:	e013      	b.n	8000990 <EXTI9_5_IRQHandler+0xb0>
        case 0b010: currentCommStep = 2; break;
 8000968:	4b19      	ldr	r3, [pc, #100]	@ (80009d0 <EXTI9_5_IRQHandler+0xf0>)
 800096a:	2202      	movs	r2, #2
 800096c:	701a      	strb	r2, [r3, #0]
 800096e:	e00f      	b.n	8000990 <EXTI9_5_IRQHandler+0xb0>
        case 0b110: currentCommStep = 3; break;
 8000970:	4b17      	ldr	r3, [pc, #92]	@ (80009d0 <EXTI9_5_IRQHandler+0xf0>)
 8000972:	2203      	movs	r2, #3
 8000974:	701a      	strb	r2, [r3, #0]
 8000976:	e00b      	b.n	8000990 <EXTI9_5_IRQHandler+0xb0>
        case 0b100: currentCommStep = 4; break;
 8000978:	4b15      	ldr	r3, [pc, #84]	@ (80009d0 <EXTI9_5_IRQHandler+0xf0>)
 800097a:	2204      	movs	r2, #4
 800097c:	701a      	strb	r2, [r3, #0]
 800097e:	e007      	b.n	8000990 <EXTI9_5_IRQHandler+0xb0>
        case 0b101: currentCommStep = 5; break;
 8000980:	4b13      	ldr	r3, [pc, #76]	@ (80009d0 <EXTI9_5_IRQHandler+0xf0>)
 8000982:	2205      	movs	r2, #5
 8000984:	701a      	strb	r2, [r3, #0]
 8000986:	e003      	b.n	8000990 <EXTI9_5_IRQHandler+0xb0>
        default:    currentCommStep = 255; break;
 8000988:	4b11      	ldr	r3, [pc, #68]	@ (80009d0 <EXTI9_5_IRQHandler+0xf0>)
 800098a:	22ff      	movs	r2, #255	@ 0xff
 800098c:	701a      	strb	r2, [r3, #0]
 800098e:	bf00      	nop
    }

    bufferAdd(currentCommStep);
 8000990:	4b0f      	ldr	r3, [pc, #60]	@ (80009d0 <EXTI9_5_IRQHandler+0xf0>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	b2db      	uxtb	r3, r3
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff fc16 	bl	80001c8 <bufferAdd>
    // 5. Xóa cờ ngắt EXTI line 5~9 (tránh ngắt lặp lại)
    EXTI->PR |= (1 << 5);
 800099c:	4b0d      	ldr	r3, [pc, #52]	@ (80009d4 <EXTI9_5_IRQHandler+0xf4>)
 800099e:	695b      	ldr	r3, [r3, #20]
 80009a0:	4a0c      	ldr	r2, [pc, #48]	@ (80009d4 <EXTI9_5_IRQHandler+0xf4>)
 80009a2:	f043 0320 	orr.w	r3, r3, #32
 80009a6:	6153      	str	r3, [r2, #20]
    EXTI->PR |= (1 << 6);
 80009a8:	4b0a      	ldr	r3, [pc, #40]	@ (80009d4 <EXTI9_5_IRQHandler+0xf4>)
 80009aa:	695b      	ldr	r3, [r3, #20]
 80009ac:	4a09      	ldr	r2, [pc, #36]	@ (80009d4 <EXTI9_5_IRQHandler+0xf4>)
 80009ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009b2:	6153      	str	r3, [r2, #20]
    EXTI->PR |= (1 << 7);
 80009b4:	4b07      	ldr	r3, [pc, #28]	@ (80009d4 <EXTI9_5_IRQHandler+0xf4>)
 80009b6:	695b      	ldr	r3, [r3, #20]
 80009b8:	4a06      	ldr	r2, [pc, #24]	@ (80009d4 <EXTI9_5_IRQHandler+0xf4>)
 80009ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009be:	6153      	str	r3, [r2, #20]
}
 80009c0:	bf00      	nop
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40020000 	.word	0x40020000
 80009cc:	2000017e 	.word	0x2000017e
 80009d0:	2000017f 	.word	0x2000017f
 80009d4:	40013c00 	.word	0x40013c00

080009d8 <BLDC_Start>:
//    }
//}

//Function initialize the BLDC, by picking the first HALL sequence,
//or create 1 if its undefined
void BLDC_Start() {
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
  // Đọc giá trị các chân PA5, PA6, PA7 trực tiếp từ thanh ghi
  uint32_t idr = GPIOA->IDR;
 80009de:	4b27      	ldr	r3, [pc, #156]	@ (8000a7c <BLDC_Start+0xa4>)
 80009e0:	691b      	ldr	r3, [r3, #16]
 80009e2:	60bb      	str	r3, [r7, #8]
  uint8_t hallA = (idr >> 5) & 0x01;
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	095b      	lsrs	r3, r3, #5
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	71fb      	strb	r3, [r7, #7]
  uint8_t hallB = (idr >> 6) & 0x01;
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	099b      	lsrs	r3, r3, #6
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	71bb      	strb	r3, [r7, #6]
  uint8_t hallC = (idr >> 7) & 0x01;
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	09db      	lsrs	r3, r3, #7
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	717b      	strb	r3, [r7, #5]

  hallState = (hallA << 2) | (hallB << 1) | hallC;
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	b25a      	sxtb	r2, r3
 8000a0e:	79bb      	ldrb	r3, [r7, #6]
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	b25b      	sxtb	r3, r3
 8000a14:	4313      	orrs	r3, r2
 8000a16:	b25a      	sxtb	r2, r3
 8000a18:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	b25b      	sxtb	r3, r3
 8000a20:	b2da      	uxtb	r2, r3
 8000a22:	4b17      	ldr	r3, [pc, #92]	@ (8000a80 <BLDC_Start+0xa8>)
 8000a24:	701a      	strb	r2, [r3, #0]

  // Nếu hallState không hợp lệ (000), đặt bước đầu tiên
  if (hallState == 0) {
 8000a26:	4b16      	ldr	r3, [pc, #88]	@ (8000a80 <BLDC_Start+0xa8>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d103      	bne.n	8000a38 <BLDC_Start+0x60>
	  currentCommStep = 0;
 8000a30:	4b14      	ldr	r3, [pc, #80]	@ (8000a84 <BLDC_Start+0xac>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	701a      	strb	r2, [r3, #0]
 8000a36:	e014      	b.n	8000a62 <BLDC_Start+0x8a>
  } else {
	  // Tra trong bảng hallSequenceCW[]
	  for (uint8_t i = 0; i < 6; i++) {
 8000a38:	2300      	movs	r3, #0
 8000a3a:	73fb      	strb	r3, [r7, #15]
 8000a3c:	e00e      	b.n	8000a5c <BLDC_Start+0x84>
		  if (hallState == hallSequenceCW[i]) {
 8000a3e:	7bfb      	ldrb	r3, [r7, #15]
 8000a40:	4a11      	ldr	r2, [pc, #68]	@ (8000a88 <BLDC_Start+0xb0>)
 8000a42:	5cd2      	ldrb	r2, [r2, r3]
 8000a44:	4b0e      	ldr	r3, [pc, #56]	@ (8000a80 <BLDC_Start+0xa8>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	429a      	cmp	r2, r3
 8000a4c:	d103      	bne.n	8000a56 <BLDC_Start+0x7e>
			  currentCommStep = i;
 8000a4e:	4a0d      	ldr	r2, [pc, #52]	@ (8000a84 <BLDC_Start+0xac>)
 8000a50:	7bfb      	ldrb	r3, [r7, #15]
 8000a52:	7013      	strb	r3, [r2, #0]
			  break;
 8000a54:	e005      	b.n	8000a62 <BLDC_Start+0x8a>
	  for (uint8_t i = 0; i < 6; i++) {
 8000a56:	7bfb      	ldrb	r3, [r7, #15]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	73fb      	strb	r3, [r7, #15]
 8000a5c:	7bfb      	ldrb	r3, [r7, #15]
 8000a5e:	2b05      	cmp	r3, #5
 8000a60:	d9ed      	bls.n	8000a3e <BLDC_Start+0x66>
		  }
	  }
  }
    handleCommutation(currentCommStep, pwmVal);
 8000a62:	4b08      	ldr	r3, [pc, #32]	@ (8000a84 <BLDC_Start+0xac>)
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	4a08      	ldr	r2, [pc, #32]	@ (8000a8c <BLDC_Start+0xb4>)
 8000a6a:	7812      	ldrb	r2, [r2, #0]
 8000a6c:	4611      	mov	r1, r2
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f7ff fe68 	bl	8000744 <handleCommutation>
}
 8000a74:	bf00      	nop
 8000a76:	3710      	adds	r7, #16
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40020000 	.word	0x40020000
 8000a80:	2000017e 	.word	0x2000017e
 8000a84:	2000017f 	.word	0x2000017f
 8000a88:	080071ac 	.word	0x080071ac
 8000a8c:	20000000 	.word	0x20000000

08000a90 <main>:
//======================================================
//MAIN
//======================================================

int main(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  STM32_Init();
 8000a94:	f7ff fbe8 	bl	8000268 <STM32_Init>
  BLDC_Start();
 8000a98:	f7ff ff9e 	bl	80009d8 <BLDC_Start>

  //Program loop
  while (1)
  {
	//Handling Buffers
	handleCommutation(bufferGet(), pwmVal);
 8000a9c:	f7ff fbbc 	bl	8000218 <bufferGet>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	4a03      	ldr	r2, [pc, #12]	@ (8000ab4 <main+0x24>)
 8000aa6:	7812      	ldrb	r2, [r2, #0]
 8000aa8:	4611      	mov	r1, r2
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff fe4a 	bl	8000744 <handleCommutation>
 8000ab0:	e7f4      	b.n	8000a9c <main+0xc>
 8000ab2:	bf00      	nop
 8000ab4:	20000000 	.word	0x20000000

08000ab8 <Error_Handler>:

//======================================================
//ERROR HANDLER
//======================================================
void Error_Handler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
    printf("Error Handler invoked!\n");
 8000abc:	4802      	ldr	r0, [pc, #8]	@ (8000ac8 <Error_Handler+0x10>)
 8000abe:	f005 ffa5 	bl	8006a0c <puts>
    while(1);
 8000ac2:	bf00      	nop
 8000ac4:	e7fd      	b.n	8000ac2 <Error_Handler+0xa>
 8000ac6:	bf00      	nop
 8000ac8:	0800714c 	.word	0x0800714c

08000acc <HAL_MspInit>:
#include "main.h"

void HAL_MspInit(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	4b10      	ldr	r3, [pc, #64]	@ (8000b18 <HAL_MspInit+0x4c>)
 8000ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ada:	4a0f      	ldr	r2, [pc, #60]	@ (8000b18 <HAL_MspInit+0x4c>)
 8000adc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ae0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8000b18 <HAL_MspInit+0x4c>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ae6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	603b      	str	r3, [r7, #0]
 8000af2:	4b09      	ldr	r3, [pc, #36]	@ (8000b18 <HAL_MspInit+0x4c>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af6:	4a08      	ldr	r2, [pc, #32]	@ (8000b18 <HAL_MspInit+0x4c>)
 8000af8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000afc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000afe:	4b06      	ldr	r3, [pc, #24]	@ (8000b18 <HAL_MspInit+0x4c>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b06:	603b      	str	r3, [r7, #0]
 8000b08:	683b      	ldr	r3, [r7, #0]
}
 8000b0a:	bf00      	nop
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	40023800 	.word	0x40023800

08000b1c <SysTick_Handler>:
#include "stm32f4xx_it.h"

extern PCD_HandleTypeDef hpcd_USB_OTG_FS;

void SysTick_Handler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8000b20:	f000 f93e 	bl	8000da0 <HAL_IncTick>
}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <OTG_FS_IRQHandler>:

void OTG_FS_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b2c:	4802      	ldr	r0, [pc, #8]	@ (8000b38 <OTG_FS_IRQHandler+0x10>)
 8000b2e:	f000 fd6d 	bl	800160c <HAL_PCD_IRQHandler>
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20001668 	.word	0x20001668

08000b3c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60f8      	str	r0, [r7, #12]
 8000b44:	60b9      	str	r1, [r7, #8]
 8000b46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]
 8000b4c:	e00a      	b.n	8000b64 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b4e:	f3af 8000 	nop.w
 8000b52:	4601      	mov	r1, r0
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	1c5a      	adds	r2, r3, #1
 8000b58:	60ba      	str	r2, [r7, #8]
 8000b5a:	b2ca      	uxtb	r2, r1
 8000b5c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	3301      	adds	r3, #1
 8000b62:	617b      	str	r3, [r7, #20]
 8000b64:	697a      	ldr	r2, [r7, #20]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	dbf0      	blt.n	8000b4e <_read+0x12>
  }

  return len;
 8000b6c:	687b      	ldr	r3, [r7, #4]
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3718      	adds	r7, #24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b086      	sub	sp, #24
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	60f8      	str	r0, [r7, #12]
 8000b7e:	60b9      	str	r1, [r7, #8]
 8000b80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b82:	2300      	movs	r3, #0
 8000b84:	617b      	str	r3, [r7, #20]
 8000b86:	e009      	b.n	8000b9c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	1c5a      	adds	r2, r3, #1
 8000b8c:	60ba      	str	r2, [r7, #8]
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	4618      	mov	r0, r3
 8000b92:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	617b      	str	r3, [r7, #20]
 8000b9c:	697a      	ldr	r2, [r7, #20]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	dbf1      	blt.n	8000b88 <_write+0x12>
  }
  return len;
 8000ba4:	687b      	ldr	r3, [r7, #4]
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3718      	adds	r7, #24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <_close>:

int _close(int file)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	b083      	sub	sp, #12
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr

08000bc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	b083      	sub	sp, #12
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
 8000bce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bd6:	605a      	str	r2, [r3, #4]
  return 0;
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <_isatty>:

int _isatty(int file)
{
 8000be6:	b480      	push	{r7}
 8000be8:	b083      	sub	sp, #12
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bee:	2301      	movs	r3, #1
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c08:	2300      	movs	r3, #0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3714      	adds	r7, #20
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
	...

08000c18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c20:	4a14      	ldr	r2, [pc, #80]	@ (8000c74 <_sbrk+0x5c>)
 8000c22:	4b15      	ldr	r3, [pc, #84]	@ (8000c78 <_sbrk+0x60>)
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c2c:	4b13      	ldr	r3, [pc, #76]	@ (8000c7c <_sbrk+0x64>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d102      	bne.n	8000c3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c34:	4b11      	ldr	r3, [pc, #68]	@ (8000c7c <_sbrk+0x64>)
 8000c36:	4a12      	ldr	r2, [pc, #72]	@ (8000c80 <_sbrk+0x68>)
 8000c38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c3a:	4b10      	ldr	r3, [pc, #64]	@ (8000c7c <_sbrk+0x64>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4413      	add	r3, r2
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d207      	bcs.n	8000c58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c48:	f006 f80e 	bl	8006c68 <__errno>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	220c      	movs	r2, #12
 8000c50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c52:	f04f 33ff 	mov.w	r3, #4294967295
 8000c56:	e009      	b.n	8000c6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c58:	4b08      	ldr	r3, [pc, #32]	@ (8000c7c <_sbrk+0x64>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c5e:	4b07      	ldr	r3, [pc, #28]	@ (8000c7c <_sbrk+0x64>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4413      	add	r3, r2
 8000c66:	4a05      	ldr	r2, [pc, #20]	@ (8000c7c <_sbrk+0x64>)
 8000c68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3718      	adds	r7, #24
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20020000 	.word	0x20020000
 8000c78:	00000400 	.word	0x00000400
 8000c7c:	20000180 	.word	0x20000180
 8000c80:	20001eb8 	.word	0x20001eb8

08000c84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c88:	4b06      	ldr	r3, [pc, #24]	@ (8000ca4 <SystemInit+0x20>)
 8000c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c8e:	4a05      	ldr	r2, [pc, #20]	@ (8000ca4 <SystemInit+0x20>)
 8000c90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ca8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ce0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cac:	f7ff ffea 	bl	8000c84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cb0:	480c      	ldr	r0, [pc, #48]	@ (8000ce4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cb2:	490d      	ldr	r1, [pc, #52]	@ (8000ce8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cb4:	4a0d      	ldr	r2, [pc, #52]	@ (8000cec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb8:	e002      	b.n	8000cc0 <LoopCopyDataInit>

08000cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cbe:	3304      	adds	r3, #4

08000cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc4:	d3f9      	bcc.n	8000cba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cc8:	4c0a      	ldr	r4, [pc, #40]	@ (8000cf4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ccc:	e001      	b.n	8000cd2 <LoopFillZerobss>

08000cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd0:	3204      	adds	r2, #4

08000cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd4:	d3fb      	bcc.n	8000cce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cd6:	f005 ffcd 	bl	8006c74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cda:	f7ff fed9 	bl	8000a90 <main>
  bx  lr    
 8000cde:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ce0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ce4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce8:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 8000cec:	080071bc 	.word	0x080071bc
  ldr r2, =_sbss
 8000cf0:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 8000cf4:	20001eb8 	.word	0x20001eb8

08000cf8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cf8:	e7fe      	b.n	8000cf8 <ADC_IRQHandler>
	...

08000cfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d00:	4b0e      	ldr	r3, [pc, #56]	@ (8000d3c <HAL_Init+0x40>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a0d      	ldr	r2, [pc, #52]	@ (8000d3c <HAL_Init+0x40>)
 8000d06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d3c <HAL_Init+0x40>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a0a      	ldr	r2, [pc, #40]	@ (8000d3c <HAL_Init+0x40>)
 8000d12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d18:	4b08      	ldr	r3, [pc, #32]	@ (8000d3c <HAL_Init+0x40>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a07      	ldr	r2, [pc, #28]	@ (8000d3c <HAL_Init+0x40>)
 8000d1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d24:	2003      	movs	r0, #3
 8000d26:	f000 f94f 	bl	8000fc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d2a:	200f      	movs	r0, #15
 8000d2c:	f000 f808 	bl	8000d40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d30:	f7ff fecc 	bl	8000acc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40023c00 	.word	0x40023c00

08000d40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d48:	4b12      	ldr	r3, [pc, #72]	@ (8000d94 <HAL_InitTick+0x54>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	4b12      	ldr	r3, [pc, #72]	@ (8000d98 <HAL_InitTick+0x58>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	4619      	mov	r1, r3
 8000d52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 f967 	bl	8001032 <HAL_SYSTICK_Config>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e00e      	b.n	8000d8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2b0f      	cmp	r3, #15
 8000d72:	d80a      	bhi.n	8000d8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d74:	2200      	movs	r2, #0
 8000d76:	6879      	ldr	r1, [r7, #4]
 8000d78:	f04f 30ff 	mov.w	r0, #4294967295
 8000d7c:	f000 f92f 	bl	8000fde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d80:	4a06      	ldr	r2, [pc, #24]	@ (8000d9c <HAL_InitTick+0x5c>)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d86:	2300      	movs	r3, #0
 8000d88:	e000      	b.n	8000d8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000004 	.word	0x20000004
 8000d98:	2000000c 	.word	0x2000000c
 8000d9c:	20000008 	.word	0x20000008

08000da0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da4:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <HAL_IncTick+0x20>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	461a      	mov	r2, r3
 8000daa:	4b06      	ldr	r3, [pc, #24]	@ (8000dc4 <HAL_IncTick+0x24>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4413      	add	r3, r2
 8000db0:	4a04      	ldr	r2, [pc, #16]	@ (8000dc4 <HAL_IncTick+0x24>)
 8000db2:	6013      	str	r3, [r2, #0]
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	2000000c 	.word	0x2000000c
 8000dc4:	20000184 	.word	0x20000184

08000dc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  return uwTick;
 8000dcc:	4b03      	ldr	r3, [pc, #12]	@ (8000ddc <HAL_GetTick+0x14>)
 8000dce:	681b      	ldr	r3, [r3, #0]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	20000184 	.word	0x20000184

08000de0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000de8:	f7ff ffee 	bl	8000dc8 <HAL_GetTick>
 8000dec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df8:	d005      	beq.n	8000e06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8000e24 <HAL_Delay+0x44>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	461a      	mov	r2, r3
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	4413      	add	r3, r2
 8000e04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e06:	bf00      	nop
 8000e08:	f7ff ffde 	bl	8000dc8 <HAL_GetTick>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	68fa      	ldr	r2, [r7, #12]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d8f7      	bhi.n	8000e08 <HAL_Delay+0x28>
  {
  }
}
 8000e18:	bf00      	nop
 8000e1a:	bf00      	nop
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	2000000c 	.word	0x2000000c

08000e28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e38:	4b0c      	ldr	r3, [pc, #48]	@ (8000e6c <__NVIC_SetPriorityGrouping+0x44>)
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e3e:	68ba      	ldr	r2, [r7, #8]
 8000e40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e44:	4013      	ands	r3, r2
 8000e46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e5a:	4a04      	ldr	r2, [pc, #16]	@ (8000e6c <__NVIC_SetPriorityGrouping+0x44>)
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	60d3      	str	r3, [r2, #12]
}
 8000e60:	bf00      	nop
 8000e62:	3714      	adds	r7, #20
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e74:	4b04      	ldr	r3, [pc, #16]	@ (8000e88 <__NVIC_GetPriorityGrouping+0x18>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	0a1b      	lsrs	r3, r3, #8
 8000e7a:	f003 0307 	and.w	r3, r3, #7
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	db0b      	blt.n	8000eb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	f003 021f 	and.w	r2, r3, #31
 8000ea4:	4907      	ldr	r1, [pc, #28]	@ (8000ec4 <__NVIC_EnableIRQ+0x38>)
 8000ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eaa:	095b      	lsrs	r3, r3, #5
 8000eac:	2001      	movs	r0, #1
 8000eae:	fa00 f202 	lsl.w	r2, r0, r2
 8000eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	e000e100 	.word	0xe000e100

08000ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	6039      	str	r1, [r7, #0]
 8000ed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	db0a      	blt.n	8000ef2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	490c      	ldr	r1, [pc, #48]	@ (8000f14 <__NVIC_SetPriority+0x4c>)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	0112      	lsls	r2, r2, #4
 8000ee8:	b2d2      	uxtb	r2, r2
 8000eea:	440b      	add	r3, r1
 8000eec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef0:	e00a      	b.n	8000f08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	4908      	ldr	r1, [pc, #32]	@ (8000f18 <__NVIC_SetPriority+0x50>)
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	f003 030f 	and.w	r3, r3, #15
 8000efe:	3b04      	subs	r3, #4
 8000f00:	0112      	lsls	r2, r2, #4
 8000f02:	b2d2      	uxtb	r2, r2
 8000f04:	440b      	add	r3, r1
 8000f06:	761a      	strb	r2, [r3, #24]
}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000e100 	.word	0xe000e100
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b089      	sub	sp, #36	@ 0x24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	f1c3 0307 	rsb	r3, r3, #7
 8000f36:	2b04      	cmp	r3, #4
 8000f38:	bf28      	it	cs
 8000f3a:	2304      	movcs	r3, #4
 8000f3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	3304      	adds	r3, #4
 8000f42:	2b06      	cmp	r3, #6
 8000f44:	d902      	bls.n	8000f4c <NVIC_EncodePriority+0x30>
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	3b03      	subs	r3, #3
 8000f4a:	e000      	b.n	8000f4e <NVIC_EncodePriority+0x32>
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f50:	f04f 32ff 	mov.w	r2, #4294967295
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43da      	mvns	r2, r3
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	401a      	ands	r2, r3
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f64:	f04f 31ff 	mov.w	r1, #4294967295
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6e:	43d9      	mvns	r1, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f74:	4313      	orrs	r3, r2
         );
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3724      	adds	r7, #36	@ 0x24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
	...

08000f84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f94:	d301      	bcc.n	8000f9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f96:	2301      	movs	r3, #1
 8000f98:	e00f      	b.n	8000fba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc4 <SysTick_Config+0x40>)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fa2:	210f      	movs	r1, #15
 8000fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa8:	f7ff ff8e 	bl	8000ec8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fac:	4b05      	ldr	r3, [pc, #20]	@ (8000fc4 <SysTick_Config+0x40>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fb2:	4b04      	ldr	r3, [pc, #16]	@ (8000fc4 <SysTick_Config+0x40>)
 8000fb4:	2207      	movs	r2, #7
 8000fb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	e000e010 	.word	0xe000e010

08000fc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f7ff ff29 	bl	8000e28 <__NVIC_SetPriorityGrouping>
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b086      	sub	sp, #24
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	60b9      	str	r1, [r7, #8]
 8000fe8:	607a      	str	r2, [r7, #4]
 8000fea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ff0:	f7ff ff3e 	bl	8000e70 <__NVIC_GetPriorityGrouping>
 8000ff4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	68b9      	ldr	r1, [r7, #8]
 8000ffa:	6978      	ldr	r0, [r7, #20]
 8000ffc:	f7ff ff8e 	bl	8000f1c <NVIC_EncodePriority>
 8001000:	4602      	mov	r2, r0
 8001002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001006:	4611      	mov	r1, r2
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff ff5d 	bl	8000ec8 <__NVIC_SetPriority>
}
 800100e:	bf00      	nop
 8001010:	3718      	adds	r7, #24
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
 800101c:	4603      	mov	r3, r0
 800101e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff ff31 	bl	8000e8c <__NVIC_EnableIRQ>
}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f7ff ffa2 	bl	8000f84 <SysTick_Config>
 8001040:	4603      	mov	r3, r0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
	...

0800104c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800104c:	b480      	push	{r7}
 800104e:	b089      	sub	sp, #36	@ 0x24
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800105a:	2300      	movs	r3, #0
 800105c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800105e:	2300      	movs	r3, #0
 8001060:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001062:	2300      	movs	r3, #0
 8001064:	61fb      	str	r3, [r7, #28]
 8001066:	e16b      	b.n	8001340 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001068:	2201      	movs	r2, #1
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	697a      	ldr	r2, [r7, #20]
 8001078:	4013      	ands	r3, r2
 800107a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	429a      	cmp	r2, r3
 8001082:	f040 815a 	bne.w	800133a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f003 0303 	and.w	r3, r3, #3
 800108e:	2b01      	cmp	r3, #1
 8001090:	d005      	beq.n	800109e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800109a:	2b02      	cmp	r3, #2
 800109c:	d130      	bne.n	8001100 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	2203      	movs	r2, #3
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43db      	mvns	r3, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4013      	ands	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	68da      	ldr	r2, [r3, #12]
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010d4:	2201      	movs	r2, #1
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	43db      	mvns	r3, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4013      	ands	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	091b      	lsrs	r3, r3, #4
 80010ea:	f003 0201 	and.w	r2, r3, #1
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f003 0303 	and.w	r3, r3, #3
 8001108:	2b03      	cmp	r3, #3
 800110a:	d017      	beq.n	800113c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	2203      	movs	r2, #3
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4013      	ands	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	689a      	ldr	r2, [r3, #8]
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4313      	orrs	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 0303 	and.w	r3, r3, #3
 8001144:	2b02      	cmp	r3, #2
 8001146:	d123      	bne.n	8001190 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	08da      	lsrs	r2, r3, #3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3208      	adds	r2, #8
 8001150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001154:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	f003 0307 	and.w	r3, r3, #7
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	220f      	movs	r2, #15
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4013      	ands	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	691a      	ldr	r2, [r3, #16]
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4313      	orrs	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	08da      	lsrs	r2, r3, #3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	3208      	adds	r2, #8
 800118a:	69b9      	ldr	r1, [r7, #24]
 800118c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	2203      	movs	r2, #3
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 0203 	and.w	r2, r3, #3
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	f000 80b4 	beq.w	800133a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	4b60      	ldr	r3, [pc, #384]	@ (8001358 <HAL_GPIO_Init+0x30c>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011da:	4a5f      	ldr	r2, [pc, #380]	@ (8001358 <HAL_GPIO_Init+0x30c>)
 80011dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80011e2:	4b5d      	ldr	r3, [pc, #372]	@ (8001358 <HAL_GPIO_Init+0x30c>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011ee:	4a5b      	ldr	r2, [pc, #364]	@ (800135c <HAL_GPIO_Init+0x310>)
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	089b      	lsrs	r3, r3, #2
 80011f4:	3302      	adds	r3, #2
 80011f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	f003 0303 	and.w	r3, r3, #3
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	220f      	movs	r2, #15
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	43db      	mvns	r3, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4013      	ands	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a52      	ldr	r2, [pc, #328]	@ (8001360 <HAL_GPIO_Init+0x314>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d02b      	beq.n	8001272 <HAL_GPIO_Init+0x226>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a51      	ldr	r2, [pc, #324]	@ (8001364 <HAL_GPIO_Init+0x318>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d025      	beq.n	800126e <HAL_GPIO_Init+0x222>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a50      	ldr	r2, [pc, #320]	@ (8001368 <HAL_GPIO_Init+0x31c>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d01f      	beq.n	800126a <HAL_GPIO_Init+0x21e>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a4f      	ldr	r2, [pc, #316]	@ (800136c <HAL_GPIO_Init+0x320>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d019      	beq.n	8001266 <HAL_GPIO_Init+0x21a>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a4e      	ldr	r2, [pc, #312]	@ (8001370 <HAL_GPIO_Init+0x324>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d013      	beq.n	8001262 <HAL_GPIO_Init+0x216>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a4d      	ldr	r2, [pc, #308]	@ (8001374 <HAL_GPIO_Init+0x328>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d00d      	beq.n	800125e <HAL_GPIO_Init+0x212>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a4c      	ldr	r2, [pc, #304]	@ (8001378 <HAL_GPIO_Init+0x32c>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d007      	beq.n	800125a <HAL_GPIO_Init+0x20e>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a4b      	ldr	r2, [pc, #300]	@ (800137c <HAL_GPIO_Init+0x330>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d101      	bne.n	8001256 <HAL_GPIO_Init+0x20a>
 8001252:	2307      	movs	r3, #7
 8001254:	e00e      	b.n	8001274 <HAL_GPIO_Init+0x228>
 8001256:	2308      	movs	r3, #8
 8001258:	e00c      	b.n	8001274 <HAL_GPIO_Init+0x228>
 800125a:	2306      	movs	r3, #6
 800125c:	e00a      	b.n	8001274 <HAL_GPIO_Init+0x228>
 800125e:	2305      	movs	r3, #5
 8001260:	e008      	b.n	8001274 <HAL_GPIO_Init+0x228>
 8001262:	2304      	movs	r3, #4
 8001264:	e006      	b.n	8001274 <HAL_GPIO_Init+0x228>
 8001266:	2303      	movs	r3, #3
 8001268:	e004      	b.n	8001274 <HAL_GPIO_Init+0x228>
 800126a:	2302      	movs	r3, #2
 800126c:	e002      	b.n	8001274 <HAL_GPIO_Init+0x228>
 800126e:	2301      	movs	r3, #1
 8001270:	e000      	b.n	8001274 <HAL_GPIO_Init+0x228>
 8001272:	2300      	movs	r3, #0
 8001274:	69fa      	ldr	r2, [r7, #28]
 8001276:	f002 0203 	and.w	r2, r2, #3
 800127a:	0092      	lsls	r2, r2, #2
 800127c:	4093      	lsls	r3, r2
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4313      	orrs	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001284:	4935      	ldr	r1, [pc, #212]	@ (800135c <HAL_GPIO_Init+0x310>)
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	089b      	lsrs	r3, r3, #2
 800128a:	3302      	adds	r3, #2
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001292:	4b3b      	ldr	r3, [pc, #236]	@ (8001380 <HAL_GPIO_Init+0x334>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	43db      	mvns	r3, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4013      	ands	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012b6:	4a32      	ldr	r2, [pc, #200]	@ (8001380 <HAL_GPIO_Init+0x334>)
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012bc:	4b30      	ldr	r3, [pc, #192]	@ (8001380 <HAL_GPIO_Init+0x334>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	43db      	mvns	r3, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4013      	ands	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d003      	beq.n	80012e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	4313      	orrs	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012e0:	4a27      	ldr	r2, [pc, #156]	@ (8001380 <HAL_GPIO_Init+0x334>)
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012e6:	4b26      	ldr	r3, [pc, #152]	@ (8001380 <HAL_GPIO_Init+0x334>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	43db      	mvns	r3, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4013      	ands	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d003      	beq.n	800130a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	4313      	orrs	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800130a:	4a1d      	ldr	r2, [pc, #116]	@ (8001380 <HAL_GPIO_Init+0x334>)
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001310:	4b1b      	ldr	r3, [pc, #108]	@ (8001380 <HAL_GPIO_Init+0x334>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	43db      	mvns	r3, r3
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4013      	ands	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d003      	beq.n	8001334 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	4313      	orrs	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001334:	4a12      	ldr	r2, [pc, #72]	@ (8001380 <HAL_GPIO_Init+0x334>)
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	3301      	adds	r3, #1
 800133e:	61fb      	str	r3, [r7, #28]
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	2b0f      	cmp	r3, #15
 8001344:	f67f ae90 	bls.w	8001068 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001348:	bf00      	nop
 800134a:	bf00      	nop
 800134c:	3724      	adds	r7, #36	@ 0x24
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	40023800 	.word	0x40023800
 800135c:	40013800 	.word	0x40013800
 8001360:	40020000 	.word	0x40020000
 8001364:	40020400 	.word	0x40020400
 8001368:	40020800 	.word	0x40020800
 800136c:	40020c00 	.word	0x40020c00
 8001370:	40021000 	.word	0x40021000
 8001374:	40021400 	.word	0x40021400
 8001378:	40021800 	.word	0x40021800
 800137c:	40021c00 	.word	0x40021c00
 8001380:	40013c00 	.word	0x40013c00

08001384 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af02      	add	r7, sp, #8
 800138a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d101      	bne.n	8001396 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e101      	b.n	800159a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d106      	bne.n	80013b6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f004 feff 	bl	80061b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2203      	movs	r2, #3
 80013ba:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80013c4:	d102      	bne.n	80013cc <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f001 fb4c 	bl	8002a6e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6818      	ldr	r0, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	7c1a      	ldrb	r2, [r3, #16]
 80013de:	f88d 2000 	strb.w	r2, [sp]
 80013e2:	3304      	adds	r3, #4
 80013e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013e6:	f001 fa2b 	bl	8002840 <USB_CoreInit>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d005      	beq.n	80013fc <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2202      	movs	r2, #2
 80013f4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e0ce      	b.n	800159a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2100      	movs	r1, #0
 8001402:	4618      	mov	r0, r3
 8001404:	f001 fb44 	bl	8002a90 <USB_SetCurrentMode>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d005      	beq.n	800141a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2202      	movs	r2, #2
 8001412:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e0bf      	b.n	800159a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800141a:	2300      	movs	r3, #0
 800141c:	73fb      	strb	r3, [r7, #15]
 800141e:	e04a      	b.n	80014b6 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001420:	7bfa      	ldrb	r2, [r7, #15]
 8001422:	6879      	ldr	r1, [r7, #4]
 8001424:	4613      	mov	r3, r2
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	4413      	add	r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	440b      	add	r3, r1
 800142e:	3315      	adds	r3, #21
 8001430:	2201      	movs	r2, #1
 8001432:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001434:	7bfa      	ldrb	r2, [r7, #15]
 8001436:	6879      	ldr	r1, [r7, #4]
 8001438:	4613      	mov	r3, r2
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	4413      	add	r3, r2
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	440b      	add	r3, r1
 8001442:	3314      	adds	r3, #20
 8001444:	7bfa      	ldrb	r2, [r7, #15]
 8001446:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001448:	7bfa      	ldrb	r2, [r7, #15]
 800144a:	7bfb      	ldrb	r3, [r7, #15]
 800144c:	b298      	uxth	r0, r3
 800144e:	6879      	ldr	r1, [r7, #4]
 8001450:	4613      	mov	r3, r2
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	4413      	add	r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	440b      	add	r3, r1
 800145a:	332e      	adds	r3, #46	@ 0x2e
 800145c:	4602      	mov	r2, r0
 800145e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001460:	7bfa      	ldrb	r2, [r7, #15]
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	4613      	mov	r3, r2
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	4413      	add	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	440b      	add	r3, r1
 800146e:	3318      	adds	r3, #24
 8001470:	2200      	movs	r2, #0
 8001472:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001474:	7bfa      	ldrb	r2, [r7, #15]
 8001476:	6879      	ldr	r1, [r7, #4]
 8001478:	4613      	mov	r3, r2
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	4413      	add	r3, r2
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	440b      	add	r3, r1
 8001482:	331c      	adds	r3, #28
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001488:	7bfa      	ldrb	r2, [r7, #15]
 800148a:	6879      	ldr	r1, [r7, #4]
 800148c:	4613      	mov	r3, r2
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	4413      	add	r3, r2
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	440b      	add	r3, r1
 8001496:	3320      	adds	r3, #32
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800149c:	7bfa      	ldrb	r2, [r7, #15]
 800149e:	6879      	ldr	r1, [r7, #4]
 80014a0:	4613      	mov	r3, r2
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	4413      	add	r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	440b      	add	r3, r1
 80014aa:	3324      	adds	r3, #36	@ 0x24
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014b0:	7bfb      	ldrb	r3, [r7, #15]
 80014b2:	3301      	adds	r3, #1
 80014b4:	73fb      	strb	r3, [r7, #15]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	791b      	ldrb	r3, [r3, #4]
 80014ba:	7bfa      	ldrb	r2, [r7, #15]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d3af      	bcc.n	8001420 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014c0:	2300      	movs	r3, #0
 80014c2:	73fb      	strb	r3, [r7, #15]
 80014c4:	e044      	b.n	8001550 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80014c6:	7bfa      	ldrb	r2, [r7, #15]
 80014c8:	6879      	ldr	r1, [r7, #4]
 80014ca:	4613      	mov	r3, r2
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	4413      	add	r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	440b      	add	r3, r1
 80014d4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80014d8:	2200      	movs	r2, #0
 80014da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80014dc:	7bfa      	ldrb	r2, [r7, #15]
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	4613      	mov	r3, r2
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	4413      	add	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	440b      	add	r3, r1
 80014ea:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80014ee:	7bfa      	ldrb	r2, [r7, #15]
 80014f0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80014f2:	7bfa      	ldrb	r2, [r7, #15]
 80014f4:	6879      	ldr	r1, [r7, #4]
 80014f6:	4613      	mov	r3, r2
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	4413      	add	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	440b      	add	r3, r1
 8001500:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001504:	2200      	movs	r2, #0
 8001506:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001508:	7bfa      	ldrb	r2, [r7, #15]
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	4613      	mov	r3, r2
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	4413      	add	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	440b      	add	r3, r1
 8001516:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800151e:	7bfa      	ldrb	r2, [r7, #15]
 8001520:	6879      	ldr	r1, [r7, #4]
 8001522:	4613      	mov	r3, r2
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	4413      	add	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	440b      	add	r3, r1
 800152c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001534:	7bfa      	ldrb	r2, [r7, #15]
 8001536:	6879      	ldr	r1, [r7, #4]
 8001538:	4613      	mov	r3, r2
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	4413      	add	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	440b      	add	r3, r1
 8001542:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800154a:	7bfb      	ldrb	r3, [r7, #15]
 800154c:	3301      	adds	r3, #1
 800154e:	73fb      	strb	r3, [r7, #15]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	791b      	ldrb	r3, [r3, #4]
 8001554:	7bfa      	ldrb	r2, [r7, #15]
 8001556:	429a      	cmp	r2, r3
 8001558:	d3b5      	bcc.n	80014c6 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6818      	ldr	r0, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	7c1a      	ldrb	r2, [r3, #16]
 8001562:	f88d 2000 	strb.w	r2, [sp]
 8001566:	3304      	adds	r3, #4
 8001568:	cb0e      	ldmia	r3, {r1, r2, r3}
 800156a:	f001 fadd 	bl	8002b28 <USB_DevInit>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d005      	beq.n	8001580 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2202      	movs	r2, #2
 8001578:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e00c      	b.n	800159a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2201      	movs	r2, #1
 800158a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f002 fb27 	bl	8003be6 <USB_DevDisconnect>

  return HAL_OK;
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b084      	sub	sp, #16
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d101      	bne.n	80015be <HAL_PCD_Start+0x1c>
 80015ba:	2302      	movs	r3, #2
 80015bc:	e022      	b.n	8001604 <HAL_PCD_Start+0x62>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2201      	movs	r2, #1
 80015c2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d009      	beq.n	80015e6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d105      	bne.n	80015e6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015de:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f001 fa2e 	bl	8002a4c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f002 fad5 	bl	8003ba4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800160c:	b590      	push	{r4, r7, lr}
 800160e:	b08d      	sub	sp, #52	@ 0x34
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800161a:	6a3b      	ldr	r3, [r7, #32]
 800161c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f002 fb93 	bl	8003d4e <USB_GetMode>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	f040 848c 	bne.w	8001f48 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f002 faf7 	bl	8003c28 <USB_ReadInterrupts>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	f000 8482 	beq.w	8001f46 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	0a1b      	lsrs	r3, r3, #8
 800164c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4618      	mov	r0, r3
 800165c:	f002 fae4 	bl	8003c28 <USB_ReadInterrupts>
 8001660:	4603      	mov	r3, r0
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b02      	cmp	r3, #2
 8001668:	d107      	bne.n	800167a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	695a      	ldr	r2, [r3, #20]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f002 0202 	and.w	r2, r2, #2
 8001678:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f002 fad2 	bl	8003c28 <USB_ReadInterrupts>
 8001684:	4603      	mov	r3, r0
 8001686:	f003 0310 	and.w	r3, r3, #16
 800168a:	2b10      	cmp	r3, #16
 800168c:	d161      	bne.n	8001752 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	699a      	ldr	r2, [r3, #24]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f022 0210 	bic.w	r2, r2, #16
 800169c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800169e:	6a3b      	ldr	r3, [r7, #32]
 80016a0:	6a1b      	ldr	r3, [r3, #32]
 80016a2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	f003 020f 	and.w	r2, r3, #15
 80016aa:	4613      	mov	r3, r2
 80016ac:	00db      	lsls	r3, r3, #3
 80016ae:	4413      	add	r3, r2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	4413      	add	r3, r2
 80016ba:	3304      	adds	r3, #4
 80016bc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	0c5b      	lsrs	r3, r3, #17
 80016c2:	f003 030f 	and.w	r3, r3, #15
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d124      	bne.n	8001714 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80016d0:	4013      	ands	r3, r2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d035      	beq.n	8001742 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	091b      	lsrs	r3, r3, #4
 80016de:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80016e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	461a      	mov	r2, r3
 80016e8:	6a38      	ldr	r0, [r7, #32]
 80016ea:	f002 f909 	bl	8003900 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	68da      	ldr	r2, [r3, #12]
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	091b      	lsrs	r3, r3, #4
 80016f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016fa:	441a      	add	r2, r3
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	695a      	ldr	r2, [r3, #20]
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	091b      	lsrs	r3, r3, #4
 8001708:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800170c:	441a      	add	r2, r3
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	615a      	str	r2, [r3, #20]
 8001712:	e016      	b.n	8001742 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	0c5b      	lsrs	r3, r3, #17
 8001718:	f003 030f 	and.w	r3, r3, #15
 800171c:	2b06      	cmp	r3, #6
 800171e:	d110      	bne.n	8001742 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001726:	2208      	movs	r2, #8
 8001728:	4619      	mov	r1, r3
 800172a:	6a38      	ldr	r0, [r7, #32]
 800172c:	f002 f8e8 	bl	8003900 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	695a      	ldr	r2, [r3, #20]
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	091b      	lsrs	r3, r3, #4
 8001738:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800173c:	441a      	add	r2, r3
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	699a      	ldr	r2, [r3, #24]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f042 0210 	orr.w	r2, r2, #16
 8001750:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4618      	mov	r0, r3
 8001758:	f002 fa66 	bl	8003c28 <USB_ReadInterrupts>
 800175c:	4603      	mov	r3, r0
 800175e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001762:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001766:	f040 80a7 	bne.w	80018b8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800176a:	2300      	movs	r3, #0
 800176c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4618      	mov	r0, r3
 8001774:	f002 fa6b 	bl	8003c4e <USB_ReadDevAllOutEpInterrupt>
 8001778:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800177a:	e099      	b.n	80018b0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800177c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	2b00      	cmp	r3, #0
 8001784:	f000 808e 	beq.w	80018a4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800178e:	b2d2      	uxtb	r2, r2
 8001790:	4611      	mov	r1, r2
 8001792:	4618      	mov	r0, r3
 8001794:	f002 fa8f 	bl	8003cb6 <USB_ReadDevOutEPInterrupt>
 8001798:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	f003 0301 	and.w	r3, r3, #1
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d00c      	beq.n	80017be <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80017a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a6:	015a      	lsls	r2, r3, #5
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	4413      	add	r3, r2
 80017ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017b0:	461a      	mov	r2, r3
 80017b2:	2301      	movs	r3, #1
 80017b4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80017b6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f000 fea3 	bl	8002504 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	f003 0308 	and.w	r3, r3, #8
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d00c      	beq.n	80017e2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80017c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ca:	015a      	lsls	r2, r3, #5
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	4413      	add	r3, r2
 80017d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017d4:	461a      	mov	r2, r3
 80017d6:	2308      	movs	r3, #8
 80017d8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80017da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f000 ff79 	bl	80026d4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	f003 0310 	and.w	r3, r3, #16
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d008      	beq.n	80017fe <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80017ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ee:	015a      	lsls	r2, r3, #5
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	4413      	add	r3, r2
 80017f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017f8:	461a      	mov	r2, r3
 80017fa:	2310      	movs	r3, #16
 80017fc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d030      	beq.n	800186a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001808:	6a3b      	ldr	r3, [r7, #32]
 800180a:	695b      	ldr	r3, [r3, #20]
 800180c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001810:	2b80      	cmp	r3, #128	@ 0x80
 8001812:	d109      	bne.n	8001828 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	69fa      	ldr	r2, [r7, #28]
 800181e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001822:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001826:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001828:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800182a:	4613      	mov	r3, r2
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	4413      	add	r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	4413      	add	r3, r2
 800183a:	3304      	adds	r3, #4
 800183c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	78db      	ldrb	r3, [r3, #3]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d108      	bne.n	8001858 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	2200      	movs	r2, #0
 800184a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800184c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184e:	b2db      	uxtb	r3, r3
 8001850:	4619      	mov	r1, r3
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f004 fdb4 	bl	80063c0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800185a:	015a      	lsls	r2, r3, #5
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	4413      	add	r3, r2
 8001860:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001864:	461a      	mov	r2, r3
 8001866:	2302      	movs	r3, #2
 8001868:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	f003 0320 	and.w	r3, r3, #32
 8001870:	2b00      	cmp	r3, #0
 8001872:	d008      	beq.n	8001886 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001876:	015a      	lsls	r2, r3, #5
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	4413      	add	r3, r2
 800187c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001880:	461a      	mov	r2, r3
 8001882:	2320      	movs	r3, #32
 8001884:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d009      	beq.n	80018a4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001892:	015a      	lsls	r2, r3, #5
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	4413      	add	r3, r2
 8001898:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800189c:	461a      	mov	r2, r3
 800189e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018a2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80018a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a6:	3301      	adds	r3, #1
 80018a8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80018aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018ac:	085b      	lsrs	r3, r3, #1
 80018ae:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80018b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	f47f af62 	bne.w	800177c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4618      	mov	r0, r3
 80018be:	f002 f9b3 	bl	8003c28 <USB_ReadInterrupts>
 80018c2:	4603      	mov	r3, r0
 80018c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018c8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80018cc:	f040 80db 	bne.w	8001a86 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f002 f9d4 	bl	8003c82 <USB_ReadDevAllInEpInterrupt>
 80018da:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80018dc:	2300      	movs	r3, #0
 80018de:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80018e0:	e0cd      	b.n	8001a7e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80018e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	f000 80c2 	beq.w	8001a72 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018f4:	b2d2      	uxtb	r2, r2
 80018f6:	4611      	mov	r1, r2
 80018f8:	4618      	mov	r0, r3
 80018fa:	f002 f9fa 	bl	8003cf2 <USB_ReadDevInEPInterrupt>
 80018fe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	2b00      	cmp	r3, #0
 8001908:	d057      	beq.n	80019ba <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800190a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800190c:	f003 030f 	and.w	r3, r3, #15
 8001910:	2201      	movs	r2, #1
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800191e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	43db      	mvns	r3, r3
 8001924:	69f9      	ldr	r1, [r7, #28]
 8001926:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800192a:	4013      	ands	r3, r2
 800192c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800192e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001930:	015a      	lsls	r2, r3, #5
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	4413      	add	r3, r2
 8001936:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800193a:	461a      	mov	r2, r3
 800193c:	2301      	movs	r3, #1
 800193e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	799b      	ldrb	r3, [r3, #6]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d132      	bne.n	80019ae <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001948:	6879      	ldr	r1, [r7, #4]
 800194a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800194c:	4613      	mov	r3, r2
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	4413      	add	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	440b      	add	r3, r1
 8001956:	3320      	adds	r3, #32
 8001958:	6819      	ldr	r1, [r3, #0]
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800195e:	4613      	mov	r3, r2
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	4413      	add	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4403      	add	r3, r0
 8001968:	331c      	adds	r3, #28
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4419      	add	r1, r3
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001972:	4613      	mov	r3, r2
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	4413      	add	r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	4403      	add	r3, r0
 800197c:	3320      	adds	r3, #32
 800197e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001982:	2b00      	cmp	r3, #0
 8001984:	d113      	bne.n	80019ae <HAL_PCD_IRQHandler+0x3a2>
 8001986:	6879      	ldr	r1, [r7, #4]
 8001988:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800198a:	4613      	mov	r3, r2
 800198c:	00db      	lsls	r3, r3, #3
 800198e:	4413      	add	r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	440b      	add	r3, r1
 8001994:	3324      	adds	r3, #36	@ 0x24
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d108      	bne.n	80019ae <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6818      	ldr	r0, [r3, #0]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80019a6:	461a      	mov	r2, r3
 80019a8:	2101      	movs	r1, #1
 80019aa:	f002 fa01 	bl	8003db0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80019ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	4619      	mov	r1, r3
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f004 fc7e 	bl	80062b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	f003 0308 	and.w	r3, r3, #8
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d008      	beq.n	80019d6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80019c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c6:	015a      	lsls	r2, r3, #5
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	4413      	add	r3, r2
 80019cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80019d0:	461a      	mov	r2, r3
 80019d2:	2308      	movs	r3, #8
 80019d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	f003 0310 	and.w	r3, r3, #16
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d008      	beq.n	80019f2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80019e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e2:	015a      	lsls	r2, r3, #5
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	4413      	add	r3, r2
 80019e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80019ec:	461a      	mov	r2, r3
 80019ee:	2310      	movs	r3, #16
 80019f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d008      	beq.n	8001a0e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80019fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019fe:	015a      	lsls	r2, r3, #5
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	4413      	add	r3, r2
 8001a04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001a08:	461a      	mov	r2, r3
 8001a0a:	2340      	movs	r3, #64	@ 0x40
 8001a0c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d023      	beq.n	8001a60 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001a18:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001a1a:	6a38      	ldr	r0, [r7, #32]
 8001a1c:	f001 f9e8 	bl	8002df0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001a20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a22:	4613      	mov	r3, r2
 8001a24:	00db      	lsls	r3, r3, #3
 8001a26:	4413      	add	r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	3310      	adds	r3, #16
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	4413      	add	r3, r2
 8001a30:	3304      	adds	r3, #4
 8001a32:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	78db      	ldrb	r3, [r3, #3]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d108      	bne.n	8001a4e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	4619      	mov	r1, r3
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f004 fccb 	bl	80063e4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a50:	015a      	lsls	r2, r3, #5
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	4413      	add	r3, r2
 8001a56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001a6a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f000 fcbd 	bl	80023ec <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a74:	3301      	adds	r3, #1
 8001a76:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a7a:	085b      	lsrs	r3, r3, #1
 8001a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	f47f af2e 	bne.w	80018e2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f002 f8cc 	bl	8003c28 <USB_ReadInterrupts>
 8001a90:	4603      	mov	r3, r0
 8001a92:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001a96:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001a9a:	d122      	bne.n	8001ae2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	69fa      	ldr	r2, [r7, #28]
 8001aa6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001aaa:	f023 0301 	bic.w	r3, r3, #1
 8001aae:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d108      	bne.n	8001acc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f000 fea3 	bl	8002810 <HAL_PCDEx_LPM_Callback>
 8001aca:	e002      	b.n	8001ad2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f004 fc69 	bl	80063a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	695a      	ldr	r2, [r3, #20]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001ae0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f002 f89e 	bl	8003c28 <USB_ReadInterrupts>
 8001aec:	4603      	mov	r3, r0
 8001aee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001af2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001af6:	d112      	bne.n	8001b1e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d102      	bne.n	8001b0e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f004 fc25 	bl	8006358 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	695a      	ldr	r2, [r3, #20]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001b1c:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f002 f880 	bl	8003c28 <USB_ReadInterrupts>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b32:	f040 80b7 	bne.w	8001ca4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	69fa      	ldr	r2, [r7, #28]
 8001b40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b44:	f023 0301 	bic.w	r3, r3, #1
 8001b48:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2110      	movs	r1, #16
 8001b50:	4618      	mov	r0, r3
 8001b52:	f001 f94d 	bl	8002df0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b56:	2300      	movs	r3, #0
 8001b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b5a:	e046      	b.n	8001bea <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b5e:	015a      	lsls	r2, r3, #5
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	4413      	add	r3, r2
 8001b64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001b68:	461a      	mov	r2, r3
 8001b6a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001b6e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b72:	015a      	lsls	r2, r3, #5
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	4413      	add	r3, r2
 8001b78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b80:	0151      	lsls	r1, r2, #5
 8001b82:	69fa      	ldr	r2, [r7, #28]
 8001b84:	440a      	add	r2, r1
 8001b86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001b8a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001b8e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b92:	015a      	lsls	r2, r3, #5
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	4413      	add	r3, r2
 8001b98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001ba2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ba6:	015a      	lsls	r2, r3, #5
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	4413      	add	r3, r2
 8001bac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001bb4:	0151      	lsls	r1, r2, #5
 8001bb6:	69fa      	ldr	r2, [r7, #28]
 8001bb8:	440a      	add	r2, r1
 8001bba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001bbe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001bc2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bc6:	015a      	lsls	r2, r3, #5
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	4413      	add	r3, r2
 8001bcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001bd4:	0151      	lsls	r1, r2, #5
 8001bd6:	69fa      	ldr	r2, [r7, #28]
 8001bd8:	440a      	add	r2, r1
 8001bda:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001bde:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001be2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001be6:	3301      	adds	r3, #1
 8001be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	791b      	ldrb	r3, [r3, #4]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d3b2      	bcc.n	8001b5c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	69fa      	ldr	r2, [r7, #28]
 8001c00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001c04:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001c08:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	7bdb      	ldrb	r3, [r3, #15]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d016      	beq.n	8001c40 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001c1c:	69fa      	ldr	r2, [r7, #28]
 8001c1e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001c22:	f043 030b 	orr.w	r3, r3, #11
 8001c26:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c32:	69fa      	ldr	r2, [r7, #28]
 8001c34:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001c38:	f043 030b 	orr.w	r3, r3, #11
 8001c3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c3e:	e015      	b.n	8001c6c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c46:	695b      	ldr	r3, [r3, #20]
 8001c48:	69fa      	ldr	r2, [r7, #28]
 8001c4a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001c4e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001c52:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001c56:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c5e:	691b      	ldr	r3, [r3, #16]
 8001c60:	69fa      	ldr	r2, [r7, #28]
 8001c62:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001c66:	f043 030b 	orr.w	r3, r3, #11
 8001c6a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	69fa      	ldr	r2, [r7, #28]
 8001c76:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001c7a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001c7e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6818      	ldr	r0, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001c8e:	461a      	mov	r2, r3
 8001c90:	f002 f88e 	bl	8003db0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	695a      	ldr	r2, [r3, #20]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001ca2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f001 ffbd 	bl	8003c28 <USB_ReadInterrupts>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001cb8:	d123      	bne.n	8001d02 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f002 f853 	bl	8003d6a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f001 f90a 	bl	8002ee2 <USB_GetDevSpeed>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681c      	ldr	r4, [r3, #0]
 8001cda:	f000 fda5 	bl	8002828 <HAL_RCC_GetHCLKFreq>
 8001cde:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4620      	mov	r0, r4
 8001ce8:	f000 fe0e 	bl	8002908 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f004 fb0a 	bl	8006306 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	695a      	ldr	r2, [r3, #20]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001d00:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f001 ff8e 	bl	8003c28 <USB_ReadInterrupts>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	f003 0308 	and.w	r3, r3, #8
 8001d12:	2b08      	cmp	r3, #8
 8001d14:	d10a      	bne.n	8001d2c <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f004 fae7 	bl	80062ea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	695a      	ldr	r2, [r3, #20]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f002 0208 	and.w	r2, r2, #8
 8001d2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f001 ff79 	bl	8003c28 <USB_ReadInterrupts>
 8001d36:	4603      	mov	r3, r0
 8001d38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d3c:	2b80      	cmp	r3, #128	@ 0x80
 8001d3e:	d123      	bne.n	8001d88 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001d40:	6a3b      	ldr	r3, [r7, #32]
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001d48:	6a3b      	ldr	r3, [r7, #32]
 8001d4a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d50:	e014      	b.n	8001d7c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001d52:	6879      	ldr	r1, [r7, #4]
 8001d54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d56:	4613      	mov	r3, r2
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	4413      	add	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	440b      	add	r3, r1
 8001d60:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d105      	bne.n	8001d76 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	4619      	mov	r1, r3
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f000 fb0a 	bl	800238a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d78:	3301      	adds	r3, #1
 8001d7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	791b      	ldrb	r3, [r3, #4]
 8001d80:	461a      	mov	r2, r3
 8001d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d3e4      	bcc.n	8001d52 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f001 ff4b 	bl	8003c28 <USB_ReadInterrupts>
 8001d92:	4603      	mov	r3, r0
 8001d94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001d9c:	d13c      	bne.n	8001e18 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d9e:	2301      	movs	r3, #1
 8001da0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001da2:	e02b      	b.n	8001dfc <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da6:	015a      	lsls	r2, r3, #5
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	4413      	add	r3, r2
 8001dac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001db4:	6879      	ldr	r1, [r7, #4]
 8001db6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001db8:	4613      	mov	r3, r2
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	4413      	add	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	3318      	adds	r3, #24
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d115      	bne.n	8001df6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001dca:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	da12      	bge.n	8001df6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001dd0:	6879      	ldr	r1, [r7, #4]
 8001dd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	4413      	add	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	440b      	add	r3, r1
 8001dde:	3317      	adds	r3, #23
 8001de0:	2201      	movs	r2, #1
 8001de2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	4619      	mov	r1, r3
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 faca 	bl	800238a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df8:	3301      	adds	r3, #1
 8001dfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	791b      	ldrb	r3, [r3, #4]
 8001e00:	461a      	mov	r2, r3
 8001e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d3cd      	bcc.n	8001da4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	695a      	ldr	r2, [r3, #20]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001e16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f001 ff03 	bl	8003c28 <USB_ReadInterrupts>
 8001e22:	4603      	mov	r3, r0
 8001e24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e28:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001e2c:	d156      	bne.n	8001edc <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e2e:	2301      	movs	r3, #1
 8001e30:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e32:	e045      	b.n	8001ec0 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e36:	015a      	lsls	r2, r3, #5
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e44:	6879      	ldr	r1, [r7, #4]
 8001e46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e48:	4613      	mov	r3, r2
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	4413      	add	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	440b      	add	r3, r1
 8001e52:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d12e      	bne.n	8001eba <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001e5c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	da2b      	bge.n	8001eba <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001e6e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d121      	bne.n	8001eba <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001e76:	6879      	ldr	r1, [r7, #4]
 8001e78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	4413      	add	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	440b      	add	r3, r1
 8001e84:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001e88:	2201      	movs	r2, #1
 8001e8a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001e8c:	6a3b      	ldr	r3, [r7, #32]
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001e94:	6a3b      	ldr	r3, [r7, #32]
 8001e96:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001e98:	6a3b      	ldr	r3, [r7, #32]
 8001e9a:	695b      	ldr	r3, [r3, #20]
 8001e9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d10a      	bne.n	8001eba <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	69fa      	ldr	r2, [r7, #28]
 8001eae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001eb2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001eb6:	6053      	str	r3, [r2, #4]
            break;
 8001eb8:	e008      	b.n	8001ecc <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	791b      	ldrb	r3, [r3, #4]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d3b3      	bcc.n	8001e34 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	695a      	ldr	r2, [r3, #20]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001eda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f001 fea1 	bl	8003c28 <USB_ReadInterrupts>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001eec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ef0:	d10a      	bne.n	8001f08 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f004 fa88 	bl	8006408 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	695a      	ldr	r2, [r3, #20]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001f06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f001 fe8b 	bl	8003c28 <USB_ReadInterrupts>
 8001f12:	4603      	mov	r3, r0
 8001f14:	f003 0304 	and.w	r3, r3, #4
 8001f18:	2b04      	cmp	r3, #4
 8001f1a:	d115      	bne.n	8001f48 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	f003 0304 	and.w	r3, r3, #4
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d002      	beq.n	8001f34 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f004 fa78 	bl	8006424 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	6859      	ldr	r1, [r3, #4]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	430a      	orrs	r2, r1
 8001f42:	605a      	str	r2, [r3, #4]
 8001f44:	e000      	b.n	8001f48 <HAL_PCD_IRQHandler+0x93c>
      return;
 8001f46:	bf00      	nop
    }
  }
}
 8001f48:	3734      	adds	r7, #52	@ 0x34
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd90      	pop	{r4, r7, pc}

08001f4e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b082      	sub	sp, #8
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
 8001f56:	460b      	mov	r3, r1
 8001f58:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d101      	bne.n	8001f68 <HAL_PCD_SetAddress+0x1a>
 8001f64:	2302      	movs	r3, #2
 8001f66:	e012      	b.n	8001f8e <HAL_PCD_SetAddress+0x40>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	78fa      	ldrb	r2, [r7, #3]
 8001f74:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	78fa      	ldrb	r2, [r7, #3]
 8001f7c:	4611      	mov	r1, r2
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f001 fdea 	bl	8003b58 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b084      	sub	sp, #16
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
 8001f9e:	4608      	mov	r0, r1
 8001fa0:	4611      	mov	r1, r2
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	70fb      	strb	r3, [r7, #3]
 8001fa8:	460b      	mov	r3, r1
 8001faa:	803b      	strh	r3, [r7, #0]
 8001fac:	4613      	mov	r3, r2
 8001fae:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001fb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	da0f      	bge.n	8001fdc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fbc:	78fb      	ldrb	r3, [r7, #3]
 8001fbe:	f003 020f 	and.w	r2, r3, #15
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	4413      	add	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	3310      	adds	r3, #16
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	4413      	add	r3, r2
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	705a      	strb	r2, [r3, #1]
 8001fda:	e00f      	b.n	8001ffc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fdc:	78fb      	ldrb	r3, [r7, #3]
 8001fde:	f003 020f 	and.w	r2, r3, #15
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	4413      	add	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	3304      	adds	r3, #4
 8001ff4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001ffc:	78fb      	ldrb	r3, [r7, #3]
 8001ffe:	f003 030f 	and.w	r3, r3, #15
 8002002:	b2da      	uxtb	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002008:	883b      	ldrh	r3, [r7, #0]
 800200a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	78ba      	ldrb	r2, [r7, #2]
 8002016:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	785b      	ldrb	r3, [r3, #1]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d004      	beq.n	800202a <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	461a      	mov	r2, r3
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800202a:	78bb      	ldrb	r3, [r7, #2]
 800202c:	2b02      	cmp	r3, #2
 800202e:	d102      	bne.n	8002036 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2200      	movs	r2, #0
 8002034:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800203c:	2b01      	cmp	r3, #1
 800203e:	d101      	bne.n	8002044 <HAL_PCD_EP_Open+0xae>
 8002040:	2302      	movs	r3, #2
 8002042:	e00e      	b.n	8002062 <HAL_PCD_EP_Open+0xcc>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	68f9      	ldr	r1, [r7, #12]
 8002052:	4618      	mov	r0, r3
 8002054:	f000 ff6a 	bl	8002f2c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002060:	7afb      	ldrb	r3, [r7, #11]
}
 8002062:	4618      	mov	r0, r3
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b084      	sub	sp, #16
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
 8002072:	460b      	mov	r3, r1
 8002074:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002076:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800207a:	2b00      	cmp	r3, #0
 800207c:	da0f      	bge.n	800209e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800207e:	78fb      	ldrb	r3, [r7, #3]
 8002080:	f003 020f 	and.w	r2, r3, #15
 8002084:	4613      	mov	r3, r2
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	4413      	add	r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	3310      	adds	r3, #16
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	4413      	add	r3, r2
 8002092:	3304      	adds	r3, #4
 8002094:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2201      	movs	r2, #1
 800209a:	705a      	strb	r2, [r3, #1]
 800209c:	e00f      	b.n	80020be <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800209e:	78fb      	ldrb	r3, [r7, #3]
 80020a0:	f003 020f 	and.w	r2, r3, #15
 80020a4:	4613      	mov	r3, r2
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	4413      	add	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	4413      	add	r3, r2
 80020b4:	3304      	adds	r3, #4
 80020b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2200      	movs	r2, #0
 80020bc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80020be:	78fb      	ldrb	r3, [r7, #3]
 80020c0:	f003 030f 	and.w	r3, r3, #15
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d101      	bne.n	80020d8 <HAL_PCD_EP_Close+0x6e>
 80020d4:	2302      	movs	r3, #2
 80020d6:	e00e      	b.n	80020f6 <HAL_PCD_EP_Close+0x8c>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68f9      	ldr	r1, [r7, #12]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f000 ffa8 	bl	800303c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b086      	sub	sp, #24
 8002102:	af00      	add	r7, sp, #0
 8002104:	60f8      	str	r0, [r7, #12]
 8002106:	607a      	str	r2, [r7, #4]
 8002108:	603b      	str	r3, [r7, #0]
 800210a:	460b      	mov	r3, r1
 800210c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800210e:	7afb      	ldrb	r3, [r7, #11]
 8002110:	f003 020f 	and.w	r2, r3, #15
 8002114:	4613      	mov	r3, r2
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	4413      	add	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	4413      	add	r3, r2
 8002124:	3304      	adds	r3, #4
 8002126:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	2200      	movs	r2, #0
 8002138:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	2200      	movs	r2, #0
 800213e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002140:	7afb      	ldrb	r3, [r7, #11]
 8002142:	f003 030f 	and.w	r3, r3, #15
 8002146:	b2da      	uxtb	r2, r3
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	799b      	ldrb	r3, [r3, #6]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d102      	bne.n	800215a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6818      	ldr	r0, [r3, #0]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	799b      	ldrb	r3, [r3, #6]
 8002162:	461a      	mov	r2, r3
 8002164:	6979      	ldr	r1, [r7, #20]
 8002166:	f001 f845 	bl	80031f4 <USB_EPStartXfer>

  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3718      	adds	r7, #24
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	460b      	mov	r3, r1
 800217e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002180:	78fb      	ldrb	r3, [r7, #3]
 8002182:	f003 020f 	and.w	r2, r3, #15
 8002186:	6879      	ldr	r1, [r7, #4]
 8002188:	4613      	mov	r3, r2
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	4413      	add	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	440b      	add	r3, r1
 8002192:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002196:	681b      	ldr	r3, [r3, #0]
}
 8002198:	4618      	mov	r0, r3
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	607a      	str	r2, [r7, #4]
 80021ae:	603b      	str	r3, [r7, #0]
 80021b0:	460b      	mov	r3, r1
 80021b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021b4:	7afb      	ldrb	r3, [r7, #11]
 80021b6:	f003 020f 	and.w	r2, r3, #15
 80021ba:	4613      	mov	r3, r2
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	4413      	add	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	3310      	adds	r3, #16
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	4413      	add	r3, r2
 80021c8:	3304      	adds	r3, #4
 80021ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	2200      	movs	r2, #0
 80021dc:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	2201      	movs	r2, #1
 80021e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021e4:	7afb      	ldrb	r3, [r7, #11]
 80021e6:	f003 030f 	and.w	r3, r3, #15
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	799b      	ldrb	r3, [r3, #6]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d102      	bne.n	80021fe <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6818      	ldr	r0, [r3, #0]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	799b      	ldrb	r3, [r3, #6]
 8002206:	461a      	mov	r2, r3
 8002208:	6979      	ldr	r1, [r7, #20]
 800220a:	f000 fff3 	bl	80031f4 <USB_EPStartXfer>

  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3718      	adds	r7, #24
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	460b      	mov	r3, r1
 8002222:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002224:	78fb      	ldrb	r3, [r7, #3]
 8002226:	f003 030f 	and.w	r3, r3, #15
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	7912      	ldrb	r2, [r2, #4]
 800222e:	4293      	cmp	r3, r2
 8002230:	d901      	bls.n	8002236 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e04f      	b.n	80022d6 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002236:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800223a:	2b00      	cmp	r3, #0
 800223c:	da0f      	bge.n	800225e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800223e:	78fb      	ldrb	r3, [r7, #3]
 8002240:	f003 020f 	and.w	r2, r3, #15
 8002244:	4613      	mov	r3, r2
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	4413      	add	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	3310      	adds	r3, #16
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	4413      	add	r3, r2
 8002252:	3304      	adds	r3, #4
 8002254:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2201      	movs	r2, #1
 800225a:	705a      	strb	r2, [r3, #1]
 800225c:	e00d      	b.n	800227a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800225e:	78fa      	ldrb	r2, [r7, #3]
 8002260:	4613      	mov	r3, r2
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	4413      	add	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	4413      	add	r3, r2
 8002270:	3304      	adds	r3, #4
 8002272:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2200      	movs	r2, #0
 8002278:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2201      	movs	r2, #1
 800227e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002280:	78fb      	ldrb	r3, [r7, #3]
 8002282:	f003 030f 	and.w	r3, r3, #15
 8002286:	b2da      	uxtb	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002292:	2b01      	cmp	r3, #1
 8002294:	d101      	bne.n	800229a <HAL_PCD_EP_SetStall+0x82>
 8002296:	2302      	movs	r3, #2
 8002298:	e01d      	b.n	80022d6 <HAL_PCD_EP_SetStall+0xbe>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2201      	movs	r2, #1
 800229e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68f9      	ldr	r1, [r7, #12]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f001 fb81 	bl	80039b0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022ae:	78fb      	ldrb	r3, [r7, #3]
 80022b0:	f003 030f 	and.w	r3, r3, #15
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d109      	bne.n	80022cc <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6818      	ldr	r0, [r3, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	7999      	ldrb	r1, [r3, #6]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80022c6:	461a      	mov	r2, r3
 80022c8:	f001 fd72 	bl	8003db0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b084      	sub	sp, #16
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
 80022e6:	460b      	mov	r3, r1
 80022e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80022ea:	78fb      	ldrb	r3, [r7, #3]
 80022ec:	f003 030f 	and.w	r3, r3, #15
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	7912      	ldrb	r2, [r2, #4]
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d901      	bls.n	80022fc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e042      	b.n	8002382 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002300:	2b00      	cmp	r3, #0
 8002302:	da0f      	bge.n	8002324 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002304:	78fb      	ldrb	r3, [r7, #3]
 8002306:	f003 020f 	and.w	r2, r3, #15
 800230a:	4613      	mov	r3, r2
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	4413      	add	r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	3310      	adds	r3, #16
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	4413      	add	r3, r2
 8002318:	3304      	adds	r3, #4
 800231a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2201      	movs	r2, #1
 8002320:	705a      	strb	r2, [r3, #1]
 8002322:	e00f      	b.n	8002344 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002324:	78fb      	ldrb	r3, [r7, #3]
 8002326:	f003 020f 	and.w	r2, r3, #15
 800232a:	4613      	mov	r3, r2
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	4413      	add	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	4413      	add	r3, r2
 800233a:	3304      	adds	r3, #4
 800233c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800234a:	78fb      	ldrb	r3, [r7, #3]
 800234c:	f003 030f 	and.w	r3, r3, #15
 8002350:	b2da      	uxtb	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800235c:	2b01      	cmp	r3, #1
 800235e:	d101      	bne.n	8002364 <HAL_PCD_EP_ClrStall+0x86>
 8002360:	2302      	movs	r3, #2
 8002362:	e00e      	b.n	8002382 <HAL_PCD_EP_ClrStall+0xa4>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68f9      	ldr	r1, [r7, #12]
 8002372:	4618      	mov	r0, r3
 8002374:	f001 fb8a 	bl	8003a8c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3710      	adds	r7, #16
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800238a:	b580      	push	{r7, lr}
 800238c:	b084      	sub	sp, #16
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
 8002392:	460b      	mov	r3, r1
 8002394:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002396:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800239a:	2b00      	cmp	r3, #0
 800239c:	da0c      	bge.n	80023b8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800239e:	78fb      	ldrb	r3, [r7, #3]
 80023a0:	f003 020f 	and.w	r2, r3, #15
 80023a4:	4613      	mov	r3, r2
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	4413      	add	r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	3310      	adds	r3, #16
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	4413      	add	r3, r2
 80023b2:	3304      	adds	r3, #4
 80023b4:	60fb      	str	r3, [r7, #12]
 80023b6:	e00c      	b.n	80023d2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023b8:	78fb      	ldrb	r3, [r7, #3]
 80023ba:	f003 020f 	and.w	r2, r3, #15
 80023be:	4613      	mov	r3, r2
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	4413      	add	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	4413      	add	r3, r2
 80023ce:	3304      	adds	r3, #4
 80023d0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68f9      	ldr	r1, [r7, #12]
 80023d8:	4618      	mov	r0, r3
 80023da:	f001 f9a9 	bl	8003730 <USB_EPStopXfer>
 80023de:	4603      	mov	r3, r0
 80023e0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80023e2:	7afb      	ldrb	r3, [r7, #11]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3710      	adds	r7, #16
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b08a      	sub	sp, #40	@ 0x28
 80023f0:	af02      	add	r7, sp, #8
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	4613      	mov	r3, r2
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	4413      	add	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	3310      	adds	r3, #16
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	4413      	add	r3, r2
 8002410:	3304      	adds	r3, #4
 8002412:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	695a      	ldr	r2, [r3, #20]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	429a      	cmp	r2, r3
 800241e:	d901      	bls.n	8002424 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e06b      	b.n	80024fc <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	691a      	ldr	r2, [r3, #16]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	695b      	ldr	r3, [r3, #20]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	69fa      	ldr	r2, [r7, #28]
 8002436:	429a      	cmp	r2, r3
 8002438:	d902      	bls.n	8002440 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	3303      	adds	r3, #3
 8002444:	089b      	lsrs	r3, r3, #2
 8002446:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002448:	e02a      	b.n	80024a0 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	691a      	ldr	r2, [r3, #16]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	69fa      	ldr	r2, [r7, #28]
 800245c:	429a      	cmp	r2, r3
 800245e:	d902      	bls.n	8002466 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	3303      	adds	r3, #3
 800246a:	089b      	lsrs	r3, r3, #2
 800246c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	68d9      	ldr	r1, [r3, #12]
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	b2da      	uxtb	r2, r3
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	4603      	mov	r3, r0
 8002482:	6978      	ldr	r0, [r7, #20]
 8002484:	f001 f9fe 	bl	8003884 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	68da      	ldr	r2, [r3, #12]
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	441a      	add	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	695a      	ldr	r2, [r3, #20]
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	441a      	add	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	015a      	lsls	r2, r3, #5
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	4413      	add	r3, r2
 80024a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d809      	bhi.n	80024ca <PCD_WriteEmptyTxFifo+0xde>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	695a      	ldr	r2, [r3, #20]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80024be:	429a      	cmp	r2, r3
 80024c0:	d203      	bcs.n	80024ca <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1bf      	bne.n	800244a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	691a      	ldr	r2, [r3, #16]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d811      	bhi.n	80024fa <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	f003 030f 	and.w	r3, r3, #15
 80024dc:	2201      	movs	r2, #1
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80024ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	43db      	mvns	r3, r3
 80024f0:	6939      	ldr	r1, [r7, #16]
 80024f2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80024f6:	4013      	ands	r3, r2
 80024f8:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3720      	adds	r7, #32
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b088      	sub	sp, #32
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	333c      	adds	r3, #60	@ 0x3c
 800251c:	3304      	adds	r3, #4
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	015a      	lsls	r2, r3, #5
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	4413      	add	r3, r2
 800252a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	799b      	ldrb	r3, [r3, #6]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d17b      	bne.n	8002632 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	f003 0308 	and.w	r3, r3, #8
 8002540:	2b00      	cmp	r3, #0
 8002542:	d015      	beq.n	8002570 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	4a61      	ldr	r2, [pc, #388]	@ (80026cc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002548:	4293      	cmp	r3, r2
 800254a:	f240 80b9 	bls.w	80026c0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002554:	2b00      	cmp	r3, #0
 8002556:	f000 80b3 	beq.w	80026c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	015a      	lsls	r2, r3, #5
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	4413      	add	r3, r2
 8002562:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002566:	461a      	mov	r2, r3
 8002568:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800256c:	6093      	str	r3, [r2, #8]
 800256e:	e0a7      	b.n	80026c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	f003 0320 	and.w	r3, r3, #32
 8002576:	2b00      	cmp	r3, #0
 8002578:	d009      	beq.n	800258e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	015a      	lsls	r2, r3, #5
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	4413      	add	r3, r2
 8002582:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002586:	461a      	mov	r2, r3
 8002588:	2320      	movs	r3, #32
 800258a:	6093      	str	r3, [r2, #8]
 800258c:	e098      	b.n	80026c0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002594:	2b00      	cmp	r3, #0
 8002596:	f040 8093 	bne.w	80026c0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	4a4b      	ldr	r2, [pc, #300]	@ (80026cc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d90f      	bls.n	80025c2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00a      	beq.n	80025c2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	015a      	lsls	r2, r3, #5
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	4413      	add	r3, r2
 80025b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025b8:	461a      	mov	r2, r3
 80025ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80025be:	6093      	str	r3, [r2, #8]
 80025c0:	e07e      	b.n	80026c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	4613      	mov	r3, r2
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	4413      	add	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	4413      	add	r3, r2
 80025d4:	3304      	adds	r3, #4
 80025d6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6a1a      	ldr	r2, [r3, #32]
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	0159      	lsls	r1, r3, #5
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	440b      	add	r3, r1
 80025e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ee:	1ad2      	subs	r2, r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d114      	bne.n	8002624 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d109      	bne.n	8002616 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6818      	ldr	r0, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800260c:	461a      	mov	r2, r3
 800260e:	2101      	movs	r1, #1
 8002610:	f001 fbce 	bl	8003db0 <USB_EP0_OutStart>
 8002614:	e006      	b.n	8002624 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	68da      	ldr	r2, [r3, #12]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	441a      	add	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	b2db      	uxtb	r3, r3
 8002628:	4619      	mov	r1, r3
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f003 fe28 	bl	8006280 <HAL_PCD_DataOutStageCallback>
 8002630:	e046      	b.n	80026c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	4a26      	ldr	r2, [pc, #152]	@ (80026d0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d124      	bne.n	8002684 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00a      	beq.n	800265a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	015a      	lsls	r2, r3, #5
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	4413      	add	r3, r2
 800264c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002650:	461a      	mov	r2, r3
 8002652:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002656:	6093      	str	r3, [r2, #8]
 8002658:	e032      	b.n	80026c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	f003 0320 	and.w	r3, r3, #32
 8002660:	2b00      	cmp	r3, #0
 8002662:	d008      	beq.n	8002676 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	015a      	lsls	r2, r3, #5
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	4413      	add	r3, r2
 800266c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002670:	461a      	mov	r2, r3
 8002672:	2320      	movs	r3, #32
 8002674:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	b2db      	uxtb	r3, r3
 800267a:	4619      	mov	r1, r3
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f003 fdff 	bl	8006280 <HAL_PCD_DataOutStageCallback>
 8002682:	e01d      	b.n	80026c0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d114      	bne.n	80026b4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	4613      	mov	r3, r2
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	4413      	add	r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	440b      	add	r3, r1
 8002698:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d108      	bne.n	80026b4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6818      	ldr	r0, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80026ac:	461a      	mov	r2, r3
 80026ae:	2100      	movs	r1, #0
 80026b0:	f001 fb7e 	bl	8003db0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	4619      	mov	r1, r3
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f003 fde0 	bl	8006280 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3720      	adds	r7, #32
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	4f54300a 	.word	0x4f54300a
 80026d0:	4f54310a 	.word	0x4f54310a

080026d4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	333c      	adds	r3, #60	@ 0x3c
 80026ec:	3304      	adds	r3, #4
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	015a      	lsls	r2, r3, #5
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	4413      	add	r3, r2
 80026fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	4a15      	ldr	r2, [pc, #84]	@ (800275c <PCD_EP_OutSetupPacket_int+0x88>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d90e      	bls.n	8002728 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002710:	2b00      	cmp	r3, #0
 8002712:	d009      	beq.n	8002728 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	015a      	lsls	r2, r3, #5
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	4413      	add	r3, r2
 800271c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002720:	461a      	mov	r2, r3
 8002722:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002726:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f003 fd97 	bl	800625c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	4a0a      	ldr	r2, [pc, #40]	@ (800275c <PCD_EP_OutSetupPacket_int+0x88>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d90c      	bls.n	8002750 <PCD_EP_OutSetupPacket_int+0x7c>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	799b      	ldrb	r3, [r3, #6]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d108      	bne.n	8002750 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6818      	ldr	r0, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002748:	461a      	mov	r2, r3
 800274a:	2101      	movs	r1, #1
 800274c:	f001 fb30 	bl	8003db0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3718      	adds	r7, #24
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	4f54300a 	.word	0x4f54300a

08002760 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	460b      	mov	r3, r1
 800276a:	70fb      	strb	r3, [r7, #3]
 800276c:	4613      	mov	r3, r2
 800276e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002776:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002778:	78fb      	ldrb	r3, [r7, #3]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d107      	bne.n	800278e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800277e:	883b      	ldrh	r3, [r7, #0]
 8002780:	0419      	lsls	r1, r3, #16
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68ba      	ldr	r2, [r7, #8]
 8002788:	430a      	orrs	r2, r1
 800278a:	629a      	str	r2, [r3, #40]	@ 0x28
 800278c:	e028      	b.n	80027e0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002794:	0c1b      	lsrs	r3, r3, #16
 8002796:	68ba      	ldr	r2, [r7, #8]
 8002798:	4413      	add	r3, r2
 800279a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800279c:	2300      	movs	r3, #0
 800279e:	73fb      	strb	r3, [r7, #15]
 80027a0:	e00d      	b.n	80027be <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	7bfb      	ldrb	r3, [r7, #15]
 80027a8:	3340      	adds	r3, #64	@ 0x40
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	0c1b      	lsrs	r3, r3, #16
 80027b2:	68ba      	ldr	r2, [r7, #8]
 80027b4:	4413      	add	r3, r2
 80027b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
 80027ba:	3301      	adds	r3, #1
 80027bc:	73fb      	strb	r3, [r7, #15]
 80027be:	7bfa      	ldrb	r2, [r7, #15]
 80027c0:	78fb      	ldrb	r3, [r7, #3]
 80027c2:	3b01      	subs	r3, #1
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d3ec      	bcc.n	80027a2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80027c8:	883b      	ldrh	r3, [r7, #0]
 80027ca:	0418      	lsls	r0, r3, #16
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6819      	ldr	r1, [r3, #0]
 80027d0:	78fb      	ldrb	r3, [r7, #3]
 80027d2:	3b01      	subs	r3, #1
 80027d4:	68ba      	ldr	r2, [r7, #8]
 80027d6:	4302      	orrs	r2, r0
 80027d8:	3340      	adds	r3, #64	@ 0x40
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	440b      	add	r3, r1
 80027de:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3714      	adds	r7, #20
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
 80027f6:	460b      	mov	r3, r1
 80027f8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	887a      	ldrh	r2, [r7, #2]
 8002800:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	460b      	mov	r3, r1
 800281a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800282c:	4b03      	ldr	r3, [pc, #12]	@ (800283c <HAL_RCC_GetHCLKFreq+0x14>)
 800282e:	681b      	ldr	r3, [r3, #0]
}
 8002830:	4618      	mov	r0, r3
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	20000004 	.word	0x20000004

08002840 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002840:	b084      	sub	sp, #16
 8002842:	b580      	push	{r7, lr}
 8002844:	b084      	sub	sp, #16
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
 800284a:	f107 001c 	add.w	r0, r7, #28
 800284e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002852:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002856:	2b01      	cmp	r3, #1
 8002858:	d123      	bne.n	80028a2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800285e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800286e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002882:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002886:	2b01      	cmp	r3, #1
 8002888:	d105      	bne.n	8002896 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f001 fae8 	bl	8003e6c <USB_CoreReset>
 800289c:	4603      	mov	r3, r0
 800289e:	73fb      	strb	r3, [r7, #15]
 80028a0:	e01b      	b.n	80028da <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f001 fadc 	bl	8003e6c <USB_CoreReset>
 80028b4:	4603      	mov	r3, r0
 80028b6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80028b8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d106      	bne.n	80028ce <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028c4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	639a      	str	r2, [r3, #56]	@ 0x38
 80028cc:	e005      	b.n	80028da <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028d2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80028da:	7fbb      	ldrb	r3, [r7, #30]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d10b      	bne.n	80028f8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f043 0206 	orr.w	r2, r3, #6
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f043 0220 	orr.w	r2, r3, #32
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80028f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002904:	b004      	add	sp, #16
 8002906:	4770      	bx	lr

08002908 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002908:	b480      	push	{r7}
 800290a:	b087      	sub	sp, #28
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	4613      	mov	r3, r2
 8002914:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002916:	79fb      	ldrb	r3, [r7, #7]
 8002918:	2b02      	cmp	r3, #2
 800291a:	d165      	bne.n	80029e8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	4a41      	ldr	r2, [pc, #260]	@ (8002a24 <USB_SetTurnaroundTime+0x11c>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d906      	bls.n	8002932 <USB_SetTurnaroundTime+0x2a>
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	4a40      	ldr	r2, [pc, #256]	@ (8002a28 <USB_SetTurnaroundTime+0x120>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d202      	bcs.n	8002932 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800292c:	230f      	movs	r3, #15
 800292e:	617b      	str	r3, [r7, #20]
 8002930:	e062      	b.n	80029f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	4a3c      	ldr	r2, [pc, #240]	@ (8002a28 <USB_SetTurnaroundTime+0x120>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d306      	bcc.n	8002948 <USB_SetTurnaroundTime+0x40>
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	4a3b      	ldr	r2, [pc, #236]	@ (8002a2c <USB_SetTurnaroundTime+0x124>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d202      	bcs.n	8002948 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002942:	230e      	movs	r3, #14
 8002944:	617b      	str	r3, [r7, #20]
 8002946:	e057      	b.n	80029f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	4a38      	ldr	r2, [pc, #224]	@ (8002a2c <USB_SetTurnaroundTime+0x124>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d306      	bcc.n	800295e <USB_SetTurnaroundTime+0x56>
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	4a37      	ldr	r2, [pc, #220]	@ (8002a30 <USB_SetTurnaroundTime+0x128>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d202      	bcs.n	800295e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002958:	230d      	movs	r3, #13
 800295a:	617b      	str	r3, [r7, #20]
 800295c:	e04c      	b.n	80029f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	4a33      	ldr	r2, [pc, #204]	@ (8002a30 <USB_SetTurnaroundTime+0x128>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d306      	bcc.n	8002974 <USB_SetTurnaroundTime+0x6c>
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	4a32      	ldr	r2, [pc, #200]	@ (8002a34 <USB_SetTurnaroundTime+0x12c>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d802      	bhi.n	8002974 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800296e:	230c      	movs	r3, #12
 8002970:	617b      	str	r3, [r7, #20]
 8002972:	e041      	b.n	80029f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	4a2f      	ldr	r2, [pc, #188]	@ (8002a34 <USB_SetTurnaroundTime+0x12c>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d906      	bls.n	800298a <USB_SetTurnaroundTime+0x82>
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	4a2e      	ldr	r2, [pc, #184]	@ (8002a38 <USB_SetTurnaroundTime+0x130>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d802      	bhi.n	800298a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002984:	230b      	movs	r3, #11
 8002986:	617b      	str	r3, [r7, #20]
 8002988:	e036      	b.n	80029f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	4a2a      	ldr	r2, [pc, #168]	@ (8002a38 <USB_SetTurnaroundTime+0x130>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d906      	bls.n	80029a0 <USB_SetTurnaroundTime+0x98>
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	4a29      	ldr	r2, [pc, #164]	@ (8002a3c <USB_SetTurnaroundTime+0x134>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d802      	bhi.n	80029a0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800299a:	230a      	movs	r3, #10
 800299c:	617b      	str	r3, [r7, #20]
 800299e:	e02b      	b.n	80029f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	4a26      	ldr	r2, [pc, #152]	@ (8002a3c <USB_SetTurnaroundTime+0x134>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d906      	bls.n	80029b6 <USB_SetTurnaroundTime+0xae>
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	4a25      	ldr	r2, [pc, #148]	@ (8002a40 <USB_SetTurnaroundTime+0x138>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d202      	bcs.n	80029b6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80029b0:	2309      	movs	r3, #9
 80029b2:	617b      	str	r3, [r7, #20]
 80029b4:	e020      	b.n	80029f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	4a21      	ldr	r2, [pc, #132]	@ (8002a40 <USB_SetTurnaroundTime+0x138>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d306      	bcc.n	80029cc <USB_SetTurnaroundTime+0xc4>
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	4a20      	ldr	r2, [pc, #128]	@ (8002a44 <USB_SetTurnaroundTime+0x13c>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d802      	bhi.n	80029cc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80029c6:	2308      	movs	r3, #8
 80029c8:	617b      	str	r3, [r7, #20]
 80029ca:	e015      	b.n	80029f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	4a1d      	ldr	r2, [pc, #116]	@ (8002a44 <USB_SetTurnaroundTime+0x13c>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d906      	bls.n	80029e2 <USB_SetTurnaroundTime+0xda>
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	4a1c      	ldr	r2, [pc, #112]	@ (8002a48 <USB_SetTurnaroundTime+0x140>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d202      	bcs.n	80029e2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80029dc:	2307      	movs	r3, #7
 80029de:	617b      	str	r3, [r7, #20]
 80029e0:	e00a      	b.n	80029f8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80029e2:	2306      	movs	r3, #6
 80029e4:	617b      	str	r3, [r7, #20]
 80029e6:	e007      	b.n	80029f8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80029e8:	79fb      	ldrb	r3, [r7, #7]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d102      	bne.n	80029f4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80029ee:	2309      	movs	r3, #9
 80029f0:	617b      	str	r3, [r7, #20]
 80029f2:	e001      	b.n	80029f8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80029f4:	2309      	movs	r3, #9
 80029f6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	68da      	ldr	r2, [r3, #12]
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	029b      	lsls	r3, r3, #10
 8002a0c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8002a10:	431a      	orrs	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	371c      	adds	r7, #28
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr
 8002a24:	00d8acbf 	.word	0x00d8acbf
 8002a28:	00e4e1c0 	.word	0x00e4e1c0
 8002a2c:	00f42400 	.word	0x00f42400
 8002a30:	01067380 	.word	0x01067380
 8002a34:	011a499f 	.word	0x011a499f
 8002a38:	01312cff 	.word	0x01312cff
 8002a3c:	014ca43f 	.word	0x014ca43f
 8002a40:	016e3600 	.word	0x016e3600
 8002a44:	01a6ab1f 	.word	0x01a6ab1f
 8002a48:	01e84800 	.word	0x01e84800

08002a4c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f043 0201 	orr.w	r2, r3, #1
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b083      	sub	sp, #12
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f023 0201 	bic.w	r2, r3, #1
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	460b      	mov	r3, r1
 8002a9a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002aac:	78fb      	ldrb	r3, [r7, #3]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d115      	bne.n	8002ade <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002abe:	200a      	movs	r0, #10
 8002ac0:	f7fe f98e 	bl	8000de0 <HAL_Delay>
      ms += 10U;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	330a      	adds	r3, #10
 8002ac8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f001 f93f 	bl	8003d4e <USB_GetMode>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d01e      	beq.n	8002b14 <USB_SetCurrentMode+0x84>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2bc7      	cmp	r3, #199	@ 0xc7
 8002ada:	d9f0      	bls.n	8002abe <USB_SetCurrentMode+0x2e>
 8002adc:	e01a      	b.n	8002b14 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002ade:	78fb      	ldrb	r3, [r7, #3]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d115      	bne.n	8002b10 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002af0:	200a      	movs	r0, #10
 8002af2:	f7fe f975 	bl	8000de0 <HAL_Delay>
      ms += 10U;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	330a      	adds	r3, #10
 8002afa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f001 f926 	bl	8003d4e <USB_GetMode>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d005      	beq.n	8002b14 <USB_SetCurrentMode+0x84>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2bc7      	cmp	r3, #199	@ 0xc7
 8002b0c:	d9f0      	bls.n	8002af0 <USB_SetCurrentMode+0x60>
 8002b0e:	e001      	b.n	8002b14 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e005      	b.n	8002b20 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2bc8      	cmp	r3, #200	@ 0xc8
 8002b18:	d101      	bne.n	8002b1e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e000      	b.n	8002b20 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002b28:	b084      	sub	sp, #16
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b086      	sub	sp, #24
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
 8002b32:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002b36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002b42:	2300      	movs	r3, #0
 8002b44:	613b      	str	r3, [r7, #16]
 8002b46:	e009      	b.n	8002b5c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	3340      	adds	r3, #64	@ 0x40
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	4413      	add	r3, r2
 8002b52:	2200      	movs	r2, #0
 8002b54:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	3301      	adds	r3, #1
 8002b5a:	613b      	str	r3, [r7, #16]
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	2b0e      	cmp	r3, #14
 8002b60:	d9f2      	bls.n	8002b48 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002b62:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d11c      	bne.n	8002ba4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b78:	f043 0302 	orr.w	r3, r3, #2
 8002b7c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b82:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b8e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b9a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	639a      	str	r2, [r3, #56]	@ 0x38
 8002ba2:	e00b      	b.n	8002bbc <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ba8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bb4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002bc8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d10d      	bne.n	8002bec <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002bd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d104      	bne.n	8002be2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002bd8:	2100      	movs	r1, #0
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f968 	bl	8002eb0 <USB_SetDevSpeed>
 8002be0:	e008      	b.n	8002bf4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002be2:	2101      	movs	r1, #1
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 f963 	bl	8002eb0 <USB_SetDevSpeed>
 8002bea:	e003      	b.n	8002bf4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002bec:	2103      	movs	r1, #3
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 f95e 	bl	8002eb0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002bf4:	2110      	movs	r1, #16
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 f8fa 	bl	8002df0 <USB_FlushTxFifo>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 f924 	bl	8002e54 <USB_FlushRxFifo>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	2300      	movs	r3, #0
 8002c20:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c28:	461a      	mov	r2, r3
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c34:	461a      	mov	r2, r3
 8002c36:	2300      	movs	r3, #0
 8002c38:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	613b      	str	r3, [r7, #16]
 8002c3e:	e043      	b.n	8002cc8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	015a      	lsls	r2, r3, #5
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	4413      	add	r3, r2
 8002c48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002c52:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002c56:	d118      	bne.n	8002c8a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d10a      	bne.n	8002c74 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	015a      	lsls	r2, r3, #5
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	4413      	add	r3, r2
 8002c66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002c70:	6013      	str	r3, [r2, #0]
 8002c72:	e013      	b.n	8002c9c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	015a      	lsls	r2, r3, #5
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c80:	461a      	mov	r2, r3
 8002c82:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002c86:	6013      	str	r3, [r2, #0]
 8002c88:	e008      	b.n	8002c9c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	015a      	lsls	r2, r3, #5
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	4413      	add	r3, r2
 8002c92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c96:	461a      	mov	r2, r3
 8002c98:	2300      	movs	r3, #0
 8002c9a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	015a      	lsls	r2, r3, #5
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ca8:	461a      	mov	r2, r3
 8002caa:	2300      	movs	r3, #0
 8002cac:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	015a      	lsls	r2, r3, #5
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cba:	461a      	mov	r2, r3
 8002cbc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002cc0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	613b      	str	r3, [r7, #16]
 8002cc8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002ccc:	461a      	mov	r2, r3
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d3b5      	bcc.n	8002c40 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	613b      	str	r3, [r7, #16]
 8002cd8:	e043      	b.n	8002d62 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	015a      	lsls	r2, r3, #5
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002cec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002cf0:	d118      	bne.n	8002d24 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d10a      	bne.n	8002d0e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	015a      	lsls	r2, r3, #5
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	4413      	add	r3, r2
 8002d00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d04:	461a      	mov	r2, r3
 8002d06:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002d0a:	6013      	str	r3, [r2, #0]
 8002d0c:	e013      	b.n	8002d36 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	015a      	lsls	r2, r3, #5
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	4413      	add	r3, r2
 8002d16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002d20:	6013      	str	r3, [r2, #0]
 8002d22:	e008      	b.n	8002d36 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	015a      	lsls	r2, r3, #5
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d30:	461a      	mov	r2, r3
 8002d32:	2300      	movs	r3, #0
 8002d34:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	015a      	lsls	r2, r3, #5
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d42:	461a      	mov	r2, r3
 8002d44:	2300      	movs	r3, #0
 8002d46:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	015a      	lsls	r2, r3, #5
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	4413      	add	r3, r2
 8002d50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d54:	461a      	mov	r2, r3
 8002d56:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002d5a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	3301      	adds	r3, #1
 8002d60:	613b      	str	r3, [r7, #16]
 8002d62:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002d66:	461a      	mov	r2, r3
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d3b5      	bcc.n	8002cda <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d80:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8002d8e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002d90:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d105      	bne.n	8002da4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	f043 0210 	orr.w	r2, r3, #16
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	699a      	ldr	r2, [r3, #24]
 8002da8:	4b10      	ldr	r3, [pc, #64]	@ (8002dec <USB_DevInit+0x2c4>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002db0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d005      	beq.n	8002dc4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	f043 0208 	orr.w	r2, r3, #8
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002dc4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d107      	bne.n	8002ddc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002dd4:	f043 0304 	orr.w	r3, r3, #4
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002ddc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3718      	adds	r7, #24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002de8:	b004      	add	sp, #16
 8002dea:	4770      	bx	lr
 8002dec:	803c3800 	.word	0x803c3800

08002df0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	3301      	adds	r3, #1
 8002e02:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002e0a:	d901      	bls.n	8002e10 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e01b      	b.n	8002e48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	daf2      	bge.n	8002dfe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	019b      	lsls	r3, r3, #6
 8002e20:	f043 0220 	orr.w	r2, r3, #32
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002e34:	d901      	bls.n	8002e3a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e006      	b.n	8002e48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	f003 0320 	and.w	r3, r3, #32
 8002e42:	2b20      	cmp	r3, #32
 8002e44:	d0f0      	beq.n	8002e28 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	3301      	adds	r3, #1
 8002e64:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002e6c:	d901      	bls.n	8002e72 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e018      	b.n	8002ea4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	daf2      	bge.n	8002e60 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2210      	movs	r2, #16
 8002e82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	3301      	adds	r3, #1
 8002e88:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002e90:	d901      	bls.n	8002e96 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e006      	b.n	8002ea4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	f003 0310 	and.w	r3, r3, #16
 8002e9e:	2b10      	cmp	r3, #16
 8002ea0:	d0f0      	beq.n	8002e84 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3714      	adds	r7, #20
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b085      	sub	sp, #20
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	460b      	mov	r3, r1
 8002eba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	78fb      	ldrb	r3, [r7, #3]
 8002eca:	68f9      	ldr	r1, [r7, #12]
 8002ecc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3714      	adds	r7, #20
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr

08002ee2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	b087      	sub	sp, #28
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f003 0306 	and.w	r3, r3, #6
 8002efa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d102      	bne.n	8002f08 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8002f02:	2300      	movs	r3, #0
 8002f04:	75fb      	strb	r3, [r7, #23]
 8002f06:	e00a      	b.n	8002f1e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d002      	beq.n	8002f14 <USB_GetDevSpeed+0x32>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2b06      	cmp	r3, #6
 8002f12:	d102      	bne.n	8002f1a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8002f14:	2302      	movs	r3, #2
 8002f16:	75fb      	strb	r3, [r7, #23]
 8002f18:	e001      	b.n	8002f1e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8002f1a:	230f      	movs	r3, #15
 8002f1c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8002f1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	371c      	adds	r7, #28
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	785b      	ldrb	r3, [r3, #1]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d13a      	bne.n	8002fbe <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f4e:	69da      	ldr	r2, [r3, #28]
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	f003 030f 	and.w	r3, r3, #15
 8002f58:	2101      	movs	r1, #1
 8002f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	68f9      	ldr	r1, [r7, #12]
 8002f62:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002f66:	4313      	orrs	r3, r2
 8002f68:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	015a      	lsls	r2, r3, #5
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	4413      	add	r3, r2
 8002f72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d155      	bne.n	800302c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	015a      	lsls	r2, r3, #5
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	4413      	add	r3, r2
 8002f88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	791b      	ldrb	r3, [r3, #4]
 8002f9a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002f9c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	059b      	lsls	r3, r3, #22
 8002fa2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	68ba      	ldr	r2, [r7, #8]
 8002fa8:	0151      	lsls	r1, r2, #5
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	440a      	add	r2, r1
 8002fae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002fb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002fba:	6013      	str	r3, [r2, #0]
 8002fbc:	e036      	b.n	800302c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fc4:	69da      	ldr	r2, [r3, #28]
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	f003 030f 	and.w	r3, r3, #15
 8002fce:	2101      	movs	r1, #1
 8002fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd4:	041b      	lsls	r3, r3, #16
 8002fd6:	68f9      	ldr	r1, [r7, #12]
 8002fd8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	015a      	lsls	r2, r3, #5
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d11a      	bne.n	800302c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	015a      	lsls	r2, r3, #5
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	791b      	ldrb	r3, [r3, #4]
 8003010:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003012:	430b      	orrs	r3, r1
 8003014:	4313      	orrs	r3, r2
 8003016:	68ba      	ldr	r2, [r7, #8]
 8003018:	0151      	lsls	r1, r2, #5
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	440a      	add	r2, r1
 800301e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003022:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003026:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800302a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3714      	adds	r7, #20
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
	...

0800303c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	785b      	ldrb	r3, [r3, #1]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d161      	bne.n	800311c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	015a      	lsls	r2, r3, #5
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	4413      	add	r3, r2
 8003060:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800306a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800306e:	d11f      	bne.n	80030b0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	015a      	lsls	r2, r3, #5
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	4413      	add	r3, r2
 8003078:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68ba      	ldr	r2, [r7, #8]
 8003080:	0151      	lsls	r1, r2, #5
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	440a      	add	r2, r1
 8003086:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800308a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800308e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	015a      	lsls	r2, r3, #5
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	4413      	add	r3, r2
 8003098:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	0151      	lsls	r1, r2, #5
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	440a      	add	r2, r1
 80030a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80030aa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80030ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	f003 030f 	and.w	r3, r3, #15
 80030c0:	2101      	movs	r1, #1
 80030c2:	fa01 f303 	lsl.w	r3, r1, r3
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	43db      	mvns	r3, r3
 80030ca:	68f9      	ldr	r1, [r7, #12]
 80030cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80030d0:	4013      	ands	r3, r2
 80030d2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030da:	69da      	ldr	r2, [r3, #28]
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	f003 030f 	and.w	r3, r3, #15
 80030e4:	2101      	movs	r1, #1
 80030e6:	fa01 f303 	lsl.w	r3, r1, r3
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	43db      	mvns	r3, r3
 80030ee:	68f9      	ldr	r1, [r7, #12]
 80030f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80030f4:	4013      	ands	r3, r2
 80030f6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	015a      	lsls	r2, r3, #5
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	4413      	add	r3, r2
 8003100:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	0159      	lsls	r1, r3, #5
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	440b      	add	r3, r1
 800310e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003112:	4619      	mov	r1, r3
 8003114:	4b35      	ldr	r3, [pc, #212]	@ (80031ec <USB_DeactivateEndpoint+0x1b0>)
 8003116:	4013      	ands	r3, r2
 8003118:	600b      	str	r3, [r1, #0]
 800311a:	e060      	b.n	80031de <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	015a      	lsls	r2, r3, #5
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	4413      	add	r3, r2
 8003124:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800312e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003132:	d11f      	bne.n	8003174 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	015a      	lsls	r2, r3, #5
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	4413      	add	r3, r2
 800313c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68ba      	ldr	r2, [r7, #8]
 8003144:	0151      	lsls	r1, r2, #5
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	440a      	add	r2, r1
 800314a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800314e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003152:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	015a      	lsls	r2, r3, #5
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	4413      	add	r3, r2
 800315c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68ba      	ldr	r2, [r7, #8]
 8003164:	0151      	lsls	r1, r2, #5
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	440a      	add	r2, r1
 800316a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800316e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003172:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800317a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	f003 030f 	and.w	r3, r3, #15
 8003184:	2101      	movs	r1, #1
 8003186:	fa01 f303 	lsl.w	r3, r1, r3
 800318a:	041b      	lsls	r3, r3, #16
 800318c:	43db      	mvns	r3, r3
 800318e:	68f9      	ldr	r1, [r7, #12]
 8003190:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003194:	4013      	ands	r3, r2
 8003196:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800319e:	69da      	ldr	r2, [r3, #28]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	f003 030f 	and.w	r3, r3, #15
 80031a8:	2101      	movs	r1, #1
 80031aa:	fa01 f303 	lsl.w	r3, r1, r3
 80031ae:	041b      	lsls	r3, r3, #16
 80031b0:	43db      	mvns	r3, r3
 80031b2:	68f9      	ldr	r1, [r7, #12]
 80031b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80031b8:	4013      	ands	r3, r2
 80031ba:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	015a      	lsls	r2, r3, #5
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	4413      	add	r3, r2
 80031c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	0159      	lsls	r1, r3, #5
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	440b      	add	r3, r1
 80031d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031d6:	4619      	mov	r1, r3
 80031d8:	4b05      	ldr	r3, [pc, #20]	@ (80031f0 <USB_DeactivateEndpoint+0x1b4>)
 80031da:	4013      	ands	r3, r2
 80031dc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3714      	adds	r7, #20
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr
 80031ec:	ec337800 	.word	0xec337800
 80031f0:	eff37800 	.word	0xeff37800

080031f4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b08a      	sub	sp, #40	@ 0x28
 80031f8:	af02      	add	r7, sp, #8
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	4613      	mov	r3, r2
 8003200:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	785b      	ldrb	r3, [r3, #1]
 8003210:	2b01      	cmp	r3, #1
 8003212:	f040 817f 	bne.w	8003514 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d132      	bne.n	8003284 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	015a      	lsls	r2, r3, #5
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	4413      	add	r3, r2
 8003226:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	0151      	lsls	r1, r2, #5
 8003230:	69fa      	ldr	r2, [r7, #28]
 8003232:	440a      	add	r2, r1
 8003234:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003238:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800323c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003240:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	015a      	lsls	r2, r3, #5
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	4413      	add	r3, r2
 800324a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	0151      	lsls	r1, r2, #5
 8003254:	69fa      	ldr	r2, [r7, #28]
 8003256:	440a      	add	r2, r1
 8003258:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800325c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003260:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	015a      	lsls	r2, r3, #5
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	4413      	add	r3, r2
 800326a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	0151      	lsls	r1, r2, #5
 8003274:	69fa      	ldr	r2, [r7, #28]
 8003276:	440a      	add	r2, r1
 8003278:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800327c:	0cdb      	lsrs	r3, r3, #19
 800327e:	04db      	lsls	r3, r3, #19
 8003280:	6113      	str	r3, [r2, #16]
 8003282:	e097      	b.n	80033b4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	015a      	lsls	r2, r3, #5
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	4413      	add	r3, r2
 800328c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	0151      	lsls	r1, r2, #5
 8003296:	69fa      	ldr	r2, [r7, #28]
 8003298:	440a      	add	r2, r1
 800329a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800329e:	0cdb      	lsrs	r3, r3, #19
 80032a0:	04db      	lsls	r3, r3, #19
 80032a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	015a      	lsls	r2, r3, #5
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	4413      	add	r3, r2
 80032ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	0151      	lsls	r1, r2, #5
 80032b6:	69fa      	ldr	r2, [r7, #28]
 80032b8:	440a      	add	r2, r1
 80032ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80032be:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80032c2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80032c6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d11a      	bne.n	8003304 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	691a      	ldr	r2, [r3, #16]
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d903      	bls.n	80032e2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	689a      	ldr	r2, [r3, #8]
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	015a      	lsls	r2, r3, #5
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	4413      	add	r3, r2
 80032ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	0151      	lsls	r1, r2, #5
 80032f4:	69fa      	ldr	r2, [r7, #28]
 80032f6:	440a      	add	r2, r1
 80032f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80032fc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003300:	6113      	str	r3, [r2, #16]
 8003302:	e044      	b.n	800338e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	691a      	ldr	r2, [r3, #16]
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	4413      	add	r3, r2
 800330e:	1e5a      	subs	r2, r3, #1
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	fbb2 f3f3 	udiv	r3, r2, r3
 8003318:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	015a      	lsls	r2, r3, #5
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	4413      	add	r3, r2
 8003322:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003326:	691a      	ldr	r2, [r3, #16]
 8003328:	8afb      	ldrh	r3, [r7, #22]
 800332a:	04d9      	lsls	r1, r3, #19
 800332c:	4ba4      	ldr	r3, [pc, #656]	@ (80035c0 <USB_EPStartXfer+0x3cc>)
 800332e:	400b      	ands	r3, r1
 8003330:	69b9      	ldr	r1, [r7, #24]
 8003332:	0148      	lsls	r0, r1, #5
 8003334:	69f9      	ldr	r1, [r7, #28]
 8003336:	4401      	add	r1, r0
 8003338:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800333c:	4313      	orrs	r3, r2
 800333e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	791b      	ldrb	r3, [r3, #4]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d122      	bne.n	800338e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	015a      	lsls	r2, r3, #5
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	4413      	add	r3, r2
 8003350:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	0151      	lsls	r1, r2, #5
 800335a:	69fa      	ldr	r2, [r7, #28]
 800335c:	440a      	add	r2, r1
 800335e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003362:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8003366:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	015a      	lsls	r2, r3, #5
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	4413      	add	r3, r2
 8003370:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003374:	691a      	ldr	r2, [r3, #16]
 8003376:	8afb      	ldrh	r3, [r7, #22]
 8003378:	075b      	lsls	r3, r3, #29
 800337a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800337e:	69b9      	ldr	r1, [r7, #24]
 8003380:	0148      	lsls	r0, r1, #5
 8003382:	69f9      	ldr	r1, [r7, #28]
 8003384:	4401      	add	r1, r0
 8003386:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800338a:	4313      	orrs	r3, r2
 800338c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	015a      	lsls	r2, r3, #5
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	4413      	add	r3, r2
 8003396:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800339a:	691a      	ldr	r2, [r3, #16]
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033a4:	69b9      	ldr	r1, [r7, #24]
 80033a6:	0148      	lsls	r0, r1, #5
 80033a8:	69f9      	ldr	r1, [r7, #28]
 80033aa:	4401      	add	r1, r0
 80033ac:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80033b0:	4313      	orrs	r3, r2
 80033b2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80033b4:	79fb      	ldrb	r3, [r7, #7]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d14b      	bne.n	8003452 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	69db      	ldr	r3, [r3, #28]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d009      	beq.n	80033d6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	015a      	lsls	r2, r3, #5
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	4413      	add	r3, r2
 80033ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033ce:	461a      	mov	r2, r3
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	69db      	ldr	r3, [r3, #28]
 80033d4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	791b      	ldrb	r3, [r3, #4]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d128      	bne.n	8003430 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d110      	bne.n	8003410 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	015a      	lsls	r2, r3, #5
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	4413      	add	r3, r2
 80033f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	0151      	lsls	r1, r2, #5
 8003400:	69fa      	ldr	r2, [r7, #28]
 8003402:	440a      	add	r2, r1
 8003404:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003408:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800340c:	6013      	str	r3, [r2, #0]
 800340e:	e00f      	b.n	8003430 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	015a      	lsls	r2, r3, #5
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	4413      	add	r3, r2
 8003418:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	0151      	lsls	r1, r2, #5
 8003422:	69fa      	ldr	r2, [r7, #28]
 8003424:	440a      	add	r2, r1
 8003426:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800342a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800342e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	015a      	lsls	r2, r3, #5
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	4413      	add	r3, r2
 8003438:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	0151      	lsls	r1, r2, #5
 8003442:	69fa      	ldr	r2, [r7, #28]
 8003444:	440a      	add	r2, r1
 8003446:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800344a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800344e:	6013      	str	r3, [r2, #0]
 8003450:	e166      	b.n	8003720 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	015a      	lsls	r2, r3, #5
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	4413      	add	r3, r2
 800345a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	0151      	lsls	r1, r2, #5
 8003464:	69fa      	ldr	r2, [r7, #28]
 8003466:	440a      	add	r2, r1
 8003468:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800346c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003470:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	791b      	ldrb	r3, [r3, #4]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d015      	beq.n	80034a6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	2b00      	cmp	r3, #0
 8003480:	f000 814e 	beq.w	8003720 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800348a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	f003 030f 	and.w	r3, r3, #15
 8003494:	2101      	movs	r1, #1
 8003496:	fa01 f303 	lsl.w	r3, r1, r3
 800349a:	69f9      	ldr	r1, [r7, #28]
 800349c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80034a0:	4313      	orrs	r3, r2
 80034a2:	634b      	str	r3, [r1, #52]	@ 0x34
 80034a4:	e13c      	b.n	8003720 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d110      	bne.n	80034d8 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	015a      	lsls	r2, r3, #5
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	4413      	add	r3, r2
 80034be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	0151      	lsls	r1, r2, #5
 80034c8:	69fa      	ldr	r2, [r7, #28]
 80034ca:	440a      	add	r2, r1
 80034cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80034d0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80034d4:	6013      	str	r3, [r2, #0]
 80034d6:	e00f      	b.n	80034f8 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	015a      	lsls	r2, r3, #5
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	4413      	add	r3, r2
 80034e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	0151      	lsls	r1, r2, #5
 80034ea:	69fa      	ldr	r2, [r7, #28]
 80034ec:	440a      	add	r2, r1
 80034ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80034f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034f6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	68d9      	ldr	r1, [r3, #12]
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	781a      	ldrb	r2, [r3, #0]
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	b298      	uxth	r0, r3
 8003506:	79fb      	ldrb	r3, [r7, #7]
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	4603      	mov	r3, r0
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f000 f9b9 	bl	8003884 <USB_WritePacket>
 8003512:	e105      	b.n	8003720 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	015a      	lsls	r2, r3, #5
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	4413      	add	r3, r2
 800351c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	69ba      	ldr	r2, [r7, #24]
 8003524:	0151      	lsls	r1, r2, #5
 8003526:	69fa      	ldr	r2, [r7, #28]
 8003528:	440a      	add	r2, r1
 800352a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800352e:	0cdb      	lsrs	r3, r3, #19
 8003530:	04db      	lsls	r3, r3, #19
 8003532:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	015a      	lsls	r2, r3, #5
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	4413      	add	r3, r2
 800353c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	0151      	lsls	r1, r2, #5
 8003546:	69fa      	ldr	r2, [r7, #28]
 8003548:	440a      	add	r2, r1
 800354a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800354e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003552:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003556:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d132      	bne.n	80035c4 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	689a      	ldr	r2, [r3, #8]
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	689a      	ldr	r2, [r3, #8]
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	015a      	lsls	r2, r3, #5
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	4413      	add	r3, r2
 800357e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003582:	691a      	ldr	r2, [r3, #16]
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	6a1b      	ldr	r3, [r3, #32]
 8003588:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800358c:	69b9      	ldr	r1, [r7, #24]
 800358e:	0148      	lsls	r0, r1, #5
 8003590:	69f9      	ldr	r1, [r7, #28]
 8003592:	4401      	add	r1, r0
 8003594:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003598:	4313      	orrs	r3, r2
 800359a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	015a      	lsls	r2, r3, #5
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	4413      	add	r3, r2
 80035a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	69ba      	ldr	r2, [r7, #24]
 80035ac:	0151      	lsls	r1, r2, #5
 80035ae:	69fa      	ldr	r2, [r7, #28]
 80035b0:	440a      	add	r2, r1
 80035b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80035b6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80035ba:	6113      	str	r3, [r2, #16]
 80035bc:	e062      	b.n	8003684 <USB_EPStartXfer+0x490>
 80035be:	bf00      	nop
 80035c0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d123      	bne.n	8003614 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	015a      	lsls	r2, r3, #5
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	4413      	add	r3, r2
 80035d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035d8:	691a      	ldr	r2, [r3, #16]
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035e2:	69b9      	ldr	r1, [r7, #24]
 80035e4:	0148      	lsls	r0, r1, #5
 80035e6:	69f9      	ldr	r1, [r7, #28]
 80035e8:	4401      	add	r1, r0
 80035ea:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80035ee:	4313      	orrs	r3, r2
 80035f0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	015a      	lsls	r2, r3, #5
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	4413      	add	r3, r2
 80035fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	0151      	lsls	r1, r2, #5
 8003604:	69fa      	ldr	r2, [r7, #28]
 8003606:	440a      	add	r2, r1
 8003608:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800360c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003610:	6113      	str	r3, [r2, #16]
 8003612:	e037      	b.n	8003684 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	691a      	ldr	r2, [r3, #16]
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	4413      	add	r3, r2
 800361e:	1e5a      	subs	r2, r3, #1
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	fbb2 f3f3 	udiv	r3, r2, r3
 8003628:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	8afa      	ldrh	r2, [r7, #22]
 8003630:	fb03 f202 	mul.w	r2, r3, r2
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	015a      	lsls	r2, r3, #5
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	4413      	add	r3, r2
 8003640:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003644:	691a      	ldr	r2, [r3, #16]
 8003646:	8afb      	ldrh	r3, [r7, #22]
 8003648:	04d9      	lsls	r1, r3, #19
 800364a:	4b38      	ldr	r3, [pc, #224]	@ (800372c <USB_EPStartXfer+0x538>)
 800364c:	400b      	ands	r3, r1
 800364e:	69b9      	ldr	r1, [r7, #24]
 8003650:	0148      	lsls	r0, r1, #5
 8003652:	69f9      	ldr	r1, [r7, #28]
 8003654:	4401      	add	r1, r0
 8003656:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800365a:	4313      	orrs	r3, r2
 800365c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	015a      	lsls	r2, r3, #5
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	4413      	add	r3, r2
 8003666:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800366a:	691a      	ldr	r2, [r3, #16]
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003674:	69b9      	ldr	r1, [r7, #24]
 8003676:	0148      	lsls	r0, r1, #5
 8003678:	69f9      	ldr	r1, [r7, #28]
 800367a:	4401      	add	r1, r0
 800367c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003680:	4313      	orrs	r3, r2
 8003682:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8003684:	79fb      	ldrb	r3, [r7, #7]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d10d      	bne.n	80036a6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d009      	beq.n	80036a6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	68d9      	ldr	r1, [r3, #12]
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	015a      	lsls	r2, r3, #5
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	4413      	add	r3, r2
 800369e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036a2:	460a      	mov	r2, r1
 80036a4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	791b      	ldrb	r3, [r3, #4]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d128      	bne.n	8003700 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d110      	bne.n	80036e0 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	015a      	lsls	r2, r3, #5
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	4413      	add	r3, r2
 80036c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	0151      	lsls	r1, r2, #5
 80036d0:	69fa      	ldr	r2, [r7, #28]
 80036d2:	440a      	add	r2, r1
 80036d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80036d8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80036dc:	6013      	str	r3, [r2, #0]
 80036de:	e00f      	b.n	8003700 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	015a      	lsls	r2, r3, #5
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	4413      	add	r3, r2
 80036e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	69ba      	ldr	r2, [r7, #24]
 80036f0:	0151      	lsls	r1, r2, #5
 80036f2:	69fa      	ldr	r2, [r7, #28]
 80036f4:	440a      	add	r2, r1
 80036f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80036fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036fe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	015a      	lsls	r2, r3, #5
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	4413      	add	r3, r2
 8003708:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	69ba      	ldr	r2, [r7, #24]
 8003710:	0151      	lsls	r1, r2, #5
 8003712:	69fa      	ldr	r2, [r7, #28]
 8003714:	440a      	add	r2, r1
 8003716:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800371a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800371e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3720      	adds	r7, #32
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	1ff80000 	.word	0x1ff80000

08003730 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003730:	b480      	push	{r7}
 8003732:	b087      	sub	sp, #28
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800373a:	2300      	movs	r3, #0
 800373c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800373e:	2300      	movs	r3, #0
 8003740:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	785b      	ldrb	r3, [r3, #1]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d14a      	bne.n	80037e4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	015a      	lsls	r2, r3, #5
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	4413      	add	r3, r2
 8003758:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003762:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003766:	f040 8086 	bne.w	8003876 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	015a      	lsls	r2, r3, #5
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	4413      	add	r3, r2
 8003774:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	7812      	ldrb	r2, [r2, #0]
 800377e:	0151      	lsls	r1, r2, #5
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	440a      	add	r2, r1
 8003784:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003788:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800378c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	015a      	lsls	r2, r3, #5
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	4413      	add	r3, r2
 8003798:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	7812      	ldrb	r2, [r2, #0]
 80037a2:	0151      	lsls	r1, r2, #5
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	440a      	add	r2, r1
 80037a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80037ac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80037b0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	3301      	adds	r3, #1
 80037b6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f242 7210 	movw	r2, #10000	@ 0x2710
 80037be:	4293      	cmp	r3, r2
 80037c0:	d902      	bls.n	80037c8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	75fb      	strb	r3, [r7, #23]
          break;
 80037c6:	e056      	b.n	8003876 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	015a      	lsls	r2, r3, #5
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	4413      	add	r3, r2
 80037d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80037dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80037e0:	d0e7      	beq.n	80037b2 <USB_EPStopXfer+0x82>
 80037e2:	e048      	b.n	8003876 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	015a      	lsls	r2, r3, #5
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	4413      	add	r3, r2
 80037ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80037f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80037fc:	d13b      	bne.n	8003876 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	015a      	lsls	r2, r3, #5
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	4413      	add	r3, r2
 8003808:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	7812      	ldrb	r2, [r2, #0]
 8003812:	0151      	lsls	r1, r2, #5
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	440a      	add	r2, r1
 8003818:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800381c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003820:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	015a      	lsls	r2, r3, #5
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	4413      	add	r3, r2
 800382c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	683a      	ldr	r2, [r7, #0]
 8003834:	7812      	ldrb	r2, [r2, #0]
 8003836:	0151      	lsls	r1, r2, #5
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	440a      	add	r2, r1
 800383c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003840:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003844:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	3301      	adds	r3, #1
 800384a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003852:	4293      	cmp	r3, r2
 8003854:	d902      	bls.n	800385c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	75fb      	strb	r3, [r7, #23]
          break;
 800385a:	e00c      	b.n	8003876 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	015a      	lsls	r2, r3, #5
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	4413      	add	r3, r2
 8003866:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003870:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003874:	d0e7      	beq.n	8003846 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003876:	7dfb      	ldrb	r3, [r7, #23]
}
 8003878:	4618      	mov	r0, r3
 800387a:	371c      	adds	r7, #28
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003884:	b480      	push	{r7}
 8003886:	b089      	sub	sp, #36	@ 0x24
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	4611      	mov	r1, r2
 8003890:	461a      	mov	r2, r3
 8003892:	460b      	mov	r3, r1
 8003894:	71fb      	strb	r3, [r7, #7]
 8003896:	4613      	mov	r3, r2
 8003898:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80038a2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d123      	bne.n	80038f2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80038aa:	88bb      	ldrh	r3, [r7, #4]
 80038ac:	3303      	adds	r3, #3
 80038ae:	089b      	lsrs	r3, r3, #2
 80038b0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80038b2:	2300      	movs	r3, #0
 80038b4:	61bb      	str	r3, [r7, #24]
 80038b6:	e018      	b.n	80038ea <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80038b8:	79fb      	ldrb	r3, [r7, #7]
 80038ba:	031a      	lsls	r2, r3, #12
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	4413      	add	r3, r2
 80038c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038c4:	461a      	mov	r2, r3
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	6013      	str	r3, [r2, #0]
      pSrc++;
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	3301      	adds	r3, #1
 80038d0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	3301      	adds	r3, #1
 80038d6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	3301      	adds	r3, #1
 80038dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	3301      	adds	r3, #1
 80038e2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	3301      	adds	r3, #1
 80038e8:	61bb      	str	r3, [r7, #24]
 80038ea:	69ba      	ldr	r2, [r7, #24]
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d3e2      	bcc.n	80038b8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3724      	adds	r7, #36	@ 0x24
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003900:	b480      	push	{r7}
 8003902:	b08b      	sub	sp, #44	@ 0x2c
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	4613      	mov	r3, r2
 800390c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003916:	88fb      	ldrh	r3, [r7, #6]
 8003918:	089b      	lsrs	r3, r3, #2
 800391a:	b29b      	uxth	r3, r3
 800391c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800391e:	88fb      	ldrh	r3, [r7, #6]
 8003920:	f003 0303 	and.w	r3, r3, #3
 8003924:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003926:	2300      	movs	r3, #0
 8003928:	623b      	str	r3, [r7, #32]
 800392a:	e014      	b.n	8003956 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003936:	601a      	str	r2, [r3, #0]
    pDest++;
 8003938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800393a:	3301      	adds	r3, #1
 800393c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800393e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003940:	3301      	adds	r3, #1
 8003942:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003946:	3301      	adds	r3, #1
 8003948:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800394a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800394c:	3301      	adds	r3, #1
 800394e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8003950:	6a3b      	ldr	r3, [r7, #32]
 8003952:	3301      	adds	r3, #1
 8003954:	623b      	str	r3, [r7, #32]
 8003956:	6a3a      	ldr	r2, [r7, #32]
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	429a      	cmp	r2, r3
 800395c:	d3e6      	bcc.n	800392c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800395e:	8bfb      	ldrh	r3, [r7, #30]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d01e      	beq.n	80039a2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003964:	2300      	movs	r3, #0
 8003966:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800396e:	461a      	mov	r2, r3
 8003970:	f107 0310 	add.w	r3, r7, #16
 8003974:	6812      	ldr	r2, [r2, #0]
 8003976:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	6a3b      	ldr	r3, [r7, #32]
 800397c:	b2db      	uxtb	r3, r3
 800397e:	00db      	lsls	r3, r3, #3
 8003980:	fa22 f303 	lsr.w	r3, r2, r3
 8003984:	b2da      	uxtb	r2, r3
 8003986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003988:	701a      	strb	r2, [r3, #0]
      i++;
 800398a:	6a3b      	ldr	r3, [r7, #32]
 800398c:	3301      	adds	r3, #1
 800398e:	623b      	str	r3, [r7, #32]
      pDest++;
 8003990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003992:	3301      	adds	r3, #1
 8003994:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8003996:	8bfb      	ldrh	r3, [r7, #30]
 8003998:	3b01      	subs	r3, #1
 800399a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800399c:	8bfb      	ldrh	r3, [r7, #30]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1ea      	bne.n	8003978 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80039a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	372c      	adds	r7, #44	@ 0x2c
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	785b      	ldrb	r3, [r3, #1]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d12c      	bne.n	8003a26 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	015a      	lsls	r2, r3, #5
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	4413      	add	r3, r2
 80039d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	db12      	blt.n	8003a04 <USB_EPSetStall+0x54>
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00f      	beq.n	8003a04 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	015a      	lsls	r2, r3, #5
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	4413      	add	r3, r2
 80039ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68ba      	ldr	r2, [r7, #8]
 80039f4:	0151      	lsls	r1, r2, #5
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	440a      	add	r2, r1
 80039fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80039fe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003a02:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	015a      	lsls	r2, r3, #5
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	0151      	lsls	r1, r2, #5
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	440a      	add	r2, r1
 8003a1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003a1e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003a22:	6013      	str	r3, [r2, #0]
 8003a24:	e02b      	b.n	8003a7e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	015a      	lsls	r2, r3, #5
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	db12      	blt.n	8003a5e <USB_EPSetStall+0xae>
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00f      	beq.n	8003a5e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	015a      	lsls	r2, r3, #5
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	4413      	add	r3, r2
 8003a46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68ba      	ldr	r2, [r7, #8]
 8003a4e:	0151      	lsls	r1, r2, #5
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	440a      	add	r2, r1
 8003a54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003a58:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003a5c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	015a      	lsls	r2, r3, #5
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	4413      	add	r3, r2
 8003a66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	0151      	lsls	r1, r2, #5
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	440a      	add	r2, r1
 8003a74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003a78:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003a7c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3714      	adds	r7, #20
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	785b      	ldrb	r3, [r3, #1]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d128      	bne.n	8003afa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	015a      	lsls	r2, r3, #5
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	4413      	add	r3, r2
 8003ab0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	68ba      	ldr	r2, [r7, #8]
 8003ab8:	0151      	lsls	r1, r2, #5
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	440a      	add	r2, r1
 8003abe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ac2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003ac6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	791b      	ldrb	r3, [r3, #4]
 8003acc:	2b03      	cmp	r3, #3
 8003ace:	d003      	beq.n	8003ad8 <USB_EPClearStall+0x4c>
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	791b      	ldrb	r3, [r3, #4]
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d138      	bne.n	8003b4a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	015a      	lsls	r2, r3, #5
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	4413      	add	r3, r2
 8003ae0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68ba      	ldr	r2, [r7, #8]
 8003ae8:	0151      	lsls	r1, r2, #5
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	440a      	add	r2, r1
 8003aee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003af2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003af6:	6013      	str	r3, [r2, #0]
 8003af8:	e027      	b.n	8003b4a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	015a      	lsls	r2, r3, #5
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	4413      	add	r3, r2
 8003b02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68ba      	ldr	r2, [r7, #8]
 8003b0a:	0151      	lsls	r1, r2, #5
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	440a      	add	r2, r1
 8003b10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003b14:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003b18:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	791b      	ldrb	r3, [r3, #4]
 8003b1e:	2b03      	cmp	r3, #3
 8003b20:	d003      	beq.n	8003b2a <USB_EPClearStall+0x9e>
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	791b      	ldrb	r3, [r3, #4]
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d10f      	bne.n	8003b4a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	015a      	lsls	r2, r3, #5
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	4413      	add	r3, r2
 8003b32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68ba      	ldr	r2, [r7, #8]
 8003b3a:	0151      	lsls	r1, r2, #5
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	440a      	add	r2, r1
 8003b40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003b44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b48:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3714      	adds	r7, #20
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	460b      	mov	r3, r1
 8003b62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b76:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003b7a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	78fb      	ldrb	r3, [r7, #3]
 8003b86:	011b      	lsls	r3, r3, #4
 8003b88:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8003b8c:	68f9      	ldr	r1, [r7, #12]
 8003b8e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003b92:	4313      	orrs	r3, r2
 8003b94:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3714      	adds	r7, #20
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003bbe:	f023 0303 	bic.w	r3, r3, #3
 8003bc2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003bd2:	f023 0302 	bic.w	r3, r3, #2
 8003bd6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3714      	adds	r7, #20
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr

08003be6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003be6:	b480      	push	{r7}
 8003be8:	b085      	sub	sp, #20
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003c00:	f023 0303 	bic.w	r3, r3, #3
 8003c04:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c14:	f043 0302 	orr.w	r3, r3, #2
 8003c18:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3714      	adds	r7, #20
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003c40:	68fb      	ldr	r3, [r7, #12]
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3714      	adds	r7, #20
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b085      	sub	sp, #20
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c6a:	69db      	ldr	r3, [r3, #28]
 8003c6c:	68ba      	ldr	r2, [r7, #8]
 8003c6e:	4013      	ands	r3, r2
 8003c70:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	0c1b      	lsrs	r3, r3, #16
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3714      	adds	r7, #20
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr

08003c82 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8003c82:	b480      	push	{r7}
 8003c84:	b085      	sub	sp, #20
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c9e:	69db      	ldr	r3, [r3, #28]
 8003ca0:	68ba      	ldr	r2, [r7, #8]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	b29b      	uxth	r3, r3
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3714      	adds	r7, #20
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr

08003cb6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	b085      	sub	sp, #20
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003cc6:	78fb      	ldrb	r3, [r7, #3]
 8003cc8:	015a      	lsls	r2, r3, #5
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	4413      	add	r3, r2
 8003cce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	68ba      	ldr	r2, [r7, #8]
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003ce4:	68bb      	ldr	r3, [r7, #8]
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3714      	adds	r7, #20
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b087      	sub	sp, #28
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d14:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8003d16:	78fb      	ldrb	r3, [r7, #3]
 8003d18:	f003 030f 	and.w	r3, r3, #15
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d22:	01db      	lsls	r3, r3, #7
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003d2c:	78fb      	ldrb	r3, [r7, #3]
 8003d2e:	015a      	lsls	r2, r3, #5
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	4413      	add	r3, r2
 8003d34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003d40:	68bb      	ldr	r3, [r7, #8]
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	371c      	adds	r7, #28
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	f003 0301 	and.w	r3, r3, #1
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	370c      	adds	r7, #12
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b085      	sub	sp, #20
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d84:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003d88:	f023 0307 	bic.w	r3, r3, #7
 8003d8c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003da0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3714      	adds	r7, #20
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b087      	sub	sp, #28
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	460b      	mov	r3, r1
 8003dba:	607a      	str	r2, [r7, #4]
 8003dbc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	333c      	adds	r3, #60	@ 0x3c
 8003dc6:	3304      	adds	r3, #4
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	4a26      	ldr	r2, [pc, #152]	@ (8003e68 <USB_EP0_OutStart+0xb8>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d90a      	bls.n	8003dea <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003de0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003de4:	d101      	bne.n	8003dea <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8003de6:	2300      	movs	r3, #0
 8003de8:	e037      	b.n	8003e5a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003df0:	461a      	mov	r2, r3
 8003df2:	2300      	movs	r3, #0
 8003df4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e04:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003e08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	697a      	ldr	r2, [r7, #20]
 8003e14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e18:	f043 0318 	orr.w	r3, r3, #24
 8003e1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e2c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8003e30:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8003e32:	7afb      	ldrb	r3, [r7, #11]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d10f      	bne.n	8003e58 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e3e:	461a      	mov	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	697a      	ldr	r2, [r7, #20]
 8003e4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e52:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8003e56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	371c      	adds	r7, #28
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	4f54300a 	.word	0x4f54300a

08003e6c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003e74:	2300      	movs	r3, #0
 8003e76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003e84:	d901      	bls.n	8003e8a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e01b      	b.n	8003ec2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	daf2      	bge.n	8003e78 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003e92:	2300      	movs	r3, #0
 8003e94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	f043 0201 	orr.w	r2, r3, #1
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003eae:	d901      	bls.n	8003eb4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e006      	b.n	8003ec2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d0f0      	beq.n	8003ea2 <USB_CoreReset+0x36>

  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3714      	adds	r7, #20
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
	...

08003ed0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	460b      	mov	r3, r1
 8003eda:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8003edc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8003ee0:	f002 fc38 	bl	8006754 <USBD_static_malloc>
 8003ee4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d109      	bne.n	8003f00 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	32b0      	adds	r2, #176	@ 0xb0
 8003ef6:	2100      	movs	r1, #0
 8003ef8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8003efc:	2302      	movs	r3, #2
 8003efe:	e0d4      	b.n	80040aa <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8003f00:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8003f04:	2100      	movs	r1, #0
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f002 fe60 	bl	8006bcc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	32b0      	adds	r2, #176	@ 0xb0
 8003f16:	68f9      	ldr	r1, [r7, #12]
 8003f18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	32b0      	adds	r2, #176	@ 0xb0
 8003f26:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	7c1b      	ldrb	r3, [r3, #16]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d138      	bne.n	8003faa <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8003f38:	4b5e      	ldr	r3, [pc, #376]	@ (80040b4 <USBD_CDC_Init+0x1e4>)
 8003f3a:	7819      	ldrb	r1, [r3, #0]
 8003f3c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003f40:	2202      	movs	r2, #2
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f002 fae3 	bl	800650e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8003f48:	4b5a      	ldr	r3, [pc, #360]	@ (80040b4 <USBD_CDC_Init+0x1e4>)
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	f003 020f 	and.w	r2, r3, #15
 8003f50:	6879      	ldr	r1, [r7, #4]
 8003f52:	4613      	mov	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4413      	add	r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	440b      	add	r3, r1
 8003f5c:	3324      	adds	r3, #36	@ 0x24
 8003f5e:	2201      	movs	r2, #1
 8003f60:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8003f62:	4b55      	ldr	r3, [pc, #340]	@ (80040b8 <USBD_CDC_Init+0x1e8>)
 8003f64:	7819      	ldrb	r1, [r3, #0]
 8003f66:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f002 face 	bl	800650e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8003f72:	4b51      	ldr	r3, [pc, #324]	@ (80040b8 <USBD_CDC_Init+0x1e8>)
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	f003 020f 	and.w	r2, r3, #15
 8003f7a:	6879      	ldr	r1, [r7, #4]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	4413      	add	r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	440b      	add	r3, r1
 8003f86:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8003f8e:	4b4b      	ldr	r3, [pc, #300]	@ (80040bc <USBD_CDC_Init+0x1ec>)
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	f003 020f 	and.w	r2, r3, #15
 8003f96:	6879      	ldr	r1, [r7, #4]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	4413      	add	r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	440b      	add	r3, r1
 8003fa2:	3326      	adds	r3, #38	@ 0x26
 8003fa4:	2210      	movs	r2, #16
 8003fa6:	801a      	strh	r2, [r3, #0]
 8003fa8:	e035      	b.n	8004016 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8003faa:	4b42      	ldr	r3, [pc, #264]	@ (80040b4 <USBD_CDC_Init+0x1e4>)
 8003fac:	7819      	ldrb	r1, [r3, #0]
 8003fae:	2340      	movs	r3, #64	@ 0x40
 8003fb0:	2202      	movs	r2, #2
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f002 faab 	bl	800650e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8003fb8:	4b3e      	ldr	r3, [pc, #248]	@ (80040b4 <USBD_CDC_Init+0x1e4>)
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	f003 020f 	and.w	r2, r3, #15
 8003fc0:	6879      	ldr	r1, [r7, #4]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	4413      	add	r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	440b      	add	r3, r1
 8003fcc:	3324      	adds	r3, #36	@ 0x24
 8003fce:	2201      	movs	r2, #1
 8003fd0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8003fd2:	4b39      	ldr	r3, [pc, #228]	@ (80040b8 <USBD_CDC_Init+0x1e8>)
 8003fd4:	7819      	ldrb	r1, [r3, #0]
 8003fd6:	2340      	movs	r3, #64	@ 0x40
 8003fd8:	2202      	movs	r2, #2
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f002 fa97 	bl	800650e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8003fe0:	4b35      	ldr	r3, [pc, #212]	@ (80040b8 <USBD_CDC_Init+0x1e8>)
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	f003 020f 	and.w	r2, r3, #15
 8003fe8:	6879      	ldr	r1, [r7, #4]
 8003fea:	4613      	mov	r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	4413      	add	r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	440b      	add	r3, r1
 8003ff4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8003ffc:	4b2f      	ldr	r3, [pc, #188]	@ (80040bc <USBD_CDC_Init+0x1ec>)
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	f003 020f 	and.w	r2, r3, #15
 8004004:	6879      	ldr	r1, [r7, #4]
 8004006:	4613      	mov	r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	4413      	add	r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	440b      	add	r3, r1
 8004010:	3326      	adds	r3, #38	@ 0x26
 8004012:	2210      	movs	r2, #16
 8004014:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004016:	4b29      	ldr	r3, [pc, #164]	@ (80040bc <USBD_CDC_Init+0x1ec>)
 8004018:	7819      	ldrb	r1, [r3, #0]
 800401a:	2308      	movs	r3, #8
 800401c:	2203      	movs	r2, #3
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f002 fa75 	bl	800650e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004024:	4b25      	ldr	r3, [pc, #148]	@ (80040bc <USBD_CDC_Init+0x1ec>)
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	f003 020f 	and.w	r2, r3, #15
 800402c:	6879      	ldr	r1, [r7, #4]
 800402e:	4613      	mov	r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	4413      	add	r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	440b      	add	r3, r1
 8004038:	3324      	adds	r3, #36	@ 0x24
 800403a:	2201      	movs	r2, #1
 800403c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	33b0      	adds	r3, #176	@ 0xb0
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	4413      	add	r3, r2
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8004070:	2b00      	cmp	r3, #0
 8004072:	d101      	bne.n	8004078 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004074:	2302      	movs	r3, #2
 8004076:	e018      	b.n	80040aa <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	7c1b      	ldrb	r3, [r3, #16]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d10a      	bne.n	8004096 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004080:	4b0d      	ldr	r3, [pc, #52]	@ (80040b8 <USBD_CDC_Init+0x1e8>)
 8004082:	7819      	ldrb	r1, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800408a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f002 fb2c 	bl	80066ec <USBD_LL_PrepareReceive>
 8004094:	e008      	b.n	80040a8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004096:	4b08      	ldr	r3, [pc, #32]	@ (80040b8 <USBD_CDC_Init+0x1e8>)
 8004098:	7819      	ldrb	r1, [r3, #0]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80040a0:	2340      	movs	r3, #64	@ 0x40
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f002 fb22 	bl	80066ec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	20000097 	.word	0x20000097
 80040b8:	20000098 	.word	0x20000098
 80040bc:	20000099 	.word	0x20000099

080040c0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	460b      	mov	r3, r1
 80040ca:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80040cc:	4b3a      	ldr	r3, [pc, #232]	@ (80041b8 <USBD_CDC_DeInit+0xf8>)
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	4619      	mov	r1, r3
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f002 fa41 	bl	800655a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80040d8:	4b37      	ldr	r3, [pc, #220]	@ (80041b8 <USBD_CDC_DeInit+0xf8>)
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	f003 020f 	and.w	r2, r3, #15
 80040e0:	6879      	ldr	r1, [r7, #4]
 80040e2:	4613      	mov	r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	4413      	add	r3, r2
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	440b      	add	r3, r1
 80040ec:	3324      	adds	r3, #36	@ 0x24
 80040ee:	2200      	movs	r2, #0
 80040f0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80040f2:	4b32      	ldr	r3, [pc, #200]	@ (80041bc <USBD_CDC_DeInit+0xfc>)
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	4619      	mov	r1, r3
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f002 fa2e 	bl	800655a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80040fe:	4b2f      	ldr	r3, [pc, #188]	@ (80041bc <USBD_CDC_DeInit+0xfc>)
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	f003 020f 	and.w	r2, r3, #15
 8004106:	6879      	ldr	r1, [r7, #4]
 8004108:	4613      	mov	r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4413      	add	r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	440b      	add	r3, r1
 8004112:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004116:	2200      	movs	r2, #0
 8004118:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800411a:	4b29      	ldr	r3, [pc, #164]	@ (80041c0 <USBD_CDC_DeInit+0x100>)
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	4619      	mov	r1, r3
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f002 fa1a 	bl	800655a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004126:	4b26      	ldr	r3, [pc, #152]	@ (80041c0 <USBD_CDC_DeInit+0x100>)
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	f003 020f 	and.w	r2, r3, #15
 800412e:	6879      	ldr	r1, [r7, #4]
 8004130:	4613      	mov	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4413      	add	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	440b      	add	r3, r1
 800413a:	3324      	adds	r3, #36	@ 0x24
 800413c:	2200      	movs	r2, #0
 800413e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004140:	4b1f      	ldr	r3, [pc, #124]	@ (80041c0 <USBD_CDC_DeInit+0x100>)
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	f003 020f 	and.w	r2, r3, #15
 8004148:	6879      	ldr	r1, [r7, #4]
 800414a:	4613      	mov	r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4413      	add	r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	440b      	add	r3, r1
 8004154:	3326      	adds	r3, #38	@ 0x26
 8004156:	2200      	movs	r2, #0
 8004158:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	32b0      	adds	r2, #176	@ 0xb0
 8004164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d01f      	beq.n	80041ac <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	33b0      	adds	r3, #176	@ 0xb0
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	4413      	add	r3, r2
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	32b0      	adds	r2, #176	@ 0xb0
 800418a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800418e:	4618      	mov	r0, r3
 8004190:	f002 faee 	bl	8006770 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	32b0      	adds	r2, #176	@ 0xb0
 800419e:	2100      	movs	r1, #0
 80041a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3708      	adds	r7, #8
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	20000097 	.word	0x20000097
 80041bc:	20000098 	.word	0x20000098
 80041c0:	20000099 	.word	0x20000099

080041c4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	32b0      	adds	r2, #176	@ 0xb0
 80041d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041dc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80041de:	2300      	movs	r3, #0
 80041e0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80041e2:	2300      	movs	r3, #0
 80041e4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80041e6:	2300      	movs	r3, #0
 80041e8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d101      	bne.n	80041f4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e0bf      	b.n	8004374 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d050      	beq.n	80042a2 <USBD_CDC_Setup+0xde>
 8004200:	2b20      	cmp	r3, #32
 8004202:	f040 80af 	bne.w	8004364 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	88db      	ldrh	r3, [r3, #6]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d03a      	beq.n	8004284 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	b25b      	sxtb	r3, r3
 8004214:	2b00      	cmp	r3, #0
 8004216:	da1b      	bge.n	8004250 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	33b0      	adds	r3, #176	@ 0xb0
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	4413      	add	r3, r2
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	683a      	ldr	r2, [r7, #0]
 800422c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800422e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	88d2      	ldrh	r2, [r2, #6]
 8004234:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	88db      	ldrh	r3, [r3, #6]
 800423a:	2b07      	cmp	r3, #7
 800423c:	bf28      	it	cs
 800423e:	2307      	movcs	r3, #7
 8004240:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	89fa      	ldrh	r2, [r7, #14]
 8004246:	4619      	mov	r1, r3
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f001 fd53 	bl	8005cf4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800424e:	e090      	b.n	8004372 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	785a      	ldrb	r2, [r3, #1]
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	88db      	ldrh	r3, [r3, #6]
 800425e:	2b3f      	cmp	r3, #63	@ 0x3f
 8004260:	d803      	bhi.n	800426a <USBD_CDC_Setup+0xa6>
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	88db      	ldrh	r3, [r3, #6]
 8004266:	b2da      	uxtb	r2, r3
 8004268:	e000      	b.n	800426c <USBD_CDC_Setup+0xa8>
 800426a:	2240      	movs	r2, #64	@ 0x40
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8004272:	6939      	ldr	r1, [r7, #16]
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800427a:	461a      	mov	r2, r3
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f001 fd65 	bl	8005d4c <USBD_CtlPrepareRx>
      break;
 8004282:	e076      	b.n	8004372 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	33b0      	adds	r3, #176	@ 0xb0
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	4413      	add	r3, r2
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	683a      	ldr	r2, [r7, #0]
 8004298:	7850      	ldrb	r0, [r2, #1]
 800429a:	2200      	movs	r2, #0
 800429c:	6839      	ldr	r1, [r7, #0]
 800429e:	4798      	blx	r3
      break;
 80042a0:	e067      	b.n	8004372 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	785b      	ldrb	r3, [r3, #1]
 80042a6:	2b0b      	cmp	r3, #11
 80042a8:	d851      	bhi.n	800434e <USBD_CDC_Setup+0x18a>
 80042aa:	a201      	add	r2, pc, #4	@ (adr r2, 80042b0 <USBD_CDC_Setup+0xec>)
 80042ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b0:	080042e1 	.word	0x080042e1
 80042b4:	0800435d 	.word	0x0800435d
 80042b8:	0800434f 	.word	0x0800434f
 80042bc:	0800434f 	.word	0x0800434f
 80042c0:	0800434f 	.word	0x0800434f
 80042c4:	0800434f 	.word	0x0800434f
 80042c8:	0800434f 	.word	0x0800434f
 80042cc:	0800434f 	.word	0x0800434f
 80042d0:	0800434f 	.word	0x0800434f
 80042d4:	0800434f 	.word	0x0800434f
 80042d8:	0800430b 	.word	0x0800430b
 80042dc:	08004335 	.word	0x08004335
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	2b03      	cmp	r3, #3
 80042ea:	d107      	bne.n	80042fc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80042ec:	f107 030a 	add.w	r3, r7, #10
 80042f0:	2202      	movs	r2, #2
 80042f2:	4619      	mov	r1, r3
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f001 fcfd 	bl	8005cf4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80042fa:	e032      	b.n	8004362 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80042fc:	6839      	ldr	r1, [r7, #0]
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f001 fc7b 	bl	8005bfa <USBD_CtlError>
            ret = USBD_FAIL;
 8004304:	2303      	movs	r3, #3
 8004306:	75fb      	strb	r3, [r7, #23]
          break;
 8004308:	e02b      	b.n	8004362 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b03      	cmp	r3, #3
 8004314:	d107      	bne.n	8004326 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004316:	f107 030d 	add.w	r3, r7, #13
 800431a:	2201      	movs	r2, #1
 800431c:	4619      	mov	r1, r3
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f001 fce8 	bl	8005cf4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004324:	e01d      	b.n	8004362 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004326:	6839      	ldr	r1, [r7, #0]
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f001 fc66 	bl	8005bfa <USBD_CtlError>
            ret = USBD_FAIL;
 800432e:	2303      	movs	r3, #3
 8004330:	75fb      	strb	r3, [r7, #23]
          break;
 8004332:	e016      	b.n	8004362 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800433a:	b2db      	uxtb	r3, r3
 800433c:	2b03      	cmp	r3, #3
 800433e:	d00f      	beq.n	8004360 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8004340:	6839      	ldr	r1, [r7, #0]
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f001 fc59 	bl	8005bfa <USBD_CtlError>
            ret = USBD_FAIL;
 8004348:	2303      	movs	r3, #3
 800434a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800434c:	e008      	b.n	8004360 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800434e:	6839      	ldr	r1, [r7, #0]
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f001 fc52 	bl	8005bfa <USBD_CtlError>
          ret = USBD_FAIL;
 8004356:	2303      	movs	r3, #3
 8004358:	75fb      	strb	r3, [r7, #23]
          break;
 800435a:	e002      	b.n	8004362 <USBD_CDC_Setup+0x19e>
          break;
 800435c:	bf00      	nop
 800435e:	e008      	b.n	8004372 <USBD_CDC_Setup+0x1ae>
          break;
 8004360:	bf00      	nop
      }
      break;
 8004362:	e006      	b.n	8004372 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8004364:	6839      	ldr	r1, [r7, #0]
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f001 fc47 	bl	8005bfa <USBD_CtlError>
      ret = USBD_FAIL;
 800436c:	2303      	movs	r3, #3
 800436e:	75fb      	strb	r3, [r7, #23]
      break;
 8004370:	bf00      	nop
  }

  return (uint8_t)ret;
 8004372:	7dfb      	ldrb	r3, [r7, #23]
}
 8004374:	4618      	mov	r0, r3
 8004376:	3718      	adds	r7, #24
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	460b      	mov	r3, r1
 8004386:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800438e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	32b0      	adds	r2, #176	@ 0xb0
 800439a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d101      	bne.n	80043a6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e065      	b.n	8004472 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	32b0      	adds	r2, #176	@ 0xb0
 80043b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043b4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80043b6:	78fb      	ldrb	r3, [r7, #3]
 80043b8:	f003 020f 	and.w	r2, r3, #15
 80043bc:	6879      	ldr	r1, [r7, #4]
 80043be:	4613      	mov	r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	4413      	add	r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	440b      	add	r3, r1
 80043c8:	3318      	adds	r3, #24
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d02f      	beq.n	8004430 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80043d0:	78fb      	ldrb	r3, [r7, #3]
 80043d2:	f003 020f 	and.w	r2, r3, #15
 80043d6:	6879      	ldr	r1, [r7, #4]
 80043d8:	4613      	mov	r3, r2
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	4413      	add	r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	440b      	add	r3, r1
 80043e2:	3318      	adds	r3, #24
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	78fb      	ldrb	r3, [r7, #3]
 80043e8:	f003 010f 	and.w	r1, r3, #15
 80043ec:	68f8      	ldr	r0, [r7, #12]
 80043ee:	460b      	mov	r3, r1
 80043f0:	00db      	lsls	r3, r3, #3
 80043f2:	440b      	add	r3, r1
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	4403      	add	r3, r0
 80043f8:	331c      	adds	r3, #28
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	fbb2 f1f3 	udiv	r1, r2, r3
 8004400:	fb01 f303 	mul.w	r3, r1, r3
 8004404:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004406:	2b00      	cmp	r3, #0
 8004408:	d112      	bne.n	8004430 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800440a:	78fb      	ldrb	r3, [r7, #3]
 800440c:	f003 020f 	and.w	r2, r3, #15
 8004410:	6879      	ldr	r1, [r7, #4]
 8004412:	4613      	mov	r3, r2
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	4413      	add	r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	440b      	add	r3, r1
 800441c:	3318      	adds	r3, #24
 800441e:	2200      	movs	r2, #0
 8004420:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004422:	78f9      	ldrb	r1, [r7, #3]
 8004424:	2300      	movs	r3, #0
 8004426:	2200      	movs	r2, #0
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f002 f93e 	bl	80066aa <USBD_LL_Transmit>
 800442e:	e01f      	b.n	8004470 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	2200      	movs	r2, #0
 8004434:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	33b0      	adds	r3, #176	@ 0xb0
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	4413      	add	r3, r2
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d010      	beq.n	8004470 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	33b0      	adds	r3, #176	@ 0xb0
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	4413      	add	r3, r2
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8004466:	68ba      	ldr	r2, [r7, #8]
 8004468:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800446c:	78fa      	ldrb	r2, [r7, #3]
 800446e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3710      	adds	r7, #16
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}

0800447a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800447a:	b580      	push	{r7, lr}
 800447c:	b084      	sub	sp, #16
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
 8004482:	460b      	mov	r3, r1
 8004484:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	32b0      	adds	r2, #176	@ 0xb0
 8004490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004494:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	32b0      	adds	r2, #176	@ 0xb0
 80044a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d101      	bne.n	80044ac <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e01a      	b.n	80044e2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80044ac:	78fb      	ldrb	r3, [r7, #3]
 80044ae:	4619      	mov	r1, r3
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f002 f93c 	bl	800672e <USBD_LL_GetRxDataSize>
 80044b6:	4602      	mov	r2, r0
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	33b0      	adds	r3, #176	@ 0xb0
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	4413      	add	r3, r2
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80044dc:	4611      	mov	r1, r2
 80044de:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3710      	adds	r7, #16
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b084      	sub	sp, #16
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	32b0      	adds	r2, #176	@ 0xb0
 80044fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004500:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d101      	bne.n	800450c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004508:	2303      	movs	r3, #3
 800450a:	e024      	b.n	8004556 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	33b0      	adds	r3, #176	@ 0xb0
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	4413      	add	r3, r2
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d019      	beq.n	8004554 <USBD_CDC_EP0_RxReady+0x6a>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8004526:	2bff      	cmp	r3, #255	@ 0xff
 8004528:	d014      	beq.n	8004554 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	33b0      	adds	r3, #176	@ 0xb0
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	4413      	add	r3, r2
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8004542:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800454a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	22ff      	movs	r2, #255	@ 0xff
 8004550:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3710      	adds	r7, #16
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
	...

08004560 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004568:	2182      	movs	r1, #130	@ 0x82
 800456a:	4818      	ldr	r0, [pc, #96]	@ (80045cc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800456c:	f000 fd0f 	bl	8004f8e <USBD_GetEpDesc>
 8004570:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004572:	2101      	movs	r1, #1
 8004574:	4815      	ldr	r0, [pc, #84]	@ (80045cc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004576:	f000 fd0a 	bl	8004f8e <USBD_GetEpDesc>
 800457a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800457c:	2181      	movs	r1, #129	@ 0x81
 800457e:	4813      	ldr	r0, [pc, #76]	@ (80045cc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004580:	f000 fd05 	bl	8004f8e <USBD_GetEpDesc>
 8004584:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d002      	beq.n	8004592 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	2210      	movs	r2, #16
 8004590:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d006      	beq.n	80045a6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	2200      	movs	r2, #0
 800459c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80045a0:	711a      	strb	r2, [r3, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d006      	beq.n	80045ba <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80045b4:	711a      	strb	r2, [r3, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2243      	movs	r2, #67	@ 0x43
 80045be:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80045c0:	4b02      	ldr	r3, [pc, #8]	@ (80045cc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3718      	adds	r7, #24
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	20000054 	.word	0x20000054

080045d0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b086      	sub	sp, #24
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80045d8:	2182      	movs	r1, #130	@ 0x82
 80045da:	4818      	ldr	r0, [pc, #96]	@ (800463c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80045dc:	f000 fcd7 	bl	8004f8e <USBD_GetEpDesc>
 80045e0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80045e2:	2101      	movs	r1, #1
 80045e4:	4815      	ldr	r0, [pc, #84]	@ (800463c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80045e6:	f000 fcd2 	bl	8004f8e <USBD_GetEpDesc>
 80045ea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80045ec:	2181      	movs	r1, #129	@ 0x81
 80045ee:	4813      	ldr	r0, [pc, #76]	@ (800463c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80045f0:	f000 fccd 	bl	8004f8e <USBD_GetEpDesc>
 80045f4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d002      	beq.n	8004602 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	2210      	movs	r2, #16
 8004600:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d006      	beq.n	8004616 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	2200      	movs	r2, #0
 800460c:	711a      	strb	r2, [r3, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	f042 0202 	orr.w	r2, r2, #2
 8004614:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d006      	beq.n	800462a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	711a      	strb	r2, [r3, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	f042 0202 	orr.w	r2, r2, #2
 8004628:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2243      	movs	r2, #67	@ 0x43
 800462e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004630:	4b02      	ldr	r3, [pc, #8]	@ (800463c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8004632:	4618      	mov	r0, r3
 8004634:	3718      	adds	r7, #24
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	20000054 	.word	0x20000054

08004640 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b086      	sub	sp, #24
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004648:	2182      	movs	r1, #130	@ 0x82
 800464a:	4818      	ldr	r0, [pc, #96]	@ (80046ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800464c:	f000 fc9f 	bl	8004f8e <USBD_GetEpDesc>
 8004650:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004652:	2101      	movs	r1, #1
 8004654:	4815      	ldr	r0, [pc, #84]	@ (80046ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004656:	f000 fc9a 	bl	8004f8e <USBD_GetEpDesc>
 800465a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800465c:	2181      	movs	r1, #129	@ 0x81
 800465e:	4813      	ldr	r0, [pc, #76]	@ (80046ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004660:	f000 fc95 	bl	8004f8e <USBD_GetEpDesc>
 8004664:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d002      	beq.n	8004672 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	2210      	movs	r2, #16
 8004670:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d006      	beq.n	8004686 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	2200      	movs	r2, #0
 800467c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004680:	711a      	strb	r2, [r3, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d006      	beq.n	800469a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004694:	711a      	strb	r2, [r3, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2243      	movs	r2, #67	@ 0x43
 800469e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80046a0:	4b02      	ldr	r3, [pc, #8]	@ (80046ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3718      	adds	r7, #24
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	20000054 	.word	0x20000054

080046b0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	220a      	movs	r2, #10
 80046bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80046be:	4b03      	ldr	r3, [pc, #12]	@ (80046cc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr
 80046cc:	20000010 	.word	0x20000010

080046d0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d101      	bne.n	80046e4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e009      	b.n	80046f8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	33b0      	adds	r3, #176	@ 0xb0
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	4413      	add	r3, r2
 80046f2:	683a      	ldr	r2, [r7, #0]
 80046f4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004704:	b480      	push	{r7}
 8004706:	b087      	sub	sp, #28
 8004708:	af00      	add	r7, sp, #0
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	32b0      	adds	r2, #176	@ 0xb0
 800471a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800471e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8004726:	2303      	movs	r3, #3
 8004728:	e008      	b.n	800473c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	68ba      	ldr	r2, [r7, #8]
 800472e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800473a:	2300      	movs	r3, #0
}
 800473c:	4618      	mov	r0, r3
 800473e:	371c      	adds	r7, #28
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	32b0      	adds	r2, #176	@ 0xb0
 800475c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004760:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d101      	bne.n	800476c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004768:	2303      	movs	r3, #3
 800476a:	e004      	b.n	8004776 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	683a      	ldr	r2, [r7, #0]
 8004770:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3714      	adds	r7, #20
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
	...

08004784 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	32b0      	adds	r2, #176	@ 0xb0
 8004796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800479a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	32b0      	adds	r2, #176	@ 0xb0
 80047a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e018      	b.n	80047e4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	7c1b      	ldrb	r3, [r3, #16]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d10a      	bne.n	80047d0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80047ba:	4b0c      	ldr	r3, [pc, #48]	@ (80047ec <USBD_CDC_ReceivePacket+0x68>)
 80047bc:	7819      	ldrb	r1, [r3, #0]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80047c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f001 ff8f 	bl	80066ec <USBD_LL_PrepareReceive>
 80047ce:	e008      	b.n	80047e2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80047d0:	4b06      	ldr	r3, [pc, #24]	@ (80047ec <USBD_CDC_ReceivePacket+0x68>)
 80047d2:	7819      	ldrb	r1, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80047da:	2340      	movs	r3, #64	@ 0x40
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f001 ff85 	bl	80066ec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	20000098 	.word	0x20000098

080047f0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	4613      	mov	r3, r2
 80047fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d101      	bne.n	8004808 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004804:	2303      	movs	r3, #3
 8004806:	e01f      	b.n	8004848 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2200      	movs	r2, #0
 800481c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d003      	beq.n	800482e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	68ba      	ldr	r2, [r7, #8]
 800482a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2201      	movs	r2, #1
 8004832:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	79fa      	ldrb	r2, [r7, #7]
 800483a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	f001 fdff 	bl	8006440 <USBD_LL_Init>
 8004842:	4603      	mov	r3, r0
 8004844:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004846:	7dfb      	ldrb	r3, [r7, #23]
}
 8004848:	4618      	mov	r0, r3
 800484a:	3718      	adds	r7, #24
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800485a:	2300      	movs	r3, #0
 800485c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d101      	bne.n	8004868 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004864:	2303      	movs	r3, #3
 8004866:	e025      	b.n	80048b4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	683a      	ldr	r2, [r7, #0]
 800486c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	32ae      	adds	r2, #174	@ 0xae
 800487a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800487e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00f      	beq.n	80048a4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	32ae      	adds	r2, #174	@ 0xae
 800488e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004894:	f107 020e 	add.w	r2, r7, #14
 8004898:	4610      	mov	r0, r2
 800489a:	4798      	blx	r3
 800489c:	4602      	mov	r2, r0
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80048aa:	1c5a      	adds	r2, r3, #1
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f001 fe07 	bl	80064d8 <USBD_LL_Start>
 80048ca:	4603      	mov	r3, r0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3708      	adds	r7, #8
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80048dc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80048de:	4618      	mov	r0, r3
 80048e0:	370c      	adds	r7, #12
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr

080048ea <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80048ea:	b580      	push	{r7, lr}
 80048ec:	b084      	sub	sp, #16
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
 80048f2:	460b      	mov	r3, r1
 80048f4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80048f6:	2300      	movs	r3, #0
 80048f8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004900:	2b00      	cmp	r3, #0
 8004902:	d009      	beq.n	8004918 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	78fa      	ldrb	r2, [r7, #3]
 800490e:	4611      	mov	r1, r2
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	4798      	blx	r3
 8004914:	4603      	mov	r3, r0
 8004916:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004918:	7bfb      	ldrb	r3, [r7, #15]
}
 800491a:	4618      	mov	r0, r3
 800491c:	3710      	adds	r7, #16
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004922:	b580      	push	{r7, lr}
 8004924:	b084      	sub	sp, #16
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
 800492a:	460b      	mov	r3, r1
 800492c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800492e:	2300      	movs	r3, #0
 8004930:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	78fa      	ldrb	r2, [r7, #3]
 800493c:	4611      	mov	r1, r2
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	4798      	blx	r3
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d001      	beq.n	800494c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8004948:	2303      	movs	r3, #3
 800494a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800494c:	7bfb      	ldrb	r3, [r7, #15]
}
 800494e:	4618      	mov	r0, r3
 8004950:	3710      	adds	r7, #16
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004956:	b580      	push	{r7, lr}
 8004958:	b084      	sub	sp, #16
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
 800495e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004966:	6839      	ldr	r1, [r7, #0]
 8004968:	4618      	mov	r0, r3
 800496a:	f001 f90c 	bl	8005b86 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2201      	movs	r2, #1
 8004972:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800497c:	461a      	mov	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800498a:	f003 031f 	and.w	r3, r3, #31
 800498e:	2b02      	cmp	r3, #2
 8004990:	d01a      	beq.n	80049c8 <USBD_LL_SetupStage+0x72>
 8004992:	2b02      	cmp	r3, #2
 8004994:	d822      	bhi.n	80049dc <USBD_LL_SetupStage+0x86>
 8004996:	2b00      	cmp	r3, #0
 8004998:	d002      	beq.n	80049a0 <USBD_LL_SetupStage+0x4a>
 800499a:	2b01      	cmp	r3, #1
 800499c:	d00a      	beq.n	80049b4 <USBD_LL_SetupStage+0x5e>
 800499e:	e01d      	b.n	80049dc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80049a6:	4619      	mov	r1, r3
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 fb63 	bl	8005074 <USBD_StdDevReq>
 80049ae:	4603      	mov	r3, r0
 80049b0:	73fb      	strb	r3, [r7, #15]
      break;
 80049b2:	e020      	b.n	80049f6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80049ba:	4619      	mov	r1, r3
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f000 fbcb 	bl	8005158 <USBD_StdItfReq>
 80049c2:	4603      	mov	r3, r0
 80049c4:	73fb      	strb	r3, [r7, #15]
      break;
 80049c6:	e016      	b.n	80049f6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80049ce:	4619      	mov	r1, r3
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 fc2d 	bl	8005230 <USBD_StdEPReq>
 80049d6:	4603      	mov	r3, r0
 80049d8:	73fb      	strb	r3, [r7, #15]
      break;
 80049da:	e00c      	b.n	80049f6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80049e2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	4619      	mov	r1, r3
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f001 fdd4 	bl	8006598 <USBD_LL_StallEP>
 80049f0:	4603      	mov	r3, r0
 80049f2:	73fb      	strb	r3, [r7, #15]
      break;
 80049f4:	bf00      	nop
  }

  return ret;
 80049f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3710      	adds	r7, #16
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b086      	sub	sp, #24
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	460b      	mov	r3, r1
 8004a0a:	607a      	str	r2, [r7, #4]
 8004a0c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8004a12:	7afb      	ldrb	r3, [r7, #11]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d16e      	bne.n	8004af6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8004a1e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004a26:	2b03      	cmp	r3, #3
 8004a28:	f040 8098 	bne.w	8004b5c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	689a      	ldr	r2, [r3, #8]
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d913      	bls.n	8004a60 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	689a      	ldr	r2, [r3, #8]
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	1ad2      	subs	r2, r2, r3
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	68da      	ldr	r2, [r3, #12]
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	bf28      	it	cs
 8004a52:	4613      	movcs	r3, r2
 8004a54:	461a      	mov	r2, r3
 8004a56:	6879      	ldr	r1, [r7, #4]
 8004a58:	68f8      	ldr	r0, [r7, #12]
 8004a5a:	f001 f994 	bl	8005d86 <USBD_CtlContinueRx>
 8004a5e:	e07d      	b.n	8004b5c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004a66:	f003 031f 	and.w	r3, r3, #31
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d014      	beq.n	8004a98 <USBD_LL_DataOutStage+0x98>
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d81d      	bhi.n	8004aae <USBD_LL_DataOutStage+0xae>
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d002      	beq.n	8004a7c <USBD_LL_DataOutStage+0x7c>
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d003      	beq.n	8004a82 <USBD_LL_DataOutStage+0x82>
 8004a7a:	e018      	b.n	8004aae <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	75bb      	strb	r3, [r7, #22]
            break;
 8004a80:	e018      	b.n	8004ab4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f000 fa64 	bl	8004f5a <USBD_CoreFindIF>
 8004a92:	4603      	mov	r3, r0
 8004a94:	75bb      	strb	r3, [r7, #22]
            break;
 8004a96:	e00d      	b.n	8004ab4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f000 fa66 	bl	8004f74 <USBD_CoreFindEP>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	75bb      	strb	r3, [r7, #22]
            break;
 8004aac:	e002      	b.n	8004ab4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	75bb      	strb	r3, [r7, #22]
            break;
 8004ab2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8004ab4:	7dbb      	ldrb	r3, [r7, #22]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d119      	bne.n	8004aee <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	2b03      	cmp	r3, #3
 8004ac4:	d113      	bne.n	8004aee <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8004ac6:	7dba      	ldrb	r2, [r7, #22]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	32ae      	adds	r2, #174	@ 0xae
 8004acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00b      	beq.n	8004aee <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8004ad6:	7dba      	ldrb	r2, [r7, #22]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8004ade:	7dba      	ldrb	r2, [r7, #22]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	32ae      	adds	r2, #174	@ 0xae
 8004ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	68f8      	ldr	r0, [r7, #12]
 8004aec:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	f001 f95a 	bl	8005da8 <USBD_CtlSendStatus>
 8004af4:	e032      	b.n	8004b5c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8004af6:	7afb      	ldrb	r3, [r7, #11]
 8004af8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	4619      	mov	r1, r3
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f000 fa37 	bl	8004f74 <USBD_CoreFindEP>
 8004b06:	4603      	mov	r3, r0
 8004b08:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004b0a:	7dbb      	ldrb	r3, [r7, #22]
 8004b0c:	2bff      	cmp	r3, #255	@ 0xff
 8004b0e:	d025      	beq.n	8004b5c <USBD_LL_DataOutStage+0x15c>
 8004b10:	7dbb      	ldrb	r3, [r7, #22]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d122      	bne.n	8004b5c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	2b03      	cmp	r3, #3
 8004b20:	d117      	bne.n	8004b52 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8004b22:	7dba      	ldrb	r2, [r7, #22]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	32ae      	adds	r2, #174	@ 0xae
 8004b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00f      	beq.n	8004b52 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8004b32:	7dba      	ldrb	r2, [r7, #22]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8004b3a:	7dba      	ldrb	r2, [r7, #22]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	32ae      	adds	r2, #174	@ 0xae
 8004b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b44:	699b      	ldr	r3, [r3, #24]
 8004b46:	7afa      	ldrb	r2, [r7, #11]
 8004b48:	4611      	mov	r1, r2
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	4798      	blx	r3
 8004b4e:	4603      	mov	r3, r0
 8004b50:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8004b52:	7dfb      	ldrb	r3, [r7, #23]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d001      	beq.n	8004b5c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8004b58:	7dfb      	ldrb	r3, [r7, #23]
 8004b5a:	e000      	b.n	8004b5e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3718      	adds	r7, #24
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b086      	sub	sp, #24
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	60f8      	str	r0, [r7, #12]
 8004b6e:	460b      	mov	r3, r1
 8004b70:	607a      	str	r2, [r7, #4]
 8004b72:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8004b74:	7afb      	ldrb	r3, [r7, #11]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d16f      	bne.n	8004c5a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	3314      	adds	r3, #20
 8004b7e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d15a      	bne.n	8004c40 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	689a      	ldr	r2, [r3, #8]
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d914      	bls.n	8004bc0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	689a      	ldr	r2, [r3, #8]
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	1ad2      	subs	r2, r2, r3
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	461a      	mov	r2, r3
 8004baa:	6879      	ldr	r1, [r7, #4]
 8004bac:	68f8      	ldr	r0, [r7, #12]
 8004bae:	f001 f8bc 	bl	8005d2a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	2100      	movs	r1, #0
 8004bb8:	68f8      	ldr	r0, [r7, #12]
 8004bba:	f001 fd97 	bl	80066ec <USBD_LL_PrepareReceive>
 8004bbe:	e03f      	b.n	8004c40 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	68da      	ldr	r2, [r3, #12]
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d11c      	bne.n	8004c06 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	685a      	ldr	r2, [r3, #4]
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d316      	bcc.n	8004c06 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d20f      	bcs.n	8004c06 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004be6:	2200      	movs	r2, #0
 8004be8:	2100      	movs	r1, #0
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f001 f89d 	bl	8005d2a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	68f8      	ldr	r0, [r7, #12]
 8004c00:	f001 fd74 	bl	80066ec <USBD_LL_PrepareReceive>
 8004c04:	e01c      	b.n	8004c40 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2b03      	cmp	r3, #3
 8004c10:	d10f      	bne.n	8004c32 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d009      	beq.n	8004c32 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004c32:	2180      	movs	r1, #128	@ 0x80
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f001 fcaf 	bl	8006598 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f001 f8c7 	bl	8005dce <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d03a      	beq.n	8004cc0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	f7ff fe42 	bl	80048d4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8004c58:	e032      	b.n	8004cc0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8004c5a:	7afb      	ldrb	r3, [r7, #11]
 8004c5c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	4619      	mov	r1, r3
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	f000 f985 	bl	8004f74 <USBD_CoreFindEP>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004c6e:	7dfb      	ldrb	r3, [r7, #23]
 8004c70:	2bff      	cmp	r3, #255	@ 0xff
 8004c72:	d025      	beq.n	8004cc0 <USBD_LL_DataInStage+0x15a>
 8004c74:	7dfb      	ldrb	r3, [r7, #23]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d122      	bne.n	8004cc0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b03      	cmp	r3, #3
 8004c84:	d11c      	bne.n	8004cc0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8004c86:	7dfa      	ldrb	r2, [r7, #23]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	32ae      	adds	r2, #174	@ 0xae
 8004c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d014      	beq.n	8004cc0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8004c96:	7dfa      	ldrb	r2, [r7, #23]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8004c9e:	7dfa      	ldrb	r2, [r7, #23]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	32ae      	adds	r2, #174	@ 0xae
 8004ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	7afa      	ldrb	r2, [r7, #11]
 8004cac:	4611      	mov	r1, r2
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	4798      	blx	r3
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8004cb6:	7dbb      	ldrb	r3, [r7, #22]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d001      	beq.n	8004cc0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8004cbc:	7dbb      	ldrb	r3, [r7, #22]
 8004cbe:	e000      	b.n	8004cc2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3718      	adds	r7, #24
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b084      	sub	sp, #16
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d014      	beq.n	8004d30 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00e      	beq.n	8004d30 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	6852      	ldr	r2, [r2, #4]
 8004d1e:	b2d2      	uxtb	r2, r2
 8004d20:	4611      	mov	r1, r2
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	4798      	blx	r3
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d001      	beq.n	8004d30 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004d30:	2340      	movs	r3, #64	@ 0x40
 8004d32:	2200      	movs	r2, #0
 8004d34:	2100      	movs	r1, #0
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f001 fbe9 	bl	800650e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2240      	movs	r2, #64	@ 0x40
 8004d48:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004d4c:	2340      	movs	r3, #64	@ 0x40
 8004d4e:	2200      	movs	r2, #0
 8004d50:	2180      	movs	r1, #128	@ 0x80
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f001 fbdb 	bl	800650e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2240      	movs	r2, #64	@ 0x40
 8004d62:	621a      	str	r2, [r3, #32]

  return ret;
 8004d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3710      	adds	r7, #16
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b083      	sub	sp, #12
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
 8004d76:	460b      	mov	r3, r1
 8004d78:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	78fa      	ldrb	r2, [r7, #3]
 8004d7e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr

08004d8e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004d8e:	b480      	push	{r7}
 8004d90:	b083      	sub	sp, #12
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b04      	cmp	r3, #4
 8004da0:	d006      	beq.n	8004db0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004da8:	b2da      	uxtb	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2204      	movs	r2, #4
 8004db4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	370c      	adds	r7, #12
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr

08004dc6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004dc6:	b480      	push	{r7}
 8004dc8:	b083      	sub	sp, #12
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	2b04      	cmp	r3, #4
 8004dd8:	d106      	bne.n	8004de8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8004de0:	b2da      	uxtb	r2, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr

08004df6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b082      	sub	sp, #8
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b03      	cmp	r3, #3
 8004e08:	d110      	bne.n	8004e2c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00b      	beq.n	8004e2c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004e1a:	69db      	ldr	r3, [r3, #28]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d005      	beq.n	8004e2c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004e26:	69db      	ldr	r3, [r3, #28]
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3708      	adds	r7, #8
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b082      	sub	sp, #8
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
 8004e3e:	460b      	mov	r3, r1
 8004e40:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	32ae      	adds	r2, #174	@ 0xae
 8004e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d101      	bne.n	8004e58 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e01c      	b.n	8004e92 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	2b03      	cmp	r3, #3
 8004e62:	d115      	bne.n	8004e90 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	32ae      	adds	r2, #174	@ 0xae
 8004e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e72:	6a1b      	ldr	r3, [r3, #32]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d00b      	beq.n	8004e90 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	32ae      	adds	r2, #174	@ 0xae
 8004e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	78fa      	ldrb	r2, [r7, #3]
 8004e8a:	4611      	mov	r1, r2
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3708      	adds	r7, #8
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}

08004e9a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004e9a:	b580      	push	{r7, lr}
 8004e9c:	b082      	sub	sp, #8
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	32ae      	adds	r2, #174	@ 0xae
 8004eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d101      	bne.n	8004ebc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e01c      	b.n	8004ef6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	2b03      	cmp	r3, #3
 8004ec6:	d115      	bne.n	8004ef4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	32ae      	adds	r2, #174	@ 0xae
 8004ed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d00b      	beq.n	8004ef4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	32ae      	adds	r2, #174	@ 0xae
 8004ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eec:	78fa      	ldrb	r2, [r7, #3]
 8004eee:	4611      	mov	r1, r2
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3708      	adds	r7, #8
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}

08004efe <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004efe:	b480      	push	{r7}
 8004f00:	b083      	sub	sp, #12
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00e      	beq.n	8004f50 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	6852      	ldr	r2, [r2, #4]
 8004f3e:	b2d2      	uxtb	r2, r2
 8004f40:	4611      	mov	r1, r2
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	4798      	blx	r3
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d001      	beq.n	8004f50 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3710      	adds	r7, #16
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	b083      	sub	sp, #12
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
 8004f62:	460b      	mov	r3, r1
 8004f64:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8004f66:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8004f80:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	370c      	adds	r7, #12
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr

08004f8e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b086      	sub	sp, #24
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
 8004f96:	460b      	mov	r3, r1
 8004f98:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	885b      	ldrh	r3, [r3, #2]
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	7812      	ldrb	r2, [r2, #0]
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d91f      	bls.n	8004ff4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8004fba:	e013      	b.n	8004fe4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8004fbc:	f107 030a 	add.w	r3, r7, #10
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	6978      	ldr	r0, [r7, #20]
 8004fc4:	f000 f81b 	bl	8004ffe <USBD_GetNextDesc>
 8004fc8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	785b      	ldrb	r3, [r3, #1]
 8004fce:	2b05      	cmp	r3, #5
 8004fd0:	d108      	bne.n	8004fe4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	789b      	ldrb	r3, [r3, #2]
 8004fda:	78fa      	ldrb	r2, [r7, #3]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d008      	beq.n	8004ff2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	885b      	ldrh	r3, [r3, #2]
 8004fe8:	b29a      	uxth	r2, r3
 8004fea:	897b      	ldrh	r3, [r7, #10]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d8e5      	bhi.n	8004fbc <USBD_GetEpDesc+0x2e>
 8004ff0:	e000      	b.n	8004ff4 <USBD_GetEpDesc+0x66>
          break;
 8004ff2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8004ff4:	693b      	ldr	r3, [r7, #16]
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3718      	adds	r7, #24
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8004ffe:	b480      	push	{r7}
 8005000:	b085      	sub	sp, #20
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
 8005006:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	881b      	ldrh	r3, [r3, #0]
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	7812      	ldrb	r2, [r2, #0]
 8005014:	4413      	add	r3, r2
 8005016:	b29a      	uxth	r2, r3
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	461a      	mov	r2, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4413      	add	r3, r2
 8005026:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005028:	68fb      	ldr	r3, [r7, #12]
}
 800502a:	4618      	mov	r0, r3
 800502c:	3714      	adds	r7, #20
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr

08005036 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005036:	b480      	push	{r7}
 8005038:	b087      	sub	sp, #28
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	3301      	adds	r3, #1
 800504c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005054:	8a3b      	ldrh	r3, [r7, #16]
 8005056:	021b      	lsls	r3, r3, #8
 8005058:	b21a      	sxth	r2, r3
 800505a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800505e:	4313      	orrs	r3, r2
 8005060:	b21b      	sxth	r3, r3
 8005062:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005064:	89fb      	ldrh	r3, [r7, #14]
}
 8005066:	4618      	mov	r0, r3
 8005068:	371c      	adds	r7, #28
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
	...

08005074 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800507e:	2300      	movs	r3, #0
 8005080:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800508a:	2b40      	cmp	r3, #64	@ 0x40
 800508c:	d005      	beq.n	800509a <USBD_StdDevReq+0x26>
 800508e:	2b40      	cmp	r3, #64	@ 0x40
 8005090:	d857      	bhi.n	8005142 <USBD_StdDevReq+0xce>
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00f      	beq.n	80050b6 <USBD_StdDevReq+0x42>
 8005096:	2b20      	cmp	r3, #32
 8005098:	d153      	bne.n	8005142 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	32ae      	adds	r2, #174	@ 0xae
 80050a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	6839      	ldr	r1, [r7, #0]
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	4798      	blx	r3
 80050b0:	4603      	mov	r3, r0
 80050b2:	73fb      	strb	r3, [r7, #15]
      break;
 80050b4:	e04a      	b.n	800514c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	785b      	ldrb	r3, [r3, #1]
 80050ba:	2b09      	cmp	r3, #9
 80050bc:	d83b      	bhi.n	8005136 <USBD_StdDevReq+0xc2>
 80050be:	a201      	add	r2, pc, #4	@ (adr r2, 80050c4 <USBD_StdDevReq+0x50>)
 80050c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c4:	08005119 	.word	0x08005119
 80050c8:	0800512d 	.word	0x0800512d
 80050cc:	08005137 	.word	0x08005137
 80050d0:	08005123 	.word	0x08005123
 80050d4:	08005137 	.word	0x08005137
 80050d8:	080050f7 	.word	0x080050f7
 80050dc:	080050ed 	.word	0x080050ed
 80050e0:	08005137 	.word	0x08005137
 80050e4:	0800510f 	.word	0x0800510f
 80050e8:	08005101 	.word	0x08005101
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80050ec:	6839      	ldr	r1, [r7, #0]
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 fa3c 	bl	800556c <USBD_GetDescriptor>
          break;
 80050f4:	e024      	b.n	8005140 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80050f6:	6839      	ldr	r1, [r7, #0]
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 fba1 	bl	8005840 <USBD_SetAddress>
          break;
 80050fe:	e01f      	b.n	8005140 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005100:	6839      	ldr	r1, [r7, #0]
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 fbe0 	bl	80058c8 <USBD_SetConfig>
 8005108:	4603      	mov	r3, r0
 800510a:	73fb      	strb	r3, [r7, #15]
          break;
 800510c:	e018      	b.n	8005140 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800510e:	6839      	ldr	r1, [r7, #0]
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 fc83 	bl	8005a1c <USBD_GetConfig>
          break;
 8005116:	e013      	b.n	8005140 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005118:	6839      	ldr	r1, [r7, #0]
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 fcb4 	bl	8005a88 <USBD_GetStatus>
          break;
 8005120:	e00e      	b.n	8005140 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005122:	6839      	ldr	r1, [r7, #0]
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f000 fce3 	bl	8005af0 <USBD_SetFeature>
          break;
 800512a:	e009      	b.n	8005140 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800512c:	6839      	ldr	r1, [r7, #0]
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 fd07 	bl	8005b42 <USBD_ClrFeature>
          break;
 8005134:	e004      	b.n	8005140 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005136:	6839      	ldr	r1, [r7, #0]
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 fd5e 	bl	8005bfa <USBD_CtlError>
          break;
 800513e:	bf00      	nop
      }
      break;
 8005140:	e004      	b.n	800514c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005142:	6839      	ldr	r1, [r7, #0]
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 fd58 	bl	8005bfa <USBD_CtlError>
      break;
 800514a:	bf00      	nop
  }

  return ret;
 800514c:	7bfb      	ldrb	r3, [r7, #15]
}
 800514e:	4618      	mov	r0, r3
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop

08005158 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005162:	2300      	movs	r3, #0
 8005164:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800516e:	2b40      	cmp	r3, #64	@ 0x40
 8005170:	d005      	beq.n	800517e <USBD_StdItfReq+0x26>
 8005172:	2b40      	cmp	r3, #64	@ 0x40
 8005174:	d852      	bhi.n	800521c <USBD_StdItfReq+0xc4>
 8005176:	2b00      	cmp	r3, #0
 8005178:	d001      	beq.n	800517e <USBD_StdItfReq+0x26>
 800517a:	2b20      	cmp	r3, #32
 800517c:	d14e      	bne.n	800521c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005184:	b2db      	uxtb	r3, r3
 8005186:	3b01      	subs	r3, #1
 8005188:	2b02      	cmp	r3, #2
 800518a:	d840      	bhi.n	800520e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	889b      	ldrh	r3, [r3, #4]
 8005190:	b2db      	uxtb	r3, r3
 8005192:	2b01      	cmp	r3, #1
 8005194:	d836      	bhi.n	8005204 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	889b      	ldrh	r3, [r3, #4]
 800519a:	b2db      	uxtb	r3, r3
 800519c:	4619      	mov	r1, r3
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f7ff fedb 	bl	8004f5a <USBD_CoreFindIF>
 80051a4:	4603      	mov	r3, r0
 80051a6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80051a8:	7bbb      	ldrb	r3, [r7, #14]
 80051aa:	2bff      	cmp	r3, #255	@ 0xff
 80051ac:	d01d      	beq.n	80051ea <USBD_StdItfReq+0x92>
 80051ae:	7bbb      	ldrb	r3, [r7, #14]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d11a      	bne.n	80051ea <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80051b4:	7bba      	ldrb	r2, [r7, #14]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	32ae      	adds	r2, #174	@ 0xae
 80051ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d00f      	beq.n	80051e4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80051c4:	7bba      	ldrb	r2, [r7, #14]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80051cc:	7bba      	ldrb	r2, [r7, #14]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	32ae      	adds	r2, #174	@ 0xae
 80051d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	6839      	ldr	r1, [r7, #0]
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	4798      	blx	r3
 80051de:	4603      	mov	r3, r0
 80051e0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80051e2:	e004      	b.n	80051ee <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80051e4:	2303      	movs	r3, #3
 80051e6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80051e8:	e001      	b.n	80051ee <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80051ea:	2303      	movs	r3, #3
 80051ec:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	88db      	ldrh	r3, [r3, #6]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d110      	bne.n	8005218 <USBD_StdItfReq+0xc0>
 80051f6:	7bfb      	ldrb	r3, [r7, #15]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d10d      	bne.n	8005218 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f000 fdd3 	bl	8005da8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005202:	e009      	b.n	8005218 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005204:	6839      	ldr	r1, [r7, #0]
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 fcf7 	bl	8005bfa <USBD_CtlError>
          break;
 800520c:	e004      	b.n	8005218 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800520e:	6839      	ldr	r1, [r7, #0]
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 fcf2 	bl	8005bfa <USBD_CtlError>
          break;
 8005216:	e000      	b.n	800521a <USBD_StdItfReq+0xc2>
          break;
 8005218:	bf00      	nop
      }
      break;
 800521a:	e004      	b.n	8005226 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800521c:	6839      	ldr	r1, [r7, #0]
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 fceb 	bl	8005bfa <USBD_CtlError>
      break;
 8005224:	bf00      	nop
  }

  return ret;
 8005226:	7bfb      	ldrb	r3, [r7, #15]
}
 8005228:	4618      	mov	r0, r3
 800522a:	3710      	adds	r7, #16
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800523a:	2300      	movs	r3, #0
 800523c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	889b      	ldrh	r3, [r3, #4]
 8005242:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800524c:	2b40      	cmp	r3, #64	@ 0x40
 800524e:	d007      	beq.n	8005260 <USBD_StdEPReq+0x30>
 8005250:	2b40      	cmp	r3, #64	@ 0x40
 8005252:	f200 817f 	bhi.w	8005554 <USBD_StdEPReq+0x324>
 8005256:	2b00      	cmp	r3, #0
 8005258:	d02a      	beq.n	80052b0 <USBD_StdEPReq+0x80>
 800525a:	2b20      	cmp	r3, #32
 800525c:	f040 817a 	bne.w	8005554 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005260:	7bbb      	ldrb	r3, [r7, #14]
 8005262:	4619      	mov	r1, r3
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f7ff fe85 	bl	8004f74 <USBD_CoreFindEP>
 800526a:	4603      	mov	r3, r0
 800526c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800526e:	7b7b      	ldrb	r3, [r7, #13]
 8005270:	2bff      	cmp	r3, #255	@ 0xff
 8005272:	f000 8174 	beq.w	800555e <USBD_StdEPReq+0x32e>
 8005276:	7b7b      	ldrb	r3, [r7, #13]
 8005278:	2b00      	cmp	r3, #0
 800527a:	f040 8170 	bne.w	800555e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800527e:	7b7a      	ldrb	r2, [r7, #13]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005286:	7b7a      	ldrb	r2, [r7, #13]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	32ae      	adds	r2, #174	@ 0xae
 800528c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	2b00      	cmp	r3, #0
 8005294:	f000 8163 	beq.w	800555e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005298:	7b7a      	ldrb	r2, [r7, #13]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	32ae      	adds	r2, #174	@ 0xae
 800529e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	6839      	ldr	r1, [r7, #0]
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	4798      	blx	r3
 80052aa:	4603      	mov	r3, r0
 80052ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80052ae:	e156      	b.n	800555e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	785b      	ldrb	r3, [r3, #1]
 80052b4:	2b03      	cmp	r3, #3
 80052b6:	d008      	beq.n	80052ca <USBD_StdEPReq+0x9a>
 80052b8:	2b03      	cmp	r3, #3
 80052ba:	f300 8145 	bgt.w	8005548 <USBD_StdEPReq+0x318>
 80052be:	2b00      	cmp	r3, #0
 80052c0:	f000 809b 	beq.w	80053fa <USBD_StdEPReq+0x1ca>
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d03c      	beq.n	8005342 <USBD_StdEPReq+0x112>
 80052c8:	e13e      	b.n	8005548 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d002      	beq.n	80052dc <USBD_StdEPReq+0xac>
 80052d6:	2b03      	cmp	r3, #3
 80052d8:	d016      	beq.n	8005308 <USBD_StdEPReq+0xd8>
 80052da:	e02c      	b.n	8005336 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80052dc:	7bbb      	ldrb	r3, [r7, #14]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00d      	beq.n	80052fe <USBD_StdEPReq+0xce>
 80052e2:	7bbb      	ldrb	r3, [r7, #14]
 80052e4:	2b80      	cmp	r3, #128	@ 0x80
 80052e6:	d00a      	beq.n	80052fe <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80052e8:	7bbb      	ldrb	r3, [r7, #14]
 80052ea:	4619      	mov	r1, r3
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f001 f953 	bl	8006598 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80052f2:	2180      	movs	r1, #128	@ 0x80
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f001 f94f 	bl	8006598 <USBD_LL_StallEP>
 80052fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80052fc:	e020      	b.n	8005340 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80052fe:	6839      	ldr	r1, [r7, #0]
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 fc7a 	bl	8005bfa <USBD_CtlError>
              break;
 8005306:	e01b      	b.n	8005340 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	885b      	ldrh	r3, [r3, #2]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d10e      	bne.n	800532e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005310:	7bbb      	ldrb	r3, [r7, #14]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00b      	beq.n	800532e <USBD_StdEPReq+0xfe>
 8005316:	7bbb      	ldrb	r3, [r7, #14]
 8005318:	2b80      	cmp	r3, #128	@ 0x80
 800531a:	d008      	beq.n	800532e <USBD_StdEPReq+0xfe>
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	88db      	ldrh	r3, [r3, #6]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d104      	bne.n	800532e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005324:	7bbb      	ldrb	r3, [r7, #14]
 8005326:	4619      	mov	r1, r3
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f001 f935 	bl	8006598 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 fd3a 	bl	8005da8 <USBD_CtlSendStatus>

              break;
 8005334:	e004      	b.n	8005340 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005336:	6839      	ldr	r1, [r7, #0]
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 fc5e 	bl	8005bfa <USBD_CtlError>
              break;
 800533e:	bf00      	nop
          }
          break;
 8005340:	e107      	b.n	8005552 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005348:	b2db      	uxtb	r3, r3
 800534a:	2b02      	cmp	r3, #2
 800534c:	d002      	beq.n	8005354 <USBD_StdEPReq+0x124>
 800534e:	2b03      	cmp	r3, #3
 8005350:	d016      	beq.n	8005380 <USBD_StdEPReq+0x150>
 8005352:	e04b      	b.n	80053ec <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005354:	7bbb      	ldrb	r3, [r7, #14]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d00d      	beq.n	8005376 <USBD_StdEPReq+0x146>
 800535a:	7bbb      	ldrb	r3, [r7, #14]
 800535c:	2b80      	cmp	r3, #128	@ 0x80
 800535e:	d00a      	beq.n	8005376 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005360:	7bbb      	ldrb	r3, [r7, #14]
 8005362:	4619      	mov	r1, r3
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f001 f917 	bl	8006598 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800536a:	2180      	movs	r1, #128	@ 0x80
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f001 f913 	bl	8006598 <USBD_LL_StallEP>
 8005372:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005374:	e040      	b.n	80053f8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005376:	6839      	ldr	r1, [r7, #0]
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 fc3e 	bl	8005bfa <USBD_CtlError>
              break;
 800537e:	e03b      	b.n	80053f8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	885b      	ldrh	r3, [r3, #2]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d136      	bne.n	80053f6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005388:	7bbb      	ldrb	r3, [r7, #14]
 800538a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800538e:	2b00      	cmp	r3, #0
 8005390:	d004      	beq.n	800539c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005392:	7bbb      	ldrb	r3, [r7, #14]
 8005394:	4619      	mov	r1, r3
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f001 f91d 	bl	80065d6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f000 fd03 	bl	8005da8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80053a2:	7bbb      	ldrb	r3, [r7, #14]
 80053a4:	4619      	mov	r1, r3
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f7ff fde4 	bl	8004f74 <USBD_CoreFindEP>
 80053ac:	4603      	mov	r3, r0
 80053ae:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80053b0:	7b7b      	ldrb	r3, [r7, #13]
 80053b2:	2bff      	cmp	r3, #255	@ 0xff
 80053b4:	d01f      	beq.n	80053f6 <USBD_StdEPReq+0x1c6>
 80053b6:	7b7b      	ldrb	r3, [r7, #13]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d11c      	bne.n	80053f6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80053bc:	7b7a      	ldrb	r2, [r7, #13]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80053c4:	7b7a      	ldrb	r2, [r7, #13]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	32ae      	adds	r2, #174	@ 0xae
 80053ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d010      	beq.n	80053f6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80053d4:	7b7a      	ldrb	r2, [r7, #13]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	32ae      	adds	r2, #174	@ 0xae
 80053da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	6839      	ldr	r1, [r7, #0]
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	4798      	blx	r3
 80053e6:	4603      	mov	r3, r0
 80053e8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80053ea:	e004      	b.n	80053f6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80053ec:	6839      	ldr	r1, [r7, #0]
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 fc03 	bl	8005bfa <USBD_CtlError>
              break;
 80053f4:	e000      	b.n	80053f8 <USBD_StdEPReq+0x1c8>
              break;
 80053f6:	bf00      	nop
          }
          break;
 80053f8:	e0ab      	b.n	8005552 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b02      	cmp	r3, #2
 8005404:	d002      	beq.n	800540c <USBD_StdEPReq+0x1dc>
 8005406:	2b03      	cmp	r3, #3
 8005408:	d032      	beq.n	8005470 <USBD_StdEPReq+0x240>
 800540a:	e097      	b.n	800553c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800540c:	7bbb      	ldrb	r3, [r7, #14]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d007      	beq.n	8005422 <USBD_StdEPReq+0x1f2>
 8005412:	7bbb      	ldrb	r3, [r7, #14]
 8005414:	2b80      	cmp	r3, #128	@ 0x80
 8005416:	d004      	beq.n	8005422 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005418:	6839      	ldr	r1, [r7, #0]
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 fbed 	bl	8005bfa <USBD_CtlError>
                break;
 8005420:	e091      	b.n	8005546 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005422:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005426:	2b00      	cmp	r3, #0
 8005428:	da0b      	bge.n	8005442 <USBD_StdEPReq+0x212>
 800542a:	7bbb      	ldrb	r3, [r7, #14]
 800542c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005430:	4613      	mov	r3, r2
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	4413      	add	r3, r2
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	3310      	adds	r3, #16
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	4413      	add	r3, r2
 800543e:	3304      	adds	r3, #4
 8005440:	e00b      	b.n	800545a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005442:	7bbb      	ldrb	r3, [r7, #14]
 8005444:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005448:	4613      	mov	r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4413      	add	r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	4413      	add	r3, r2
 8005458:	3304      	adds	r3, #4
 800545a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	2200      	movs	r2, #0
 8005460:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	2202      	movs	r2, #2
 8005466:	4619      	mov	r1, r3
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 fc43 	bl	8005cf4 <USBD_CtlSendData>
              break;
 800546e:	e06a      	b.n	8005546 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005470:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005474:	2b00      	cmp	r3, #0
 8005476:	da11      	bge.n	800549c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005478:	7bbb      	ldrb	r3, [r7, #14]
 800547a:	f003 020f 	and.w	r2, r3, #15
 800547e:	6879      	ldr	r1, [r7, #4]
 8005480:	4613      	mov	r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	4413      	add	r3, r2
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	440b      	add	r3, r1
 800548a:	3324      	adds	r3, #36	@ 0x24
 800548c:	881b      	ldrh	r3, [r3, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d117      	bne.n	80054c2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005492:	6839      	ldr	r1, [r7, #0]
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f000 fbb0 	bl	8005bfa <USBD_CtlError>
                  break;
 800549a:	e054      	b.n	8005546 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800549c:	7bbb      	ldrb	r3, [r7, #14]
 800549e:	f003 020f 	and.w	r2, r3, #15
 80054a2:	6879      	ldr	r1, [r7, #4]
 80054a4:	4613      	mov	r3, r2
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	4413      	add	r3, r2
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	440b      	add	r3, r1
 80054ae:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80054b2:	881b      	ldrh	r3, [r3, #0]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d104      	bne.n	80054c2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80054b8:	6839      	ldr	r1, [r7, #0]
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 fb9d 	bl	8005bfa <USBD_CtlError>
                  break;
 80054c0:	e041      	b.n	8005546 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80054c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	da0b      	bge.n	80054e2 <USBD_StdEPReq+0x2b2>
 80054ca:	7bbb      	ldrb	r3, [r7, #14]
 80054cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80054d0:	4613      	mov	r3, r2
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	4413      	add	r3, r2
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	3310      	adds	r3, #16
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	4413      	add	r3, r2
 80054de:	3304      	adds	r3, #4
 80054e0:	e00b      	b.n	80054fa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80054e2:	7bbb      	ldrb	r3, [r7, #14]
 80054e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80054e8:	4613      	mov	r3, r2
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	4413      	add	r3, r2
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	4413      	add	r3, r2
 80054f8:	3304      	adds	r3, #4
 80054fa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80054fc:	7bbb      	ldrb	r3, [r7, #14]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d002      	beq.n	8005508 <USBD_StdEPReq+0x2d8>
 8005502:	7bbb      	ldrb	r3, [r7, #14]
 8005504:	2b80      	cmp	r3, #128	@ 0x80
 8005506:	d103      	bne.n	8005510 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	2200      	movs	r2, #0
 800550c:	601a      	str	r2, [r3, #0]
 800550e:	e00e      	b.n	800552e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005510:	7bbb      	ldrb	r3, [r7, #14]
 8005512:	4619      	mov	r1, r3
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f001 f87d 	bl	8006614 <USBD_LL_IsStallEP>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d003      	beq.n	8005528 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	2201      	movs	r2, #1
 8005524:	601a      	str	r2, [r3, #0]
 8005526:	e002      	b.n	800552e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	2200      	movs	r2, #0
 800552c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	2202      	movs	r2, #2
 8005532:	4619      	mov	r1, r3
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 fbdd 	bl	8005cf4 <USBD_CtlSendData>
              break;
 800553a:	e004      	b.n	8005546 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800553c:	6839      	ldr	r1, [r7, #0]
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 fb5b 	bl	8005bfa <USBD_CtlError>
              break;
 8005544:	bf00      	nop
          }
          break;
 8005546:	e004      	b.n	8005552 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005548:	6839      	ldr	r1, [r7, #0]
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 fb55 	bl	8005bfa <USBD_CtlError>
          break;
 8005550:	bf00      	nop
      }
      break;
 8005552:	e005      	b.n	8005560 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005554:	6839      	ldr	r1, [r7, #0]
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 fb4f 	bl	8005bfa <USBD_CtlError>
      break;
 800555c:	e000      	b.n	8005560 <USBD_StdEPReq+0x330>
      break;
 800555e:	bf00      	nop
  }

  return ret;
 8005560:	7bfb      	ldrb	r3, [r7, #15]
}
 8005562:	4618      	mov	r0, r3
 8005564:	3710      	adds	r7, #16
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
	...

0800556c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005576:	2300      	movs	r3, #0
 8005578:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800557a:	2300      	movs	r3, #0
 800557c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800557e:	2300      	movs	r3, #0
 8005580:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	885b      	ldrh	r3, [r3, #2]
 8005586:	0a1b      	lsrs	r3, r3, #8
 8005588:	b29b      	uxth	r3, r3
 800558a:	3b01      	subs	r3, #1
 800558c:	2b06      	cmp	r3, #6
 800558e:	f200 8128 	bhi.w	80057e2 <USBD_GetDescriptor+0x276>
 8005592:	a201      	add	r2, pc, #4	@ (adr r2, 8005598 <USBD_GetDescriptor+0x2c>)
 8005594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005598:	080055b5 	.word	0x080055b5
 800559c:	080055cd 	.word	0x080055cd
 80055a0:	0800560d 	.word	0x0800560d
 80055a4:	080057e3 	.word	0x080057e3
 80055a8:	080057e3 	.word	0x080057e3
 80055ac:	08005783 	.word	0x08005783
 80055b0:	080057af 	.word	0x080057af
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	7c12      	ldrb	r2, [r2, #16]
 80055c0:	f107 0108 	add.w	r1, r7, #8
 80055c4:	4610      	mov	r0, r2
 80055c6:	4798      	blx	r3
 80055c8:	60f8      	str	r0, [r7, #12]
      break;
 80055ca:	e112      	b.n	80057f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	7c1b      	ldrb	r3, [r3, #16]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d10d      	bne.n	80055f0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80055da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055dc:	f107 0208 	add.w	r2, r7, #8
 80055e0:	4610      	mov	r0, r2
 80055e2:	4798      	blx	r3
 80055e4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	3301      	adds	r3, #1
 80055ea:	2202      	movs	r2, #2
 80055ec:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80055ee:	e100      	b.n	80057f2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80055f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f8:	f107 0208 	add.w	r2, r7, #8
 80055fc:	4610      	mov	r0, r2
 80055fe:	4798      	blx	r3
 8005600:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	3301      	adds	r3, #1
 8005606:	2202      	movs	r2, #2
 8005608:	701a      	strb	r2, [r3, #0]
      break;
 800560a:	e0f2      	b.n	80057f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	885b      	ldrh	r3, [r3, #2]
 8005610:	b2db      	uxtb	r3, r3
 8005612:	2b05      	cmp	r3, #5
 8005614:	f200 80ac 	bhi.w	8005770 <USBD_GetDescriptor+0x204>
 8005618:	a201      	add	r2, pc, #4	@ (adr r2, 8005620 <USBD_GetDescriptor+0xb4>)
 800561a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800561e:	bf00      	nop
 8005620:	08005639 	.word	0x08005639
 8005624:	0800566d 	.word	0x0800566d
 8005628:	080056a1 	.word	0x080056a1
 800562c:	080056d5 	.word	0x080056d5
 8005630:	08005709 	.word	0x08005709
 8005634:	0800573d 	.word	0x0800573d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d00b      	beq.n	800565c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	7c12      	ldrb	r2, [r2, #16]
 8005650:	f107 0108 	add.w	r1, r7, #8
 8005654:	4610      	mov	r0, r2
 8005656:	4798      	blx	r3
 8005658:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800565a:	e091      	b.n	8005780 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800565c:	6839      	ldr	r1, [r7, #0]
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 facb 	bl	8005bfa <USBD_CtlError>
            err++;
 8005664:	7afb      	ldrb	r3, [r7, #11]
 8005666:	3301      	adds	r3, #1
 8005668:	72fb      	strb	r3, [r7, #11]
          break;
 800566a:	e089      	b.n	8005780 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00b      	beq.n	8005690 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	7c12      	ldrb	r2, [r2, #16]
 8005684:	f107 0108 	add.w	r1, r7, #8
 8005688:	4610      	mov	r0, r2
 800568a:	4798      	blx	r3
 800568c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800568e:	e077      	b.n	8005780 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005690:	6839      	ldr	r1, [r7, #0]
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 fab1 	bl	8005bfa <USBD_CtlError>
            err++;
 8005698:	7afb      	ldrb	r3, [r7, #11]
 800569a:	3301      	adds	r3, #1
 800569c:	72fb      	strb	r3, [r7, #11]
          break;
 800569e:	e06f      	b.n	8005780 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d00b      	beq.n	80056c4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	7c12      	ldrb	r2, [r2, #16]
 80056b8:	f107 0108 	add.w	r1, r7, #8
 80056bc:	4610      	mov	r0, r2
 80056be:	4798      	blx	r3
 80056c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80056c2:	e05d      	b.n	8005780 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80056c4:	6839      	ldr	r1, [r7, #0]
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 fa97 	bl	8005bfa <USBD_CtlError>
            err++;
 80056cc:	7afb      	ldrb	r3, [r7, #11]
 80056ce:	3301      	adds	r3, #1
 80056d0:	72fb      	strb	r3, [r7, #11]
          break;
 80056d2:	e055      	b.n	8005780 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d00b      	beq.n	80056f8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	7c12      	ldrb	r2, [r2, #16]
 80056ec:	f107 0108 	add.w	r1, r7, #8
 80056f0:	4610      	mov	r0, r2
 80056f2:	4798      	blx	r3
 80056f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80056f6:	e043      	b.n	8005780 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80056f8:	6839      	ldr	r1, [r7, #0]
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 fa7d 	bl	8005bfa <USBD_CtlError>
            err++;
 8005700:	7afb      	ldrb	r3, [r7, #11]
 8005702:	3301      	adds	r3, #1
 8005704:	72fb      	strb	r3, [r7, #11]
          break;
 8005706:	e03b      	b.n	8005780 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800570e:	695b      	ldr	r3, [r3, #20]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00b      	beq.n	800572c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800571a:	695b      	ldr	r3, [r3, #20]
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	7c12      	ldrb	r2, [r2, #16]
 8005720:	f107 0108 	add.w	r1, r7, #8
 8005724:	4610      	mov	r0, r2
 8005726:	4798      	blx	r3
 8005728:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800572a:	e029      	b.n	8005780 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800572c:	6839      	ldr	r1, [r7, #0]
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 fa63 	bl	8005bfa <USBD_CtlError>
            err++;
 8005734:	7afb      	ldrb	r3, [r7, #11]
 8005736:	3301      	adds	r3, #1
 8005738:	72fb      	strb	r3, [r7, #11]
          break;
 800573a:	e021      	b.n	8005780 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005742:	699b      	ldr	r3, [r3, #24]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d00b      	beq.n	8005760 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800574e:	699b      	ldr	r3, [r3, #24]
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	7c12      	ldrb	r2, [r2, #16]
 8005754:	f107 0108 	add.w	r1, r7, #8
 8005758:	4610      	mov	r0, r2
 800575a:	4798      	blx	r3
 800575c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800575e:	e00f      	b.n	8005780 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005760:	6839      	ldr	r1, [r7, #0]
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 fa49 	bl	8005bfa <USBD_CtlError>
            err++;
 8005768:	7afb      	ldrb	r3, [r7, #11]
 800576a:	3301      	adds	r3, #1
 800576c:	72fb      	strb	r3, [r7, #11]
          break;
 800576e:	e007      	b.n	8005780 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005770:	6839      	ldr	r1, [r7, #0]
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 fa41 	bl	8005bfa <USBD_CtlError>
          err++;
 8005778:	7afb      	ldrb	r3, [r7, #11]
 800577a:	3301      	adds	r3, #1
 800577c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800577e:	bf00      	nop
      }
      break;
 8005780:	e037      	b.n	80057f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	7c1b      	ldrb	r3, [r3, #16]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d109      	bne.n	800579e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005790:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005792:	f107 0208 	add.w	r2, r7, #8
 8005796:	4610      	mov	r0, r2
 8005798:	4798      	blx	r3
 800579a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800579c:	e029      	b.n	80057f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800579e:	6839      	ldr	r1, [r7, #0]
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 fa2a 	bl	8005bfa <USBD_CtlError>
        err++;
 80057a6:	7afb      	ldrb	r3, [r7, #11]
 80057a8:	3301      	adds	r3, #1
 80057aa:	72fb      	strb	r3, [r7, #11]
      break;
 80057ac:	e021      	b.n	80057f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	7c1b      	ldrb	r3, [r3, #16]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d10d      	bne.n	80057d2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80057bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057be:	f107 0208 	add.w	r2, r7, #8
 80057c2:	4610      	mov	r0, r2
 80057c4:	4798      	blx	r3
 80057c6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	3301      	adds	r3, #1
 80057cc:	2207      	movs	r2, #7
 80057ce:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80057d0:	e00f      	b.n	80057f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80057d2:	6839      	ldr	r1, [r7, #0]
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 fa10 	bl	8005bfa <USBD_CtlError>
        err++;
 80057da:	7afb      	ldrb	r3, [r7, #11]
 80057dc:	3301      	adds	r3, #1
 80057de:	72fb      	strb	r3, [r7, #11]
      break;
 80057e0:	e007      	b.n	80057f2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80057e2:	6839      	ldr	r1, [r7, #0]
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 fa08 	bl	8005bfa <USBD_CtlError>
      err++;
 80057ea:	7afb      	ldrb	r3, [r7, #11]
 80057ec:	3301      	adds	r3, #1
 80057ee:	72fb      	strb	r3, [r7, #11]
      break;
 80057f0:	bf00      	nop
  }

  if (err != 0U)
 80057f2:	7afb      	ldrb	r3, [r7, #11]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d11e      	bne.n	8005836 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	88db      	ldrh	r3, [r3, #6]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d016      	beq.n	800582e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005800:	893b      	ldrh	r3, [r7, #8]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00e      	beq.n	8005824 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	88da      	ldrh	r2, [r3, #6]
 800580a:	893b      	ldrh	r3, [r7, #8]
 800580c:	4293      	cmp	r3, r2
 800580e:	bf28      	it	cs
 8005810:	4613      	movcs	r3, r2
 8005812:	b29b      	uxth	r3, r3
 8005814:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005816:	893b      	ldrh	r3, [r7, #8]
 8005818:	461a      	mov	r2, r3
 800581a:	68f9      	ldr	r1, [r7, #12]
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 fa69 	bl	8005cf4 <USBD_CtlSendData>
 8005822:	e009      	b.n	8005838 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005824:	6839      	ldr	r1, [r7, #0]
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 f9e7 	bl	8005bfa <USBD_CtlError>
 800582c:	e004      	b.n	8005838 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 faba 	bl	8005da8 <USBD_CtlSendStatus>
 8005834:	e000      	b.n	8005838 <USBD_GetDescriptor+0x2cc>
    return;
 8005836:	bf00      	nop
  }
}
 8005838:	3710      	adds	r7, #16
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop

08005840 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	889b      	ldrh	r3, [r3, #4]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d131      	bne.n	80058b6 <USBD_SetAddress+0x76>
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	88db      	ldrh	r3, [r3, #6]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d12d      	bne.n	80058b6 <USBD_SetAddress+0x76>
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	885b      	ldrh	r3, [r3, #2]
 800585e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005860:	d829      	bhi.n	80058b6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	885b      	ldrh	r3, [r3, #2]
 8005866:	b2db      	uxtb	r3, r3
 8005868:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800586c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005874:	b2db      	uxtb	r3, r3
 8005876:	2b03      	cmp	r3, #3
 8005878:	d104      	bne.n	8005884 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800587a:	6839      	ldr	r1, [r7, #0]
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 f9bc 	bl	8005bfa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005882:	e01d      	b.n	80058c0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	7bfa      	ldrb	r2, [r7, #15]
 8005888:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800588c:	7bfb      	ldrb	r3, [r7, #15]
 800588e:	4619      	mov	r1, r3
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f000 feeb 	bl	800666c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 fa86 	bl	8005da8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800589c:	7bfb      	ldrb	r3, [r7, #15]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d004      	beq.n	80058ac <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2202      	movs	r2, #2
 80058a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058aa:	e009      	b.n	80058c0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058b4:	e004      	b.n	80058c0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80058b6:	6839      	ldr	r1, [r7, #0]
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 f99e 	bl	8005bfa <USBD_CtlError>
  }
}
 80058be:	bf00      	nop
 80058c0:	bf00      	nop
 80058c2:	3710      	adds	r7, #16
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80058d2:	2300      	movs	r3, #0
 80058d4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	885b      	ldrh	r3, [r3, #2]
 80058da:	b2da      	uxtb	r2, r3
 80058dc:	4b4e      	ldr	r3, [pc, #312]	@ (8005a18 <USBD_SetConfig+0x150>)
 80058de:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80058e0:	4b4d      	ldr	r3, [pc, #308]	@ (8005a18 <USBD_SetConfig+0x150>)
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d905      	bls.n	80058f4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80058e8:	6839      	ldr	r1, [r7, #0]
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 f985 	bl	8005bfa <USBD_CtlError>
    return USBD_FAIL;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e08c      	b.n	8005a0e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d002      	beq.n	8005906 <USBD_SetConfig+0x3e>
 8005900:	2b03      	cmp	r3, #3
 8005902:	d029      	beq.n	8005958 <USBD_SetConfig+0x90>
 8005904:	e075      	b.n	80059f2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005906:	4b44      	ldr	r3, [pc, #272]	@ (8005a18 <USBD_SetConfig+0x150>)
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d020      	beq.n	8005950 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800590e:	4b42      	ldr	r3, [pc, #264]	@ (8005a18 <USBD_SetConfig+0x150>)
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	461a      	mov	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005918:	4b3f      	ldr	r3, [pc, #252]	@ (8005a18 <USBD_SetConfig+0x150>)
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	4619      	mov	r1, r3
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f7fe ffe3 	bl	80048ea <USBD_SetClassConfig>
 8005924:	4603      	mov	r3, r0
 8005926:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005928:	7bfb      	ldrb	r3, [r7, #15]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d008      	beq.n	8005940 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800592e:	6839      	ldr	r1, [r7, #0]
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 f962 	bl	8005bfa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2202      	movs	r2, #2
 800593a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800593e:	e065      	b.n	8005a0c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 fa31 	bl	8005da8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2203      	movs	r2, #3
 800594a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800594e:	e05d      	b.n	8005a0c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 fa29 	bl	8005da8 <USBD_CtlSendStatus>
      break;
 8005956:	e059      	b.n	8005a0c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005958:	4b2f      	ldr	r3, [pc, #188]	@ (8005a18 <USBD_SetConfig+0x150>)
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d112      	bne.n	8005986 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2202      	movs	r2, #2
 8005964:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8005968:	4b2b      	ldr	r3, [pc, #172]	@ (8005a18 <USBD_SetConfig+0x150>)
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	461a      	mov	r2, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005972:	4b29      	ldr	r3, [pc, #164]	@ (8005a18 <USBD_SetConfig+0x150>)
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	4619      	mov	r1, r3
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f7fe ffd2 	bl	8004922 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 fa12 	bl	8005da8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005984:	e042      	b.n	8005a0c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8005986:	4b24      	ldr	r3, [pc, #144]	@ (8005a18 <USBD_SetConfig+0x150>)
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	461a      	mov	r2, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	429a      	cmp	r2, r3
 8005992:	d02a      	beq.n	80059ea <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	b2db      	uxtb	r3, r3
 800599a:	4619      	mov	r1, r3
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f7fe ffc0 	bl	8004922 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80059a2:	4b1d      	ldr	r3, [pc, #116]	@ (8005a18 <USBD_SetConfig+0x150>)
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	461a      	mov	r2, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80059ac:	4b1a      	ldr	r3, [pc, #104]	@ (8005a18 <USBD_SetConfig+0x150>)
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	4619      	mov	r1, r3
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f7fe ff99 	bl	80048ea <USBD_SetClassConfig>
 80059b8:	4603      	mov	r3, r0
 80059ba:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80059bc:	7bfb      	ldrb	r3, [r7, #15]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00f      	beq.n	80059e2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80059c2:	6839      	ldr	r1, [r7, #0]
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 f918 	bl	8005bfa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	4619      	mov	r1, r3
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f7fe ffa5 	bl	8004922 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2202      	movs	r2, #2
 80059dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80059e0:	e014      	b.n	8005a0c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 f9e0 	bl	8005da8 <USBD_CtlSendStatus>
      break;
 80059e8:	e010      	b.n	8005a0c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 f9dc 	bl	8005da8 <USBD_CtlSendStatus>
      break;
 80059f0:	e00c      	b.n	8005a0c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80059f2:	6839      	ldr	r1, [r7, #0]
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 f900 	bl	8005bfa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80059fa:	4b07      	ldr	r3, [pc, #28]	@ (8005a18 <USBD_SetConfig+0x150>)
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	4619      	mov	r1, r3
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f7fe ff8e 	bl	8004922 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005a06:	2303      	movs	r3, #3
 8005a08:	73fb      	strb	r3, [r7, #15]
      break;
 8005a0a:	bf00      	nop
  }

  return ret;
 8005a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3710      	adds	r7, #16
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	20000188 	.word	0x20000188

08005a1c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b082      	sub	sp, #8
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	88db      	ldrh	r3, [r3, #6]
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d004      	beq.n	8005a38 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005a2e:	6839      	ldr	r1, [r7, #0]
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 f8e2 	bl	8005bfa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005a36:	e023      	b.n	8005a80 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	dc02      	bgt.n	8005a4a <USBD_GetConfig+0x2e>
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	dc03      	bgt.n	8005a50 <USBD_GetConfig+0x34>
 8005a48:	e015      	b.n	8005a76 <USBD_GetConfig+0x5a>
 8005a4a:	2b03      	cmp	r3, #3
 8005a4c:	d00b      	beq.n	8005a66 <USBD_GetConfig+0x4a>
 8005a4e:	e012      	b.n	8005a76 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	3308      	adds	r3, #8
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f948 	bl	8005cf4 <USBD_CtlSendData>
        break;
 8005a64:	e00c      	b.n	8005a80 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	3304      	adds	r3, #4
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 f940 	bl	8005cf4 <USBD_CtlSendData>
        break;
 8005a74:	e004      	b.n	8005a80 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005a76:	6839      	ldr	r1, [r7, #0]
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 f8be 	bl	8005bfa <USBD_CtlError>
        break;
 8005a7e:	bf00      	nop
}
 8005a80:	bf00      	nop
 8005a82:	3708      	adds	r7, #8
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	2b02      	cmp	r3, #2
 8005a9e:	d81e      	bhi.n	8005ade <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	88db      	ldrh	r3, [r3, #6]
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	d004      	beq.n	8005ab2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005aa8:	6839      	ldr	r1, [r7, #0]
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 f8a5 	bl	8005bfa <USBD_CtlError>
        break;
 8005ab0:	e01a      	b.n	8005ae8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d005      	beq.n	8005ace <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	f043 0202 	orr.w	r2, r3, #2
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	330c      	adds	r3, #12
 8005ad2:	2202      	movs	r2, #2
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 f90c 	bl	8005cf4 <USBD_CtlSendData>
      break;
 8005adc:	e004      	b.n	8005ae8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005ade:	6839      	ldr	r1, [r7, #0]
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 f88a 	bl	8005bfa <USBD_CtlError>
      break;
 8005ae6:	bf00      	nop
  }
}
 8005ae8:	bf00      	nop
 8005aea:	3708      	adds	r7, #8
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b082      	sub	sp, #8
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	885b      	ldrh	r3, [r3, #2]
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d107      	bne.n	8005b12 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2201      	movs	r2, #1
 8005b06:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 f94c 	bl	8005da8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8005b10:	e013      	b.n	8005b3a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	885b      	ldrh	r3, [r3, #2]
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	d10b      	bne.n	8005b32 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	889b      	ldrh	r3, [r3, #4]
 8005b1e:	0a1b      	lsrs	r3, r3, #8
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	b2da      	uxtb	r2, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 f93c 	bl	8005da8 <USBD_CtlSendStatus>
}
 8005b30:	e003      	b.n	8005b3a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8005b32:	6839      	ldr	r1, [r7, #0]
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 f860 	bl	8005bfa <USBD_CtlError>
}
 8005b3a:	bf00      	nop
 8005b3c:	3708      	adds	r7, #8
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b42:	b580      	push	{r7, lr}
 8005b44:	b082      	sub	sp, #8
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
 8005b4a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	3b01      	subs	r3, #1
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d80b      	bhi.n	8005b72 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	885b      	ldrh	r3, [r3, #2]
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d10c      	bne.n	8005b7c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 f91c 	bl	8005da8 <USBD_CtlSendStatus>
      }
      break;
 8005b70:	e004      	b.n	8005b7c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005b72:	6839      	ldr	r1, [r7, #0]
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 f840 	bl	8005bfa <USBD_CtlError>
      break;
 8005b7a:	e000      	b.n	8005b7e <USBD_ClrFeature+0x3c>
      break;
 8005b7c:	bf00      	nop
  }
}
 8005b7e:	bf00      	nop
 8005b80:	3708      	adds	r7, #8
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}

08005b86 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005b86:	b580      	push	{r7, lr}
 8005b88:	b084      	sub	sp, #16
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
 8005b8e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	781a      	ldrb	r2, [r3, #0]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	781a      	ldrb	r2, [r3, #0]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	3301      	adds	r3, #1
 8005bae:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f7ff fa40 	bl	8005036 <SWAPBYTE>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	461a      	mov	r2, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	f7ff fa33 	bl	8005036 <SWAPBYTE>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	3301      	adds	r3, #1
 8005bdc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	3301      	adds	r3, #1
 8005be2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005be4:	68f8      	ldr	r0, [r7, #12]
 8005be6:	f7ff fa26 	bl	8005036 <SWAPBYTE>
 8005bea:	4603      	mov	r3, r0
 8005bec:	461a      	mov	r2, r3
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	80da      	strh	r2, [r3, #6]
}
 8005bf2:	bf00      	nop
 8005bf4:	3710      	adds	r7, #16
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}

08005bfa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b082      	sub	sp, #8
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
 8005c02:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005c04:	2180      	movs	r1, #128	@ 0x80
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f000 fcc6 	bl	8006598 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005c0c:	2100      	movs	r1, #0
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 fcc2 	bl	8006598 <USBD_LL_StallEP>
}
 8005c14:	bf00      	nop
 8005c16:	3708      	adds	r7, #8
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b086      	sub	sp, #24
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d042      	beq.n	8005cb8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8005c36:	6938      	ldr	r0, [r7, #16]
 8005c38:	f000 f842 	bl	8005cc0 <USBD_GetLen>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	3301      	adds	r3, #1
 8005c40:	005b      	lsls	r3, r3, #1
 8005c42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c46:	d808      	bhi.n	8005c5a <USBD_GetString+0x3e>
 8005c48:	6938      	ldr	r0, [r7, #16]
 8005c4a:	f000 f839 	bl	8005cc0 <USBD_GetLen>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	3301      	adds	r3, #1
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	005b      	lsls	r3, r3, #1
 8005c56:	b29a      	uxth	r2, r3
 8005c58:	e001      	b.n	8005c5e <USBD_GetString+0x42>
 8005c5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005c62:	7dfb      	ldrb	r3, [r7, #23]
 8005c64:	68ba      	ldr	r2, [r7, #8]
 8005c66:	4413      	add	r3, r2
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	7812      	ldrb	r2, [r2, #0]
 8005c6c:	701a      	strb	r2, [r3, #0]
  idx++;
 8005c6e:	7dfb      	ldrb	r3, [r7, #23]
 8005c70:	3301      	adds	r3, #1
 8005c72:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005c74:	7dfb      	ldrb	r3, [r7, #23]
 8005c76:	68ba      	ldr	r2, [r7, #8]
 8005c78:	4413      	add	r3, r2
 8005c7a:	2203      	movs	r2, #3
 8005c7c:	701a      	strb	r2, [r3, #0]
  idx++;
 8005c7e:	7dfb      	ldrb	r3, [r7, #23]
 8005c80:	3301      	adds	r3, #1
 8005c82:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005c84:	e013      	b.n	8005cae <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8005c86:	7dfb      	ldrb	r3, [r7, #23]
 8005c88:	68ba      	ldr	r2, [r7, #8]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	693a      	ldr	r2, [r7, #16]
 8005c8e:	7812      	ldrb	r2, [r2, #0]
 8005c90:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	3301      	adds	r3, #1
 8005c96:	613b      	str	r3, [r7, #16]
    idx++;
 8005c98:	7dfb      	ldrb	r3, [r7, #23]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005c9e:	7dfb      	ldrb	r3, [r7, #23]
 8005ca0:	68ba      	ldr	r2, [r7, #8]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	701a      	strb	r2, [r3, #0]
    idx++;
 8005ca8:	7dfb      	ldrb	r3, [r7, #23]
 8005caa:	3301      	adds	r3, #1
 8005cac:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d1e7      	bne.n	8005c86 <USBD_GetString+0x6a>
 8005cb6:	e000      	b.n	8005cba <USBD_GetString+0x9e>
    return;
 8005cb8:	bf00      	nop
  }
}
 8005cba:	3718      	adds	r7, #24
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b085      	sub	sp, #20
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005cd0:	e005      	b.n	8005cde <USBD_GetLen+0x1e>
  {
    len++;
 8005cd2:	7bfb      	ldrb	r3, [r7, #15]
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	3301      	adds	r3, #1
 8005cdc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1f5      	bne.n	8005cd2 <USBD_GetLen+0x12>
  }

  return len;
 8005ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3714      	adds	r7, #20
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2202      	movs	r2, #2
 8005d04:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	68ba      	ldr	r2, [r7, #8]
 8005d18:	2100      	movs	r1, #0
 8005d1a:	68f8      	ldr	r0, [r7, #12]
 8005d1c:	f000 fcc5 	bl	80066aa <USBD_LL_Transmit>

  return USBD_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3710      	adds	r7, #16
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}

08005d2a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005d2a:	b580      	push	{r7, lr}
 8005d2c:	b084      	sub	sp, #16
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	60f8      	str	r0, [r7, #12]
 8005d32:	60b9      	str	r1, [r7, #8]
 8005d34:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	68ba      	ldr	r2, [r7, #8]
 8005d3a:	2100      	movs	r1, #0
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	f000 fcb4 	bl	80066aa <USBD_LL_Transmit>

  return USBD_OK;
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3710      	adds	r7, #16
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2203      	movs	r2, #3
 8005d5c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	68ba      	ldr	r2, [r7, #8]
 8005d74:	2100      	movs	r1, #0
 8005d76:	68f8      	ldr	r0, [r7, #12]
 8005d78:	f000 fcb8 	bl	80066ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3710      	adds	r7, #16
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}

08005d86 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b084      	sub	sp, #16
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	60f8      	str	r0, [r7, #12]
 8005d8e:	60b9      	str	r1, [r7, #8]
 8005d90:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	68ba      	ldr	r2, [r7, #8]
 8005d96:	2100      	movs	r1, #0
 8005d98:	68f8      	ldr	r0, [r7, #12]
 8005d9a:	f000 fca7 	bl	80066ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3710      	adds	r7, #16
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2204      	movs	r2, #4
 8005db4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005db8:	2300      	movs	r3, #0
 8005dba:	2200      	movs	r2, #0
 8005dbc:	2100      	movs	r1, #0
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 fc73 	bl	80066aa <USBD_LL_Transmit>

  return USBD_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3708      	adds	r7, #8
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b082      	sub	sp, #8
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2205      	movs	r2, #5
 8005dda:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005dde:	2300      	movs	r3, #0
 8005de0:	2200      	movs	r2, #0
 8005de2:	2100      	movs	r1, #0
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 fc81 	bl	80066ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3708      	adds	r7, #8
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005df8:	2200      	movs	r2, #0
 8005dfa:	4912      	ldr	r1, [pc, #72]	@ (8005e44 <MX_USB_DEVICE_Init+0x50>)
 8005dfc:	4812      	ldr	r0, [pc, #72]	@ (8005e48 <MX_USB_DEVICE_Init+0x54>)
 8005dfe:	f7fe fcf7 	bl	80047f0 <USBD_Init>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d001      	beq.n	8005e0c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005e08:	f7fa fe56 	bl	8000ab8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005e0c:	490f      	ldr	r1, [pc, #60]	@ (8005e4c <MX_USB_DEVICE_Init+0x58>)
 8005e0e:	480e      	ldr	r0, [pc, #56]	@ (8005e48 <MX_USB_DEVICE_Init+0x54>)
 8005e10:	f7fe fd1e 	bl	8004850 <USBD_RegisterClass>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d001      	beq.n	8005e1e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005e1a:	f7fa fe4d 	bl	8000ab8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005e1e:	490c      	ldr	r1, [pc, #48]	@ (8005e50 <MX_USB_DEVICE_Init+0x5c>)
 8005e20:	4809      	ldr	r0, [pc, #36]	@ (8005e48 <MX_USB_DEVICE_Init+0x54>)
 8005e22:	f7fe fc55 	bl	80046d0 <USBD_CDC_RegisterInterface>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d001      	beq.n	8005e30 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005e2c:	f7fa fe44 	bl	8000ab8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005e30:	4805      	ldr	r0, [pc, #20]	@ (8005e48 <MX_USB_DEVICE_Init+0x54>)
 8005e32:	f7fe fd43 	bl	80048bc <USBD_Start>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d001      	beq.n	8005e40 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005e3c:	f7fa fe3c 	bl	8000ab8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005e40:	bf00      	nop
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	200000b0 	.word	0x200000b0
 8005e48:	2000018c 	.word	0x2000018c
 8005e4c:	2000001c 	.word	0x2000001c
 8005e50:	2000009c 	.word	0x2000009c

08005e54 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005e58:	2200      	movs	r2, #0
 8005e5a:	4905      	ldr	r1, [pc, #20]	@ (8005e70 <CDC_Init_FS+0x1c>)
 8005e5c:	4805      	ldr	r0, [pc, #20]	@ (8005e74 <CDC_Init_FS+0x20>)
 8005e5e:	f7fe fc51 	bl	8004704 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005e62:	4905      	ldr	r1, [pc, #20]	@ (8005e78 <CDC_Init_FS+0x24>)
 8005e64:	4803      	ldr	r0, [pc, #12]	@ (8005e74 <CDC_Init_FS+0x20>)
 8005e66:	f7fe fc6f 	bl	8004748 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8005e6a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	20000c68 	.word	0x20000c68
 8005e74:	2000018c 	.word	0x2000018c
 8005e78:	20000468 	.word	0x20000468

08005e7c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005e80:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	4603      	mov	r3, r0
 8005e94:	6039      	str	r1, [r7, #0]
 8005e96:	71fb      	strb	r3, [r7, #7]
 8005e98:	4613      	mov	r3, r2
 8005e9a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005e9c:	79fb      	ldrb	r3, [r7, #7]
 8005e9e:	2b23      	cmp	r3, #35	@ 0x23
 8005ea0:	d84a      	bhi.n	8005f38 <CDC_Control_FS+0xac>
 8005ea2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ea8 <CDC_Control_FS+0x1c>)
 8005ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea8:	08005f39 	.word	0x08005f39
 8005eac:	08005f39 	.word	0x08005f39
 8005eb0:	08005f39 	.word	0x08005f39
 8005eb4:	08005f39 	.word	0x08005f39
 8005eb8:	08005f39 	.word	0x08005f39
 8005ebc:	08005f39 	.word	0x08005f39
 8005ec0:	08005f39 	.word	0x08005f39
 8005ec4:	08005f39 	.word	0x08005f39
 8005ec8:	08005f39 	.word	0x08005f39
 8005ecc:	08005f39 	.word	0x08005f39
 8005ed0:	08005f39 	.word	0x08005f39
 8005ed4:	08005f39 	.word	0x08005f39
 8005ed8:	08005f39 	.word	0x08005f39
 8005edc:	08005f39 	.word	0x08005f39
 8005ee0:	08005f39 	.word	0x08005f39
 8005ee4:	08005f39 	.word	0x08005f39
 8005ee8:	08005f39 	.word	0x08005f39
 8005eec:	08005f39 	.word	0x08005f39
 8005ef0:	08005f39 	.word	0x08005f39
 8005ef4:	08005f39 	.word	0x08005f39
 8005ef8:	08005f39 	.word	0x08005f39
 8005efc:	08005f39 	.word	0x08005f39
 8005f00:	08005f39 	.word	0x08005f39
 8005f04:	08005f39 	.word	0x08005f39
 8005f08:	08005f39 	.word	0x08005f39
 8005f0c:	08005f39 	.word	0x08005f39
 8005f10:	08005f39 	.word	0x08005f39
 8005f14:	08005f39 	.word	0x08005f39
 8005f18:	08005f39 	.word	0x08005f39
 8005f1c:	08005f39 	.word	0x08005f39
 8005f20:	08005f39 	.word	0x08005f39
 8005f24:	08005f39 	.word	0x08005f39
 8005f28:	08005f39 	.word	0x08005f39
 8005f2c:	08005f39 	.word	0x08005f39
 8005f30:	08005f39 	.word	0x08005f39
 8005f34:	08005f39 	.word	0x08005f39
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8005f38:	bf00      	nop
  }

  return (USBD_OK);
 8005f3a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005f52:	6879      	ldr	r1, [r7, #4]
 8005f54:	4805      	ldr	r0, [pc, #20]	@ (8005f6c <CDC_Receive_FS+0x24>)
 8005f56:	f7fe fbf7 	bl	8004748 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005f5a:	4804      	ldr	r0, [pc, #16]	@ (8005f6c <CDC_Receive_FS+0x24>)
 8005f5c:	f7fe fc12 	bl	8004784 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8005f60:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3708      	adds	r7, #8
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	2000018c 	.word	0x2000018c

08005f70 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b087      	sub	sp, #28
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8005f82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	371c      	adds	r7, #28
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
	...

08005f94 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	6039      	str	r1, [r7, #0]
 8005f9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	2212      	movs	r2, #18
 8005fa4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005fa6:	4b03      	ldr	r3, [pc, #12]	@ (8005fb4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr
 8005fb4:	200000cc 	.word	0x200000cc

08005fb8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	6039      	str	r1, [r7, #0]
 8005fc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	2204      	movs	r2, #4
 8005fc8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005fca:	4b03      	ldr	r3, [pc, #12]	@ (8005fd8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	370c      	adds	r7, #12
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr
 8005fd8:	200000e0 	.word	0x200000e0

08005fdc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	6039      	str	r1, [r7, #0]
 8005fe6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005fe8:	79fb      	ldrb	r3, [r7, #7]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d105      	bne.n	8005ffa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005fee:	683a      	ldr	r2, [r7, #0]
 8005ff0:	4907      	ldr	r1, [pc, #28]	@ (8006010 <USBD_FS_ProductStrDescriptor+0x34>)
 8005ff2:	4808      	ldr	r0, [pc, #32]	@ (8006014 <USBD_FS_ProductStrDescriptor+0x38>)
 8005ff4:	f7ff fe12 	bl	8005c1c <USBD_GetString>
 8005ff8:	e004      	b.n	8006004 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005ffa:	683a      	ldr	r2, [r7, #0]
 8005ffc:	4904      	ldr	r1, [pc, #16]	@ (8006010 <USBD_FS_ProductStrDescriptor+0x34>)
 8005ffe:	4805      	ldr	r0, [pc, #20]	@ (8006014 <USBD_FS_ProductStrDescriptor+0x38>)
 8006000:	f7ff fe0c 	bl	8005c1c <USBD_GetString>
  }
  return USBD_StrDesc;
 8006004:	4b02      	ldr	r3, [pc, #8]	@ (8006010 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006006:	4618      	mov	r0, r3
 8006008:	3708      	adds	r7, #8
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	20001468 	.word	0x20001468
 8006014:	08007164 	.word	0x08007164

08006018 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
 800601e:	4603      	mov	r3, r0
 8006020:	6039      	str	r1, [r7, #0]
 8006022:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006024:	683a      	ldr	r2, [r7, #0]
 8006026:	4904      	ldr	r1, [pc, #16]	@ (8006038 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006028:	4804      	ldr	r0, [pc, #16]	@ (800603c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800602a:	f7ff fdf7 	bl	8005c1c <USBD_GetString>
  return USBD_StrDesc;
 800602e:	4b02      	ldr	r3, [pc, #8]	@ (8006038 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006030:	4618      	mov	r0, r3
 8006032:	3708      	adds	r7, #8
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}
 8006038:	20001468 	.word	0x20001468
 800603c:	0800717c 	.word	0x0800717c

08006040 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b082      	sub	sp, #8
 8006044:	af00      	add	r7, sp, #0
 8006046:	4603      	mov	r3, r0
 8006048:	6039      	str	r1, [r7, #0]
 800604a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	221a      	movs	r2, #26
 8006050:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006052:	f000 f843 	bl	80060dc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006056:	4b02      	ldr	r3, [pc, #8]	@ (8006060 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006058:	4618      	mov	r0, r3
 800605a:	3708      	adds	r7, #8
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}
 8006060:	200000e4 	.word	0x200000e4

08006064 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b082      	sub	sp, #8
 8006068:	af00      	add	r7, sp, #0
 800606a:	4603      	mov	r3, r0
 800606c:	6039      	str	r1, [r7, #0]
 800606e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006070:	79fb      	ldrb	r3, [r7, #7]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d105      	bne.n	8006082 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006076:	683a      	ldr	r2, [r7, #0]
 8006078:	4907      	ldr	r1, [pc, #28]	@ (8006098 <USBD_FS_ConfigStrDescriptor+0x34>)
 800607a:	4808      	ldr	r0, [pc, #32]	@ (800609c <USBD_FS_ConfigStrDescriptor+0x38>)
 800607c:	f7ff fdce 	bl	8005c1c <USBD_GetString>
 8006080:	e004      	b.n	800608c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006082:	683a      	ldr	r2, [r7, #0]
 8006084:	4904      	ldr	r1, [pc, #16]	@ (8006098 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006086:	4805      	ldr	r0, [pc, #20]	@ (800609c <USBD_FS_ConfigStrDescriptor+0x38>)
 8006088:	f7ff fdc8 	bl	8005c1c <USBD_GetString>
  }
  return USBD_StrDesc;
 800608c:	4b02      	ldr	r3, [pc, #8]	@ (8006098 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800608e:	4618      	mov	r0, r3
 8006090:	3708      	adds	r7, #8
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	20001468 	.word	0x20001468
 800609c:	08007190 	.word	0x08007190

080060a0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b082      	sub	sp, #8
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	4603      	mov	r3, r0
 80060a8:	6039      	str	r1, [r7, #0]
 80060aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80060ac:	79fb      	ldrb	r3, [r7, #7]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d105      	bne.n	80060be <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80060b2:	683a      	ldr	r2, [r7, #0]
 80060b4:	4907      	ldr	r1, [pc, #28]	@ (80060d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80060b6:	4808      	ldr	r0, [pc, #32]	@ (80060d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80060b8:	f7ff fdb0 	bl	8005c1c <USBD_GetString>
 80060bc:	e004      	b.n	80060c8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80060be:	683a      	ldr	r2, [r7, #0]
 80060c0:	4904      	ldr	r1, [pc, #16]	@ (80060d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80060c2:	4805      	ldr	r0, [pc, #20]	@ (80060d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80060c4:	f7ff fdaa 	bl	8005c1c <USBD_GetString>
  }
  return USBD_StrDesc;
 80060c8:	4b02      	ldr	r3, [pc, #8]	@ (80060d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3708      	adds	r7, #8
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	20001468 	.word	0x20001468
 80060d8:	0800719c 	.word	0x0800719c

080060dc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80060e2:	4b0f      	ldr	r3, [pc, #60]	@ (8006120 <Get_SerialNum+0x44>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80060e8:	4b0e      	ldr	r3, [pc, #56]	@ (8006124 <Get_SerialNum+0x48>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80060ee:	4b0e      	ldr	r3, [pc, #56]	@ (8006128 <Get_SerialNum+0x4c>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80060f4:	68fa      	ldr	r2, [r7, #12]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4413      	add	r3, r2
 80060fa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d009      	beq.n	8006116 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006102:	2208      	movs	r2, #8
 8006104:	4909      	ldr	r1, [pc, #36]	@ (800612c <Get_SerialNum+0x50>)
 8006106:	68f8      	ldr	r0, [r7, #12]
 8006108:	f000 f814 	bl	8006134 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800610c:	2204      	movs	r2, #4
 800610e:	4908      	ldr	r1, [pc, #32]	@ (8006130 <Get_SerialNum+0x54>)
 8006110:	68b8      	ldr	r0, [r7, #8]
 8006112:	f000 f80f 	bl	8006134 <IntToUnicode>
  }
}
 8006116:	bf00      	nop
 8006118:	3710      	adds	r7, #16
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	1fff7a10 	.word	0x1fff7a10
 8006124:	1fff7a14 	.word	0x1fff7a14
 8006128:	1fff7a18 	.word	0x1fff7a18
 800612c:	200000e6 	.word	0x200000e6
 8006130:	200000f6 	.word	0x200000f6

08006134 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006134:	b480      	push	{r7}
 8006136:	b087      	sub	sp, #28
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	4613      	mov	r3, r2
 8006140:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006142:	2300      	movs	r3, #0
 8006144:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006146:	2300      	movs	r3, #0
 8006148:	75fb      	strb	r3, [r7, #23]
 800614a:	e027      	b.n	800619c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	0f1b      	lsrs	r3, r3, #28
 8006150:	2b09      	cmp	r3, #9
 8006152:	d80b      	bhi.n	800616c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	0f1b      	lsrs	r3, r3, #28
 8006158:	b2da      	uxtb	r2, r3
 800615a:	7dfb      	ldrb	r3, [r7, #23]
 800615c:	005b      	lsls	r3, r3, #1
 800615e:	4619      	mov	r1, r3
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	440b      	add	r3, r1
 8006164:	3230      	adds	r2, #48	@ 0x30
 8006166:	b2d2      	uxtb	r2, r2
 8006168:	701a      	strb	r2, [r3, #0]
 800616a:	e00a      	b.n	8006182 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	0f1b      	lsrs	r3, r3, #28
 8006170:	b2da      	uxtb	r2, r3
 8006172:	7dfb      	ldrb	r3, [r7, #23]
 8006174:	005b      	lsls	r3, r3, #1
 8006176:	4619      	mov	r1, r3
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	440b      	add	r3, r1
 800617c:	3237      	adds	r2, #55	@ 0x37
 800617e:	b2d2      	uxtb	r2, r2
 8006180:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	011b      	lsls	r3, r3, #4
 8006186:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006188:	7dfb      	ldrb	r3, [r7, #23]
 800618a:	005b      	lsls	r3, r3, #1
 800618c:	3301      	adds	r3, #1
 800618e:	68ba      	ldr	r2, [r7, #8]
 8006190:	4413      	add	r3, r2
 8006192:	2200      	movs	r2, #0
 8006194:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006196:	7dfb      	ldrb	r3, [r7, #23]
 8006198:	3301      	adds	r3, #1
 800619a:	75fb      	strb	r3, [r7, #23]
 800619c:	7dfa      	ldrb	r2, [r7, #23]
 800619e:	79fb      	ldrb	r3, [r7, #7]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d3d3      	bcc.n	800614c <IntToUnicode+0x18>
  }
}
 80061a4:	bf00      	nop
 80061a6:	bf00      	nop
 80061a8:	371c      	adds	r7, #28
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr
	...

080061b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b08a      	sub	sp, #40	@ 0x28
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061bc:	f107 0314 	add.w	r3, r7, #20
 80061c0:	2200      	movs	r2, #0
 80061c2:	601a      	str	r2, [r3, #0]
 80061c4:	605a      	str	r2, [r3, #4]
 80061c6:	609a      	str	r2, [r3, #8]
 80061c8:	60da      	str	r2, [r3, #12]
 80061ca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80061d4:	d13a      	bne.n	800624c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061d6:	2300      	movs	r3, #0
 80061d8:	613b      	str	r3, [r7, #16]
 80061da:	4b1e      	ldr	r3, [pc, #120]	@ (8006254 <HAL_PCD_MspInit+0xa0>)
 80061dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061de:	4a1d      	ldr	r2, [pc, #116]	@ (8006254 <HAL_PCD_MspInit+0xa0>)
 80061e0:	f043 0301 	orr.w	r3, r3, #1
 80061e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80061e6:	4b1b      	ldr	r3, [pc, #108]	@ (8006254 <HAL_PCD_MspInit+0xa0>)
 80061e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061ea:	f003 0301 	and.w	r3, r3, #1
 80061ee:	613b      	str	r3, [r7, #16]
 80061f0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80061f2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80061f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061f8:	2302      	movs	r3, #2
 80061fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061fc:	2300      	movs	r3, #0
 80061fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006200:	2303      	movs	r3, #3
 8006202:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006204:	230a      	movs	r3, #10
 8006206:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006208:	f107 0314 	add.w	r3, r7, #20
 800620c:	4619      	mov	r1, r3
 800620e:	4812      	ldr	r0, [pc, #72]	@ (8006258 <HAL_PCD_MspInit+0xa4>)
 8006210:	f7fa ff1c 	bl	800104c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006214:	4b0f      	ldr	r3, [pc, #60]	@ (8006254 <HAL_PCD_MspInit+0xa0>)
 8006216:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006218:	4a0e      	ldr	r2, [pc, #56]	@ (8006254 <HAL_PCD_MspInit+0xa0>)
 800621a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800621e:	6353      	str	r3, [r2, #52]	@ 0x34
 8006220:	2300      	movs	r3, #0
 8006222:	60fb      	str	r3, [r7, #12]
 8006224:	4b0b      	ldr	r3, [pc, #44]	@ (8006254 <HAL_PCD_MspInit+0xa0>)
 8006226:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006228:	4a0a      	ldr	r2, [pc, #40]	@ (8006254 <HAL_PCD_MspInit+0xa0>)
 800622a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800622e:	6453      	str	r3, [r2, #68]	@ 0x44
 8006230:	4b08      	ldr	r3, [pc, #32]	@ (8006254 <HAL_PCD_MspInit+0xa0>)
 8006232:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006234:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006238:	60fb      	str	r3, [r7, #12]
 800623a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800623c:	2200      	movs	r2, #0
 800623e:	2100      	movs	r1, #0
 8006240:	2043      	movs	r0, #67	@ 0x43
 8006242:	f7fa fecc 	bl	8000fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006246:	2043      	movs	r0, #67	@ 0x43
 8006248:	f7fa fee5 	bl	8001016 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800624c:	bf00      	nop
 800624e:	3728      	adds	r7, #40	@ 0x28
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}
 8006254:	40023800 	.word	0x40023800
 8006258:	40020000 	.word	0x40020000

0800625c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b082      	sub	sp, #8
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006270:	4619      	mov	r1, r3
 8006272:	4610      	mov	r0, r2
 8006274:	f7fe fb6f 	bl	8004956 <USBD_LL_SetupStage>
}
 8006278:	bf00      	nop
 800627a:	3708      	adds	r7, #8
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	460b      	mov	r3, r1
 800628a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8006292:	78fa      	ldrb	r2, [r7, #3]
 8006294:	6879      	ldr	r1, [r7, #4]
 8006296:	4613      	mov	r3, r2
 8006298:	00db      	lsls	r3, r3, #3
 800629a:	4413      	add	r3, r2
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	440b      	add	r3, r1
 80062a0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	78fb      	ldrb	r3, [r7, #3]
 80062a8:	4619      	mov	r1, r3
 80062aa:	f7fe fba9 	bl	8004a00 <USBD_LL_DataOutStage>
}
 80062ae:	bf00      	nop
 80062b0:	3708      	adds	r7, #8
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}

080062b6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062b6:	b580      	push	{r7, lr}
 80062b8:	b082      	sub	sp, #8
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
 80062be:	460b      	mov	r3, r1
 80062c0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80062c8:	78fa      	ldrb	r2, [r7, #3]
 80062ca:	6879      	ldr	r1, [r7, #4]
 80062cc:	4613      	mov	r3, r2
 80062ce:	00db      	lsls	r3, r3, #3
 80062d0:	4413      	add	r3, r2
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	440b      	add	r3, r1
 80062d6:	3320      	adds	r3, #32
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	78fb      	ldrb	r3, [r7, #3]
 80062dc:	4619      	mov	r1, r3
 80062de:	f7fe fc42 	bl	8004b66 <USBD_LL_DataInStage>
}
 80062e2:	bf00      	nop
 80062e4:	3708      	adds	r7, #8
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}

080062ea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062ea:	b580      	push	{r7, lr}
 80062ec:	b082      	sub	sp, #8
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80062f8:	4618      	mov	r0, r3
 80062fa:	f7fe fd7c 	bl	8004df6 <USBD_LL_SOF>
}
 80062fe:	bf00      	nop
 8006300:	3708      	adds	r7, #8
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}

08006306 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006306:	b580      	push	{r7, lr}
 8006308:	b084      	sub	sp, #16
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800630e:	2301      	movs	r3, #1
 8006310:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	79db      	ldrb	r3, [r3, #7]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d102      	bne.n	8006320 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800631a:	2300      	movs	r3, #0
 800631c:	73fb      	strb	r3, [r7, #15]
 800631e:	e008      	b.n	8006332 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	79db      	ldrb	r3, [r3, #7]
 8006324:	2b02      	cmp	r3, #2
 8006326:	d102      	bne.n	800632e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006328:	2301      	movs	r3, #1
 800632a:	73fb      	strb	r3, [r7, #15]
 800632c:	e001      	b.n	8006332 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800632e:	f7fa fbc3 	bl	8000ab8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006338:	7bfa      	ldrb	r2, [r7, #15]
 800633a:	4611      	mov	r1, r2
 800633c:	4618      	mov	r0, r3
 800633e:	f7fe fd16 	bl	8004d6e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006348:	4618      	mov	r0, r3
 800634a:	f7fe fcbe 	bl	8004cca <USBD_LL_Reset>
}
 800634e:	bf00      	nop
 8006350:	3710      	adds	r7, #16
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
	...

08006358 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006366:	4618      	mov	r0, r3
 8006368:	f7fe fd11 	bl	8004d8e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	6812      	ldr	r2, [r2, #0]
 800637a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800637e:	f043 0301 	orr.w	r3, r3, #1
 8006382:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	7adb      	ldrb	r3, [r3, #11]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d005      	beq.n	8006398 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800638c:	4b04      	ldr	r3, [pc, #16]	@ (80063a0 <HAL_PCD_SuspendCallback+0x48>)
 800638e:	691b      	ldr	r3, [r3, #16]
 8006390:	4a03      	ldr	r2, [pc, #12]	@ (80063a0 <HAL_PCD_SuspendCallback+0x48>)
 8006392:	f043 0306 	orr.w	r3, r3, #6
 8006396:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006398:	bf00      	nop
 800639a:	3708      	adds	r7, #8
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	e000ed00 	.word	0xe000ed00

080063a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7fe fd07 	bl	8004dc6 <USBD_LL_Resume>
}
 80063b8:	bf00      	nop
 80063ba:	3708      	adds	r7, #8
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b082      	sub	sp, #8
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	460b      	mov	r3, r1
 80063ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80063d2:	78fa      	ldrb	r2, [r7, #3]
 80063d4:	4611      	mov	r1, r2
 80063d6:	4618      	mov	r0, r3
 80063d8:	f7fe fd5f 	bl	8004e9a <USBD_LL_IsoOUTIncomplete>
}
 80063dc:	bf00      	nop
 80063de:	3708      	adds	r7, #8
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	460b      	mov	r3, r1
 80063ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80063f6:	78fa      	ldrb	r2, [r7, #3]
 80063f8:	4611      	mov	r1, r2
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7fe fd1b 	bl	8004e36 <USBD_LL_IsoINIncomplete>
}
 8006400:	bf00      	nop
 8006402:	3708      	adds	r7, #8
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006416:	4618      	mov	r0, r3
 8006418:	f7fe fd71 	bl	8004efe <USBD_LL_DevConnected>
}
 800641c:	bf00      	nop
 800641e:	3708      	adds	r7, #8
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006432:	4618      	mov	r0, r3
 8006434:	f7fe fd6e 	bl	8004f14 <USBD_LL_DevDisconnected>
}
 8006438:	bf00      	nop
 800643a:	3708      	adds	r7, #8
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b082      	sub	sp, #8
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d13c      	bne.n	80064ca <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006450:	4a20      	ldr	r2, [pc, #128]	@ (80064d4 <USBD_LL_Init+0x94>)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a1e      	ldr	r2, [pc, #120]	@ (80064d4 <USBD_LL_Init+0x94>)
 800645c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006460:	4b1c      	ldr	r3, [pc, #112]	@ (80064d4 <USBD_LL_Init+0x94>)
 8006462:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8006466:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006468:	4b1a      	ldr	r3, [pc, #104]	@ (80064d4 <USBD_LL_Init+0x94>)
 800646a:	2204      	movs	r2, #4
 800646c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800646e:	4b19      	ldr	r3, [pc, #100]	@ (80064d4 <USBD_LL_Init+0x94>)
 8006470:	2202      	movs	r2, #2
 8006472:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006474:	4b17      	ldr	r3, [pc, #92]	@ (80064d4 <USBD_LL_Init+0x94>)
 8006476:	2200      	movs	r2, #0
 8006478:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800647a:	4b16      	ldr	r3, [pc, #88]	@ (80064d4 <USBD_LL_Init+0x94>)
 800647c:	2202      	movs	r2, #2
 800647e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006480:	4b14      	ldr	r3, [pc, #80]	@ (80064d4 <USBD_LL_Init+0x94>)
 8006482:	2200      	movs	r2, #0
 8006484:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006486:	4b13      	ldr	r3, [pc, #76]	@ (80064d4 <USBD_LL_Init+0x94>)
 8006488:	2200      	movs	r2, #0
 800648a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800648c:	4b11      	ldr	r3, [pc, #68]	@ (80064d4 <USBD_LL_Init+0x94>)
 800648e:	2200      	movs	r2, #0
 8006490:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006492:	4b10      	ldr	r3, [pc, #64]	@ (80064d4 <USBD_LL_Init+0x94>)
 8006494:	2200      	movs	r2, #0
 8006496:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006498:	4b0e      	ldr	r3, [pc, #56]	@ (80064d4 <USBD_LL_Init+0x94>)
 800649a:	2200      	movs	r2, #0
 800649c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800649e:	480d      	ldr	r0, [pc, #52]	@ (80064d4 <USBD_LL_Init+0x94>)
 80064a0:	f7fa ff70 	bl	8001384 <HAL_PCD_Init>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d001      	beq.n	80064ae <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80064aa:	f7fa fb05 	bl	8000ab8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80064ae:	2180      	movs	r1, #128	@ 0x80
 80064b0:	4808      	ldr	r0, [pc, #32]	@ (80064d4 <USBD_LL_Init+0x94>)
 80064b2:	f7fc f99c 	bl	80027ee <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80064b6:	2240      	movs	r2, #64	@ 0x40
 80064b8:	2100      	movs	r1, #0
 80064ba:	4806      	ldr	r0, [pc, #24]	@ (80064d4 <USBD_LL_Init+0x94>)
 80064bc:	f7fc f950 	bl	8002760 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80064c0:	2280      	movs	r2, #128	@ 0x80
 80064c2:	2101      	movs	r1, #1
 80064c4:	4803      	ldr	r0, [pc, #12]	@ (80064d4 <USBD_LL_Init+0x94>)
 80064c6:	f7fc f94b 	bl	8002760 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3708      	adds	r7, #8
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	20001668 	.word	0x20001668

080064d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80064e0:	2300      	movs	r3, #0
 80064e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80064e4:	2300      	movs	r3, #0
 80064e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80064ee:	4618      	mov	r0, r3
 80064f0:	f7fb f857 	bl	80015a2 <HAL_PCD_Start>
 80064f4:	4603      	mov	r3, r0
 80064f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80064f8:	7bfb      	ldrb	r3, [r7, #15]
 80064fa:	4618      	mov	r0, r3
 80064fc:	f000 f942 	bl	8006784 <USBD_Get_USB_Status>
 8006500:	4603      	mov	r3, r0
 8006502:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006504:	7bbb      	ldrb	r3, [r7, #14]
}
 8006506:	4618      	mov	r0, r3
 8006508:	3710      	adds	r7, #16
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800650e:	b580      	push	{r7, lr}
 8006510:	b084      	sub	sp, #16
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
 8006516:	4608      	mov	r0, r1
 8006518:	4611      	mov	r1, r2
 800651a:	461a      	mov	r2, r3
 800651c:	4603      	mov	r3, r0
 800651e:	70fb      	strb	r3, [r7, #3]
 8006520:	460b      	mov	r3, r1
 8006522:	70bb      	strb	r3, [r7, #2]
 8006524:	4613      	mov	r3, r2
 8006526:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006528:	2300      	movs	r3, #0
 800652a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800652c:	2300      	movs	r3, #0
 800652e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006536:	78bb      	ldrb	r3, [r7, #2]
 8006538:	883a      	ldrh	r2, [r7, #0]
 800653a:	78f9      	ldrb	r1, [r7, #3]
 800653c:	f7fb fd2b 	bl	8001f96 <HAL_PCD_EP_Open>
 8006540:	4603      	mov	r3, r0
 8006542:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006544:	7bfb      	ldrb	r3, [r7, #15]
 8006546:	4618      	mov	r0, r3
 8006548:	f000 f91c 	bl	8006784 <USBD_Get_USB_Status>
 800654c:	4603      	mov	r3, r0
 800654e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006550:	7bbb      	ldrb	r3, [r7, #14]
}
 8006552:	4618      	mov	r0, r3
 8006554:	3710      	adds	r7, #16
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}

0800655a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800655a:	b580      	push	{r7, lr}
 800655c:	b084      	sub	sp, #16
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
 8006562:	460b      	mov	r3, r1
 8006564:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006566:	2300      	movs	r3, #0
 8006568:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800656a:	2300      	movs	r3, #0
 800656c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006574:	78fa      	ldrb	r2, [r7, #3]
 8006576:	4611      	mov	r1, r2
 8006578:	4618      	mov	r0, r3
 800657a:	f7fb fd76 	bl	800206a <HAL_PCD_EP_Close>
 800657e:	4603      	mov	r3, r0
 8006580:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006582:	7bfb      	ldrb	r3, [r7, #15]
 8006584:	4618      	mov	r0, r3
 8006586:	f000 f8fd 	bl	8006784 <USBD_Get_USB_Status>
 800658a:	4603      	mov	r3, r0
 800658c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800658e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006590:	4618      	mov	r0, r3
 8006592:	3710      	adds	r7, #16
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	460b      	mov	r3, r1
 80065a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80065a4:	2300      	movs	r3, #0
 80065a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80065a8:	2300      	movs	r3, #0
 80065aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80065b2:	78fa      	ldrb	r2, [r7, #3]
 80065b4:	4611      	mov	r1, r2
 80065b6:	4618      	mov	r0, r3
 80065b8:	f7fb fe2e 	bl	8002218 <HAL_PCD_EP_SetStall>
 80065bc:	4603      	mov	r3, r0
 80065be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80065c0:	7bfb      	ldrb	r3, [r7, #15]
 80065c2:	4618      	mov	r0, r3
 80065c4:	f000 f8de 	bl	8006784 <USBD_Get_USB_Status>
 80065c8:	4603      	mov	r3, r0
 80065ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80065cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b084      	sub	sp, #16
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
 80065de:	460b      	mov	r3, r1
 80065e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80065e2:	2300      	movs	r3, #0
 80065e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80065e6:	2300      	movs	r3, #0
 80065e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80065f0:	78fa      	ldrb	r2, [r7, #3]
 80065f2:	4611      	mov	r1, r2
 80065f4:	4618      	mov	r0, r3
 80065f6:	f7fb fe72 	bl	80022de <HAL_PCD_EP_ClrStall>
 80065fa:	4603      	mov	r3, r0
 80065fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80065fe:	7bfb      	ldrb	r3, [r7, #15]
 8006600:	4618      	mov	r0, r3
 8006602:	f000 f8bf 	bl	8006784 <USBD_Get_USB_Status>
 8006606:	4603      	mov	r3, r0
 8006608:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800660a:	7bbb      	ldrb	r3, [r7, #14]
}
 800660c:	4618      	mov	r0, r3
 800660e:	3710      	adds	r7, #16
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006614:	b480      	push	{r7}
 8006616:	b085      	sub	sp, #20
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	460b      	mov	r3, r1
 800661e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006626:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006628:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800662c:	2b00      	cmp	r3, #0
 800662e:	da0b      	bge.n	8006648 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006630:	78fb      	ldrb	r3, [r7, #3]
 8006632:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006636:	68f9      	ldr	r1, [r7, #12]
 8006638:	4613      	mov	r3, r2
 800663a:	00db      	lsls	r3, r3, #3
 800663c:	4413      	add	r3, r2
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	440b      	add	r3, r1
 8006642:	3316      	adds	r3, #22
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	e00b      	b.n	8006660 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006648:	78fb      	ldrb	r3, [r7, #3]
 800664a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800664e:	68f9      	ldr	r1, [r7, #12]
 8006650:	4613      	mov	r3, r2
 8006652:	00db      	lsls	r3, r3, #3
 8006654:	4413      	add	r3, r2
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	440b      	add	r3, r1
 800665a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800665e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006660:	4618      	mov	r0, r3
 8006662:	3714      	adds	r7, #20
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	460b      	mov	r3, r1
 8006676:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006678:	2300      	movs	r3, #0
 800667a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800667c:	2300      	movs	r3, #0
 800667e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006686:	78fa      	ldrb	r2, [r7, #3]
 8006688:	4611      	mov	r1, r2
 800668a:	4618      	mov	r0, r3
 800668c:	f7fb fc5f 	bl	8001f4e <HAL_PCD_SetAddress>
 8006690:	4603      	mov	r3, r0
 8006692:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006694:	7bfb      	ldrb	r3, [r7, #15]
 8006696:	4618      	mov	r0, r3
 8006698:	f000 f874 	bl	8006784 <USBD_Get_USB_Status>
 800669c:	4603      	mov	r3, r0
 800669e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80066a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3710      	adds	r7, #16
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}

080066aa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80066aa:	b580      	push	{r7, lr}
 80066ac:	b086      	sub	sp, #24
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	60f8      	str	r0, [r7, #12]
 80066b2:	607a      	str	r2, [r7, #4]
 80066b4:	603b      	str	r3, [r7, #0]
 80066b6:	460b      	mov	r3, r1
 80066b8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80066ba:	2300      	movs	r3, #0
 80066bc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80066be:	2300      	movs	r3, #0
 80066c0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80066c8:	7af9      	ldrb	r1, [r7, #11]
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	f7fb fd69 	bl	80021a4 <HAL_PCD_EP_Transmit>
 80066d2:	4603      	mov	r3, r0
 80066d4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80066d6:	7dfb      	ldrb	r3, [r7, #23]
 80066d8:	4618      	mov	r0, r3
 80066da:	f000 f853 	bl	8006784 <USBD_Get_USB_Status>
 80066de:	4603      	mov	r3, r0
 80066e0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80066e2:	7dbb      	ldrb	r3, [r7, #22]
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3718      	adds	r7, #24
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b086      	sub	sp, #24
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	607a      	str	r2, [r7, #4]
 80066f6:	603b      	str	r3, [r7, #0]
 80066f8:	460b      	mov	r3, r1
 80066fa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80066fc:	2300      	movs	r3, #0
 80066fe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006700:	2300      	movs	r3, #0
 8006702:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800670a:	7af9      	ldrb	r1, [r7, #11]
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	f7fb fcf5 	bl	80020fe <HAL_PCD_EP_Receive>
 8006714:	4603      	mov	r3, r0
 8006716:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006718:	7dfb      	ldrb	r3, [r7, #23]
 800671a:	4618      	mov	r0, r3
 800671c:	f000 f832 	bl	8006784 <USBD_Get_USB_Status>
 8006720:	4603      	mov	r3, r0
 8006722:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006724:	7dbb      	ldrb	r3, [r7, #22]
}
 8006726:	4618      	mov	r0, r3
 8006728:	3718      	adds	r7, #24
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b082      	sub	sp, #8
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
 8006736:	460b      	mov	r3, r1
 8006738:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006740:	78fa      	ldrb	r2, [r7, #3]
 8006742:	4611      	mov	r1, r2
 8006744:	4618      	mov	r0, r3
 8006746:	f7fb fd15 	bl	8002174 <HAL_PCD_EP_GetRxCount>
 800674a:	4603      	mov	r3, r0
}
 800674c:	4618      	mov	r0, r3
 800674e:	3708      	adds	r7, #8
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800675c:	4b03      	ldr	r3, [pc, #12]	@ (800676c <USBD_static_malloc+0x18>)
}
 800675e:	4618      	mov	r0, r3
 8006760:	370c      	adds	r7, #12
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	20001b4c 	.word	0x20001b4c

08006770 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]

}
 8006778:	bf00      	nop
 800677a:	370c      	adds	r7, #12
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006784:	b480      	push	{r7}
 8006786:	b085      	sub	sp, #20
 8006788:	af00      	add	r7, sp, #0
 800678a:	4603      	mov	r3, r0
 800678c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800678e:	2300      	movs	r3, #0
 8006790:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006792:	79fb      	ldrb	r3, [r7, #7]
 8006794:	2b03      	cmp	r3, #3
 8006796:	d817      	bhi.n	80067c8 <USBD_Get_USB_Status+0x44>
 8006798:	a201      	add	r2, pc, #4	@ (adr r2, 80067a0 <USBD_Get_USB_Status+0x1c>)
 800679a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800679e:	bf00      	nop
 80067a0:	080067b1 	.word	0x080067b1
 80067a4:	080067b7 	.word	0x080067b7
 80067a8:	080067bd 	.word	0x080067bd
 80067ac:	080067c3 	.word	0x080067c3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80067b0:	2300      	movs	r3, #0
 80067b2:	73fb      	strb	r3, [r7, #15]
    break;
 80067b4:	e00b      	b.n	80067ce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80067b6:	2303      	movs	r3, #3
 80067b8:	73fb      	strb	r3, [r7, #15]
    break;
 80067ba:	e008      	b.n	80067ce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80067bc:	2301      	movs	r3, #1
 80067be:	73fb      	strb	r3, [r7, #15]
    break;
 80067c0:	e005      	b.n	80067ce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80067c2:	2303      	movs	r3, #3
 80067c4:	73fb      	strb	r3, [r7, #15]
    break;
 80067c6:	e002      	b.n	80067ce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80067c8:	2303      	movs	r3, #3
 80067ca:	73fb      	strb	r3, [r7, #15]
    break;
 80067cc:	bf00      	nop
  }
  return usb_status;
 80067ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3714      	adds	r7, #20
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <std>:
 80067dc:	2300      	movs	r3, #0
 80067de:	b510      	push	{r4, lr}
 80067e0:	4604      	mov	r4, r0
 80067e2:	e9c0 3300 	strd	r3, r3, [r0]
 80067e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80067ea:	6083      	str	r3, [r0, #8]
 80067ec:	8181      	strh	r1, [r0, #12]
 80067ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80067f0:	81c2      	strh	r2, [r0, #14]
 80067f2:	6183      	str	r3, [r0, #24]
 80067f4:	4619      	mov	r1, r3
 80067f6:	2208      	movs	r2, #8
 80067f8:	305c      	adds	r0, #92	@ 0x5c
 80067fa:	f000 f9e7 	bl	8006bcc <memset>
 80067fe:	4b0d      	ldr	r3, [pc, #52]	@ (8006834 <std+0x58>)
 8006800:	6263      	str	r3, [r4, #36]	@ 0x24
 8006802:	4b0d      	ldr	r3, [pc, #52]	@ (8006838 <std+0x5c>)
 8006804:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006806:	4b0d      	ldr	r3, [pc, #52]	@ (800683c <std+0x60>)
 8006808:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800680a:	4b0d      	ldr	r3, [pc, #52]	@ (8006840 <std+0x64>)
 800680c:	6323      	str	r3, [r4, #48]	@ 0x30
 800680e:	4b0d      	ldr	r3, [pc, #52]	@ (8006844 <std+0x68>)
 8006810:	6224      	str	r4, [r4, #32]
 8006812:	429c      	cmp	r4, r3
 8006814:	d006      	beq.n	8006824 <std+0x48>
 8006816:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800681a:	4294      	cmp	r4, r2
 800681c:	d002      	beq.n	8006824 <std+0x48>
 800681e:	33d0      	adds	r3, #208	@ 0xd0
 8006820:	429c      	cmp	r4, r3
 8006822:	d105      	bne.n	8006830 <std+0x54>
 8006824:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800682c:	f000 ba46 	b.w	8006cbc <__retarget_lock_init_recursive>
 8006830:	bd10      	pop	{r4, pc}
 8006832:	bf00      	nop
 8006834:	08006a1d 	.word	0x08006a1d
 8006838:	08006a3f 	.word	0x08006a3f
 800683c:	08006a77 	.word	0x08006a77
 8006840:	08006a9b 	.word	0x08006a9b
 8006844:	20001d6c 	.word	0x20001d6c

08006848 <stdio_exit_handler>:
 8006848:	4a02      	ldr	r2, [pc, #8]	@ (8006854 <stdio_exit_handler+0xc>)
 800684a:	4903      	ldr	r1, [pc, #12]	@ (8006858 <stdio_exit_handler+0x10>)
 800684c:	4803      	ldr	r0, [pc, #12]	@ (800685c <stdio_exit_handler+0x14>)
 800684e:	f000 b869 	b.w	8006924 <_fwalk_sglue>
 8006852:	bf00      	nop
 8006854:	20000100 	.word	0x20000100
 8006858:	08006fbd 	.word	0x08006fbd
 800685c:	20000110 	.word	0x20000110

08006860 <cleanup_stdio>:
 8006860:	6841      	ldr	r1, [r0, #4]
 8006862:	4b0c      	ldr	r3, [pc, #48]	@ (8006894 <cleanup_stdio+0x34>)
 8006864:	4299      	cmp	r1, r3
 8006866:	b510      	push	{r4, lr}
 8006868:	4604      	mov	r4, r0
 800686a:	d001      	beq.n	8006870 <cleanup_stdio+0x10>
 800686c:	f000 fba6 	bl	8006fbc <_fflush_r>
 8006870:	68a1      	ldr	r1, [r4, #8]
 8006872:	4b09      	ldr	r3, [pc, #36]	@ (8006898 <cleanup_stdio+0x38>)
 8006874:	4299      	cmp	r1, r3
 8006876:	d002      	beq.n	800687e <cleanup_stdio+0x1e>
 8006878:	4620      	mov	r0, r4
 800687a:	f000 fb9f 	bl	8006fbc <_fflush_r>
 800687e:	68e1      	ldr	r1, [r4, #12]
 8006880:	4b06      	ldr	r3, [pc, #24]	@ (800689c <cleanup_stdio+0x3c>)
 8006882:	4299      	cmp	r1, r3
 8006884:	d004      	beq.n	8006890 <cleanup_stdio+0x30>
 8006886:	4620      	mov	r0, r4
 8006888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800688c:	f000 bb96 	b.w	8006fbc <_fflush_r>
 8006890:	bd10      	pop	{r4, pc}
 8006892:	bf00      	nop
 8006894:	20001d6c 	.word	0x20001d6c
 8006898:	20001dd4 	.word	0x20001dd4
 800689c:	20001e3c 	.word	0x20001e3c

080068a0 <global_stdio_init.part.0>:
 80068a0:	b510      	push	{r4, lr}
 80068a2:	4b0b      	ldr	r3, [pc, #44]	@ (80068d0 <global_stdio_init.part.0+0x30>)
 80068a4:	4c0b      	ldr	r4, [pc, #44]	@ (80068d4 <global_stdio_init.part.0+0x34>)
 80068a6:	4a0c      	ldr	r2, [pc, #48]	@ (80068d8 <global_stdio_init.part.0+0x38>)
 80068a8:	601a      	str	r2, [r3, #0]
 80068aa:	4620      	mov	r0, r4
 80068ac:	2200      	movs	r2, #0
 80068ae:	2104      	movs	r1, #4
 80068b0:	f7ff ff94 	bl	80067dc <std>
 80068b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80068b8:	2201      	movs	r2, #1
 80068ba:	2109      	movs	r1, #9
 80068bc:	f7ff ff8e 	bl	80067dc <std>
 80068c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80068c4:	2202      	movs	r2, #2
 80068c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068ca:	2112      	movs	r1, #18
 80068cc:	f7ff bf86 	b.w	80067dc <std>
 80068d0:	20001ea4 	.word	0x20001ea4
 80068d4:	20001d6c 	.word	0x20001d6c
 80068d8:	08006849 	.word	0x08006849

080068dc <__sfp_lock_acquire>:
 80068dc:	4801      	ldr	r0, [pc, #4]	@ (80068e4 <__sfp_lock_acquire+0x8>)
 80068de:	f000 b9ee 	b.w	8006cbe <__retarget_lock_acquire_recursive>
 80068e2:	bf00      	nop
 80068e4:	20001ead 	.word	0x20001ead

080068e8 <__sfp_lock_release>:
 80068e8:	4801      	ldr	r0, [pc, #4]	@ (80068f0 <__sfp_lock_release+0x8>)
 80068ea:	f000 b9e9 	b.w	8006cc0 <__retarget_lock_release_recursive>
 80068ee:	bf00      	nop
 80068f0:	20001ead 	.word	0x20001ead

080068f4 <__sinit>:
 80068f4:	b510      	push	{r4, lr}
 80068f6:	4604      	mov	r4, r0
 80068f8:	f7ff fff0 	bl	80068dc <__sfp_lock_acquire>
 80068fc:	6a23      	ldr	r3, [r4, #32]
 80068fe:	b11b      	cbz	r3, 8006908 <__sinit+0x14>
 8006900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006904:	f7ff bff0 	b.w	80068e8 <__sfp_lock_release>
 8006908:	4b04      	ldr	r3, [pc, #16]	@ (800691c <__sinit+0x28>)
 800690a:	6223      	str	r3, [r4, #32]
 800690c:	4b04      	ldr	r3, [pc, #16]	@ (8006920 <__sinit+0x2c>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d1f5      	bne.n	8006900 <__sinit+0xc>
 8006914:	f7ff ffc4 	bl	80068a0 <global_stdio_init.part.0>
 8006918:	e7f2      	b.n	8006900 <__sinit+0xc>
 800691a:	bf00      	nop
 800691c:	08006861 	.word	0x08006861
 8006920:	20001ea4 	.word	0x20001ea4

08006924 <_fwalk_sglue>:
 8006924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006928:	4607      	mov	r7, r0
 800692a:	4688      	mov	r8, r1
 800692c:	4614      	mov	r4, r2
 800692e:	2600      	movs	r6, #0
 8006930:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006934:	f1b9 0901 	subs.w	r9, r9, #1
 8006938:	d505      	bpl.n	8006946 <_fwalk_sglue+0x22>
 800693a:	6824      	ldr	r4, [r4, #0]
 800693c:	2c00      	cmp	r4, #0
 800693e:	d1f7      	bne.n	8006930 <_fwalk_sglue+0xc>
 8006940:	4630      	mov	r0, r6
 8006942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006946:	89ab      	ldrh	r3, [r5, #12]
 8006948:	2b01      	cmp	r3, #1
 800694a:	d907      	bls.n	800695c <_fwalk_sglue+0x38>
 800694c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006950:	3301      	adds	r3, #1
 8006952:	d003      	beq.n	800695c <_fwalk_sglue+0x38>
 8006954:	4629      	mov	r1, r5
 8006956:	4638      	mov	r0, r7
 8006958:	47c0      	blx	r8
 800695a:	4306      	orrs	r6, r0
 800695c:	3568      	adds	r5, #104	@ 0x68
 800695e:	e7e9      	b.n	8006934 <_fwalk_sglue+0x10>

08006960 <_puts_r>:
 8006960:	6a03      	ldr	r3, [r0, #32]
 8006962:	b570      	push	{r4, r5, r6, lr}
 8006964:	6884      	ldr	r4, [r0, #8]
 8006966:	4605      	mov	r5, r0
 8006968:	460e      	mov	r6, r1
 800696a:	b90b      	cbnz	r3, 8006970 <_puts_r+0x10>
 800696c:	f7ff ffc2 	bl	80068f4 <__sinit>
 8006970:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006972:	07db      	lsls	r3, r3, #31
 8006974:	d405      	bmi.n	8006982 <_puts_r+0x22>
 8006976:	89a3      	ldrh	r3, [r4, #12]
 8006978:	0598      	lsls	r0, r3, #22
 800697a:	d402      	bmi.n	8006982 <_puts_r+0x22>
 800697c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800697e:	f000 f99e 	bl	8006cbe <__retarget_lock_acquire_recursive>
 8006982:	89a3      	ldrh	r3, [r4, #12]
 8006984:	0719      	lsls	r1, r3, #28
 8006986:	d502      	bpl.n	800698e <_puts_r+0x2e>
 8006988:	6923      	ldr	r3, [r4, #16]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d135      	bne.n	80069fa <_puts_r+0x9a>
 800698e:	4621      	mov	r1, r4
 8006990:	4628      	mov	r0, r5
 8006992:	f000 f8c5 	bl	8006b20 <__swsetup_r>
 8006996:	b380      	cbz	r0, 80069fa <_puts_r+0x9a>
 8006998:	f04f 35ff 	mov.w	r5, #4294967295
 800699c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800699e:	07da      	lsls	r2, r3, #31
 80069a0:	d405      	bmi.n	80069ae <_puts_r+0x4e>
 80069a2:	89a3      	ldrh	r3, [r4, #12]
 80069a4:	059b      	lsls	r3, r3, #22
 80069a6:	d402      	bmi.n	80069ae <_puts_r+0x4e>
 80069a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80069aa:	f000 f989 	bl	8006cc0 <__retarget_lock_release_recursive>
 80069ae:	4628      	mov	r0, r5
 80069b0:	bd70      	pop	{r4, r5, r6, pc}
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	da04      	bge.n	80069c0 <_puts_r+0x60>
 80069b6:	69a2      	ldr	r2, [r4, #24]
 80069b8:	429a      	cmp	r2, r3
 80069ba:	dc17      	bgt.n	80069ec <_puts_r+0x8c>
 80069bc:	290a      	cmp	r1, #10
 80069be:	d015      	beq.n	80069ec <_puts_r+0x8c>
 80069c0:	6823      	ldr	r3, [r4, #0]
 80069c2:	1c5a      	adds	r2, r3, #1
 80069c4:	6022      	str	r2, [r4, #0]
 80069c6:	7019      	strb	r1, [r3, #0]
 80069c8:	68a3      	ldr	r3, [r4, #8]
 80069ca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80069ce:	3b01      	subs	r3, #1
 80069d0:	60a3      	str	r3, [r4, #8]
 80069d2:	2900      	cmp	r1, #0
 80069d4:	d1ed      	bne.n	80069b2 <_puts_r+0x52>
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	da11      	bge.n	80069fe <_puts_r+0x9e>
 80069da:	4622      	mov	r2, r4
 80069dc:	210a      	movs	r1, #10
 80069de:	4628      	mov	r0, r5
 80069e0:	f000 f85f 	bl	8006aa2 <__swbuf_r>
 80069e4:	3001      	adds	r0, #1
 80069e6:	d0d7      	beq.n	8006998 <_puts_r+0x38>
 80069e8:	250a      	movs	r5, #10
 80069ea:	e7d7      	b.n	800699c <_puts_r+0x3c>
 80069ec:	4622      	mov	r2, r4
 80069ee:	4628      	mov	r0, r5
 80069f0:	f000 f857 	bl	8006aa2 <__swbuf_r>
 80069f4:	3001      	adds	r0, #1
 80069f6:	d1e7      	bne.n	80069c8 <_puts_r+0x68>
 80069f8:	e7ce      	b.n	8006998 <_puts_r+0x38>
 80069fa:	3e01      	subs	r6, #1
 80069fc:	e7e4      	b.n	80069c8 <_puts_r+0x68>
 80069fe:	6823      	ldr	r3, [r4, #0]
 8006a00:	1c5a      	adds	r2, r3, #1
 8006a02:	6022      	str	r2, [r4, #0]
 8006a04:	220a      	movs	r2, #10
 8006a06:	701a      	strb	r2, [r3, #0]
 8006a08:	e7ee      	b.n	80069e8 <_puts_r+0x88>
	...

08006a0c <puts>:
 8006a0c:	4b02      	ldr	r3, [pc, #8]	@ (8006a18 <puts+0xc>)
 8006a0e:	4601      	mov	r1, r0
 8006a10:	6818      	ldr	r0, [r3, #0]
 8006a12:	f7ff bfa5 	b.w	8006960 <_puts_r>
 8006a16:	bf00      	nop
 8006a18:	2000010c 	.word	0x2000010c

08006a1c <__sread>:
 8006a1c:	b510      	push	{r4, lr}
 8006a1e:	460c      	mov	r4, r1
 8006a20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a24:	f000 f8fc 	bl	8006c20 <_read_r>
 8006a28:	2800      	cmp	r0, #0
 8006a2a:	bfab      	itete	ge
 8006a2c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006a2e:	89a3      	ldrhlt	r3, [r4, #12]
 8006a30:	181b      	addge	r3, r3, r0
 8006a32:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006a36:	bfac      	ite	ge
 8006a38:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006a3a:	81a3      	strhlt	r3, [r4, #12]
 8006a3c:	bd10      	pop	{r4, pc}

08006a3e <__swrite>:
 8006a3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a42:	461f      	mov	r7, r3
 8006a44:	898b      	ldrh	r3, [r1, #12]
 8006a46:	05db      	lsls	r3, r3, #23
 8006a48:	4605      	mov	r5, r0
 8006a4a:	460c      	mov	r4, r1
 8006a4c:	4616      	mov	r6, r2
 8006a4e:	d505      	bpl.n	8006a5c <__swrite+0x1e>
 8006a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a54:	2302      	movs	r3, #2
 8006a56:	2200      	movs	r2, #0
 8006a58:	f000 f8d0 	bl	8006bfc <_lseek_r>
 8006a5c:	89a3      	ldrh	r3, [r4, #12]
 8006a5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a62:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a66:	81a3      	strh	r3, [r4, #12]
 8006a68:	4632      	mov	r2, r6
 8006a6a:	463b      	mov	r3, r7
 8006a6c:	4628      	mov	r0, r5
 8006a6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a72:	f000 b8e7 	b.w	8006c44 <_write_r>

08006a76 <__sseek>:
 8006a76:	b510      	push	{r4, lr}
 8006a78:	460c      	mov	r4, r1
 8006a7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a7e:	f000 f8bd 	bl	8006bfc <_lseek_r>
 8006a82:	1c43      	adds	r3, r0, #1
 8006a84:	89a3      	ldrh	r3, [r4, #12]
 8006a86:	bf15      	itete	ne
 8006a88:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006a8a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006a8e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006a92:	81a3      	strheq	r3, [r4, #12]
 8006a94:	bf18      	it	ne
 8006a96:	81a3      	strhne	r3, [r4, #12]
 8006a98:	bd10      	pop	{r4, pc}

08006a9a <__sclose>:
 8006a9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a9e:	f000 b89d 	b.w	8006bdc <_close_r>

08006aa2 <__swbuf_r>:
 8006aa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aa4:	460e      	mov	r6, r1
 8006aa6:	4614      	mov	r4, r2
 8006aa8:	4605      	mov	r5, r0
 8006aaa:	b118      	cbz	r0, 8006ab4 <__swbuf_r+0x12>
 8006aac:	6a03      	ldr	r3, [r0, #32]
 8006aae:	b90b      	cbnz	r3, 8006ab4 <__swbuf_r+0x12>
 8006ab0:	f7ff ff20 	bl	80068f4 <__sinit>
 8006ab4:	69a3      	ldr	r3, [r4, #24]
 8006ab6:	60a3      	str	r3, [r4, #8]
 8006ab8:	89a3      	ldrh	r3, [r4, #12]
 8006aba:	071a      	lsls	r2, r3, #28
 8006abc:	d501      	bpl.n	8006ac2 <__swbuf_r+0x20>
 8006abe:	6923      	ldr	r3, [r4, #16]
 8006ac0:	b943      	cbnz	r3, 8006ad4 <__swbuf_r+0x32>
 8006ac2:	4621      	mov	r1, r4
 8006ac4:	4628      	mov	r0, r5
 8006ac6:	f000 f82b 	bl	8006b20 <__swsetup_r>
 8006aca:	b118      	cbz	r0, 8006ad4 <__swbuf_r+0x32>
 8006acc:	f04f 37ff 	mov.w	r7, #4294967295
 8006ad0:	4638      	mov	r0, r7
 8006ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ad4:	6823      	ldr	r3, [r4, #0]
 8006ad6:	6922      	ldr	r2, [r4, #16]
 8006ad8:	1a98      	subs	r0, r3, r2
 8006ada:	6963      	ldr	r3, [r4, #20]
 8006adc:	b2f6      	uxtb	r6, r6
 8006ade:	4283      	cmp	r3, r0
 8006ae0:	4637      	mov	r7, r6
 8006ae2:	dc05      	bgt.n	8006af0 <__swbuf_r+0x4e>
 8006ae4:	4621      	mov	r1, r4
 8006ae6:	4628      	mov	r0, r5
 8006ae8:	f000 fa68 	bl	8006fbc <_fflush_r>
 8006aec:	2800      	cmp	r0, #0
 8006aee:	d1ed      	bne.n	8006acc <__swbuf_r+0x2a>
 8006af0:	68a3      	ldr	r3, [r4, #8]
 8006af2:	3b01      	subs	r3, #1
 8006af4:	60a3      	str	r3, [r4, #8]
 8006af6:	6823      	ldr	r3, [r4, #0]
 8006af8:	1c5a      	adds	r2, r3, #1
 8006afa:	6022      	str	r2, [r4, #0]
 8006afc:	701e      	strb	r6, [r3, #0]
 8006afe:	6962      	ldr	r2, [r4, #20]
 8006b00:	1c43      	adds	r3, r0, #1
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d004      	beq.n	8006b10 <__swbuf_r+0x6e>
 8006b06:	89a3      	ldrh	r3, [r4, #12]
 8006b08:	07db      	lsls	r3, r3, #31
 8006b0a:	d5e1      	bpl.n	8006ad0 <__swbuf_r+0x2e>
 8006b0c:	2e0a      	cmp	r6, #10
 8006b0e:	d1df      	bne.n	8006ad0 <__swbuf_r+0x2e>
 8006b10:	4621      	mov	r1, r4
 8006b12:	4628      	mov	r0, r5
 8006b14:	f000 fa52 	bl	8006fbc <_fflush_r>
 8006b18:	2800      	cmp	r0, #0
 8006b1a:	d0d9      	beq.n	8006ad0 <__swbuf_r+0x2e>
 8006b1c:	e7d6      	b.n	8006acc <__swbuf_r+0x2a>
	...

08006b20 <__swsetup_r>:
 8006b20:	b538      	push	{r3, r4, r5, lr}
 8006b22:	4b29      	ldr	r3, [pc, #164]	@ (8006bc8 <__swsetup_r+0xa8>)
 8006b24:	4605      	mov	r5, r0
 8006b26:	6818      	ldr	r0, [r3, #0]
 8006b28:	460c      	mov	r4, r1
 8006b2a:	b118      	cbz	r0, 8006b34 <__swsetup_r+0x14>
 8006b2c:	6a03      	ldr	r3, [r0, #32]
 8006b2e:	b90b      	cbnz	r3, 8006b34 <__swsetup_r+0x14>
 8006b30:	f7ff fee0 	bl	80068f4 <__sinit>
 8006b34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b38:	0719      	lsls	r1, r3, #28
 8006b3a:	d422      	bmi.n	8006b82 <__swsetup_r+0x62>
 8006b3c:	06da      	lsls	r2, r3, #27
 8006b3e:	d407      	bmi.n	8006b50 <__swsetup_r+0x30>
 8006b40:	2209      	movs	r2, #9
 8006b42:	602a      	str	r2, [r5, #0]
 8006b44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b48:	81a3      	strh	r3, [r4, #12]
 8006b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b4e:	e033      	b.n	8006bb8 <__swsetup_r+0x98>
 8006b50:	0758      	lsls	r0, r3, #29
 8006b52:	d512      	bpl.n	8006b7a <__swsetup_r+0x5a>
 8006b54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006b56:	b141      	cbz	r1, 8006b6a <__swsetup_r+0x4a>
 8006b58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006b5c:	4299      	cmp	r1, r3
 8006b5e:	d002      	beq.n	8006b66 <__swsetup_r+0x46>
 8006b60:	4628      	mov	r0, r5
 8006b62:	f000 f8af 	bl	8006cc4 <_free_r>
 8006b66:	2300      	movs	r3, #0
 8006b68:	6363      	str	r3, [r4, #52]	@ 0x34
 8006b6a:	89a3      	ldrh	r3, [r4, #12]
 8006b6c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006b70:	81a3      	strh	r3, [r4, #12]
 8006b72:	2300      	movs	r3, #0
 8006b74:	6063      	str	r3, [r4, #4]
 8006b76:	6923      	ldr	r3, [r4, #16]
 8006b78:	6023      	str	r3, [r4, #0]
 8006b7a:	89a3      	ldrh	r3, [r4, #12]
 8006b7c:	f043 0308 	orr.w	r3, r3, #8
 8006b80:	81a3      	strh	r3, [r4, #12]
 8006b82:	6923      	ldr	r3, [r4, #16]
 8006b84:	b94b      	cbnz	r3, 8006b9a <__swsetup_r+0x7a>
 8006b86:	89a3      	ldrh	r3, [r4, #12]
 8006b88:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006b8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b90:	d003      	beq.n	8006b9a <__swsetup_r+0x7a>
 8006b92:	4621      	mov	r1, r4
 8006b94:	4628      	mov	r0, r5
 8006b96:	f000 fa5f 	bl	8007058 <__smakebuf_r>
 8006b9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b9e:	f013 0201 	ands.w	r2, r3, #1
 8006ba2:	d00a      	beq.n	8006bba <__swsetup_r+0x9a>
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	60a2      	str	r2, [r4, #8]
 8006ba8:	6962      	ldr	r2, [r4, #20]
 8006baa:	4252      	negs	r2, r2
 8006bac:	61a2      	str	r2, [r4, #24]
 8006bae:	6922      	ldr	r2, [r4, #16]
 8006bb0:	b942      	cbnz	r2, 8006bc4 <__swsetup_r+0xa4>
 8006bb2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006bb6:	d1c5      	bne.n	8006b44 <__swsetup_r+0x24>
 8006bb8:	bd38      	pop	{r3, r4, r5, pc}
 8006bba:	0799      	lsls	r1, r3, #30
 8006bbc:	bf58      	it	pl
 8006bbe:	6962      	ldrpl	r2, [r4, #20]
 8006bc0:	60a2      	str	r2, [r4, #8]
 8006bc2:	e7f4      	b.n	8006bae <__swsetup_r+0x8e>
 8006bc4:	2000      	movs	r0, #0
 8006bc6:	e7f7      	b.n	8006bb8 <__swsetup_r+0x98>
 8006bc8:	2000010c 	.word	0x2000010c

08006bcc <memset>:
 8006bcc:	4402      	add	r2, r0
 8006bce:	4603      	mov	r3, r0
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d100      	bne.n	8006bd6 <memset+0xa>
 8006bd4:	4770      	bx	lr
 8006bd6:	f803 1b01 	strb.w	r1, [r3], #1
 8006bda:	e7f9      	b.n	8006bd0 <memset+0x4>

08006bdc <_close_r>:
 8006bdc:	b538      	push	{r3, r4, r5, lr}
 8006bde:	4d06      	ldr	r5, [pc, #24]	@ (8006bf8 <_close_r+0x1c>)
 8006be0:	2300      	movs	r3, #0
 8006be2:	4604      	mov	r4, r0
 8006be4:	4608      	mov	r0, r1
 8006be6:	602b      	str	r3, [r5, #0]
 8006be8:	f7f9 ffe1 	bl	8000bae <_close>
 8006bec:	1c43      	adds	r3, r0, #1
 8006bee:	d102      	bne.n	8006bf6 <_close_r+0x1a>
 8006bf0:	682b      	ldr	r3, [r5, #0]
 8006bf2:	b103      	cbz	r3, 8006bf6 <_close_r+0x1a>
 8006bf4:	6023      	str	r3, [r4, #0]
 8006bf6:	bd38      	pop	{r3, r4, r5, pc}
 8006bf8:	20001ea8 	.word	0x20001ea8

08006bfc <_lseek_r>:
 8006bfc:	b538      	push	{r3, r4, r5, lr}
 8006bfe:	4d07      	ldr	r5, [pc, #28]	@ (8006c1c <_lseek_r+0x20>)
 8006c00:	4604      	mov	r4, r0
 8006c02:	4608      	mov	r0, r1
 8006c04:	4611      	mov	r1, r2
 8006c06:	2200      	movs	r2, #0
 8006c08:	602a      	str	r2, [r5, #0]
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	f7f9 fff6 	bl	8000bfc <_lseek>
 8006c10:	1c43      	adds	r3, r0, #1
 8006c12:	d102      	bne.n	8006c1a <_lseek_r+0x1e>
 8006c14:	682b      	ldr	r3, [r5, #0]
 8006c16:	b103      	cbz	r3, 8006c1a <_lseek_r+0x1e>
 8006c18:	6023      	str	r3, [r4, #0]
 8006c1a:	bd38      	pop	{r3, r4, r5, pc}
 8006c1c:	20001ea8 	.word	0x20001ea8

08006c20 <_read_r>:
 8006c20:	b538      	push	{r3, r4, r5, lr}
 8006c22:	4d07      	ldr	r5, [pc, #28]	@ (8006c40 <_read_r+0x20>)
 8006c24:	4604      	mov	r4, r0
 8006c26:	4608      	mov	r0, r1
 8006c28:	4611      	mov	r1, r2
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	602a      	str	r2, [r5, #0]
 8006c2e:	461a      	mov	r2, r3
 8006c30:	f7f9 ff84 	bl	8000b3c <_read>
 8006c34:	1c43      	adds	r3, r0, #1
 8006c36:	d102      	bne.n	8006c3e <_read_r+0x1e>
 8006c38:	682b      	ldr	r3, [r5, #0]
 8006c3a:	b103      	cbz	r3, 8006c3e <_read_r+0x1e>
 8006c3c:	6023      	str	r3, [r4, #0]
 8006c3e:	bd38      	pop	{r3, r4, r5, pc}
 8006c40:	20001ea8 	.word	0x20001ea8

08006c44 <_write_r>:
 8006c44:	b538      	push	{r3, r4, r5, lr}
 8006c46:	4d07      	ldr	r5, [pc, #28]	@ (8006c64 <_write_r+0x20>)
 8006c48:	4604      	mov	r4, r0
 8006c4a:	4608      	mov	r0, r1
 8006c4c:	4611      	mov	r1, r2
 8006c4e:	2200      	movs	r2, #0
 8006c50:	602a      	str	r2, [r5, #0]
 8006c52:	461a      	mov	r2, r3
 8006c54:	f7f9 ff8f 	bl	8000b76 <_write>
 8006c58:	1c43      	adds	r3, r0, #1
 8006c5a:	d102      	bne.n	8006c62 <_write_r+0x1e>
 8006c5c:	682b      	ldr	r3, [r5, #0]
 8006c5e:	b103      	cbz	r3, 8006c62 <_write_r+0x1e>
 8006c60:	6023      	str	r3, [r4, #0]
 8006c62:	bd38      	pop	{r3, r4, r5, pc}
 8006c64:	20001ea8 	.word	0x20001ea8

08006c68 <__errno>:
 8006c68:	4b01      	ldr	r3, [pc, #4]	@ (8006c70 <__errno+0x8>)
 8006c6a:	6818      	ldr	r0, [r3, #0]
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	2000010c 	.word	0x2000010c

08006c74 <__libc_init_array>:
 8006c74:	b570      	push	{r4, r5, r6, lr}
 8006c76:	4d0d      	ldr	r5, [pc, #52]	@ (8006cac <__libc_init_array+0x38>)
 8006c78:	4c0d      	ldr	r4, [pc, #52]	@ (8006cb0 <__libc_init_array+0x3c>)
 8006c7a:	1b64      	subs	r4, r4, r5
 8006c7c:	10a4      	asrs	r4, r4, #2
 8006c7e:	2600      	movs	r6, #0
 8006c80:	42a6      	cmp	r6, r4
 8006c82:	d109      	bne.n	8006c98 <__libc_init_array+0x24>
 8006c84:	4d0b      	ldr	r5, [pc, #44]	@ (8006cb4 <__libc_init_array+0x40>)
 8006c86:	4c0c      	ldr	r4, [pc, #48]	@ (8006cb8 <__libc_init_array+0x44>)
 8006c88:	f000 fa54 	bl	8007134 <_init>
 8006c8c:	1b64      	subs	r4, r4, r5
 8006c8e:	10a4      	asrs	r4, r4, #2
 8006c90:	2600      	movs	r6, #0
 8006c92:	42a6      	cmp	r6, r4
 8006c94:	d105      	bne.n	8006ca2 <__libc_init_array+0x2e>
 8006c96:	bd70      	pop	{r4, r5, r6, pc}
 8006c98:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c9c:	4798      	blx	r3
 8006c9e:	3601      	adds	r6, #1
 8006ca0:	e7ee      	b.n	8006c80 <__libc_init_array+0xc>
 8006ca2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ca6:	4798      	blx	r3
 8006ca8:	3601      	adds	r6, #1
 8006caa:	e7f2      	b.n	8006c92 <__libc_init_array+0x1e>
 8006cac:	080071b4 	.word	0x080071b4
 8006cb0:	080071b4 	.word	0x080071b4
 8006cb4:	080071b4 	.word	0x080071b4
 8006cb8:	080071b8 	.word	0x080071b8

08006cbc <__retarget_lock_init_recursive>:
 8006cbc:	4770      	bx	lr

08006cbe <__retarget_lock_acquire_recursive>:
 8006cbe:	4770      	bx	lr

08006cc0 <__retarget_lock_release_recursive>:
 8006cc0:	4770      	bx	lr
	...

08006cc4 <_free_r>:
 8006cc4:	b538      	push	{r3, r4, r5, lr}
 8006cc6:	4605      	mov	r5, r0
 8006cc8:	2900      	cmp	r1, #0
 8006cca:	d041      	beq.n	8006d50 <_free_r+0x8c>
 8006ccc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cd0:	1f0c      	subs	r4, r1, #4
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	bfb8      	it	lt
 8006cd6:	18e4      	addlt	r4, r4, r3
 8006cd8:	f000 f8e0 	bl	8006e9c <__malloc_lock>
 8006cdc:	4a1d      	ldr	r2, [pc, #116]	@ (8006d54 <_free_r+0x90>)
 8006cde:	6813      	ldr	r3, [r2, #0]
 8006ce0:	b933      	cbnz	r3, 8006cf0 <_free_r+0x2c>
 8006ce2:	6063      	str	r3, [r4, #4]
 8006ce4:	6014      	str	r4, [r2, #0]
 8006ce6:	4628      	mov	r0, r5
 8006ce8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006cec:	f000 b8dc 	b.w	8006ea8 <__malloc_unlock>
 8006cf0:	42a3      	cmp	r3, r4
 8006cf2:	d908      	bls.n	8006d06 <_free_r+0x42>
 8006cf4:	6820      	ldr	r0, [r4, #0]
 8006cf6:	1821      	adds	r1, r4, r0
 8006cf8:	428b      	cmp	r3, r1
 8006cfa:	bf01      	itttt	eq
 8006cfc:	6819      	ldreq	r1, [r3, #0]
 8006cfe:	685b      	ldreq	r3, [r3, #4]
 8006d00:	1809      	addeq	r1, r1, r0
 8006d02:	6021      	streq	r1, [r4, #0]
 8006d04:	e7ed      	b.n	8006ce2 <_free_r+0x1e>
 8006d06:	461a      	mov	r2, r3
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	b10b      	cbz	r3, 8006d10 <_free_r+0x4c>
 8006d0c:	42a3      	cmp	r3, r4
 8006d0e:	d9fa      	bls.n	8006d06 <_free_r+0x42>
 8006d10:	6811      	ldr	r1, [r2, #0]
 8006d12:	1850      	adds	r0, r2, r1
 8006d14:	42a0      	cmp	r0, r4
 8006d16:	d10b      	bne.n	8006d30 <_free_r+0x6c>
 8006d18:	6820      	ldr	r0, [r4, #0]
 8006d1a:	4401      	add	r1, r0
 8006d1c:	1850      	adds	r0, r2, r1
 8006d1e:	4283      	cmp	r3, r0
 8006d20:	6011      	str	r1, [r2, #0]
 8006d22:	d1e0      	bne.n	8006ce6 <_free_r+0x22>
 8006d24:	6818      	ldr	r0, [r3, #0]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	6053      	str	r3, [r2, #4]
 8006d2a:	4408      	add	r0, r1
 8006d2c:	6010      	str	r0, [r2, #0]
 8006d2e:	e7da      	b.n	8006ce6 <_free_r+0x22>
 8006d30:	d902      	bls.n	8006d38 <_free_r+0x74>
 8006d32:	230c      	movs	r3, #12
 8006d34:	602b      	str	r3, [r5, #0]
 8006d36:	e7d6      	b.n	8006ce6 <_free_r+0x22>
 8006d38:	6820      	ldr	r0, [r4, #0]
 8006d3a:	1821      	adds	r1, r4, r0
 8006d3c:	428b      	cmp	r3, r1
 8006d3e:	bf04      	itt	eq
 8006d40:	6819      	ldreq	r1, [r3, #0]
 8006d42:	685b      	ldreq	r3, [r3, #4]
 8006d44:	6063      	str	r3, [r4, #4]
 8006d46:	bf04      	itt	eq
 8006d48:	1809      	addeq	r1, r1, r0
 8006d4a:	6021      	streq	r1, [r4, #0]
 8006d4c:	6054      	str	r4, [r2, #4]
 8006d4e:	e7ca      	b.n	8006ce6 <_free_r+0x22>
 8006d50:	bd38      	pop	{r3, r4, r5, pc}
 8006d52:	bf00      	nop
 8006d54:	20001eb4 	.word	0x20001eb4

08006d58 <sbrk_aligned>:
 8006d58:	b570      	push	{r4, r5, r6, lr}
 8006d5a:	4e0f      	ldr	r6, [pc, #60]	@ (8006d98 <sbrk_aligned+0x40>)
 8006d5c:	460c      	mov	r4, r1
 8006d5e:	6831      	ldr	r1, [r6, #0]
 8006d60:	4605      	mov	r5, r0
 8006d62:	b911      	cbnz	r1, 8006d6a <sbrk_aligned+0x12>
 8006d64:	f000 f9d6 	bl	8007114 <_sbrk_r>
 8006d68:	6030      	str	r0, [r6, #0]
 8006d6a:	4621      	mov	r1, r4
 8006d6c:	4628      	mov	r0, r5
 8006d6e:	f000 f9d1 	bl	8007114 <_sbrk_r>
 8006d72:	1c43      	adds	r3, r0, #1
 8006d74:	d103      	bne.n	8006d7e <sbrk_aligned+0x26>
 8006d76:	f04f 34ff 	mov.w	r4, #4294967295
 8006d7a:	4620      	mov	r0, r4
 8006d7c:	bd70      	pop	{r4, r5, r6, pc}
 8006d7e:	1cc4      	adds	r4, r0, #3
 8006d80:	f024 0403 	bic.w	r4, r4, #3
 8006d84:	42a0      	cmp	r0, r4
 8006d86:	d0f8      	beq.n	8006d7a <sbrk_aligned+0x22>
 8006d88:	1a21      	subs	r1, r4, r0
 8006d8a:	4628      	mov	r0, r5
 8006d8c:	f000 f9c2 	bl	8007114 <_sbrk_r>
 8006d90:	3001      	adds	r0, #1
 8006d92:	d1f2      	bne.n	8006d7a <sbrk_aligned+0x22>
 8006d94:	e7ef      	b.n	8006d76 <sbrk_aligned+0x1e>
 8006d96:	bf00      	nop
 8006d98:	20001eb0 	.word	0x20001eb0

08006d9c <_malloc_r>:
 8006d9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006da0:	1ccd      	adds	r5, r1, #3
 8006da2:	f025 0503 	bic.w	r5, r5, #3
 8006da6:	3508      	adds	r5, #8
 8006da8:	2d0c      	cmp	r5, #12
 8006daa:	bf38      	it	cc
 8006dac:	250c      	movcc	r5, #12
 8006dae:	2d00      	cmp	r5, #0
 8006db0:	4606      	mov	r6, r0
 8006db2:	db01      	blt.n	8006db8 <_malloc_r+0x1c>
 8006db4:	42a9      	cmp	r1, r5
 8006db6:	d904      	bls.n	8006dc2 <_malloc_r+0x26>
 8006db8:	230c      	movs	r3, #12
 8006dba:	6033      	str	r3, [r6, #0]
 8006dbc:	2000      	movs	r0, #0
 8006dbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dc2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006e98 <_malloc_r+0xfc>
 8006dc6:	f000 f869 	bl	8006e9c <__malloc_lock>
 8006dca:	f8d8 3000 	ldr.w	r3, [r8]
 8006dce:	461c      	mov	r4, r3
 8006dd0:	bb44      	cbnz	r4, 8006e24 <_malloc_r+0x88>
 8006dd2:	4629      	mov	r1, r5
 8006dd4:	4630      	mov	r0, r6
 8006dd6:	f7ff ffbf 	bl	8006d58 <sbrk_aligned>
 8006dda:	1c43      	adds	r3, r0, #1
 8006ddc:	4604      	mov	r4, r0
 8006dde:	d158      	bne.n	8006e92 <_malloc_r+0xf6>
 8006de0:	f8d8 4000 	ldr.w	r4, [r8]
 8006de4:	4627      	mov	r7, r4
 8006de6:	2f00      	cmp	r7, #0
 8006de8:	d143      	bne.n	8006e72 <_malloc_r+0xd6>
 8006dea:	2c00      	cmp	r4, #0
 8006dec:	d04b      	beq.n	8006e86 <_malloc_r+0xea>
 8006dee:	6823      	ldr	r3, [r4, #0]
 8006df0:	4639      	mov	r1, r7
 8006df2:	4630      	mov	r0, r6
 8006df4:	eb04 0903 	add.w	r9, r4, r3
 8006df8:	f000 f98c 	bl	8007114 <_sbrk_r>
 8006dfc:	4581      	cmp	r9, r0
 8006dfe:	d142      	bne.n	8006e86 <_malloc_r+0xea>
 8006e00:	6821      	ldr	r1, [r4, #0]
 8006e02:	1a6d      	subs	r5, r5, r1
 8006e04:	4629      	mov	r1, r5
 8006e06:	4630      	mov	r0, r6
 8006e08:	f7ff ffa6 	bl	8006d58 <sbrk_aligned>
 8006e0c:	3001      	adds	r0, #1
 8006e0e:	d03a      	beq.n	8006e86 <_malloc_r+0xea>
 8006e10:	6823      	ldr	r3, [r4, #0]
 8006e12:	442b      	add	r3, r5
 8006e14:	6023      	str	r3, [r4, #0]
 8006e16:	f8d8 3000 	ldr.w	r3, [r8]
 8006e1a:	685a      	ldr	r2, [r3, #4]
 8006e1c:	bb62      	cbnz	r2, 8006e78 <_malloc_r+0xdc>
 8006e1e:	f8c8 7000 	str.w	r7, [r8]
 8006e22:	e00f      	b.n	8006e44 <_malloc_r+0xa8>
 8006e24:	6822      	ldr	r2, [r4, #0]
 8006e26:	1b52      	subs	r2, r2, r5
 8006e28:	d420      	bmi.n	8006e6c <_malloc_r+0xd0>
 8006e2a:	2a0b      	cmp	r2, #11
 8006e2c:	d917      	bls.n	8006e5e <_malloc_r+0xc2>
 8006e2e:	1961      	adds	r1, r4, r5
 8006e30:	42a3      	cmp	r3, r4
 8006e32:	6025      	str	r5, [r4, #0]
 8006e34:	bf18      	it	ne
 8006e36:	6059      	strne	r1, [r3, #4]
 8006e38:	6863      	ldr	r3, [r4, #4]
 8006e3a:	bf08      	it	eq
 8006e3c:	f8c8 1000 	streq.w	r1, [r8]
 8006e40:	5162      	str	r2, [r4, r5]
 8006e42:	604b      	str	r3, [r1, #4]
 8006e44:	4630      	mov	r0, r6
 8006e46:	f000 f82f 	bl	8006ea8 <__malloc_unlock>
 8006e4a:	f104 000b 	add.w	r0, r4, #11
 8006e4e:	1d23      	adds	r3, r4, #4
 8006e50:	f020 0007 	bic.w	r0, r0, #7
 8006e54:	1ac2      	subs	r2, r0, r3
 8006e56:	bf1c      	itt	ne
 8006e58:	1a1b      	subne	r3, r3, r0
 8006e5a:	50a3      	strne	r3, [r4, r2]
 8006e5c:	e7af      	b.n	8006dbe <_malloc_r+0x22>
 8006e5e:	6862      	ldr	r2, [r4, #4]
 8006e60:	42a3      	cmp	r3, r4
 8006e62:	bf0c      	ite	eq
 8006e64:	f8c8 2000 	streq.w	r2, [r8]
 8006e68:	605a      	strne	r2, [r3, #4]
 8006e6a:	e7eb      	b.n	8006e44 <_malloc_r+0xa8>
 8006e6c:	4623      	mov	r3, r4
 8006e6e:	6864      	ldr	r4, [r4, #4]
 8006e70:	e7ae      	b.n	8006dd0 <_malloc_r+0x34>
 8006e72:	463c      	mov	r4, r7
 8006e74:	687f      	ldr	r7, [r7, #4]
 8006e76:	e7b6      	b.n	8006de6 <_malloc_r+0x4a>
 8006e78:	461a      	mov	r2, r3
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	42a3      	cmp	r3, r4
 8006e7e:	d1fb      	bne.n	8006e78 <_malloc_r+0xdc>
 8006e80:	2300      	movs	r3, #0
 8006e82:	6053      	str	r3, [r2, #4]
 8006e84:	e7de      	b.n	8006e44 <_malloc_r+0xa8>
 8006e86:	230c      	movs	r3, #12
 8006e88:	6033      	str	r3, [r6, #0]
 8006e8a:	4630      	mov	r0, r6
 8006e8c:	f000 f80c 	bl	8006ea8 <__malloc_unlock>
 8006e90:	e794      	b.n	8006dbc <_malloc_r+0x20>
 8006e92:	6005      	str	r5, [r0, #0]
 8006e94:	e7d6      	b.n	8006e44 <_malloc_r+0xa8>
 8006e96:	bf00      	nop
 8006e98:	20001eb4 	.word	0x20001eb4

08006e9c <__malloc_lock>:
 8006e9c:	4801      	ldr	r0, [pc, #4]	@ (8006ea4 <__malloc_lock+0x8>)
 8006e9e:	f7ff bf0e 	b.w	8006cbe <__retarget_lock_acquire_recursive>
 8006ea2:	bf00      	nop
 8006ea4:	20001eac 	.word	0x20001eac

08006ea8 <__malloc_unlock>:
 8006ea8:	4801      	ldr	r0, [pc, #4]	@ (8006eb0 <__malloc_unlock+0x8>)
 8006eaa:	f7ff bf09 	b.w	8006cc0 <__retarget_lock_release_recursive>
 8006eae:	bf00      	nop
 8006eb0:	20001eac 	.word	0x20001eac

08006eb4 <__sflush_r>:
 8006eb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ebc:	0716      	lsls	r6, r2, #28
 8006ebe:	4605      	mov	r5, r0
 8006ec0:	460c      	mov	r4, r1
 8006ec2:	d454      	bmi.n	8006f6e <__sflush_r+0xba>
 8006ec4:	684b      	ldr	r3, [r1, #4]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	dc02      	bgt.n	8006ed0 <__sflush_r+0x1c>
 8006eca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	dd48      	ble.n	8006f62 <__sflush_r+0xae>
 8006ed0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006ed2:	2e00      	cmp	r6, #0
 8006ed4:	d045      	beq.n	8006f62 <__sflush_r+0xae>
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006edc:	682f      	ldr	r7, [r5, #0]
 8006ede:	6a21      	ldr	r1, [r4, #32]
 8006ee0:	602b      	str	r3, [r5, #0]
 8006ee2:	d030      	beq.n	8006f46 <__sflush_r+0x92>
 8006ee4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006ee6:	89a3      	ldrh	r3, [r4, #12]
 8006ee8:	0759      	lsls	r1, r3, #29
 8006eea:	d505      	bpl.n	8006ef8 <__sflush_r+0x44>
 8006eec:	6863      	ldr	r3, [r4, #4]
 8006eee:	1ad2      	subs	r2, r2, r3
 8006ef0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006ef2:	b10b      	cbz	r3, 8006ef8 <__sflush_r+0x44>
 8006ef4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006ef6:	1ad2      	subs	r2, r2, r3
 8006ef8:	2300      	movs	r3, #0
 8006efa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006efc:	6a21      	ldr	r1, [r4, #32]
 8006efe:	4628      	mov	r0, r5
 8006f00:	47b0      	blx	r6
 8006f02:	1c43      	adds	r3, r0, #1
 8006f04:	89a3      	ldrh	r3, [r4, #12]
 8006f06:	d106      	bne.n	8006f16 <__sflush_r+0x62>
 8006f08:	6829      	ldr	r1, [r5, #0]
 8006f0a:	291d      	cmp	r1, #29
 8006f0c:	d82b      	bhi.n	8006f66 <__sflush_r+0xb2>
 8006f0e:	4a2a      	ldr	r2, [pc, #168]	@ (8006fb8 <__sflush_r+0x104>)
 8006f10:	410a      	asrs	r2, r1
 8006f12:	07d6      	lsls	r6, r2, #31
 8006f14:	d427      	bmi.n	8006f66 <__sflush_r+0xb2>
 8006f16:	2200      	movs	r2, #0
 8006f18:	6062      	str	r2, [r4, #4]
 8006f1a:	04d9      	lsls	r1, r3, #19
 8006f1c:	6922      	ldr	r2, [r4, #16]
 8006f1e:	6022      	str	r2, [r4, #0]
 8006f20:	d504      	bpl.n	8006f2c <__sflush_r+0x78>
 8006f22:	1c42      	adds	r2, r0, #1
 8006f24:	d101      	bne.n	8006f2a <__sflush_r+0x76>
 8006f26:	682b      	ldr	r3, [r5, #0]
 8006f28:	b903      	cbnz	r3, 8006f2c <__sflush_r+0x78>
 8006f2a:	6560      	str	r0, [r4, #84]	@ 0x54
 8006f2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f2e:	602f      	str	r7, [r5, #0]
 8006f30:	b1b9      	cbz	r1, 8006f62 <__sflush_r+0xae>
 8006f32:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006f36:	4299      	cmp	r1, r3
 8006f38:	d002      	beq.n	8006f40 <__sflush_r+0x8c>
 8006f3a:	4628      	mov	r0, r5
 8006f3c:	f7ff fec2 	bl	8006cc4 <_free_r>
 8006f40:	2300      	movs	r3, #0
 8006f42:	6363      	str	r3, [r4, #52]	@ 0x34
 8006f44:	e00d      	b.n	8006f62 <__sflush_r+0xae>
 8006f46:	2301      	movs	r3, #1
 8006f48:	4628      	mov	r0, r5
 8006f4a:	47b0      	blx	r6
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	1c50      	adds	r0, r2, #1
 8006f50:	d1c9      	bne.n	8006ee6 <__sflush_r+0x32>
 8006f52:	682b      	ldr	r3, [r5, #0]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d0c6      	beq.n	8006ee6 <__sflush_r+0x32>
 8006f58:	2b1d      	cmp	r3, #29
 8006f5a:	d001      	beq.n	8006f60 <__sflush_r+0xac>
 8006f5c:	2b16      	cmp	r3, #22
 8006f5e:	d11e      	bne.n	8006f9e <__sflush_r+0xea>
 8006f60:	602f      	str	r7, [r5, #0]
 8006f62:	2000      	movs	r0, #0
 8006f64:	e022      	b.n	8006fac <__sflush_r+0xf8>
 8006f66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f6a:	b21b      	sxth	r3, r3
 8006f6c:	e01b      	b.n	8006fa6 <__sflush_r+0xf2>
 8006f6e:	690f      	ldr	r7, [r1, #16]
 8006f70:	2f00      	cmp	r7, #0
 8006f72:	d0f6      	beq.n	8006f62 <__sflush_r+0xae>
 8006f74:	0793      	lsls	r3, r2, #30
 8006f76:	680e      	ldr	r6, [r1, #0]
 8006f78:	bf08      	it	eq
 8006f7a:	694b      	ldreq	r3, [r1, #20]
 8006f7c:	600f      	str	r7, [r1, #0]
 8006f7e:	bf18      	it	ne
 8006f80:	2300      	movne	r3, #0
 8006f82:	eba6 0807 	sub.w	r8, r6, r7
 8006f86:	608b      	str	r3, [r1, #8]
 8006f88:	f1b8 0f00 	cmp.w	r8, #0
 8006f8c:	dde9      	ble.n	8006f62 <__sflush_r+0xae>
 8006f8e:	6a21      	ldr	r1, [r4, #32]
 8006f90:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006f92:	4643      	mov	r3, r8
 8006f94:	463a      	mov	r2, r7
 8006f96:	4628      	mov	r0, r5
 8006f98:	47b0      	blx	r6
 8006f9a:	2800      	cmp	r0, #0
 8006f9c:	dc08      	bgt.n	8006fb0 <__sflush_r+0xfc>
 8006f9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fa2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fa6:	81a3      	strh	r3, [r4, #12]
 8006fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8006fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fb0:	4407      	add	r7, r0
 8006fb2:	eba8 0800 	sub.w	r8, r8, r0
 8006fb6:	e7e7      	b.n	8006f88 <__sflush_r+0xd4>
 8006fb8:	dfbffffe 	.word	0xdfbffffe

08006fbc <_fflush_r>:
 8006fbc:	b538      	push	{r3, r4, r5, lr}
 8006fbe:	690b      	ldr	r3, [r1, #16]
 8006fc0:	4605      	mov	r5, r0
 8006fc2:	460c      	mov	r4, r1
 8006fc4:	b913      	cbnz	r3, 8006fcc <_fflush_r+0x10>
 8006fc6:	2500      	movs	r5, #0
 8006fc8:	4628      	mov	r0, r5
 8006fca:	bd38      	pop	{r3, r4, r5, pc}
 8006fcc:	b118      	cbz	r0, 8006fd6 <_fflush_r+0x1a>
 8006fce:	6a03      	ldr	r3, [r0, #32]
 8006fd0:	b90b      	cbnz	r3, 8006fd6 <_fflush_r+0x1a>
 8006fd2:	f7ff fc8f 	bl	80068f4 <__sinit>
 8006fd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d0f3      	beq.n	8006fc6 <_fflush_r+0xa>
 8006fde:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006fe0:	07d0      	lsls	r0, r2, #31
 8006fe2:	d404      	bmi.n	8006fee <_fflush_r+0x32>
 8006fe4:	0599      	lsls	r1, r3, #22
 8006fe6:	d402      	bmi.n	8006fee <_fflush_r+0x32>
 8006fe8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006fea:	f7ff fe68 	bl	8006cbe <__retarget_lock_acquire_recursive>
 8006fee:	4628      	mov	r0, r5
 8006ff0:	4621      	mov	r1, r4
 8006ff2:	f7ff ff5f 	bl	8006eb4 <__sflush_r>
 8006ff6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006ff8:	07da      	lsls	r2, r3, #31
 8006ffa:	4605      	mov	r5, r0
 8006ffc:	d4e4      	bmi.n	8006fc8 <_fflush_r+0xc>
 8006ffe:	89a3      	ldrh	r3, [r4, #12]
 8007000:	059b      	lsls	r3, r3, #22
 8007002:	d4e1      	bmi.n	8006fc8 <_fflush_r+0xc>
 8007004:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007006:	f7ff fe5b 	bl	8006cc0 <__retarget_lock_release_recursive>
 800700a:	e7dd      	b.n	8006fc8 <_fflush_r+0xc>

0800700c <__swhatbuf_r>:
 800700c:	b570      	push	{r4, r5, r6, lr}
 800700e:	460c      	mov	r4, r1
 8007010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007014:	2900      	cmp	r1, #0
 8007016:	b096      	sub	sp, #88	@ 0x58
 8007018:	4615      	mov	r5, r2
 800701a:	461e      	mov	r6, r3
 800701c:	da0d      	bge.n	800703a <__swhatbuf_r+0x2e>
 800701e:	89a3      	ldrh	r3, [r4, #12]
 8007020:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007024:	f04f 0100 	mov.w	r1, #0
 8007028:	bf14      	ite	ne
 800702a:	2340      	movne	r3, #64	@ 0x40
 800702c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007030:	2000      	movs	r0, #0
 8007032:	6031      	str	r1, [r6, #0]
 8007034:	602b      	str	r3, [r5, #0]
 8007036:	b016      	add	sp, #88	@ 0x58
 8007038:	bd70      	pop	{r4, r5, r6, pc}
 800703a:	466a      	mov	r2, sp
 800703c:	f000 f848 	bl	80070d0 <_fstat_r>
 8007040:	2800      	cmp	r0, #0
 8007042:	dbec      	blt.n	800701e <__swhatbuf_r+0x12>
 8007044:	9901      	ldr	r1, [sp, #4]
 8007046:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800704a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800704e:	4259      	negs	r1, r3
 8007050:	4159      	adcs	r1, r3
 8007052:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007056:	e7eb      	b.n	8007030 <__swhatbuf_r+0x24>

08007058 <__smakebuf_r>:
 8007058:	898b      	ldrh	r3, [r1, #12]
 800705a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800705c:	079d      	lsls	r5, r3, #30
 800705e:	4606      	mov	r6, r0
 8007060:	460c      	mov	r4, r1
 8007062:	d507      	bpl.n	8007074 <__smakebuf_r+0x1c>
 8007064:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007068:	6023      	str	r3, [r4, #0]
 800706a:	6123      	str	r3, [r4, #16]
 800706c:	2301      	movs	r3, #1
 800706e:	6163      	str	r3, [r4, #20]
 8007070:	b003      	add	sp, #12
 8007072:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007074:	ab01      	add	r3, sp, #4
 8007076:	466a      	mov	r2, sp
 8007078:	f7ff ffc8 	bl	800700c <__swhatbuf_r>
 800707c:	9f00      	ldr	r7, [sp, #0]
 800707e:	4605      	mov	r5, r0
 8007080:	4639      	mov	r1, r7
 8007082:	4630      	mov	r0, r6
 8007084:	f7ff fe8a 	bl	8006d9c <_malloc_r>
 8007088:	b948      	cbnz	r0, 800709e <__smakebuf_r+0x46>
 800708a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800708e:	059a      	lsls	r2, r3, #22
 8007090:	d4ee      	bmi.n	8007070 <__smakebuf_r+0x18>
 8007092:	f023 0303 	bic.w	r3, r3, #3
 8007096:	f043 0302 	orr.w	r3, r3, #2
 800709a:	81a3      	strh	r3, [r4, #12]
 800709c:	e7e2      	b.n	8007064 <__smakebuf_r+0xc>
 800709e:	89a3      	ldrh	r3, [r4, #12]
 80070a0:	6020      	str	r0, [r4, #0]
 80070a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070a6:	81a3      	strh	r3, [r4, #12]
 80070a8:	9b01      	ldr	r3, [sp, #4]
 80070aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80070ae:	b15b      	cbz	r3, 80070c8 <__smakebuf_r+0x70>
 80070b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070b4:	4630      	mov	r0, r6
 80070b6:	f000 f81d 	bl	80070f4 <_isatty_r>
 80070ba:	b128      	cbz	r0, 80070c8 <__smakebuf_r+0x70>
 80070bc:	89a3      	ldrh	r3, [r4, #12]
 80070be:	f023 0303 	bic.w	r3, r3, #3
 80070c2:	f043 0301 	orr.w	r3, r3, #1
 80070c6:	81a3      	strh	r3, [r4, #12]
 80070c8:	89a3      	ldrh	r3, [r4, #12]
 80070ca:	431d      	orrs	r5, r3
 80070cc:	81a5      	strh	r5, [r4, #12]
 80070ce:	e7cf      	b.n	8007070 <__smakebuf_r+0x18>

080070d0 <_fstat_r>:
 80070d0:	b538      	push	{r3, r4, r5, lr}
 80070d2:	4d07      	ldr	r5, [pc, #28]	@ (80070f0 <_fstat_r+0x20>)
 80070d4:	2300      	movs	r3, #0
 80070d6:	4604      	mov	r4, r0
 80070d8:	4608      	mov	r0, r1
 80070da:	4611      	mov	r1, r2
 80070dc:	602b      	str	r3, [r5, #0]
 80070de:	f7f9 fd72 	bl	8000bc6 <_fstat>
 80070e2:	1c43      	adds	r3, r0, #1
 80070e4:	d102      	bne.n	80070ec <_fstat_r+0x1c>
 80070e6:	682b      	ldr	r3, [r5, #0]
 80070e8:	b103      	cbz	r3, 80070ec <_fstat_r+0x1c>
 80070ea:	6023      	str	r3, [r4, #0]
 80070ec:	bd38      	pop	{r3, r4, r5, pc}
 80070ee:	bf00      	nop
 80070f0:	20001ea8 	.word	0x20001ea8

080070f4 <_isatty_r>:
 80070f4:	b538      	push	{r3, r4, r5, lr}
 80070f6:	4d06      	ldr	r5, [pc, #24]	@ (8007110 <_isatty_r+0x1c>)
 80070f8:	2300      	movs	r3, #0
 80070fa:	4604      	mov	r4, r0
 80070fc:	4608      	mov	r0, r1
 80070fe:	602b      	str	r3, [r5, #0]
 8007100:	f7f9 fd71 	bl	8000be6 <_isatty>
 8007104:	1c43      	adds	r3, r0, #1
 8007106:	d102      	bne.n	800710e <_isatty_r+0x1a>
 8007108:	682b      	ldr	r3, [r5, #0]
 800710a:	b103      	cbz	r3, 800710e <_isatty_r+0x1a>
 800710c:	6023      	str	r3, [r4, #0]
 800710e:	bd38      	pop	{r3, r4, r5, pc}
 8007110:	20001ea8 	.word	0x20001ea8

08007114 <_sbrk_r>:
 8007114:	b538      	push	{r3, r4, r5, lr}
 8007116:	4d06      	ldr	r5, [pc, #24]	@ (8007130 <_sbrk_r+0x1c>)
 8007118:	2300      	movs	r3, #0
 800711a:	4604      	mov	r4, r0
 800711c:	4608      	mov	r0, r1
 800711e:	602b      	str	r3, [r5, #0]
 8007120:	f7f9 fd7a 	bl	8000c18 <_sbrk>
 8007124:	1c43      	adds	r3, r0, #1
 8007126:	d102      	bne.n	800712e <_sbrk_r+0x1a>
 8007128:	682b      	ldr	r3, [r5, #0]
 800712a:	b103      	cbz	r3, 800712e <_sbrk_r+0x1a>
 800712c:	6023      	str	r3, [r4, #0]
 800712e:	bd38      	pop	{r3, r4, r5, pc}
 8007130:	20001ea8 	.word	0x20001ea8

08007134 <_init>:
 8007134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007136:	bf00      	nop
 8007138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800713a:	bc08      	pop	{r3}
 800713c:	469e      	mov	lr, r3
 800713e:	4770      	bx	lr

08007140 <_fini>:
 8007140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007142:	bf00      	nop
 8007144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007146:	bc08      	pop	{r3}
 8007148:	469e      	mov	lr, r3
 800714a:	4770      	bx	lr
