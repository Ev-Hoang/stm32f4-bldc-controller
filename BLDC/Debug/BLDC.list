
BLDC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007080  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08007208  08007208  00008208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800727c  0800727c  0000915c  2**0
                  CONTENTS
  4 .ARM          00000008  0800727c  0800727c  0000827c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007284  08007284  0000915c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007284  08007284  00008284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007288  08007288  00008288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000015c  20000000  0800728c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000915c  2**0
                  CONTENTS
 10 .bss          00001d5c  2000015c  2000015c  0000915c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001eb8  20001eb8  0000915c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000915c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e4b3  00000000  00000000  0000918c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d25  00000000  00000000  0001763f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c38  00000000  00000000  0001a368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008fa  00000000  00000000  0001afa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002484e  00000000  00000000  0001b89a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011728  00000000  00000000  000400e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf06f  00000000  00000000  00051810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012087f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003608  00000000  00000000  001208c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000046  00000000  00000000  00123ecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000015c 	.word	0x2000015c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080071f0 	.word	0x080071f0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000160 	.word	0x20000160
 80001c4:	080071f0 	.word	0x080071f0

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <STM32_Init>:

//======================================================
//STM32 FULL INITIALIZATION
//======================================================
void STM32_Init(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	//HALL
	HAL_Init();
 80001dc:	f000 fdac 	bl	8000d38 <HAL_Init>

	//SYSTEMCLOCK
	SystemClock_Config();
 80001e0:	f000 f80e 	bl	8000200 <SystemClock_Config>

	//USB_DEVICE (USB_CDC)
	MX_USB_DEVICE_Init();
 80001e4:	f005 fe64 	bl	8005eb0 <MX_USB_DEVICE_Init>

	//GPIO
	GPIO_Init();
 80001e8:	f000 f96a 	bl	80004c0 <GPIO_Init>

	//TIMER
	TIM2_Init();
 80001ec:	f000 f866 	bl	80002bc <TIM2_Init>
	TIM3_Init();
 80001f0:	f000 f8c6 	bl	8000380 <TIM3_Init>
	TIM4_Init();
 80001f4:	f000 f914 	bl	8000420 <TIM4_Init>

	//COMMUNICATION UART
	USART1_UART_Init();
 80001f8:	f000 fa38 	bl	800066c <USART1_UART_Init>
}
 80001fc:	bf00      	nop
 80001fe:	bd80      	pop	{r7, pc}

08000200 <SystemClock_Config>:

//======================================================
//SYSTEMCLOCK CONFIG
//======================================================
void SystemClock_Config(void)
{
 8000200:	b480      	push	{r7}
 8000202:	af00      	add	r7, sp, #0
    // 1. Enable HSI (High-Speed Internal Clock)
    RCC->CR |= RCC_CR_HSION;
 8000204:	4b2a      	ldr	r3, [pc, #168]	@ (80002b0 <SystemClock_Config+0xb0>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a29      	ldr	r2, [pc, #164]	@ (80002b0 <SystemClock_Config+0xb0>)
 800020a:	f043 0301 	orr.w	r3, r3, #1
 800020e:	6013      	str	r3, [r2, #0]
    while ((RCC->CR & RCC_CR_HSIRDY) == 0); // Wait till HSI is ready
 8000210:	bf00      	nop
 8000212:	4b27      	ldr	r3, [pc, #156]	@ (80002b0 <SystemClock_Config+0xb0>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	f003 0302 	and.w	r3, r3, #2
 800021a:	2b00      	cmp	r3, #0
 800021c:	d0f9      	beq.n	8000212 <SystemClock_Config+0x12>

    // 2. Reset PLL
    RCC->CR &= ~RCC_CR_PLLON; // Turn off PLL
 800021e:	4b24      	ldr	r3, [pc, #144]	@ (80002b0 <SystemClock_Config+0xb0>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	4a23      	ldr	r2, [pc, #140]	@ (80002b0 <SystemClock_Config+0xb0>)
 8000224:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000228:	6013      	str	r3, [r2, #0]
    while (RCC->CR & RCC_CR_PLLRDY); // Wait PLL disabled
 800022a:	bf00      	nop
 800022c:	4b20      	ldr	r3, [pc, #128]	@ (80002b0 <SystemClock_Config+0xb0>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000234:	2b00      	cmp	r3, #0
 8000236:	d1f9      	bne.n	800022c <SystemClock_Config+0x2c>
     * PLL_P = 4 (00: /2, 01: /4, ...)
     * PLL_Q = 7
     *
     * SYSCLK = ((16 MHz / 16) * 336) / 4 = 84 MHz
     */
    RCC->PLLCFGR = (16 << RCC_PLLCFGR_PLLM_Pos) |
 8000238:	4b1d      	ldr	r3, [pc, #116]	@ (80002b0 <SystemClock_Config+0xb0>)
 800023a:	4a1e      	ldr	r2, [pc, #120]	@ (80002b4 <SystemClock_Config+0xb4>)
 800023c:	605a      	str	r2, [r3, #4]
                   (1 << RCC_PLLCFGR_PLLP_Pos) |  // PLLP = 4 -> 01b
                   (7 << RCC_PLLCFGR_PLLQ_Pos) |
                   (RCC_PLLCFGR_PLLSRC_HSI);      // PLL source = HSI

    // 4. Enable PLL
    RCC->CR |= RCC_CR_PLLON;
 800023e:	4b1c      	ldr	r3, [pc, #112]	@ (80002b0 <SystemClock_Config+0xb0>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	4a1b      	ldr	r2, [pc, #108]	@ (80002b0 <SystemClock_Config+0xb0>)
 8000244:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000248:	6013      	str	r3, [r2, #0]
    while ((RCC->CR & RCC_CR_PLLRDY) == 0); // Wait till PLL is ready
 800024a:	bf00      	nop
 800024c:	4b18      	ldr	r3, [pc, #96]	@ (80002b0 <SystemClock_Config+0xb0>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000254:	2b00      	cmp	r3, #0
 8000256:	d0f9      	beq.n	800024c <SystemClock_Config+0x4c>

    // 5. Configure Flash Latency
    FLASH->ACR = FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_PRFTEN | FLASH_ACR_LATENCY_2WS;
 8000258:	4b17      	ldr	r3, [pc, #92]	@ (80002b8 <SystemClock_Config+0xb8>)
 800025a:	f240 7202 	movw	r2, #1794	@ 0x702
 800025e:	601a      	str	r2, [r3, #0]

    // 6. Set AHB, APB1, APB2 prescaler
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;   // AHB prescaler = /1 -> 84 MHz
 8000260:	4b13      	ldr	r3, [pc, #76]	@ (80002b0 <SystemClock_Config+0xb0>)
 8000262:	4a13      	ldr	r2, [pc, #76]	@ (80002b0 <SystemClock_Config+0xb0>)
 8000264:	689b      	ldr	r3, [r3, #8]
 8000266:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;  // APB1 prescaler = /2 -> 42 MHz
 8000268:	4b11      	ldr	r3, [pc, #68]	@ (80002b0 <SystemClock_Config+0xb0>)
 800026a:	689b      	ldr	r3, [r3, #8]
 800026c:	4a10      	ldr	r2, [pc, #64]	@ (80002b0 <SystemClock_Config+0xb0>)
 800026e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000272:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;  // APB2 prescaler = /1 -> 84 MHz
 8000274:	4b0e      	ldr	r3, [pc, #56]	@ (80002b0 <SystemClock_Config+0xb0>)
 8000276:	4a0e      	ldr	r2, [pc, #56]	@ (80002b0 <SystemClock_Config+0xb0>)
 8000278:	689b      	ldr	r3, [r3, #8]
 800027a:	6093      	str	r3, [r2, #8]

    // 7. Select PLL as system clock
    RCC->CFGR &= ~RCC_CFGR_SW;         // Clear SW bits
 800027c:	4b0c      	ldr	r3, [pc, #48]	@ (80002b0 <SystemClock_Config+0xb0>)
 800027e:	689b      	ldr	r3, [r3, #8]
 8000280:	4a0b      	ldr	r2, [pc, #44]	@ (80002b0 <SystemClock_Config+0xb0>)
 8000282:	f023 0303 	bic.w	r3, r3, #3
 8000286:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;      // Select PLL as system clock
 8000288:	4b09      	ldr	r3, [pc, #36]	@ (80002b0 <SystemClock_Config+0xb0>)
 800028a:	689b      	ldr	r3, [r3, #8]
 800028c:	4a08      	ldr	r2, [pc, #32]	@ (80002b0 <SystemClock_Config+0xb0>)
 800028e:	f043 0302 	orr.w	r3, r3, #2
 8000292:	6093      	str	r3, [r2, #8]
    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL); // Wait till PLL is system clock
 8000294:	bf00      	nop
 8000296:	4b06      	ldr	r3, [pc, #24]	@ (80002b0 <SystemClock_Config+0xb0>)
 8000298:	689b      	ldr	r3, [r3, #8]
 800029a:	f003 030c 	and.w	r3, r3, #12
 800029e:	2b08      	cmp	r3, #8
 80002a0:	d1f9      	bne.n	8000296 <SystemClock_Config+0x96>
}
 80002a2:	bf00      	nop
 80002a4:	bf00      	nop
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	40023800 	.word	0x40023800
 80002b4:	07015410 	.word	0x07015410
 80002b8:	40023c00 	.word	0x40023c00

080002bc <TIM2_Init>:

//======================================================
//TIMER INITIALIZE
//======================================================
void TIM2_Init(void) {
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
    // Enable TIM2 clock
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80002c0:	4b2e      	ldr	r3, [pc, #184]	@ (800037c <TIM2_Init+0xc0>)
 80002c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002c4:	4a2d      	ldr	r2, [pc, #180]	@ (800037c <TIM2_Init+0xc0>)
 80002c6:	f043 0301 	orr.w	r3, r3, #1
 80002ca:	6413      	str	r3, [r2, #64]	@ 0x40

    // Set prescaler and auto-reload for 1kHz PWM
    TIM2->PSC = 3;     // 84MHz / (3+1) = 21MHz
 80002cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002d0:	2203      	movs	r2, #3
 80002d2:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 1000;   // PWM frequency ~ 20.9Khz
 80002d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002d8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80002dc:	62da      	str	r2, [r3, #44]	@ 0x2c

    // PWM mode 1, preload enable for CH1-CH4
    TIM2->CCMR1 |= (6 << 4) | TIM_CCMR1_OC1PE;  // CH1
 80002de:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002e8:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 80002ec:	6193      	str	r3, [r2, #24]
    TIM2->CCMR1 |= (6 << 12) | TIM_CCMR1_OC2PE; // CH2
 80002ee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002f8:	f443 43d0 	orr.w	r3, r3, #26624	@ 0x6800
 80002fc:	6193      	str	r3, [r2, #24]
    TIM2->CCMR2 |= (6 << 4) | TIM_CCMR2_OC3PE;  // CH3
 80002fe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000302:	69db      	ldr	r3, [r3, #28]
 8000304:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000308:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 800030c:	61d3      	str	r3, [r2, #28]
    TIM2->CCMR2 |= (6 << 12) | TIM_CCMR2_OC4PE; // CH4
 800030e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000312:	69db      	ldr	r3, [r3, #28]
 8000314:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000318:	f443 43d0 	orr.w	r3, r3, #26624	@ 0x6800
 800031c:	61d3      	str	r3, [r2, #28]

    // Enable outputs
    TIM2->CCER |= TIM_CCER_CC1E | TIM_CCER_CC2E |
 800031e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000322:	6a1b      	ldr	r3, [r3, #32]
 8000324:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000328:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 800032c:	f043 0311 	orr.w	r3, r3, #17
 8000330:	6213      	str	r3, [r2, #32]
                  TIM_CCER_CC3E | TIM_CCER_CC4E;

    // Force update
    TIM2->EGR |= TIM_EGR_UG;
 8000332:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000336:	695b      	ldr	r3, [r3, #20]
 8000338:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800033c:	f043 0301 	orr.w	r3, r3, #1
 8000340:	6153      	str	r3, [r2, #20]

    // Set duty cycle = 0
    TIM2->CCR1 = 0;
 8000342:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000346:	2200      	movs	r2, #0
 8000348:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2->CCR2 = 0;
 800034a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800034e:	2200      	movs	r2, #0
 8000350:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM2->CCR3 = 0;
 8000352:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000356:	2200      	movs	r2, #0
 8000358:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2->CCR4 = 0;
 800035a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800035e:	2200      	movs	r2, #0
 8000360:	641a      	str	r2, [r3, #64]	@ 0x40

    // Enable counter
    TIM2->CR1 |= TIM_CR1_CEN;
 8000362:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800036c:	f043 0301 	orr.w	r3, r3, #1
 8000370:	6013      	str	r3, [r2, #0]
}
 8000372:	bf00      	nop
 8000374:	46bd      	mov	sp, r7
 8000376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037a:	4770      	bx	lr
 800037c:	40023800 	.word	0x40023800

08000380 <TIM3_Init>:

void TIM3_Init(void) {
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000384:	4b24      	ldr	r3, [pc, #144]	@ (8000418 <TIM3_Init+0x98>)
 8000386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000388:	4a23      	ldr	r2, [pc, #140]	@ (8000418 <TIM3_Init+0x98>)
 800038a:	f043 0302 	orr.w	r3, r3, #2
 800038e:	6413      	str	r3, [r2, #64]	@ 0x40
    TIM3->PSC = 3;
 8000390:	4b22      	ldr	r3, [pc, #136]	@ (800041c <TIM3_Init+0x9c>)
 8000392:	2203      	movs	r2, #3
 8000394:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM3->ARR = 1000;
 8000396:	4b21      	ldr	r3, [pc, #132]	@ (800041c <TIM3_Init+0x9c>)
 8000398:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800039c:	62da      	str	r2, [r3, #44]	@ 0x2c

    TIM3->CCMR1 |= (6 << 4) | TIM_CCMR1_OC1PE;
 800039e:	4b1f      	ldr	r3, [pc, #124]	@ (800041c <TIM3_Init+0x9c>)
 80003a0:	699b      	ldr	r3, [r3, #24]
 80003a2:	4a1e      	ldr	r2, [pc, #120]	@ (800041c <TIM3_Init+0x9c>)
 80003a4:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 80003a8:	6193      	str	r3, [r2, #24]
    TIM3->CCMR1 |= (6 << 12) | TIM_CCMR1_OC2PE;
 80003aa:	4b1c      	ldr	r3, [pc, #112]	@ (800041c <TIM3_Init+0x9c>)
 80003ac:	699b      	ldr	r3, [r3, #24]
 80003ae:	4a1b      	ldr	r2, [pc, #108]	@ (800041c <TIM3_Init+0x9c>)
 80003b0:	f443 43d0 	orr.w	r3, r3, #26624	@ 0x6800
 80003b4:	6193      	str	r3, [r2, #24]
    TIM3->CCMR2 |= (6 << 4) | TIM_CCMR2_OC3PE;
 80003b6:	4b19      	ldr	r3, [pc, #100]	@ (800041c <TIM3_Init+0x9c>)
 80003b8:	69db      	ldr	r3, [r3, #28]
 80003ba:	4a18      	ldr	r2, [pc, #96]	@ (800041c <TIM3_Init+0x9c>)
 80003bc:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 80003c0:	61d3      	str	r3, [r2, #28]
    TIM3->CCMR2 |= (6 << 12) | TIM_CCMR2_OC4PE;
 80003c2:	4b16      	ldr	r3, [pc, #88]	@ (800041c <TIM3_Init+0x9c>)
 80003c4:	69db      	ldr	r3, [r3, #28]
 80003c6:	4a15      	ldr	r2, [pc, #84]	@ (800041c <TIM3_Init+0x9c>)
 80003c8:	f443 43d0 	orr.w	r3, r3, #26624	@ 0x6800
 80003cc:	61d3      	str	r3, [r2, #28]

    TIM3->CCER |= TIM_CCER_CC1E | TIM_CCER_CC2E |
 80003ce:	4b13      	ldr	r3, [pc, #76]	@ (800041c <TIM3_Init+0x9c>)
 80003d0:	6a1b      	ldr	r3, [r3, #32]
 80003d2:	4a12      	ldr	r2, [pc, #72]	@ (800041c <TIM3_Init+0x9c>)
 80003d4:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 80003d8:	f043 0311 	orr.w	r3, r3, #17
 80003dc:	6213      	str	r3, [r2, #32]
                  TIM_CCER_CC3E | TIM_CCER_CC4E;

    TIM3->EGR |= TIM_EGR_UG;
 80003de:	4b0f      	ldr	r3, [pc, #60]	@ (800041c <TIM3_Init+0x9c>)
 80003e0:	695b      	ldr	r3, [r3, #20]
 80003e2:	4a0e      	ldr	r2, [pc, #56]	@ (800041c <TIM3_Init+0x9c>)
 80003e4:	f043 0301 	orr.w	r3, r3, #1
 80003e8:	6153      	str	r3, [r2, #20]

    TIM3->CCR1 = 0;
 80003ea:	4b0c      	ldr	r3, [pc, #48]	@ (800041c <TIM3_Init+0x9c>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3->CCR2 = 0;
 80003f0:	4b0a      	ldr	r3, [pc, #40]	@ (800041c <TIM3_Init+0x9c>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3->CCR3 = 0;
 80003f6:	4b09      	ldr	r3, [pc, #36]	@ (800041c <TIM3_Init+0x9c>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM3->CCR4 = 0;
 80003fc:	4b07      	ldr	r3, [pc, #28]	@ (800041c <TIM3_Init+0x9c>)
 80003fe:	2200      	movs	r2, #0
 8000400:	641a      	str	r2, [r3, #64]	@ 0x40

    TIM3->CR1 |= TIM_CR1_CEN;
 8000402:	4b06      	ldr	r3, [pc, #24]	@ (800041c <TIM3_Init+0x9c>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	4a05      	ldr	r2, [pc, #20]	@ (800041c <TIM3_Init+0x9c>)
 8000408:	f043 0301 	orr.w	r3, r3, #1
 800040c:	6013      	str	r3, [r2, #0]
}
 800040e:	bf00      	nop
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr
 8000418:	40023800 	.word	0x40023800
 800041c:	40000400 	.word	0x40000400

08000420 <TIM4_Init>:

void TIM4_Init(void) {
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8000424:	4b24      	ldr	r3, [pc, #144]	@ (80004b8 <TIM4_Init+0x98>)
 8000426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000428:	4a23      	ldr	r2, [pc, #140]	@ (80004b8 <TIM4_Init+0x98>)
 800042a:	f043 0304 	orr.w	r3, r3, #4
 800042e:	6413      	str	r3, [r2, #64]	@ 0x40
    TIM4->PSC = 3;
 8000430:	4b22      	ldr	r3, [pc, #136]	@ (80004bc <TIM4_Init+0x9c>)
 8000432:	2203      	movs	r2, #3
 8000434:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM4->ARR = 1000;
 8000436:	4b21      	ldr	r3, [pc, #132]	@ (80004bc <TIM4_Init+0x9c>)
 8000438:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800043c:	62da      	str	r2, [r3, #44]	@ 0x2c

    TIM4->CCMR1 |= (6 << 4) | TIM_CCMR1_OC1PE;
 800043e:	4b1f      	ldr	r3, [pc, #124]	@ (80004bc <TIM4_Init+0x9c>)
 8000440:	699b      	ldr	r3, [r3, #24]
 8000442:	4a1e      	ldr	r2, [pc, #120]	@ (80004bc <TIM4_Init+0x9c>)
 8000444:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 8000448:	6193      	str	r3, [r2, #24]
    TIM4->CCMR1 |= (6 << 12) | TIM_CCMR1_OC2PE;
 800044a:	4b1c      	ldr	r3, [pc, #112]	@ (80004bc <TIM4_Init+0x9c>)
 800044c:	699b      	ldr	r3, [r3, #24]
 800044e:	4a1b      	ldr	r2, [pc, #108]	@ (80004bc <TIM4_Init+0x9c>)
 8000450:	f443 43d0 	orr.w	r3, r3, #26624	@ 0x6800
 8000454:	6193      	str	r3, [r2, #24]
    TIM4->CCMR2 |= (6 << 4) | TIM_CCMR2_OC3PE;
 8000456:	4b19      	ldr	r3, [pc, #100]	@ (80004bc <TIM4_Init+0x9c>)
 8000458:	69db      	ldr	r3, [r3, #28]
 800045a:	4a18      	ldr	r2, [pc, #96]	@ (80004bc <TIM4_Init+0x9c>)
 800045c:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 8000460:	61d3      	str	r3, [r2, #28]
    TIM4->CCMR2 |= (6 << 12) | TIM_CCMR2_OC4PE;
 8000462:	4b16      	ldr	r3, [pc, #88]	@ (80004bc <TIM4_Init+0x9c>)
 8000464:	69db      	ldr	r3, [r3, #28]
 8000466:	4a15      	ldr	r2, [pc, #84]	@ (80004bc <TIM4_Init+0x9c>)
 8000468:	f443 43d0 	orr.w	r3, r3, #26624	@ 0x6800
 800046c:	61d3      	str	r3, [r2, #28]

    TIM4->CCER |= TIM_CCER_CC1E | TIM_CCER_CC2E |
 800046e:	4b13      	ldr	r3, [pc, #76]	@ (80004bc <TIM4_Init+0x9c>)
 8000470:	6a1b      	ldr	r3, [r3, #32]
 8000472:	4a12      	ldr	r2, [pc, #72]	@ (80004bc <TIM4_Init+0x9c>)
 8000474:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 8000478:	f043 0311 	orr.w	r3, r3, #17
 800047c:	6213      	str	r3, [r2, #32]
                  TIM_CCER_CC3E | TIM_CCER_CC4E;

    TIM4->EGR |= TIM_EGR_UG;
 800047e:	4b0f      	ldr	r3, [pc, #60]	@ (80004bc <TIM4_Init+0x9c>)
 8000480:	695b      	ldr	r3, [r3, #20]
 8000482:	4a0e      	ldr	r2, [pc, #56]	@ (80004bc <TIM4_Init+0x9c>)
 8000484:	f043 0301 	orr.w	r3, r3, #1
 8000488:	6153      	str	r3, [r2, #20]

    TIM4->CCR1 = 0;
 800048a:	4b0c      	ldr	r3, [pc, #48]	@ (80004bc <TIM4_Init+0x9c>)
 800048c:	2200      	movs	r2, #0
 800048e:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM4->CCR2 = 0;
 8000490:	4b0a      	ldr	r3, [pc, #40]	@ (80004bc <TIM4_Init+0x9c>)
 8000492:	2200      	movs	r2, #0
 8000494:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM4->CCR3 = 0;
 8000496:	4b09      	ldr	r3, [pc, #36]	@ (80004bc <TIM4_Init+0x9c>)
 8000498:	2200      	movs	r2, #0
 800049a:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM4->CCR4 = 0;
 800049c:	4b07      	ldr	r3, [pc, #28]	@ (80004bc <TIM4_Init+0x9c>)
 800049e:	2200      	movs	r2, #0
 80004a0:	641a      	str	r2, [r3, #64]	@ 0x40

    TIM4->CR1 |= TIM_CR1_CEN;
 80004a2:	4b06      	ldr	r3, [pc, #24]	@ (80004bc <TIM4_Init+0x9c>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	4a05      	ldr	r2, [pc, #20]	@ (80004bc <TIM4_Init+0x9c>)
 80004a8:	f043 0301 	orr.w	r3, r3, #1
 80004ac:	6013      	str	r3, [r2, #0]
}
 80004ae:	bf00      	nop
 80004b0:	46bd      	mov	sp, r7
 80004b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b6:	4770      	bx	lr
 80004b8:	40023800 	.word	0x40023800
 80004bc:	40000800 	.word	0x40000800

080004c0 <GPIO_Init>:

//======================================================
//GPIO INITIALIZE
//======================================================
void GPIO_Init(void) {
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
    // Enable GPIOA and GPIOB clock
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80004c4:	4b66      	ldr	r3, [pc, #408]	@ (8000660 <GPIO_Init+0x1a0>)
 80004c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004c8:	4a65      	ldr	r2, [pc, #404]	@ (8000660 <GPIO_Init+0x1a0>)
 80004ca:	f043 0301 	orr.w	r3, r3, #1
 80004ce:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80004d0:	4b63      	ldr	r3, [pc, #396]	@ (8000660 <GPIO_Init+0x1a0>)
 80004d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004d4:	4a62      	ldr	r2, [pc, #392]	@ (8000660 <GPIO_Init+0x1a0>)
 80004d6:	f043 0302 	orr.w	r3, r3, #2
 80004da:	6313      	str	r3, [r2, #48]	@ 0x30


    // SET TIMER PIN FOR Alternate Function
    // PA0–PA3 (TIM2_CH1–CH4)
    GPIOA->MODER &= ~(0xFF << (0 * 2));          // Clear mode bits for PA0–PA3
 80004dc:	4b61      	ldr	r3, [pc, #388]	@ (8000664 <GPIO_Init+0x1a4>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a60      	ldr	r2, [pc, #384]	@ (8000664 <GPIO_Init+0x1a4>)
 80004e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80004e6:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (0xAA << (0 * 2));          // Set mode = AF (10)
 80004e8:	4b5e      	ldr	r3, [pc, #376]	@ (8000664 <GPIO_Init+0x1a4>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a5d      	ldr	r2, [pc, #372]	@ (8000664 <GPIO_Init+0x1a4>)
 80004ee:	f043 03aa 	orr.w	r3, r3, #170	@ 0xaa
 80004f2:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= ~0xFFFF;                    // Clear AFRL[15:0]
 80004f4:	4b5b      	ldr	r3, [pc, #364]	@ (8000664 <GPIO_Init+0x1a4>)
 80004f6:	6a1b      	ldr	r3, [r3, #32]
 80004f8:	4a5a      	ldr	r2, [pc, #360]	@ (8000664 <GPIO_Init+0x1a4>)
 80004fa:	0c1b      	lsrs	r3, r3, #16
 80004fc:	041b      	lsls	r3, r3, #16
 80004fe:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (0x1111 << 0);              // AF1 for PA0–PA3
 8000500:	4b58      	ldr	r3, [pc, #352]	@ (8000664 <GPIO_Init+0x1a4>)
 8000502:	6a1b      	ldr	r3, [r3, #32]
 8000504:	4a57      	ldr	r2, [pc, #348]	@ (8000664 <GPIO_Init+0x1a4>)
 8000506:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 800050a:	f043 0311 	orr.w	r3, r3, #17
 800050e:	6213      	str	r3, [r2, #32]

    // PA6–PA7 (TIM3_CH1–CH2), AF2
    GPIOA->MODER &= ~(0xF << (6 * 2));
 8000510:	4b54      	ldr	r3, [pc, #336]	@ (8000664 <GPIO_Init+0x1a4>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a53      	ldr	r2, [pc, #332]	@ (8000664 <GPIO_Init+0x1a4>)
 8000516:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800051a:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (0xA << (6 * 2));
 800051c:	4b51      	ldr	r3, [pc, #324]	@ (8000664 <GPIO_Init+0x1a4>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a50      	ldr	r2, [pc, #320]	@ (8000664 <GPIO_Init+0x1a4>)
 8000522:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 8000526:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= ~(0xFF << (6 * 4));
 8000528:	4b4e      	ldr	r3, [pc, #312]	@ (8000664 <GPIO_Init+0x1a4>)
 800052a:	6a1b      	ldr	r3, [r3, #32]
 800052c:	4a4d      	ldr	r2, [pc, #308]	@ (8000664 <GPIO_Init+0x1a4>)
 800052e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8000532:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |=  (0x22 << (6 * 4));
 8000534:	4b4b      	ldr	r3, [pc, #300]	@ (8000664 <GPIO_Init+0x1a4>)
 8000536:	6a1b      	ldr	r3, [r3, #32]
 8000538:	4a4a      	ldr	r2, [pc, #296]	@ (8000664 <GPIO_Init+0x1a4>)
 800053a:	f043 5308 	orr.w	r3, r3, #570425344	@ 0x22000000
 800053e:	6213      	str	r3, [r2, #32]

    // PB0–PB1 (TIM3_CH3–CH4), AF2
    GPIOB->MODER &= ~(0xF << (0 * 2));
 8000540:	4b49      	ldr	r3, [pc, #292]	@ (8000668 <GPIO_Init+0x1a8>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a48      	ldr	r2, [pc, #288]	@ (8000668 <GPIO_Init+0x1a8>)
 8000546:	f023 030f 	bic.w	r3, r3, #15
 800054a:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (0xA << (0 * 2));
 800054c:	4b46      	ldr	r3, [pc, #280]	@ (8000668 <GPIO_Init+0x1a8>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a45      	ldr	r2, [pc, #276]	@ (8000668 <GPIO_Init+0x1a8>)
 8000552:	f043 030a 	orr.w	r3, r3, #10
 8000556:	6013      	str	r3, [r2, #0]
    GPIOB->AFR[0] &= ~(0xFF << (0 * 4));
 8000558:	4b43      	ldr	r3, [pc, #268]	@ (8000668 <GPIO_Init+0x1a8>)
 800055a:	6a1b      	ldr	r3, [r3, #32]
 800055c:	4a42      	ldr	r2, [pc, #264]	@ (8000668 <GPIO_Init+0x1a8>)
 800055e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000562:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[0] |=  (0x22 << (0 * 4));
 8000564:	4b40      	ldr	r3, [pc, #256]	@ (8000668 <GPIO_Init+0x1a8>)
 8000566:	6a1b      	ldr	r3, [r3, #32]
 8000568:	4a3f      	ldr	r2, [pc, #252]	@ (8000668 <GPIO_Init+0x1a8>)
 800056a:	f043 0322 	orr.w	r3, r3, #34	@ 0x22
 800056e:	6213      	str	r3, [r2, #32]

    // PB6–PB9 (TIM4_CH1–CH4), AF2
    GPIOB->MODER &= ~(0xFF << (6 * 2));
 8000570:	4b3d      	ldr	r3, [pc, #244]	@ (8000668 <GPIO_Init+0x1a8>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a3c      	ldr	r2, [pc, #240]	@ (8000668 <GPIO_Init+0x1a8>)
 8000576:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 800057a:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (0xAA << (6 * 2));
 800057c:	4b3a      	ldr	r3, [pc, #232]	@ (8000668 <GPIO_Init+0x1a8>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a39      	ldr	r2, [pc, #228]	@ (8000668 <GPIO_Init+0x1a8>)
 8000582:	f443 232a 	orr.w	r3, r3, #696320	@ 0xaa000
 8000586:	6013      	str	r3, [r2, #0]

    GPIOB->AFR[0] &= ~((0xF << (6 * 4)) | (0xF << (7 * 4)));
 8000588:	4b37      	ldr	r3, [pc, #220]	@ (8000668 <GPIO_Init+0x1a8>)
 800058a:	6a1b      	ldr	r3, [r3, #32]
 800058c:	4a36      	ldr	r2, [pc, #216]	@ (8000668 <GPIO_Init+0x1a8>)
 800058e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8000592:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[0] |=  ((0x2 << (6 * 4)) | (0x2 << (7 * 4)));
 8000594:	4b34      	ldr	r3, [pc, #208]	@ (8000668 <GPIO_Init+0x1a8>)
 8000596:	6a1b      	ldr	r3, [r3, #32]
 8000598:	4a33      	ldr	r2, [pc, #204]	@ (8000668 <GPIO_Init+0x1a8>)
 800059a:	f043 5308 	orr.w	r3, r3, #570425344	@ 0x22000000
 800059e:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[1] &= ~((0xF << (0 * 4)) | (0xF << (1 * 4)));
 80005a0:	4b31      	ldr	r3, [pc, #196]	@ (8000668 <GPIO_Init+0x1a8>)
 80005a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005a4:	4a30      	ldr	r2, [pc, #192]	@ (8000668 <GPIO_Init+0x1a8>)
 80005a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80005aa:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->AFR[1] |=  ((0x2 << (0 * 4)) | (0x2 << (1 * 4)));
 80005ac:	4b2e      	ldr	r3, [pc, #184]	@ (8000668 <GPIO_Init+0x1a8>)
 80005ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005b0:	4a2d      	ldr	r2, [pc, #180]	@ (8000668 <GPIO_Init+0x1a8>)
 80005b2:	f043 0322 	orr.w	r3, r3, #34	@ 0x22
 80005b6:	6253      	str	r3, [r2, #36]	@ 0x24


    // SET INPUT PIN FOR HALL SENSOR ( PA5 6 7)
    GPIOA->MODER &= ~(0b11 << (5 * 2));  // Clear PA5
 80005b8:	4b2a      	ldr	r3, [pc, #168]	@ (8000664 <GPIO_Init+0x1a4>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a29      	ldr	r2, [pc, #164]	@ (8000664 <GPIO_Init+0x1a4>)
 80005be:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80005c2:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~(0b11 << (6 * 2));  // Clear PA6
 80005c4:	4b27      	ldr	r3, [pc, #156]	@ (8000664 <GPIO_Init+0x1a4>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a26      	ldr	r2, [pc, #152]	@ (8000664 <GPIO_Init+0x1a4>)
 80005ca:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80005ce:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~(0b11 << (7 * 2));  // Clear PA7
 80005d0:	4b24      	ldr	r3, [pc, #144]	@ (8000664 <GPIO_Init+0x1a4>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a23      	ldr	r2, [pc, #140]	@ (8000664 <GPIO_Init+0x1a4>)
 80005d6:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005da:	6013      	str	r3, [r2, #0]

    GPIOA->PUPDR &= ~(0b11 << (5 * 2));
 80005dc:	4b21      	ldr	r3, [pc, #132]	@ (8000664 <GPIO_Init+0x1a4>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	4a20      	ldr	r2, [pc, #128]	@ (8000664 <GPIO_Init+0x1a4>)
 80005e2:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80005e6:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR |=  (0b01 << (5 * 2));  // Pull-up cho PA5
 80005e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000664 <GPIO_Init+0x1a4>)
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	4a1d      	ldr	r2, [pc, #116]	@ (8000664 <GPIO_Init+0x1a4>)
 80005ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80005f2:	60d3      	str	r3, [r2, #12]

    GPIOA->PUPDR &= ~(0b11 << (6 * 2));
 80005f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000664 <GPIO_Init+0x1a4>)
 80005f6:	68db      	ldr	r3, [r3, #12]
 80005f8:	4a1a      	ldr	r2, [pc, #104]	@ (8000664 <GPIO_Init+0x1a4>)
 80005fa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80005fe:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR |=  (0b01 << (6 * 2));  // Pull-up cho PA6
 8000600:	4b18      	ldr	r3, [pc, #96]	@ (8000664 <GPIO_Init+0x1a4>)
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	4a17      	ldr	r2, [pc, #92]	@ (8000664 <GPIO_Init+0x1a4>)
 8000606:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800060a:	60d3      	str	r3, [r2, #12]

    GPIOA->PUPDR &= ~(0b11 << (7 * 2));
 800060c:	4b15      	ldr	r3, [pc, #84]	@ (8000664 <GPIO_Init+0x1a4>)
 800060e:	68db      	ldr	r3, [r3, #12]
 8000610:	4a14      	ldr	r2, [pc, #80]	@ (8000664 <GPIO_Init+0x1a4>)
 8000612:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000616:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR |=  (0b01 << (7 * 2));  // Pull-up cho PA7
 8000618:	4b12      	ldr	r3, [pc, #72]	@ (8000664 <GPIO_Init+0x1a4>)
 800061a:	68db      	ldr	r3, [r3, #12]
 800061c:	4a11      	ldr	r2, [pc, #68]	@ (8000664 <GPIO_Init+0x1a4>)
 800061e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000622:	60d3      	str	r3, [r2, #12]

    //SET PA9 (TX) và PA10 (RX) ở AF7 FOR USART1
    GPIOA->MODER &= ~((0b11 << (9 * 2)) | (0b11 << (10 * 2))); // Clear
 8000624:	4b0f      	ldr	r3, [pc, #60]	@ (8000664 <GPIO_Init+0x1a4>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a0e      	ldr	r2, [pc, #56]	@ (8000664 <GPIO_Init+0x1a4>)
 800062a:	f423 1370 	bic.w	r3, r3, #3932160	@ 0x3c0000
 800062e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  ((0b10 << (9 * 2)) | (0b10 << (10 * 2))); // AF mode
 8000630:	4b0c      	ldr	r3, [pc, #48]	@ (8000664 <GPIO_Init+0x1a4>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a0b      	ldr	r2, [pc, #44]	@ (8000664 <GPIO_Init+0x1a4>)
 8000636:	f443 1320 	orr.w	r3, r3, #2621440	@ 0x280000
 800063a:	6013      	str	r3, [r2, #0]

    GPIOA->AFR[1] &= ~((0xF << (1 * 4)) | (0xF << (2 * 4)));   // Clear AFRH9/10
 800063c:	4b09      	ldr	r3, [pc, #36]	@ (8000664 <GPIO_Init+0x1a4>)
 800063e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000640:	4a08      	ldr	r2, [pc, #32]	@ (8000664 <GPIO_Init+0x1a4>)
 8000642:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8000646:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOA->AFR[1] |=  ((0x7 << (1 * 4)) | (0x7 << (2 * 4)));   // AF7 = USART1
 8000648:	4b06      	ldr	r3, [pc, #24]	@ (8000664 <GPIO_Init+0x1a4>)
 800064a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800064c:	4a05      	ldr	r2, [pc, #20]	@ (8000664 <GPIO_Init+0x1a4>)
 800064e:	f443 63ee 	orr.w	r3, r3, #1904	@ 0x770
 8000652:	6253      	str	r3, [r2, #36]	@ 0x24

}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	40023800 	.word	0x40023800
 8000664:	40020000 	.word	0x40020000
 8000668:	40020400 	.word	0x40020400

0800066c <USART1_UART_Init>:

//======================================================
//UART INITIALIZE
//======================================================
void USART1_UART_Init(void) {
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN;  // Enable USART1 (nằm trên APB2)
 8000670:	4b0e      	ldr	r3, [pc, #56]	@ (80006ac <USART1_UART_Init+0x40>)
 8000672:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000674:	4a0d      	ldr	r2, [pc, #52]	@ (80006ac <USART1_UART_Init+0x40>)
 8000676:	f043 0310 	orr.w	r3, r3, #16
 800067a:	6453      	str	r3, [r2, #68]	@ 0x44

    USART1->CR1 = 0;  // Tắt USART trước khi cấu hình
 800067c:	4b0c      	ldr	r3, [pc, #48]	@ (80006b0 <USART1_UART_Init+0x44>)
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]

    // Baudrate: ví dụ 115200 với PCLK2 = 84MHz
    // USARTDIV = 84MHz / (16 * 115200) ≈ 45.5625
    // Mantissa = 45, Fraction = 0.5625 * 16 ≈ 9 → BRR = 0x2D9
    USART1->BRR = (45 << 4) | 9;
 8000682:	4b0b      	ldr	r3, [pc, #44]	@ (80006b0 <USART1_UART_Init+0x44>)
 8000684:	f240 22d9 	movw	r2, #729	@ 0x2d9
 8000688:	609a      	str	r2, [r3, #8]

    // 8-bit data, 1 stop bit, no parity, no flow control
    USART1->CR1 |= USART_CR1_TE | USART_CR1_RE;  // Enable TX + RX
 800068a:	4b09      	ldr	r3, [pc, #36]	@ (80006b0 <USART1_UART_Init+0x44>)
 800068c:	68db      	ldr	r3, [r3, #12]
 800068e:	4a08      	ldr	r2, [pc, #32]	@ (80006b0 <USART1_UART_Init+0x44>)
 8000690:	f043 030c 	orr.w	r3, r3, #12
 8000694:	60d3      	str	r3, [r2, #12]
    USART1->CR1 |= USART_CR1_UE;                 // Bật USART
 8000696:	4b06      	ldr	r3, [pc, #24]	@ (80006b0 <USART1_UART_Init+0x44>)
 8000698:	68db      	ldr	r3, [r3, #12]
 800069a:	4a05      	ldr	r2, [pc, #20]	@ (80006b0 <USART1_UART_Init+0x44>)
 800069c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80006a0:	60d3      	str	r3, [r2, #12]
}
 80006a2:	bf00      	nop
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr
 80006ac:	40023800 	.word	0x40023800
 80006b0:	40011000 	.word	0x40011000

080006b4 <CDC_Transmit>:
//======================================================
//TEST FUNCTION
//======================================================

void CDC_Transmit(char *msg)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
    uint16_t len = strlen(msg);
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	f7ff fd83 	bl	80001c8 <strlen>
 80006c2:	4603      	mov	r3, r0
 80006c4:	81fb      	strh	r3, [r7, #14]
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, (uint8_t*)msg, len);
 80006c6:	89fb      	ldrh	r3, [r7, #14]
 80006c8:	461a      	mov	r2, r3
 80006ca:	6879      	ldr	r1, [r7, #4]
 80006cc:	4804      	ldr	r0, [pc, #16]	@ (80006e0 <CDC_Transmit+0x2c>)
 80006ce:	f004 f837 	bl	8004740 <USBD_CDC_SetTxBuffer>
    USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80006d2:	4803      	ldr	r0, [pc, #12]	@ (80006e0 <CDC_Transmit+0x2c>)
 80006d4:	f004 f874 	bl	80047c0 <USBD_CDC_TransmitPacket>
}
 80006d8:	bf00      	nop
 80006da:	3710      	adds	r7, #16
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	2000018c 	.word	0x2000018c

080006e4 <handleCommutation>:
//FUNCTIONS
//======================================================

//Function use to handle the hall sequences, provided through "Steps",
//and given the value "pwmVal" to change duty cycle for specific step.
void handleCommutation(uint8_t step, uint8_t pwmVal) {
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	460a      	mov	r2, r1
 80006ee:	71fb      	strb	r3, [r7, #7]
 80006f0:	4613      	mov	r3, r2
 80006f2:	71bb      	strb	r3, [r7, #6]
    switch (step) {
 80006f4:	79fb      	ldrb	r3, [r7, #7]
 80006f6:	2b05      	cmp	r3, #5
 80006f8:	dc14      	bgt.n	8000724 <handleCommutation+0x40>
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	f2c0 80b7 	blt.w	800086e <handleCommutation+0x18a>
 8000700:	2b05      	cmp	r3, #5
 8000702:	f200 80b4 	bhi.w	800086e <handleCommutation+0x18a>
 8000706:	a201      	add	r2, pc, #4	@ (adr r2, 800070c <handleCommutation+0x28>)
 8000708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800070c:	0800072d 	.word	0x0800072d
 8000710:	0800075b 	.word	0x0800075b
 8000714:	08000789 	.word	0x08000789
 8000718:	080007b7 	.word	0x080007b7
 800071c:	080007e5 	.word	0x080007e5
 8000720:	08000813 	.word	0x08000813
 8000724:	2bff      	cmp	r3, #255	@ 0xff
 8000726:	f000 808b 	beq.w	8000840 <handleCommutation+0x15c>
			SET_PWM_1_H3(highMin);
			SET_PWM_1_L1(lowMin);
			SET_PWM_1_L2(lowMin);
			SET_PWM_1_L3(lowMin);
    }
}
 800072a:	e0a0      	b.n	800086e <handleCommutation+0x18a>
            SET_PWM_1_H3(pwmVal);
 800072c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000730:	79bb      	ldrb	r3, [r7, #6]
 8000732:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SET_PWM_1_L2(lowMax);
 8000734:	4b51      	ldr	r3, [pc, #324]	@ (800087c <handleCommutation+0x198>)
 8000736:	2200      	movs	r2, #0
 8000738:	635a      	str	r2, [r3, #52]	@ 0x34
            SET_PWM_1_H1(highMin);
 800073a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800073e:	2200      	movs	r2, #0
 8000740:	635a      	str	r2, [r3, #52]	@ 0x34
            SET_PWM_1_H2(highMin);
 8000742:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000746:	2200      	movs	r2, #0
 8000748:	639a      	str	r2, [r3, #56]	@ 0x38
            SET_PWM_1_L1(lowMin);
 800074a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800074e:	22ff      	movs	r2, #255	@ 0xff
 8000750:	641a      	str	r2, [r3, #64]	@ 0x40
            SET_PWM_1_L3(lowMin);
 8000752:	4b4a      	ldr	r3, [pc, #296]	@ (800087c <handleCommutation+0x198>)
 8000754:	22ff      	movs	r2, #255	@ 0xff
 8000756:	639a      	str	r2, [r3, #56]	@ 0x38
            break;
 8000758:	e089      	b.n	800086e <handleCommutation+0x18a>
			SET_PWM_1_H2(pwmVal);
 800075a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800075e:	79bb      	ldrb	r3, [r7, #6]
 8000760:	6393      	str	r3, [r2, #56]	@ 0x38
			SET_PWM_1_L1(lowMax);
 8000762:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000766:	2200      	movs	r2, #0
 8000768:	641a      	str	r2, [r3, #64]	@ 0x40
			SET_PWM_1_H1(highMin);
 800076a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800076e:	2200      	movs	r2, #0
 8000770:	635a      	str	r2, [r3, #52]	@ 0x34
			SET_PWM_1_H3(highMin);
 8000772:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000776:	2200      	movs	r2, #0
 8000778:	63da      	str	r2, [r3, #60]	@ 0x3c
			SET_PWM_1_L2(lowMin);
 800077a:	4b40      	ldr	r3, [pc, #256]	@ (800087c <handleCommutation+0x198>)
 800077c:	22ff      	movs	r2, #255	@ 0xff
 800077e:	635a      	str	r2, [r3, #52]	@ 0x34
			SET_PWM_1_L3(lowMin);
 8000780:	4b3e      	ldr	r3, [pc, #248]	@ (800087c <handleCommutation+0x198>)
 8000782:	22ff      	movs	r2, #255	@ 0xff
 8000784:	639a      	str	r2, [r3, #56]	@ 0x38
            break;
 8000786:	e072      	b.n	800086e <handleCommutation+0x18a>
            SET_PWM_1_H3(pwmVal);
 8000788:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800078c:	79bb      	ldrb	r3, [r7, #6]
 800078e:	63d3      	str	r3, [r2, #60]	@ 0x3c
			SET_PWM_1_L1(lowMax);
 8000790:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000794:	2200      	movs	r2, #0
 8000796:	641a      	str	r2, [r3, #64]	@ 0x40
			SET_PWM_1_H1(highMin);
 8000798:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800079c:	2200      	movs	r2, #0
 800079e:	635a      	str	r2, [r3, #52]	@ 0x34
			SET_PWM_1_H2(highMin);
 80007a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007a4:	2200      	movs	r2, #0
 80007a6:	639a      	str	r2, [r3, #56]	@ 0x38
			SET_PWM_1_L2(lowMin);
 80007a8:	4b34      	ldr	r3, [pc, #208]	@ (800087c <handleCommutation+0x198>)
 80007aa:	22ff      	movs	r2, #255	@ 0xff
 80007ac:	635a      	str	r2, [r3, #52]	@ 0x34
			SET_PWM_1_L3(lowMin);
 80007ae:	4b33      	ldr	r3, [pc, #204]	@ (800087c <handleCommutation+0x198>)
 80007b0:	22ff      	movs	r2, #255	@ 0xff
 80007b2:	639a      	str	r2, [r3, #56]	@ 0x38
            break;
 80007b4:	e05b      	b.n	800086e <handleCommutation+0x18a>
            SET_PWM_1_H1(pwmVal);
 80007b6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007ba:	79bb      	ldrb	r3, [r7, #6]
 80007bc:	6353      	str	r3, [r2, #52]	@ 0x34
			SET_PWM_1_L3(lowMax);
 80007be:	4b2f      	ldr	r3, [pc, #188]	@ (800087c <handleCommutation+0x198>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	639a      	str	r2, [r3, #56]	@ 0x38
			SET_PWM_1_H2(highMin);
 80007c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007c8:	2200      	movs	r2, #0
 80007ca:	639a      	str	r2, [r3, #56]	@ 0x38
			SET_PWM_1_H3(highMin);
 80007cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007d0:	2200      	movs	r2, #0
 80007d2:	63da      	str	r2, [r3, #60]	@ 0x3c
			SET_PWM_1_L1(lowMin);
 80007d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007d8:	22ff      	movs	r2, #255	@ 0xff
 80007da:	641a      	str	r2, [r3, #64]	@ 0x40
			SET_PWM_1_L2(lowMin);
 80007dc:	4b27      	ldr	r3, [pc, #156]	@ (800087c <handleCommutation+0x198>)
 80007de:	22ff      	movs	r2, #255	@ 0xff
 80007e0:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 80007e2:	e044      	b.n	800086e <handleCommutation+0x18a>
            SET_PWM_1_H1(pwmVal);
 80007e4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007e8:	79bb      	ldrb	r3, [r7, #6]
 80007ea:	6353      	str	r3, [r2, #52]	@ 0x34
			SET_PWM_1_L2(lowMax);
 80007ec:	4b23      	ldr	r3, [pc, #140]	@ (800087c <handleCommutation+0x198>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	635a      	str	r2, [r3, #52]	@ 0x34
			SET_PWM_1_H2(highMin);
 80007f2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007f6:	2200      	movs	r2, #0
 80007f8:	639a      	str	r2, [r3, #56]	@ 0x38
			SET_PWM_1_H3(highMin);
 80007fa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007fe:	2200      	movs	r2, #0
 8000800:	63da      	str	r2, [r3, #60]	@ 0x3c
			SET_PWM_1_L1(lowMin);
 8000802:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000806:	22ff      	movs	r2, #255	@ 0xff
 8000808:	641a      	str	r2, [r3, #64]	@ 0x40
			SET_PWM_1_L3(lowMin);
 800080a:	4b1c      	ldr	r3, [pc, #112]	@ (800087c <handleCommutation+0x198>)
 800080c:	22ff      	movs	r2, #255	@ 0xff
 800080e:	639a      	str	r2, [r3, #56]	@ 0x38
            break;
 8000810:	e02d      	b.n	800086e <handleCommutation+0x18a>
            SET_PWM_1_H2(pwmVal);
 8000812:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000816:	79bb      	ldrb	r3, [r7, #6]
 8000818:	6393      	str	r3, [r2, #56]	@ 0x38
			SET_PWM_1_L3(lowMax);
 800081a:	4b18      	ldr	r3, [pc, #96]	@ (800087c <handleCommutation+0x198>)
 800081c:	2200      	movs	r2, #0
 800081e:	639a      	str	r2, [r3, #56]	@ 0x38
			SET_PWM_1_H1(highMin);
 8000820:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000824:	2200      	movs	r2, #0
 8000826:	635a      	str	r2, [r3, #52]	@ 0x34
			SET_PWM_1_H3(highMin);
 8000828:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800082c:	2200      	movs	r2, #0
 800082e:	63da      	str	r2, [r3, #60]	@ 0x3c
			SET_PWM_1_L1(lowMin);
 8000830:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000834:	22ff      	movs	r2, #255	@ 0xff
 8000836:	641a      	str	r2, [r3, #64]	@ 0x40
			SET_PWM_1_L2(lowMin);
 8000838:	4b10      	ldr	r3, [pc, #64]	@ (800087c <handleCommutation+0x198>)
 800083a:	22ff      	movs	r2, #255	@ 0xff
 800083c:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 800083e:	e016      	b.n	800086e <handleCommutation+0x18a>
            SET_PWM_1_H1(highMin);
 8000840:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000844:	2200      	movs	r2, #0
 8000846:	635a      	str	r2, [r3, #52]	@ 0x34
			SET_PWM_1_H2(highMin);
 8000848:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800084c:	2200      	movs	r2, #0
 800084e:	639a      	str	r2, [r3, #56]	@ 0x38
			SET_PWM_1_H3(highMin);
 8000850:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000854:	2200      	movs	r2, #0
 8000856:	63da      	str	r2, [r3, #60]	@ 0x3c
			SET_PWM_1_L1(lowMin);
 8000858:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800085c:	22ff      	movs	r2, #255	@ 0xff
 800085e:	641a      	str	r2, [r3, #64]	@ 0x40
			SET_PWM_1_L2(lowMin);
 8000860:	4b06      	ldr	r3, [pc, #24]	@ (800087c <handleCommutation+0x198>)
 8000862:	22ff      	movs	r2, #255	@ 0xff
 8000864:	635a      	str	r2, [r3, #52]	@ 0x34
			SET_PWM_1_L3(lowMin);
 8000866:	4b05      	ldr	r3, [pc, #20]	@ (800087c <handleCommutation+0x198>)
 8000868:	22ff      	movs	r2, #255	@ 0xff
 800086a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800086c:	e7ff      	b.n	800086e <handleCommutation+0x18a>
 800086e:	bf00      	nop
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	40000400 	.word	0x40000400

08000880 <EXTI9_5_IRQHandler>:

//Interupted is called when HALL SENSOR got a change of data
//used to find the right hall sequence, and provide the next step for handleCommutation
void EXTI9_5_IRQHandler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
    // 1. Đọc trực tiếp giá trị các chân PA5, PA6, PA7 từ GPIOA->IDR
    uint32_t idr = GPIOA->IDR;
 8000886:	4b44      	ldr	r3, [pc, #272]	@ (8000998 <EXTI9_5_IRQHandler+0x118>)
 8000888:	691b      	ldr	r3, [r3, #16]
 800088a:	607b      	str	r3, [r7, #4]
    uint8_t hallA = (idr >> 5) & 0x01;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	095b      	lsrs	r3, r3, #5
 8000890:	b2db      	uxtb	r3, r3
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	70fb      	strb	r3, [r7, #3]
    uint8_t hallB = (idr >> 6) & 0x01;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	099b      	lsrs	r3, r3, #6
 800089c:	b2db      	uxtb	r3, r3
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	70bb      	strb	r3, [r7, #2]
    uint8_t hallC = (idr >> 7) & 0x01;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	09db      	lsrs	r3, r3, #7
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	707b      	strb	r3, [r7, #1]

    // 2. Gộp thành hallState
    hallState = (hallA << 2) | (hallB << 1) | hallC;
 80008b0:	78fb      	ldrb	r3, [r7, #3]
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	b25a      	sxtb	r2, r3
 80008b6:	78bb      	ldrb	r3, [r7, #2]
 80008b8:	005b      	lsls	r3, r3, #1
 80008ba:	b25b      	sxtb	r3, r3
 80008bc:	4313      	orrs	r3, r2
 80008be:	b25a      	sxtb	r2, r3
 80008c0:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80008c4:	4313      	orrs	r3, r2
 80008c6:	b25b      	sxtb	r3, r3
 80008c8:	b2da      	uxtb	r2, r3
 80008ca:	4b34      	ldr	r3, [pc, #208]	@ (800099c <EXTI9_5_IRQHandler+0x11c>)
 80008cc:	701a      	strb	r2, [r3, #0]

    // 3. Tra bảng commutation
    switch (hallState) {
 80008ce:	4b33      	ldr	r3, [pc, #204]	@ (800099c <EXTI9_5_IRQHandler+0x11c>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	3b01      	subs	r3, #1
 80008d6:	2b05      	cmp	r3, #5
 80008d8:	d826      	bhi.n	8000928 <EXTI9_5_IRQHandler+0xa8>
 80008da:	a201      	add	r2, pc, #4	@ (adr r2, 80008e0 <EXTI9_5_IRQHandler+0x60>)
 80008dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e0:	080008f9 	.word	0x080008f9
 80008e4:	08000909 	.word	0x08000909
 80008e8:	08000901 	.word	0x08000901
 80008ec:	08000919 	.word	0x08000919
 80008f0:	08000921 	.word	0x08000921
 80008f4:	08000911 	.word	0x08000911
        case 0b001: currentCommStep = 0; break;
 80008f8:	4b29      	ldr	r3, [pc, #164]	@ (80009a0 <EXTI9_5_IRQHandler+0x120>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	701a      	strb	r2, [r3, #0]
 80008fe:	e017      	b.n	8000930 <EXTI9_5_IRQHandler+0xb0>
        case 0b011: currentCommStep = 1; break;
 8000900:	4b27      	ldr	r3, [pc, #156]	@ (80009a0 <EXTI9_5_IRQHandler+0x120>)
 8000902:	2201      	movs	r2, #1
 8000904:	701a      	strb	r2, [r3, #0]
 8000906:	e013      	b.n	8000930 <EXTI9_5_IRQHandler+0xb0>
        case 0b010: currentCommStep = 2; break;
 8000908:	4b25      	ldr	r3, [pc, #148]	@ (80009a0 <EXTI9_5_IRQHandler+0x120>)
 800090a:	2202      	movs	r2, #2
 800090c:	701a      	strb	r2, [r3, #0]
 800090e:	e00f      	b.n	8000930 <EXTI9_5_IRQHandler+0xb0>
        case 0b110: currentCommStep = 3; break;
 8000910:	4b23      	ldr	r3, [pc, #140]	@ (80009a0 <EXTI9_5_IRQHandler+0x120>)
 8000912:	2203      	movs	r2, #3
 8000914:	701a      	strb	r2, [r3, #0]
 8000916:	e00b      	b.n	8000930 <EXTI9_5_IRQHandler+0xb0>
        case 0b100: currentCommStep = 4; break;
 8000918:	4b21      	ldr	r3, [pc, #132]	@ (80009a0 <EXTI9_5_IRQHandler+0x120>)
 800091a:	2204      	movs	r2, #4
 800091c:	701a      	strb	r2, [r3, #0]
 800091e:	e007      	b.n	8000930 <EXTI9_5_IRQHandler+0xb0>
        case 0b101: currentCommStep = 5; break;
 8000920:	4b1f      	ldr	r3, [pc, #124]	@ (80009a0 <EXTI9_5_IRQHandler+0x120>)
 8000922:	2205      	movs	r2, #5
 8000924:	701a      	strb	r2, [r3, #0]
 8000926:	e003      	b.n	8000930 <EXTI9_5_IRQHandler+0xb0>
        default:    currentCommStep = 255; break;
 8000928:	4b1d      	ldr	r3, [pc, #116]	@ (80009a0 <EXTI9_5_IRQHandler+0x120>)
 800092a:	22ff      	movs	r2, #255	@ 0xff
 800092c:	701a      	strb	r2, [r3, #0]
 800092e:	bf00      	nop
    }

    // 4. Ghi vào buffer nếu còn trống
    uint8_t nextHead = (bufferHead + 1) % BUFFER_SIZE;
 8000930:	4b1c      	ldr	r3, [pc, #112]	@ (80009a4 <EXTI9_5_IRQHandler+0x124>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	b2db      	uxtb	r3, r3
 8000936:	3301      	adds	r3, #1
 8000938:	2b00      	cmp	r3, #0
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	bfb8      	it	lt
 8000940:	425b      	neglt	r3, r3
 8000942:	703b      	strb	r3, [r7, #0]
    if (nextHead != bufferTail) {
 8000944:	4b18      	ldr	r3, [pc, #96]	@ (80009a8 <EXTI9_5_IRQHandler+0x128>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	b2db      	uxtb	r3, r3
 800094a:	783a      	ldrb	r2, [r7, #0]
 800094c:	429a      	cmp	r2, r3
 800094e:	d00b      	beq.n	8000968 <EXTI9_5_IRQHandler+0xe8>
        commBuffer[bufferHead] = currentCommStep;
 8000950:	4b14      	ldr	r3, [pc, #80]	@ (80009a4 <EXTI9_5_IRQHandler+0x124>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	b2db      	uxtb	r3, r3
 8000956:	461a      	mov	r2, r3
 8000958:	4b11      	ldr	r3, [pc, #68]	@ (80009a0 <EXTI9_5_IRQHandler+0x120>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	b2d9      	uxtb	r1, r3
 800095e:	4b13      	ldr	r3, [pc, #76]	@ (80009ac <EXTI9_5_IRQHandler+0x12c>)
 8000960:	5499      	strb	r1, [r3, r2]
        bufferHead = nextHead;
 8000962:	4a10      	ldr	r2, [pc, #64]	@ (80009a4 <EXTI9_5_IRQHandler+0x124>)
 8000964:	783b      	ldrb	r3, [r7, #0]
 8000966:	7013      	strb	r3, [r2, #0]
    }

    // 5. Xóa cờ ngắt EXTI line 5~9 (tránh ngắt lặp lại)
    EXTI->PR |= (1 << 5);
 8000968:	4b11      	ldr	r3, [pc, #68]	@ (80009b0 <EXTI9_5_IRQHandler+0x130>)
 800096a:	695b      	ldr	r3, [r3, #20]
 800096c:	4a10      	ldr	r2, [pc, #64]	@ (80009b0 <EXTI9_5_IRQHandler+0x130>)
 800096e:	f043 0320 	orr.w	r3, r3, #32
 8000972:	6153      	str	r3, [r2, #20]
    EXTI->PR |= (1 << 6);
 8000974:	4b0e      	ldr	r3, [pc, #56]	@ (80009b0 <EXTI9_5_IRQHandler+0x130>)
 8000976:	695b      	ldr	r3, [r3, #20]
 8000978:	4a0d      	ldr	r2, [pc, #52]	@ (80009b0 <EXTI9_5_IRQHandler+0x130>)
 800097a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800097e:	6153      	str	r3, [r2, #20]
    EXTI->PR |= (1 << 7);
 8000980:	4b0b      	ldr	r3, [pc, #44]	@ (80009b0 <EXTI9_5_IRQHandler+0x130>)
 8000982:	695b      	ldr	r3, [r3, #20]
 8000984:	4a0a      	ldr	r2, [pc, #40]	@ (80009b0 <EXTI9_5_IRQHandler+0x130>)
 8000986:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800098a:	6153      	str	r3, [r2, #20]
}
 800098c:	bf00      	nop
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr
 8000998:	40020000 	.word	0x40020000
 800099c:	2000017c 	.word	0x2000017c
 80009a0:	2000017d 	.word	0x2000017d
 80009a4:	2000017a 	.word	0x2000017a
 80009a8:	2000017b 	.word	0x2000017b
 80009ac:	20000178 	.word	0x20000178
 80009b0:	40013c00 	.word	0x40013c00

080009b4 <BLDC_Start>:

//Function initialize the BLDC, by picking the first HALL sequence,
//or create 1 if its undefined
void BLDC_Start() {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
  // Đọc giá trị các chân PA5, PA6, PA7 trực tiếp từ thanh ghi
  uint32_t idr = GPIOA->IDR;
 80009ba:	4b27      	ldr	r3, [pc, #156]	@ (8000a58 <BLDC_Start+0xa4>)
 80009bc:	691b      	ldr	r3, [r3, #16]
 80009be:	60bb      	str	r3, [r7, #8]
  uint8_t hallA = (idr >> 5) & 0x01;
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	095b      	lsrs	r3, r3, #5
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	71fb      	strb	r3, [r7, #7]
  uint8_t hallB = (idr >> 6) & 0x01;
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	099b      	lsrs	r3, r3, #6
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	71bb      	strb	r3, [r7, #6]
  uint8_t hallC = (idr >> 7) & 0x01;
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	09db      	lsrs	r3, r3, #7
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	717b      	strb	r3, [r7, #5]

  hallState = (hallA << 2) | (hallB << 1) | hallC;
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	b25a      	sxtb	r2, r3
 80009ea:	79bb      	ldrb	r3, [r7, #6]
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	b25b      	sxtb	r3, r3
 80009f0:	4313      	orrs	r3, r2
 80009f2:	b25a      	sxtb	r2, r3
 80009f4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80009f8:	4313      	orrs	r3, r2
 80009fa:	b25b      	sxtb	r3, r3
 80009fc:	b2da      	uxtb	r2, r3
 80009fe:	4b17      	ldr	r3, [pc, #92]	@ (8000a5c <BLDC_Start+0xa8>)
 8000a00:	701a      	strb	r2, [r3, #0]

  // Nếu hallState không hợp lệ (000), đặt bước đầu tiên
  if (hallState == 0) {
 8000a02:	4b16      	ldr	r3, [pc, #88]	@ (8000a5c <BLDC_Start+0xa8>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d103      	bne.n	8000a14 <BLDC_Start+0x60>
	  currentCommStep = 0;
 8000a0c:	4b14      	ldr	r3, [pc, #80]	@ (8000a60 <BLDC_Start+0xac>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	701a      	strb	r2, [r3, #0]
 8000a12:	e014      	b.n	8000a3e <BLDC_Start+0x8a>
  } else {
	  // Tra trong bảng hallSequenceCW[]
	  for (uint8_t i = 0; i < 6; i++) {
 8000a14:	2300      	movs	r3, #0
 8000a16:	73fb      	strb	r3, [r7, #15]
 8000a18:	e00e      	b.n	8000a38 <BLDC_Start+0x84>
		  if (hallState == hallSequenceCW[i]) {
 8000a1a:	7bfb      	ldrb	r3, [r7, #15]
 8000a1c:	4a11      	ldr	r2, [pc, #68]	@ (8000a64 <BLDC_Start+0xb0>)
 8000a1e:	5cd2      	ldrb	r2, [r2, r3]
 8000a20:	4b0e      	ldr	r3, [pc, #56]	@ (8000a5c <BLDC_Start+0xa8>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	429a      	cmp	r2, r3
 8000a28:	d103      	bne.n	8000a32 <BLDC_Start+0x7e>
			  currentCommStep = i;
 8000a2a:	4a0d      	ldr	r2, [pc, #52]	@ (8000a60 <BLDC_Start+0xac>)
 8000a2c:	7bfb      	ldrb	r3, [r7, #15]
 8000a2e:	7013      	strb	r3, [r2, #0]
			  break;
 8000a30:	e005      	b.n	8000a3e <BLDC_Start+0x8a>
	  for (uint8_t i = 0; i < 6; i++) {
 8000a32:	7bfb      	ldrb	r3, [r7, #15]
 8000a34:	3301      	adds	r3, #1
 8000a36:	73fb      	strb	r3, [r7, #15]
 8000a38:	7bfb      	ldrb	r3, [r7, #15]
 8000a3a:	2b05      	cmp	r3, #5
 8000a3c:	d9ed      	bls.n	8000a1a <BLDC_Start+0x66>
		  }
	  }
  }
    handleCommutation(currentCommStep, pwmVal);
 8000a3e:	4b08      	ldr	r3, [pc, #32]	@ (8000a60 <BLDC_Start+0xac>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	4a08      	ldr	r2, [pc, #32]	@ (8000a68 <BLDC_Start+0xb4>)
 8000a46:	7812      	ldrb	r2, [r2, #0]
 8000a48:	4611      	mov	r1, r2
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f7ff fe4a 	bl	80006e4 <handleCommutation>
}
 8000a50:	bf00      	nop
 8000a52:	3710      	adds	r7, #16
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40020000 	.word	0x40020000
 8000a5c:	2000017c 	.word	0x2000017c
 8000a60:	2000017d 	.word	0x2000017d
 8000a64:	08007274 	.word	0x08007274
 8000a68:	20000000 	.word	0x20000000

08000a6c <main>:
//======================================================
//MAIN
//======================================================

int main(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
  //HAL_Init();

  STM32_Init();
 8000a72:	f7ff fbb1 	bl	80001d8 <STM32_Init>

  //MX_USB_DEVICE_Init();



  BLDC_Start();
 8000a76:	f7ff ff9d 	bl	80009b4 <BLDC_Start>

  while (1)
  {
	if (bufferTail != bufferHead) {
 8000a7a:	4b18      	ldr	r3, [pc, #96]	@ (8000adc <main+0x70>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	b2da      	uxtb	r2, r3
 8000a80:	4b17      	ldr	r3, [pc, #92]	@ (8000ae0 <main+0x74>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	429a      	cmp	r2, r3
 8000a88:	d019      	beq.n	8000abe <main+0x52>
	  uint8_t step = commBuffer[bufferTail];
 8000a8a:	4b14      	ldr	r3, [pc, #80]	@ (8000adc <main+0x70>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	461a      	mov	r2, r3
 8000a92:	4b14      	ldr	r3, [pc, #80]	@ (8000ae4 <main+0x78>)
 8000a94:	5c9b      	ldrb	r3, [r3, r2]
 8000a96:	70fb      	strb	r3, [r7, #3]
	  bufferTail = (bufferTail + 1) % BUFFER_SIZE;
 8000a98:	4b10      	ldr	r3, [pc, #64]	@ (8000adc <main+0x70>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	bfb8      	it	lt
 8000aa8:	425b      	neglt	r3, r3
 8000aaa:	b2da      	uxtb	r2, r3
 8000aac:	4b0b      	ldr	r3, [pc, #44]	@ (8000adc <main+0x70>)
 8000aae:	701a      	strb	r2, [r3, #0]
	  handleCommutation(step, pwmVal);
 8000ab0:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae8 <main+0x7c>)
 8000ab2:	781a      	ldrb	r2, [r3, #0]
 8000ab4:	78fb      	ldrb	r3, [r7, #3]
 8000ab6:	4611      	mov	r1, r2
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff fe13 	bl	80006e4 <handleCommutation>
	}

	for(int i = 0 ; i < 100000; i++) {
 8000abe:	2300      	movs	r3, #0
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	e002      	b.n	8000aca <main+0x5e>
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4a07      	ldr	r2, [pc, #28]	@ (8000aec <main+0x80>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	ddf8      	ble.n	8000ac4 <main+0x58>
	}
	CDC_Transmit("hello \r\n");
 8000ad2:	4807      	ldr	r0, [pc, #28]	@ (8000af0 <main+0x84>)
 8000ad4:	f7ff fdee 	bl	80006b4 <CDC_Transmit>
	if (bufferTail != bufferHead) {
 8000ad8:	e7cf      	b.n	8000a7a <main+0xe>
 8000ada:	bf00      	nop
 8000adc:	2000017b 	.word	0x2000017b
 8000ae0:	2000017a 	.word	0x2000017a
 8000ae4:	20000178 	.word	0x20000178
 8000ae8:	20000000 	.word	0x20000000
 8000aec:	0001869f 	.word	0x0001869f
 8000af0:	08007208 	.word	0x08007208

08000af4 <Error_Handler>:

//======================================================
//ERROR HANDLER
//======================================================
void Error_Handler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
    printf("Error Handler invoked!\n");
 8000af8:	4802      	ldr	r0, [pc, #8]	@ (8000b04 <Error_Handler+0x10>)
 8000afa:	f005 ffe5 	bl	8006ac8 <puts>
    while(1);
 8000afe:	bf00      	nop
 8000b00:	e7fd      	b.n	8000afe <Error_Handler+0xa>
 8000b02:	bf00      	nop
 8000b04:	08007214 	.word	0x08007214

08000b08 <HAL_MspInit>:
#include "main.h"

void HAL_MspInit(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	4b10      	ldr	r3, [pc, #64]	@ (8000b54 <HAL_MspInit+0x4c>)
 8000b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b16:	4a0f      	ldr	r2, [pc, #60]	@ (8000b54 <HAL_MspInit+0x4c>)
 8000b18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b54 <HAL_MspInit+0x4c>)
 8000b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	603b      	str	r3, [r7, #0]
 8000b2e:	4b09      	ldr	r3, [pc, #36]	@ (8000b54 <HAL_MspInit+0x4c>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b32:	4a08      	ldr	r2, [pc, #32]	@ (8000b54 <HAL_MspInit+0x4c>)
 8000b34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b38:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b3a:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <HAL_MspInit+0x4c>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b42:	603b      	str	r3, [r7, #0]
 8000b44:	683b      	ldr	r3, [r7, #0]
}
 8000b46:	bf00      	nop
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	40023800 	.word	0x40023800

08000b58 <SysTick_Handler>:
#include "stm32f4xx_it.h"

extern PCD_HandleTypeDef hpcd_USB_OTG_FS;

void SysTick_Handler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8000b5c:	f000 f93e 	bl	8000ddc <HAL_IncTick>
}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <OTG_FS_IRQHandler>:

void OTG_FS_IRQHandler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b68:	4802      	ldr	r0, [pc, #8]	@ (8000b74 <OTG_FS_IRQHandler+0x10>)
 8000b6a:	f000 fd6d 	bl	8001648 <HAL_PCD_IRQHandler>
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20001668 	.word	0x20001668

08000b78 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]
 8000b88:	e00a      	b.n	8000ba0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b8a:	f3af 8000 	nop.w
 8000b8e:	4601      	mov	r1, r0
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	1c5a      	adds	r2, r3, #1
 8000b94:	60ba      	str	r2, [r7, #8]
 8000b96:	b2ca      	uxtb	r2, r1
 8000b98:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	617b      	str	r3, [r7, #20]
 8000ba0:	697a      	ldr	r2, [r7, #20]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	dbf0      	blt.n	8000b8a <_read+0x12>
  }

  return len;
 8000ba8:	687b      	ldr	r3, [r7, #4]
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3718      	adds	r7, #24
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b086      	sub	sp, #24
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	60f8      	str	r0, [r7, #12]
 8000bba:	60b9      	str	r1, [r7, #8]
 8000bbc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	617b      	str	r3, [r7, #20]
 8000bc2:	e009      	b.n	8000bd8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	1c5a      	adds	r2, r3, #1
 8000bc8:	60ba      	str	r2, [r7, #8]
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	617b      	str	r3, [r7, #20]
 8000bd8:	697a      	ldr	r2, [r7, #20]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	dbf1      	blt.n	8000bc4 <_write+0x12>
  }
  return len;
 8000be0:	687b      	ldr	r3, [r7, #4]
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3718      	adds	r7, #24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <_close>:

int _close(int file)
{
 8000bea:	b480      	push	{r7}
 8000bec:	b083      	sub	sp, #12
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bf2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr

08000c02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c02:	b480      	push	{r7}
 8000c04:	b083      	sub	sp, #12
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
 8000c0a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c12:	605a      	str	r2, [r3, #4]
  return 0;
 8000c14:	2300      	movs	r3, #0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <_isatty>:

int _isatty(int file)
{
 8000c22:	b480      	push	{r7}
 8000c24:	b083      	sub	sp, #12
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c2a:	2301      	movs	r3, #1
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3714      	adds	r7, #20
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
	...

08000c54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c5c:	4a14      	ldr	r2, [pc, #80]	@ (8000cb0 <_sbrk+0x5c>)
 8000c5e:	4b15      	ldr	r3, [pc, #84]	@ (8000cb4 <_sbrk+0x60>)
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c68:	4b13      	ldr	r3, [pc, #76]	@ (8000cb8 <_sbrk+0x64>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d102      	bne.n	8000c76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c70:	4b11      	ldr	r3, [pc, #68]	@ (8000cb8 <_sbrk+0x64>)
 8000c72:	4a12      	ldr	r2, [pc, #72]	@ (8000cbc <_sbrk+0x68>)
 8000c74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c76:	4b10      	ldr	r3, [pc, #64]	@ (8000cb8 <_sbrk+0x64>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d207      	bcs.n	8000c94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c84:	f006 f84e 	bl	8006d24 <__errno>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	220c      	movs	r2, #12
 8000c8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c92:	e009      	b.n	8000ca8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c94:	4b08      	ldr	r3, [pc, #32]	@ (8000cb8 <_sbrk+0x64>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c9a:	4b07      	ldr	r3, [pc, #28]	@ (8000cb8 <_sbrk+0x64>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	4a05      	ldr	r2, [pc, #20]	@ (8000cb8 <_sbrk+0x64>)
 8000ca4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3718      	adds	r7, #24
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20020000 	.word	0x20020000
 8000cb4:	00000400 	.word	0x00000400
 8000cb8:	20000180 	.word	0x20000180
 8000cbc:	20001eb8 	.word	0x20001eb8

08000cc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cc4:	4b06      	ldr	r3, [pc, #24]	@ (8000ce0 <SystemInit+0x20>)
 8000cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cca:	4a05      	ldr	r2, [pc, #20]	@ (8000ce0 <SystemInit+0x20>)
 8000ccc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cd0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ce4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d1c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ce8:	f7ff ffea 	bl	8000cc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cec:	480c      	ldr	r0, [pc, #48]	@ (8000d20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cee:	490d      	ldr	r1, [pc, #52]	@ (8000d24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cf0:	4a0d      	ldr	r2, [pc, #52]	@ (8000d28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf4:	e002      	b.n	8000cfc <LoopCopyDataInit>

08000cf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cfa:	3304      	adds	r3, #4

08000cfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d00:	d3f9      	bcc.n	8000cf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d02:	4a0a      	ldr	r2, [pc, #40]	@ (8000d2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d04:	4c0a      	ldr	r4, [pc, #40]	@ (8000d30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d08:	e001      	b.n	8000d0e <LoopFillZerobss>

08000d0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d0c:	3204      	adds	r2, #4

08000d0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d10:	d3fb      	bcc.n	8000d0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d12:	f006 f80d 	bl	8006d30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d16:	f7ff fea9 	bl	8000a6c <main>
  bx  lr    
 8000d1a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d24:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 8000d28:	0800728c 	.word	0x0800728c
  ldr r2, =_sbss
 8000d2c:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 8000d30:	20001eb8 	.word	0x20001eb8

08000d34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d34:	e7fe      	b.n	8000d34 <ADC_IRQHandler>
	...

08000d38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d78 <HAL_Init+0x40>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a0d      	ldr	r2, [pc, #52]	@ (8000d78 <HAL_Init+0x40>)
 8000d42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d48:	4b0b      	ldr	r3, [pc, #44]	@ (8000d78 <HAL_Init+0x40>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a0a      	ldr	r2, [pc, #40]	@ (8000d78 <HAL_Init+0x40>)
 8000d4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d54:	4b08      	ldr	r3, [pc, #32]	@ (8000d78 <HAL_Init+0x40>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a07      	ldr	r2, [pc, #28]	@ (8000d78 <HAL_Init+0x40>)
 8000d5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d60:	2003      	movs	r0, #3
 8000d62:	f000 f94f 	bl	8001004 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d66:	200f      	movs	r0, #15
 8000d68:	f000 f808 	bl	8000d7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d6c:	f7ff fecc 	bl	8000b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40023c00 	.word	0x40023c00

08000d7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d84:	4b12      	ldr	r3, [pc, #72]	@ (8000dd0 <HAL_InitTick+0x54>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	4b12      	ldr	r3, [pc, #72]	@ (8000dd4 <HAL_InitTick+0x58>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f000 f967 	bl	800106e <HAL_SYSTICK_Config>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e00e      	b.n	8000dc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2b0f      	cmp	r3, #15
 8000dae:	d80a      	bhi.n	8000dc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db0:	2200      	movs	r2, #0
 8000db2:	6879      	ldr	r1, [r7, #4]
 8000db4:	f04f 30ff 	mov.w	r0, #4294967295
 8000db8:	f000 f92f 	bl	800101a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dbc:	4a06      	ldr	r2, [pc, #24]	@ (8000dd8 <HAL_InitTick+0x5c>)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e000      	b.n	8000dc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20000004 	.word	0x20000004
 8000dd4:	2000000c 	.word	0x2000000c
 8000dd8:	20000008 	.word	0x20000008

08000ddc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de0:	4b06      	ldr	r3, [pc, #24]	@ (8000dfc <HAL_IncTick+0x20>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	461a      	mov	r2, r3
 8000de6:	4b06      	ldr	r3, [pc, #24]	@ (8000e00 <HAL_IncTick+0x24>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4413      	add	r3, r2
 8000dec:	4a04      	ldr	r2, [pc, #16]	@ (8000e00 <HAL_IncTick+0x24>)
 8000dee:	6013      	str	r3, [r2, #0]
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	2000000c 	.word	0x2000000c
 8000e00:	20000184 	.word	0x20000184

08000e04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return uwTick;
 8000e08:	4b03      	ldr	r3, [pc, #12]	@ (8000e18 <HAL_GetTick+0x14>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	20000184 	.word	0x20000184

08000e1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e24:	f7ff ffee 	bl	8000e04 <HAL_GetTick>
 8000e28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e34:	d005      	beq.n	8000e42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e36:	4b0a      	ldr	r3, [pc, #40]	@ (8000e60 <HAL_Delay+0x44>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	4413      	add	r3, r2
 8000e40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e42:	bf00      	nop
 8000e44:	f7ff ffde 	bl	8000e04 <HAL_GetTick>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	68fa      	ldr	r2, [r7, #12]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d8f7      	bhi.n	8000e44 <HAL_Delay+0x28>
  {
  }
}
 8000e54:	bf00      	nop
 8000e56:	bf00      	nop
 8000e58:	3710      	adds	r7, #16
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	2000000c 	.word	0x2000000c

08000e64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e7a:	68ba      	ldr	r2, [r7, #8]
 8000e7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e80:	4013      	ands	r3, r2
 8000e82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e96:	4a04      	ldr	r2, [pc, #16]	@ (8000ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	60d3      	str	r3, [r2, #12]
}
 8000e9c:	bf00      	nop
 8000e9e:	3714      	adds	r7, #20
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb0:	4b04      	ldr	r3, [pc, #16]	@ (8000ec4 <__NVIC_GetPriorityGrouping+0x18>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	0a1b      	lsrs	r3, r3, #8
 8000eb6:	f003 0307 	and.w	r3, r3, #7
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	db0b      	blt.n	8000ef2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	f003 021f 	and.w	r2, r3, #31
 8000ee0:	4907      	ldr	r1, [pc, #28]	@ (8000f00 <__NVIC_EnableIRQ+0x38>)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	095b      	lsrs	r3, r3, #5
 8000ee8:	2001      	movs	r0, #1
 8000eea:	fa00 f202 	lsl.w	r2, r0, r2
 8000eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ef2:	bf00      	nop
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	e000e100 	.word	0xe000e100

08000f04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	6039      	str	r1, [r7, #0]
 8000f0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	db0a      	blt.n	8000f2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	490c      	ldr	r1, [pc, #48]	@ (8000f50 <__NVIC_SetPriority+0x4c>)
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	0112      	lsls	r2, r2, #4
 8000f24:	b2d2      	uxtb	r2, r2
 8000f26:	440b      	add	r3, r1
 8000f28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f2c:	e00a      	b.n	8000f44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	b2da      	uxtb	r2, r3
 8000f32:	4908      	ldr	r1, [pc, #32]	@ (8000f54 <__NVIC_SetPriority+0x50>)
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	f003 030f 	and.w	r3, r3, #15
 8000f3a:	3b04      	subs	r3, #4
 8000f3c:	0112      	lsls	r2, r2, #4
 8000f3e:	b2d2      	uxtb	r2, r2
 8000f40:	440b      	add	r3, r1
 8000f42:	761a      	strb	r2, [r3, #24]
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000e100 	.word	0xe000e100
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b089      	sub	sp, #36	@ 0x24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	f1c3 0307 	rsb	r3, r3, #7
 8000f72:	2b04      	cmp	r3, #4
 8000f74:	bf28      	it	cs
 8000f76:	2304      	movcs	r3, #4
 8000f78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	3304      	adds	r3, #4
 8000f7e:	2b06      	cmp	r3, #6
 8000f80:	d902      	bls.n	8000f88 <NVIC_EncodePriority+0x30>
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	3b03      	subs	r3, #3
 8000f86:	e000      	b.n	8000f8a <NVIC_EncodePriority+0x32>
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43da      	mvns	r2, r3
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	401a      	ands	r2, r3
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8000faa:	43d9      	mvns	r1, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb0:	4313      	orrs	r3, r2
         );
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3724      	adds	r7, #36	@ 0x24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
	...

08000fc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fd0:	d301      	bcc.n	8000fd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e00f      	b.n	8000ff6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001000 <SysTick_Config+0x40>)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fde:	210f      	movs	r1, #15
 8000fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe4:	f7ff ff8e 	bl	8000f04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe8:	4b05      	ldr	r3, [pc, #20]	@ (8001000 <SysTick_Config+0x40>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fee:	4b04      	ldr	r3, [pc, #16]	@ (8001000 <SysTick_Config+0x40>)
 8000ff0:	2207      	movs	r2, #7
 8000ff2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	e000e010 	.word	0xe000e010

08001004 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f7ff ff29 	bl	8000e64 <__NVIC_SetPriorityGrouping>
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800101a:	b580      	push	{r7, lr}
 800101c:	b086      	sub	sp, #24
 800101e:	af00      	add	r7, sp, #0
 8001020:	4603      	mov	r3, r0
 8001022:	60b9      	str	r1, [r7, #8]
 8001024:	607a      	str	r2, [r7, #4]
 8001026:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800102c:	f7ff ff3e 	bl	8000eac <__NVIC_GetPriorityGrouping>
 8001030:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	68b9      	ldr	r1, [r7, #8]
 8001036:	6978      	ldr	r0, [r7, #20]
 8001038:	f7ff ff8e 	bl	8000f58 <NVIC_EncodePriority>
 800103c:	4602      	mov	r2, r0
 800103e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001042:	4611      	mov	r1, r2
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff ff5d 	bl	8000f04 <__NVIC_SetPriority>
}
 800104a:	bf00      	nop
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	4603      	mov	r3, r0
 800105a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800105c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ff31 	bl	8000ec8 <__NVIC_EnableIRQ>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff ffa2 	bl	8000fc0 <SysTick_Config>
 800107c:	4603      	mov	r3, r0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
	...

08001088 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001088:	b480      	push	{r7}
 800108a:	b089      	sub	sp, #36	@ 0x24
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001096:	2300      	movs	r3, #0
 8001098:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800109a:	2300      	movs	r3, #0
 800109c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800109e:	2300      	movs	r3, #0
 80010a0:	61fb      	str	r3, [r7, #28]
 80010a2:	e16b      	b.n	800137c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010a4:	2201      	movs	r2, #1
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	697a      	ldr	r2, [r7, #20]
 80010b4:	4013      	ands	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	429a      	cmp	r2, r3
 80010be:	f040 815a 	bne.w	8001376 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f003 0303 	and.w	r3, r3, #3
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d005      	beq.n	80010da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d130      	bne.n	800113c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	2203      	movs	r2, #3
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43db      	mvns	r3, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4013      	ands	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	68da      	ldr	r2, [r3, #12]
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4313      	orrs	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001110:	2201      	movs	r2, #1
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	091b      	lsrs	r3, r3, #4
 8001126:	f003 0201 	and.w	r2, r3, #1
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4313      	orrs	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 0303 	and.w	r3, r3, #3
 8001144:	2b03      	cmp	r3, #3
 8001146:	d017      	beq.n	8001178 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	2203      	movs	r2, #3
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	689a      	ldr	r2, [r3, #8]
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4313      	orrs	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f003 0303 	and.w	r3, r3, #3
 8001180:	2b02      	cmp	r3, #2
 8001182:	d123      	bne.n	80011cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	08da      	lsrs	r2, r3, #3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3208      	adds	r2, #8
 800118c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001190:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	f003 0307 	and.w	r3, r3, #7
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	220f      	movs	r2, #15
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	691a      	ldr	r2, [r3, #16]
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	f003 0307 	and.w	r3, r3, #7
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	08da      	lsrs	r2, r3, #3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	3208      	adds	r2, #8
 80011c6:	69b9      	ldr	r1, [r7, #24]
 80011c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	2203      	movs	r2, #3
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4013      	ands	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f003 0203 	and.w	r2, r3, #3
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001208:	2b00      	cmp	r3, #0
 800120a:	f000 80b4 	beq.w	8001376 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	4b60      	ldr	r3, [pc, #384]	@ (8001394 <HAL_GPIO_Init+0x30c>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001216:	4a5f      	ldr	r2, [pc, #380]	@ (8001394 <HAL_GPIO_Init+0x30c>)
 8001218:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800121c:	6453      	str	r3, [r2, #68]	@ 0x44
 800121e:	4b5d      	ldr	r3, [pc, #372]	@ (8001394 <HAL_GPIO_Init+0x30c>)
 8001220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001222:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800122a:	4a5b      	ldr	r2, [pc, #364]	@ (8001398 <HAL_GPIO_Init+0x310>)
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	089b      	lsrs	r3, r3, #2
 8001230:	3302      	adds	r3, #2
 8001232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001236:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	f003 0303 	and.w	r3, r3, #3
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	220f      	movs	r2, #15
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43db      	mvns	r3, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4013      	ands	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a52      	ldr	r2, [pc, #328]	@ (800139c <HAL_GPIO_Init+0x314>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d02b      	beq.n	80012ae <HAL_GPIO_Init+0x226>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a51      	ldr	r2, [pc, #324]	@ (80013a0 <HAL_GPIO_Init+0x318>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d025      	beq.n	80012aa <HAL_GPIO_Init+0x222>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a50      	ldr	r2, [pc, #320]	@ (80013a4 <HAL_GPIO_Init+0x31c>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d01f      	beq.n	80012a6 <HAL_GPIO_Init+0x21e>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a4f      	ldr	r2, [pc, #316]	@ (80013a8 <HAL_GPIO_Init+0x320>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d019      	beq.n	80012a2 <HAL_GPIO_Init+0x21a>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a4e      	ldr	r2, [pc, #312]	@ (80013ac <HAL_GPIO_Init+0x324>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d013      	beq.n	800129e <HAL_GPIO_Init+0x216>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a4d      	ldr	r2, [pc, #308]	@ (80013b0 <HAL_GPIO_Init+0x328>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d00d      	beq.n	800129a <HAL_GPIO_Init+0x212>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a4c      	ldr	r2, [pc, #304]	@ (80013b4 <HAL_GPIO_Init+0x32c>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d007      	beq.n	8001296 <HAL_GPIO_Init+0x20e>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a4b      	ldr	r2, [pc, #300]	@ (80013b8 <HAL_GPIO_Init+0x330>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d101      	bne.n	8001292 <HAL_GPIO_Init+0x20a>
 800128e:	2307      	movs	r3, #7
 8001290:	e00e      	b.n	80012b0 <HAL_GPIO_Init+0x228>
 8001292:	2308      	movs	r3, #8
 8001294:	e00c      	b.n	80012b0 <HAL_GPIO_Init+0x228>
 8001296:	2306      	movs	r3, #6
 8001298:	e00a      	b.n	80012b0 <HAL_GPIO_Init+0x228>
 800129a:	2305      	movs	r3, #5
 800129c:	e008      	b.n	80012b0 <HAL_GPIO_Init+0x228>
 800129e:	2304      	movs	r3, #4
 80012a0:	e006      	b.n	80012b0 <HAL_GPIO_Init+0x228>
 80012a2:	2303      	movs	r3, #3
 80012a4:	e004      	b.n	80012b0 <HAL_GPIO_Init+0x228>
 80012a6:	2302      	movs	r3, #2
 80012a8:	e002      	b.n	80012b0 <HAL_GPIO_Init+0x228>
 80012aa:	2301      	movs	r3, #1
 80012ac:	e000      	b.n	80012b0 <HAL_GPIO_Init+0x228>
 80012ae:	2300      	movs	r3, #0
 80012b0:	69fa      	ldr	r2, [r7, #28]
 80012b2:	f002 0203 	and.w	r2, r2, #3
 80012b6:	0092      	lsls	r2, r2, #2
 80012b8:	4093      	lsls	r3, r2
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4313      	orrs	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012c0:	4935      	ldr	r1, [pc, #212]	@ (8001398 <HAL_GPIO_Init+0x310>)
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	089b      	lsrs	r3, r3, #2
 80012c6:	3302      	adds	r3, #2
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ce:	4b3b      	ldr	r3, [pc, #236]	@ (80013bc <HAL_GPIO_Init+0x334>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	43db      	mvns	r3, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4013      	ands	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d003      	beq.n	80012f2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012f2:	4a32      	ldr	r2, [pc, #200]	@ (80013bc <HAL_GPIO_Init+0x334>)
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012f8:	4b30      	ldr	r3, [pc, #192]	@ (80013bc <HAL_GPIO_Init+0x334>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	43db      	mvns	r3, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4013      	ands	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d003      	beq.n	800131c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	4313      	orrs	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800131c:	4a27      	ldr	r2, [pc, #156]	@ (80013bc <HAL_GPIO_Init+0x334>)
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001322:	4b26      	ldr	r3, [pc, #152]	@ (80013bc <HAL_GPIO_Init+0x334>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	43db      	mvns	r3, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4013      	ands	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d003      	beq.n	8001346 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	4313      	orrs	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001346:	4a1d      	ldr	r2, [pc, #116]	@ (80013bc <HAL_GPIO_Init+0x334>)
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800134c:	4b1b      	ldr	r3, [pc, #108]	@ (80013bc <HAL_GPIO_Init+0x334>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	43db      	mvns	r3, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4013      	ands	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d003      	beq.n	8001370 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	4313      	orrs	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001370:	4a12      	ldr	r2, [pc, #72]	@ (80013bc <HAL_GPIO_Init+0x334>)
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	3301      	adds	r3, #1
 800137a:	61fb      	str	r3, [r7, #28]
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	2b0f      	cmp	r3, #15
 8001380:	f67f ae90 	bls.w	80010a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001384:	bf00      	nop
 8001386:	bf00      	nop
 8001388:	3724      	adds	r7, #36	@ 0x24
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	40023800 	.word	0x40023800
 8001398:	40013800 	.word	0x40013800
 800139c:	40020000 	.word	0x40020000
 80013a0:	40020400 	.word	0x40020400
 80013a4:	40020800 	.word	0x40020800
 80013a8:	40020c00 	.word	0x40020c00
 80013ac:	40021000 	.word	0x40021000
 80013b0:	40021400 	.word	0x40021400
 80013b4:	40021800 	.word	0x40021800
 80013b8:	40021c00 	.word	0x40021c00
 80013bc:	40013c00 	.word	0x40013c00

080013c0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af02      	add	r7, sp, #8
 80013c6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d101      	bne.n	80013d2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e101      	b.n	80015d6 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d106      	bne.n	80013f2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f004 ff3f 	bl	8006270 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2203      	movs	r2, #3
 80013f6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001400:	d102      	bne.n	8001408 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4618      	mov	r0, r3
 800140e:	f001 fb4c 	bl	8002aaa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6818      	ldr	r0, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	7c1a      	ldrb	r2, [r3, #16]
 800141a:	f88d 2000 	strb.w	r2, [sp]
 800141e:	3304      	adds	r3, #4
 8001420:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001422:	f001 fa2b 	bl	800287c <USB_CoreInit>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d005      	beq.n	8001438 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2202      	movs	r2, #2
 8001430:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e0ce      	b.n	80015d6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2100      	movs	r1, #0
 800143e:	4618      	mov	r0, r3
 8001440:	f001 fb44 	bl	8002acc <USB_SetCurrentMode>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d005      	beq.n	8001456 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2202      	movs	r2, #2
 800144e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e0bf      	b.n	80015d6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001456:	2300      	movs	r3, #0
 8001458:	73fb      	strb	r3, [r7, #15]
 800145a:	e04a      	b.n	80014f2 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800145c:	7bfa      	ldrb	r2, [r7, #15]
 800145e:	6879      	ldr	r1, [r7, #4]
 8001460:	4613      	mov	r3, r2
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	4413      	add	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	440b      	add	r3, r1
 800146a:	3315      	adds	r3, #21
 800146c:	2201      	movs	r2, #1
 800146e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001470:	7bfa      	ldrb	r2, [r7, #15]
 8001472:	6879      	ldr	r1, [r7, #4]
 8001474:	4613      	mov	r3, r2
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	4413      	add	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	440b      	add	r3, r1
 800147e:	3314      	adds	r3, #20
 8001480:	7bfa      	ldrb	r2, [r7, #15]
 8001482:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001484:	7bfa      	ldrb	r2, [r7, #15]
 8001486:	7bfb      	ldrb	r3, [r7, #15]
 8001488:	b298      	uxth	r0, r3
 800148a:	6879      	ldr	r1, [r7, #4]
 800148c:	4613      	mov	r3, r2
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	4413      	add	r3, r2
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	440b      	add	r3, r1
 8001496:	332e      	adds	r3, #46	@ 0x2e
 8001498:	4602      	mov	r2, r0
 800149a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800149c:	7bfa      	ldrb	r2, [r7, #15]
 800149e:	6879      	ldr	r1, [r7, #4]
 80014a0:	4613      	mov	r3, r2
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	4413      	add	r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	440b      	add	r3, r1
 80014aa:	3318      	adds	r3, #24
 80014ac:	2200      	movs	r2, #0
 80014ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80014b0:	7bfa      	ldrb	r2, [r7, #15]
 80014b2:	6879      	ldr	r1, [r7, #4]
 80014b4:	4613      	mov	r3, r2
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	4413      	add	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	440b      	add	r3, r1
 80014be:	331c      	adds	r3, #28
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80014c4:	7bfa      	ldrb	r2, [r7, #15]
 80014c6:	6879      	ldr	r1, [r7, #4]
 80014c8:	4613      	mov	r3, r2
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	4413      	add	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	440b      	add	r3, r1
 80014d2:	3320      	adds	r3, #32
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80014d8:	7bfa      	ldrb	r2, [r7, #15]
 80014da:	6879      	ldr	r1, [r7, #4]
 80014dc:	4613      	mov	r3, r2
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	4413      	add	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	440b      	add	r3, r1
 80014e6:	3324      	adds	r3, #36	@ 0x24
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014ec:	7bfb      	ldrb	r3, [r7, #15]
 80014ee:	3301      	adds	r3, #1
 80014f0:	73fb      	strb	r3, [r7, #15]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	791b      	ldrb	r3, [r3, #4]
 80014f6:	7bfa      	ldrb	r2, [r7, #15]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d3af      	bcc.n	800145c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014fc:	2300      	movs	r3, #0
 80014fe:	73fb      	strb	r3, [r7, #15]
 8001500:	e044      	b.n	800158c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001502:	7bfa      	ldrb	r2, [r7, #15]
 8001504:	6879      	ldr	r1, [r7, #4]
 8001506:	4613      	mov	r3, r2
 8001508:	00db      	lsls	r3, r3, #3
 800150a:	4413      	add	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	440b      	add	r3, r1
 8001510:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001514:	2200      	movs	r2, #0
 8001516:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001518:	7bfa      	ldrb	r2, [r7, #15]
 800151a:	6879      	ldr	r1, [r7, #4]
 800151c:	4613      	mov	r3, r2
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	4413      	add	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	440b      	add	r3, r1
 8001526:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800152a:	7bfa      	ldrb	r2, [r7, #15]
 800152c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800152e:	7bfa      	ldrb	r2, [r7, #15]
 8001530:	6879      	ldr	r1, [r7, #4]
 8001532:	4613      	mov	r3, r2
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	4413      	add	r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	440b      	add	r3, r1
 800153c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001540:	2200      	movs	r2, #0
 8001542:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001544:	7bfa      	ldrb	r2, [r7, #15]
 8001546:	6879      	ldr	r1, [r7, #4]
 8001548:	4613      	mov	r3, r2
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	4413      	add	r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	440b      	add	r3, r1
 8001552:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800155a:	7bfa      	ldrb	r2, [r7, #15]
 800155c:	6879      	ldr	r1, [r7, #4]
 800155e:	4613      	mov	r3, r2
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	4413      	add	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	440b      	add	r3, r1
 8001568:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001570:	7bfa      	ldrb	r2, [r7, #15]
 8001572:	6879      	ldr	r1, [r7, #4]
 8001574:	4613      	mov	r3, r2
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	4413      	add	r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	440b      	add	r3, r1
 800157e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001586:	7bfb      	ldrb	r3, [r7, #15]
 8001588:	3301      	adds	r3, #1
 800158a:	73fb      	strb	r3, [r7, #15]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	791b      	ldrb	r3, [r3, #4]
 8001590:	7bfa      	ldrb	r2, [r7, #15]
 8001592:	429a      	cmp	r2, r3
 8001594:	d3b5      	bcc.n	8001502 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6818      	ldr	r0, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	7c1a      	ldrb	r2, [r3, #16]
 800159e:	f88d 2000 	strb.w	r2, [sp]
 80015a2:	3304      	adds	r3, #4
 80015a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015a6:	f001 fadd 	bl	8002b64 <USB_DevInit>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d005      	beq.n	80015bc <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2202      	movs	r2, #2
 80015b4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e00c      	b.n	80015d6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2201      	movs	r2, #1
 80015c6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f002 fb27 	bl	8003c22 <USB_DevDisconnect>

  return HAL_OK;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b084      	sub	sp, #16
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d101      	bne.n	80015fa <HAL_PCD_Start+0x1c>
 80015f6:	2302      	movs	r3, #2
 80015f8:	e022      	b.n	8001640 <HAL_PCD_Start+0x62>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2201      	movs	r2, #1
 80015fe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	68db      	ldr	r3, [r3, #12]
 8001606:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800160a:	2b00      	cmp	r3, #0
 800160c:	d009      	beq.n	8001622 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001612:	2b01      	cmp	r3, #1
 8001614:	d105      	bne.n	8001622 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800161a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f001 fa2e 	bl	8002a88 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4618      	mov	r0, r3
 8001632:	f002 fad5 	bl	8003be0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	3710      	adds	r7, #16
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001648:	b590      	push	{r4, r7, lr}
 800164a:	b08d      	sub	sp, #52	@ 0x34
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001656:	6a3b      	ldr	r3, [r7, #32]
 8001658:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4618      	mov	r0, r3
 8001660:	f002 fb93 	bl	8003d8a <USB_GetMode>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	f040 848c 	bne.w	8001f84 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4618      	mov	r0, r3
 8001672:	f002 faf7 	bl	8003c64 <USB_ReadInterrupts>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	f000 8482 	beq.w	8001f82 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	0a1b      	lsrs	r3, r3, #8
 8001688:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f002 fae4 	bl	8003c64 <USB_ReadInterrupts>
 800169c:	4603      	mov	r3, r0
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d107      	bne.n	80016b6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	695a      	ldr	r2, [r3, #20]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f002 0202 	and.w	r2, r2, #2
 80016b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f002 fad2 	bl	8003c64 <USB_ReadInterrupts>
 80016c0:	4603      	mov	r3, r0
 80016c2:	f003 0310 	and.w	r3, r3, #16
 80016c6:	2b10      	cmp	r3, #16
 80016c8:	d161      	bne.n	800178e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	699a      	ldr	r2, [r3, #24]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f022 0210 	bic.w	r2, r2, #16
 80016d8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80016da:	6a3b      	ldr	r3, [r7, #32]
 80016dc:	6a1b      	ldr	r3, [r3, #32]
 80016de:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	f003 020f 	and.w	r2, r3, #15
 80016e6:	4613      	mov	r3, r2
 80016e8:	00db      	lsls	r3, r3, #3
 80016ea:	4413      	add	r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	4413      	add	r3, r2
 80016f6:	3304      	adds	r3, #4
 80016f8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	0c5b      	lsrs	r3, r3, #17
 80016fe:	f003 030f 	and.w	r3, r3, #15
 8001702:	2b02      	cmp	r3, #2
 8001704:	d124      	bne.n	8001750 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800170c:	4013      	ands	r3, r2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d035      	beq.n	800177e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	091b      	lsrs	r3, r3, #4
 800171a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800171c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001720:	b29b      	uxth	r3, r3
 8001722:	461a      	mov	r2, r3
 8001724:	6a38      	ldr	r0, [r7, #32]
 8001726:	f002 f909 	bl	800393c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	68da      	ldr	r2, [r3, #12]
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	091b      	lsrs	r3, r3, #4
 8001732:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001736:	441a      	add	r2, r3
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	695a      	ldr	r2, [r3, #20]
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	091b      	lsrs	r3, r3, #4
 8001744:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001748:	441a      	add	r2, r3
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	615a      	str	r2, [r3, #20]
 800174e:	e016      	b.n	800177e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	0c5b      	lsrs	r3, r3, #17
 8001754:	f003 030f 	and.w	r3, r3, #15
 8001758:	2b06      	cmp	r3, #6
 800175a:	d110      	bne.n	800177e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001762:	2208      	movs	r2, #8
 8001764:	4619      	mov	r1, r3
 8001766:	6a38      	ldr	r0, [r7, #32]
 8001768:	f002 f8e8 	bl	800393c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	695a      	ldr	r2, [r3, #20]
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	091b      	lsrs	r3, r3, #4
 8001774:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001778:	441a      	add	r2, r3
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	699a      	ldr	r2, [r3, #24]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f042 0210 	orr.w	r2, r2, #16
 800178c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f002 fa66 	bl	8003c64 <USB_ReadInterrupts>
 8001798:	4603      	mov	r3, r0
 800179a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800179e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80017a2:	f040 80a7 	bne.w	80018f4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80017a6:	2300      	movs	r3, #0
 80017a8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f002 fa6b 	bl	8003c8a <USB_ReadDevAllOutEpInterrupt>
 80017b4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80017b6:	e099      	b.n	80018ec <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80017b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f000 808e 	beq.w	80018e0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017ca:	b2d2      	uxtb	r2, r2
 80017cc:	4611      	mov	r1, r2
 80017ce:	4618      	mov	r0, r3
 80017d0:	f002 fa8f 	bl	8003cf2 <USB_ReadDevOutEPInterrupt>
 80017d4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	f003 0301 	and.w	r3, r3, #1
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d00c      	beq.n	80017fa <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80017e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e2:	015a      	lsls	r2, r3, #5
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	4413      	add	r3, r2
 80017e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017ec:	461a      	mov	r2, r3
 80017ee:	2301      	movs	r3, #1
 80017f0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80017f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f000 fea3 	bl	8002540 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	f003 0308 	and.w	r3, r3, #8
 8001800:	2b00      	cmp	r3, #0
 8001802:	d00c      	beq.n	800181e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001806:	015a      	lsls	r2, r3, #5
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	4413      	add	r3, r2
 800180c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001810:	461a      	mov	r2, r3
 8001812:	2308      	movs	r3, #8
 8001814:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001816:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f000 ff79 	bl	8002710 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	f003 0310 	and.w	r3, r3, #16
 8001824:	2b00      	cmp	r3, #0
 8001826:	d008      	beq.n	800183a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800182a:	015a      	lsls	r2, r3, #5
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	4413      	add	r3, r2
 8001830:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001834:	461a      	mov	r2, r3
 8001836:	2310      	movs	r3, #16
 8001838:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d030      	beq.n	80018a6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001844:	6a3b      	ldr	r3, [r7, #32]
 8001846:	695b      	ldr	r3, [r3, #20]
 8001848:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800184c:	2b80      	cmp	r3, #128	@ 0x80
 800184e:	d109      	bne.n	8001864 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	69fa      	ldr	r2, [r7, #28]
 800185a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800185e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001862:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001864:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001866:	4613      	mov	r3, r2
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	4413      	add	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	4413      	add	r3, r2
 8001876:	3304      	adds	r3, #4
 8001878:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	78db      	ldrb	r3, [r3, #3]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d108      	bne.n	8001894 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	2200      	movs	r2, #0
 8001886:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800188a:	b2db      	uxtb	r3, r3
 800188c:	4619      	mov	r1, r3
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f004 fdf4 	bl	800647c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001896:	015a      	lsls	r2, r3, #5
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	4413      	add	r3, r2
 800189c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80018a0:	461a      	mov	r2, r3
 80018a2:	2302      	movs	r3, #2
 80018a4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	f003 0320 	and.w	r3, r3, #32
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d008      	beq.n	80018c2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80018b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b2:	015a      	lsls	r2, r3, #5
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	4413      	add	r3, r2
 80018b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80018bc:	461a      	mov	r2, r3
 80018be:	2320      	movs	r3, #32
 80018c0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d009      	beq.n	80018e0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80018cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ce:	015a      	lsls	r2, r3, #5
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	4413      	add	r3, r2
 80018d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80018d8:	461a      	mov	r2, r3
 80018da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018de:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80018e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e2:	3301      	adds	r3, #1
 80018e4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80018e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018e8:	085b      	lsrs	r3, r3, #1
 80018ea:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80018ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f47f af62 	bne.w	80017b8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f002 f9b3 	bl	8003c64 <USB_ReadInterrupts>
 80018fe:	4603      	mov	r3, r0
 8001900:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001904:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001908:	f040 80db 	bne.w	8001ac2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f002 f9d4 	bl	8003cbe <USB_ReadDevAllInEpInterrupt>
 8001916:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001918:	2300      	movs	r3, #0
 800191a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800191c:	e0cd      	b.n	8001aba <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800191e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	2b00      	cmp	r3, #0
 8001926:	f000 80c2 	beq.w	8001aae <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001930:	b2d2      	uxtb	r2, r2
 8001932:	4611      	mov	r1, r2
 8001934:	4618      	mov	r0, r3
 8001936:	f002 f9fa 	bl	8003d2e <USB_ReadDevInEPInterrupt>
 800193a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	2b00      	cmp	r3, #0
 8001944:	d057      	beq.n	80019f6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001948:	f003 030f 	and.w	r3, r3, #15
 800194c:	2201      	movs	r2, #1
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800195a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	43db      	mvns	r3, r3
 8001960:	69f9      	ldr	r1, [r7, #28]
 8001962:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001966:	4013      	ands	r3, r2
 8001968:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800196a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800196c:	015a      	lsls	r2, r3, #5
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	4413      	add	r3, r2
 8001972:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001976:	461a      	mov	r2, r3
 8001978:	2301      	movs	r3, #1
 800197a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	799b      	ldrb	r3, [r3, #6]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d132      	bne.n	80019ea <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001984:	6879      	ldr	r1, [r7, #4]
 8001986:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001988:	4613      	mov	r3, r2
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	4413      	add	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	440b      	add	r3, r1
 8001992:	3320      	adds	r3, #32
 8001994:	6819      	ldr	r1, [r3, #0]
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800199a:	4613      	mov	r3, r2
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	4413      	add	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4403      	add	r3, r0
 80019a4:	331c      	adds	r3, #28
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4419      	add	r1, r3
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019ae:	4613      	mov	r3, r2
 80019b0:	00db      	lsls	r3, r3, #3
 80019b2:	4413      	add	r3, r2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	4403      	add	r3, r0
 80019b8:	3320      	adds	r3, #32
 80019ba:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80019bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d113      	bne.n	80019ea <HAL_PCD_IRQHandler+0x3a2>
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019c6:	4613      	mov	r3, r2
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	4413      	add	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	440b      	add	r3, r1
 80019d0:	3324      	adds	r3, #36	@ 0x24
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d108      	bne.n	80019ea <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6818      	ldr	r0, [r3, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80019e2:	461a      	mov	r2, r3
 80019e4:	2101      	movs	r1, #1
 80019e6:	f002 fa01 	bl	8003dec <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80019ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	4619      	mov	r1, r3
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f004 fcbe 	bl	8006372 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	f003 0308 	and.w	r3, r3, #8
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d008      	beq.n	8001a12 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a02:	015a      	lsls	r2, r3, #5
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	4413      	add	r3, r2
 8001a08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	2308      	movs	r3, #8
 8001a10:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	f003 0310 	and.w	r3, r3, #16
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d008      	beq.n	8001a2e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1e:	015a      	lsls	r2, r3, #5
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	4413      	add	r3, r2
 8001a24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001a28:	461a      	mov	r2, r3
 8001a2a:	2310      	movs	r3, #16
 8001a2c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d008      	beq.n	8001a4a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a3a:	015a      	lsls	r2, r3, #5
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	4413      	add	r3, r2
 8001a40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001a44:	461a      	mov	r2, r3
 8001a46:	2340      	movs	r3, #64	@ 0x40
 8001a48:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	f003 0302 	and.w	r3, r3, #2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d023      	beq.n	8001a9c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001a54:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001a56:	6a38      	ldr	r0, [r7, #32]
 8001a58:	f001 f9e8 	bl	8002e2c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001a5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a5e:	4613      	mov	r3, r2
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	4413      	add	r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	3310      	adds	r3, #16
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	3304      	adds	r3, #4
 8001a6e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	78db      	ldrb	r3, [r3, #3]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d108      	bne.n	8001a8a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	4619      	mov	r1, r3
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f004 fd0b 	bl	80064a0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a8c:	015a      	lsls	r2, r3, #5
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	4413      	add	r3, r2
 8001a92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001a96:	461a      	mov	r2, r3
 8001a98:	2302      	movs	r3, #2
 8001a9a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d003      	beq.n	8001aae <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001aa6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f000 fcbd 	bl	8002428 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ab6:	085b      	lsrs	r3, r3, #1
 8001ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	f47f af2e 	bne.w	800191e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f002 f8cc 	bl	8003c64 <USB_ReadInterrupts>
 8001acc:	4603      	mov	r3, r0
 8001ace:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001ad2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001ad6:	d122      	bne.n	8001b1e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	69fa      	ldr	r2, [r7, #28]
 8001ae2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001ae6:	f023 0301 	bic.w	r3, r3, #1
 8001aea:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d108      	bne.n	8001b08 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001afe:	2100      	movs	r1, #0
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f000 fea3 	bl	800284c <HAL_PCDEx_LPM_Callback>
 8001b06:	e002      	b.n	8001b0e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f004 fca9 	bl	8006460 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	695a      	ldr	r2, [r3, #20]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001b1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f002 f89e 	bl	8003c64 <USB_ReadInterrupts>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001b32:	d112      	bne.n	8001b5a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d102      	bne.n	8001b4a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f004 fc65 	bl	8006414 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	695a      	ldr	r2, [r3, #20]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001b58:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f002 f880 	bl	8003c64 <USB_ReadInterrupts>
 8001b64:	4603      	mov	r3, r0
 8001b66:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b6e:	f040 80b7 	bne.w	8001ce0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	69fa      	ldr	r2, [r7, #28]
 8001b7c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b80:	f023 0301 	bic.w	r3, r3, #1
 8001b84:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2110      	movs	r1, #16
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f001 f94d 	bl	8002e2c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b92:	2300      	movs	r3, #0
 8001b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b96:	e046      	b.n	8001c26 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b9a:	015a      	lsls	r2, r3, #5
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001baa:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bae:	015a      	lsls	r2, r3, #5
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001bbc:	0151      	lsls	r1, r2, #5
 8001bbe:	69fa      	ldr	r2, [r7, #28]
 8001bc0:	440a      	add	r2, r1
 8001bc2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001bc6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001bca:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bce:	015a      	lsls	r2, r3, #5
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001bd8:	461a      	mov	r2, r3
 8001bda:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001bde:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001be2:	015a      	lsls	r2, r3, #5
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	4413      	add	r3, r2
 8001be8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001bf0:	0151      	lsls	r1, r2, #5
 8001bf2:	69fa      	ldr	r2, [r7, #28]
 8001bf4:	440a      	add	r2, r1
 8001bf6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001bfa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001bfe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c02:	015a      	lsls	r2, r3, #5
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	4413      	add	r3, r2
 8001c08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c10:	0151      	lsls	r1, r2, #5
 8001c12:	69fa      	ldr	r2, [r7, #28]
 8001c14:	440a      	add	r2, r1
 8001c16:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001c1a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001c1e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c22:	3301      	adds	r3, #1
 8001c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	791b      	ldrb	r3, [r3, #4]
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d3b2      	bcc.n	8001b98 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	69fa      	ldr	r2, [r7, #28]
 8001c3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001c40:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001c44:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	7bdb      	ldrb	r3, [r3, #15]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d016      	beq.n	8001c7c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001c58:	69fa      	ldr	r2, [r7, #28]
 8001c5a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001c5e:	f043 030b 	orr.w	r3, r3, #11
 8001c62:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c6e:	69fa      	ldr	r2, [r7, #28]
 8001c70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001c74:	f043 030b 	orr.w	r3, r3, #11
 8001c78:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c7a:	e015      	b.n	8001ca8 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c82:	695b      	ldr	r3, [r3, #20]
 8001c84:	69fa      	ldr	r2, [r7, #28]
 8001c86:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001c8a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001c8e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001c92:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c9a:	691b      	ldr	r3, [r3, #16]
 8001c9c:	69fa      	ldr	r2, [r7, #28]
 8001c9e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001ca2:	f043 030b 	orr.w	r3, r3, #11
 8001ca6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	69fa      	ldr	r2, [r7, #28]
 8001cb2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001cb6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001cba:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6818      	ldr	r0, [r3, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001cca:	461a      	mov	r2, r3
 8001ccc:	f002 f88e 	bl	8003dec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	695a      	ldr	r2, [r3, #20]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001cde:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f001 ffbd 	bl	8003c64 <USB_ReadInterrupts>
 8001cea:	4603      	mov	r3, r0
 8001cec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cf0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001cf4:	d123      	bne.n	8001d3e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f002 f853 	bl	8003da6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f001 f90a 	bl	8002f1e <USB_GetDevSpeed>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681c      	ldr	r4, [r3, #0]
 8001d16:	f000 fda5 	bl	8002864 <HAL_RCC_GetHCLKFreq>
 8001d1a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d20:	461a      	mov	r2, r3
 8001d22:	4620      	mov	r0, r4
 8001d24:	f000 fe0e 	bl	8002944 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f004 fb4a 	bl	80063c2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	695a      	ldr	r2, [r3, #20]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001d3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f001 ff8e 	bl	8003c64 <USB_ReadInterrupts>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	f003 0308 	and.w	r3, r3, #8
 8001d4e:	2b08      	cmp	r3, #8
 8001d50:	d10a      	bne.n	8001d68 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f004 fb27 	bl	80063a6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	695a      	ldr	r2, [r3, #20]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f002 0208 	and.w	r2, r2, #8
 8001d66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f001 ff79 	bl	8003c64 <USB_ReadInterrupts>
 8001d72:	4603      	mov	r3, r0
 8001d74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d78:	2b80      	cmp	r3, #128	@ 0x80
 8001d7a:	d123      	bne.n	8001dc4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001d7c:	6a3b      	ldr	r3, [r7, #32]
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001d84:	6a3b      	ldr	r3, [r7, #32]
 8001d86:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d88:	2301      	movs	r3, #1
 8001d8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d8c:	e014      	b.n	8001db8 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d92:	4613      	mov	r3, r2
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	4413      	add	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	440b      	add	r3, r1
 8001d9c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d105      	bne.n	8001db2 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	4619      	mov	r1, r3
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 fb0a 	bl	80023c6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db4:	3301      	adds	r3, #1
 8001db6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	791b      	ldrb	r3, [r3, #4]
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d3e4      	bcc.n	8001d8e <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f001 ff4b 	bl	8003c64 <USB_ReadInterrupts>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dd4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001dd8:	d13c      	bne.n	8001e54 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001dda:	2301      	movs	r3, #1
 8001ddc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dde:	e02b      	b.n	8001e38 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de2:	015a      	lsls	r2, r3, #5
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	4413      	add	r3, r2
 8001de8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001df0:	6879      	ldr	r1, [r7, #4]
 8001df2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001df4:	4613      	mov	r3, r2
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	4413      	add	r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	440b      	add	r3, r1
 8001dfe:	3318      	adds	r3, #24
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d115      	bne.n	8001e32 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001e06:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	da12      	bge.n	8001e32 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001e0c:	6879      	ldr	r1, [r7, #4]
 8001e0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e10:	4613      	mov	r3, r2
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	4413      	add	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	440b      	add	r3, r1
 8001e1a:	3317      	adds	r3, #23
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f000 faca 	bl	80023c6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e34:	3301      	adds	r3, #1
 8001e36:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	791b      	ldrb	r3, [r3, #4]
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d3cd      	bcc.n	8001de0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	695a      	ldr	r2, [r3, #20]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001e52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f001 ff03 	bl	8003c64 <USB_ReadInterrupts>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e64:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001e68:	d156      	bne.n	8001f18 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e6e:	e045      	b.n	8001efc <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e72:	015a      	lsls	r2, r3, #5
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	4413      	add	r3, r2
 8001e78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e80:	6879      	ldr	r1, [r7, #4]
 8001e82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e84:	4613      	mov	r3, r2
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	4413      	add	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	440b      	add	r3, r1
 8001e8e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d12e      	bne.n	8001ef6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001e98:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	da2b      	bge.n	8001ef6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001eaa:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d121      	bne.n	8001ef6 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001eb2:	6879      	ldr	r1, [r7, #4]
 8001eb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	4413      	add	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	440b      	add	r3, r1
 8001ec0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001ec8:	6a3b      	ldr	r3, [r7, #32]
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001ed0:	6a3b      	ldr	r3, [r7, #32]
 8001ed2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001ed4:	6a3b      	ldr	r3, [r7, #32]
 8001ed6:	695b      	ldr	r3, [r3, #20]
 8001ed8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d10a      	bne.n	8001ef6 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	69fa      	ldr	r2, [r7, #28]
 8001eea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001eee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ef2:	6053      	str	r3, [r2, #4]
            break;
 8001ef4:	e008      	b.n	8001f08 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef8:	3301      	adds	r3, #1
 8001efa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	791b      	ldrb	r3, [r3, #4]
 8001f00:	461a      	mov	r2, r3
 8001f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d3b3      	bcc.n	8001e70 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	695a      	ldr	r2, [r3, #20]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001f16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f001 fea1 	bl	8003c64 <USB_ReadInterrupts>
 8001f22:	4603      	mov	r3, r0
 8001f24:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001f28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f2c:	d10a      	bne.n	8001f44 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f004 fac8 	bl	80064c4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	695a      	ldr	r2, [r3, #20]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001f42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f001 fe8b 	bl	8003c64 <USB_ReadInterrupts>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	f003 0304 	and.w	r3, r3, #4
 8001f54:	2b04      	cmp	r3, #4
 8001f56:	d115      	bne.n	8001f84 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	f003 0304 	and.w	r3, r3, #4
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d002      	beq.n	8001f70 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f004 fab8 	bl	80064e0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6859      	ldr	r1, [r3, #4]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	605a      	str	r2, [r3, #4]
 8001f80:	e000      	b.n	8001f84 <HAL_PCD_IRQHandler+0x93c>
      return;
 8001f82:	bf00      	nop
    }
  }
}
 8001f84:	3734      	adds	r7, #52	@ 0x34
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd90      	pop	{r4, r7, pc}

08001f8a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b082      	sub	sp, #8
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
 8001f92:	460b      	mov	r3, r1
 8001f94:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d101      	bne.n	8001fa4 <HAL_PCD_SetAddress+0x1a>
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	e012      	b.n	8001fca <HAL_PCD_SetAddress+0x40>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	78fa      	ldrb	r2, [r7, #3]
 8001fb0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	78fa      	ldrb	r2, [r7, #3]
 8001fb8:	4611      	mov	r1, r2
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f001 fdea 	bl	8003b94 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b084      	sub	sp, #16
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
 8001fda:	4608      	mov	r0, r1
 8001fdc:	4611      	mov	r1, r2
 8001fde:	461a      	mov	r2, r3
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	70fb      	strb	r3, [r7, #3]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	803b      	strh	r3, [r7, #0]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001fec:	2300      	movs	r3, #0
 8001fee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ff0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	da0f      	bge.n	8002018 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ff8:	78fb      	ldrb	r3, [r7, #3]
 8001ffa:	f003 020f 	and.w	r2, r3, #15
 8001ffe:	4613      	mov	r3, r2
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	4413      	add	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	3310      	adds	r3, #16
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	4413      	add	r3, r2
 800200c:	3304      	adds	r3, #4
 800200e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2201      	movs	r2, #1
 8002014:	705a      	strb	r2, [r3, #1]
 8002016:	e00f      	b.n	8002038 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002018:	78fb      	ldrb	r3, [r7, #3]
 800201a:	f003 020f 	and.w	r2, r3, #15
 800201e:	4613      	mov	r3, r2
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	4413      	add	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	4413      	add	r3, r2
 800202e:	3304      	adds	r3, #4
 8002030:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2200      	movs	r2, #0
 8002036:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002038:	78fb      	ldrb	r3, [r7, #3]
 800203a:	f003 030f 	and.w	r3, r3, #15
 800203e:	b2da      	uxtb	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002044:	883b      	ldrh	r3, [r7, #0]
 8002046:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	78ba      	ldrb	r2, [r7, #2]
 8002052:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	785b      	ldrb	r3, [r3, #1]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d004      	beq.n	8002066 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	461a      	mov	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002066:	78bb      	ldrb	r3, [r7, #2]
 8002068:	2b02      	cmp	r3, #2
 800206a:	d102      	bne.n	8002072 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002078:	2b01      	cmp	r3, #1
 800207a:	d101      	bne.n	8002080 <HAL_PCD_EP_Open+0xae>
 800207c:	2302      	movs	r3, #2
 800207e:	e00e      	b.n	800209e <HAL_PCD_EP_Open+0xcc>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68f9      	ldr	r1, [r7, #12]
 800208e:	4618      	mov	r0, r3
 8002090:	f000 ff6a 	bl	8002f68 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800209c:	7afb      	ldrb	r3, [r7, #11]
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b084      	sub	sp, #16
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
 80020ae:	460b      	mov	r3, r1
 80020b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	da0f      	bge.n	80020da <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020ba:	78fb      	ldrb	r3, [r7, #3]
 80020bc:	f003 020f 	and.w	r2, r3, #15
 80020c0:	4613      	mov	r3, r2
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	4413      	add	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	3310      	adds	r3, #16
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	4413      	add	r3, r2
 80020ce:	3304      	adds	r3, #4
 80020d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2201      	movs	r2, #1
 80020d6:	705a      	strb	r2, [r3, #1]
 80020d8:	e00f      	b.n	80020fa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020da:	78fb      	ldrb	r3, [r7, #3]
 80020dc:	f003 020f 	and.w	r2, r3, #15
 80020e0:	4613      	mov	r3, r2
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	4413      	add	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	4413      	add	r3, r2
 80020f0:	3304      	adds	r3, #4
 80020f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2200      	movs	r2, #0
 80020f8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80020fa:	78fb      	ldrb	r3, [r7, #3]
 80020fc:	f003 030f 	and.w	r3, r3, #15
 8002100:	b2da      	uxtb	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800210c:	2b01      	cmp	r3, #1
 800210e:	d101      	bne.n	8002114 <HAL_PCD_EP_Close+0x6e>
 8002110:	2302      	movs	r3, #2
 8002112:	e00e      	b.n	8002132 <HAL_PCD_EP_Close+0x8c>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68f9      	ldr	r1, [r7, #12]
 8002122:	4618      	mov	r0, r3
 8002124:	f000 ffa8 	bl	8003078 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b086      	sub	sp, #24
 800213e:	af00      	add	r7, sp, #0
 8002140:	60f8      	str	r0, [r7, #12]
 8002142:	607a      	str	r2, [r7, #4]
 8002144:	603b      	str	r3, [r7, #0]
 8002146:	460b      	mov	r3, r1
 8002148:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800214a:	7afb      	ldrb	r3, [r7, #11]
 800214c:	f003 020f 	and.w	r2, r3, #15
 8002150:	4613      	mov	r3, r2
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	4413      	add	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800215c:	68fa      	ldr	r2, [r7, #12]
 800215e:	4413      	add	r3, r2
 8002160:	3304      	adds	r3, #4
 8002162:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	2200      	movs	r2, #0
 8002174:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	2200      	movs	r2, #0
 800217a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800217c:	7afb      	ldrb	r3, [r7, #11]
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	b2da      	uxtb	r2, r3
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	799b      	ldrb	r3, [r3, #6]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d102      	bne.n	8002196 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6818      	ldr	r0, [r3, #0]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	799b      	ldrb	r3, [r3, #6]
 800219e:	461a      	mov	r2, r3
 80021a0:	6979      	ldr	r1, [r7, #20]
 80021a2:	f001 f845 	bl	8003230 <USB_EPStartXfer>

  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3718      	adds	r7, #24
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	460b      	mov	r3, r1
 80021ba:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80021bc:	78fb      	ldrb	r3, [r7, #3]
 80021be:	f003 020f 	and.w	r2, r3, #15
 80021c2:	6879      	ldr	r1, [r7, #4]
 80021c4:	4613      	mov	r3, r2
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	4413      	add	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	440b      	add	r3, r1
 80021ce:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80021d2:	681b      	ldr	r3, [r3, #0]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	607a      	str	r2, [r7, #4]
 80021ea:	603b      	str	r3, [r7, #0]
 80021ec:	460b      	mov	r3, r1
 80021ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021f0:	7afb      	ldrb	r3, [r7, #11]
 80021f2:	f003 020f 	and.w	r2, r3, #15
 80021f6:	4613      	mov	r3, r2
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	4413      	add	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	3310      	adds	r3, #16
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	4413      	add	r3, r2
 8002204:	3304      	adds	r3, #4
 8002206:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	2200      	movs	r2, #0
 8002218:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	2201      	movs	r2, #1
 800221e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002220:	7afb      	ldrb	r3, [r7, #11]
 8002222:	f003 030f 	and.w	r3, r3, #15
 8002226:	b2da      	uxtb	r2, r3
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	799b      	ldrb	r3, [r3, #6]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d102      	bne.n	800223a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6818      	ldr	r0, [r3, #0]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	799b      	ldrb	r3, [r3, #6]
 8002242:	461a      	mov	r2, r3
 8002244:	6979      	ldr	r1, [r7, #20]
 8002246:	f000 fff3 	bl	8003230 <USB_EPStartXfer>

  return HAL_OK;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	460b      	mov	r3, r1
 800225e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002260:	78fb      	ldrb	r3, [r7, #3]
 8002262:	f003 030f 	and.w	r3, r3, #15
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	7912      	ldrb	r2, [r2, #4]
 800226a:	4293      	cmp	r3, r2
 800226c:	d901      	bls.n	8002272 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e04f      	b.n	8002312 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002272:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002276:	2b00      	cmp	r3, #0
 8002278:	da0f      	bge.n	800229a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800227a:	78fb      	ldrb	r3, [r7, #3]
 800227c:	f003 020f 	and.w	r2, r3, #15
 8002280:	4613      	mov	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	4413      	add	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	3310      	adds	r3, #16
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	4413      	add	r3, r2
 800228e:	3304      	adds	r3, #4
 8002290:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2201      	movs	r2, #1
 8002296:	705a      	strb	r2, [r3, #1]
 8002298:	e00d      	b.n	80022b6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800229a:	78fa      	ldrb	r2, [r7, #3]
 800229c:	4613      	mov	r3, r2
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	4413      	add	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	4413      	add	r3, r2
 80022ac:	3304      	adds	r3, #4
 80022ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2200      	movs	r2, #0
 80022b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2201      	movs	r2, #1
 80022ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022bc:	78fb      	ldrb	r3, [r7, #3]
 80022be:	f003 030f 	and.w	r3, r3, #15
 80022c2:	b2da      	uxtb	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d101      	bne.n	80022d6 <HAL_PCD_EP_SetStall+0x82>
 80022d2:	2302      	movs	r3, #2
 80022d4:	e01d      	b.n	8002312 <HAL_PCD_EP_SetStall+0xbe>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68f9      	ldr	r1, [r7, #12]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f001 fb81 	bl	80039ec <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022ea:	78fb      	ldrb	r3, [r7, #3]
 80022ec:	f003 030f 	and.w	r3, r3, #15
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d109      	bne.n	8002308 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6818      	ldr	r0, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	7999      	ldrb	r1, [r3, #6]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002302:	461a      	mov	r2, r3
 8002304:	f001 fd72 	bl	8003dec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b084      	sub	sp, #16
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
 8002322:	460b      	mov	r3, r1
 8002324:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002326:	78fb      	ldrb	r3, [r7, #3]
 8002328:	f003 030f 	and.w	r3, r3, #15
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	7912      	ldrb	r2, [r2, #4]
 8002330:	4293      	cmp	r3, r2
 8002332:	d901      	bls.n	8002338 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e042      	b.n	80023be <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002338:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800233c:	2b00      	cmp	r3, #0
 800233e:	da0f      	bge.n	8002360 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002340:	78fb      	ldrb	r3, [r7, #3]
 8002342:	f003 020f 	and.w	r2, r3, #15
 8002346:	4613      	mov	r3, r2
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	4413      	add	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	3310      	adds	r3, #16
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	4413      	add	r3, r2
 8002354:	3304      	adds	r3, #4
 8002356:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2201      	movs	r2, #1
 800235c:	705a      	strb	r2, [r3, #1]
 800235e:	e00f      	b.n	8002380 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002360:	78fb      	ldrb	r3, [r7, #3]
 8002362:	f003 020f 	and.w	r2, r3, #15
 8002366:	4613      	mov	r3, r2
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	4413      	add	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	4413      	add	r3, r2
 8002376:	3304      	adds	r3, #4
 8002378:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2200      	movs	r2, #0
 8002384:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002386:	78fb      	ldrb	r3, [r7, #3]
 8002388:	f003 030f 	and.w	r3, r3, #15
 800238c:	b2da      	uxtb	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002398:	2b01      	cmp	r3, #1
 800239a:	d101      	bne.n	80023a0 <HAL_PCD_EP_ClrStall+0x86>
 800239c:	2302      	movs	r3, #2
 800239e:	e00e      	b.n	80023be <HAL_PCD_EP_ClrStall+0xa4>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68f9      	ldr	r1, [r7, #12]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f001 fb8a 	bl	8003ac8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b084      	sub	sp, #16
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
 80023ce:	460b      	mov	r3, r1
 80023d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80023d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	da0c      	bge.n	80023f4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023da:	78fb      	ldrb	r3, [r7, #3]
 80023dc:	f003 020f 	and.w	r2, r3, #15
 80023e0:	4613      	mov	r3, r2
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	4413      	add	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	3310      	adds	r3, #16
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	4413      	add	r3, r2
 80023ee:	3304      	adds	r3, #4
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	e00c      	b.n	800240e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023f4:	78fb      	ldrb	r3, [r7, #3]
 80023f6:	f003 020f 	and.w	r2, r3, #15
 80023fa:	4613      	mov	r3, r2
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	4413      	add	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	4413      	add	r3, r2
 800240a:	3304      	adds	r3, #4
 800240c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68f9      	ldr	r1, [r7, #12]
 8002414:	4618      	mov	r0, r3
 8002416:	f001 f9a9 	bl	800376c <USB_EPStopXfer>
 800241a:	4603      	mov	r3, r0
 800241c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800241e:	7afb      	ldrb	r3, [r7, #11]
}
 8002420:	4618      	mov	r0, r3
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b08a      	sub	sp, #40	@ 0x28
 800242c:	af02      	add	r7, sp, #8
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	4613      	mov	r3, r2
 8002440:	00db      	lsls	r3, r3, #3
 8002442:	4413      	add	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	3310      	adds	r3, #16
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	4413      	add	r3, r2
 800244c:	3304      	adds	r3, #4
 800244e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	695a      	ldr	r2, [r3, #20]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	429a      	cmp	r2, r3
 800245a:	d901      	bls.n	8002460 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e06b      	b.n	8002538 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	691a      	ldr	r2, [r3, #16]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	695b      	ldr	r3, [r3, #20]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	69fa      	ldr	r2, [r7, #28]
 8002472:	429a      	cmp	r2, r3
 8002474:	d902      	bls.n	800247c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	3303      	adds	r3, #3
 8002480:	089b      	lsrs	r3, r3, #2
 8002482:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002484:	e02a      	b.n	80024dc <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	691a      	ldr	r2, [r3, #16]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	69fa      	ldr	r2, [r7, #28]
 8002498:	429a      	cmp	r2, r3
 800249a:	d902      	bls.n	80024a2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	3303      	adds	r3, #3
 80024a6:	089b      	lsrs	r3, r3, #2
 80024a8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	68d9      	ldr	r1, [r3, #12]
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	4603      	mov	r3, r0
 80024be:	6978      	ldr	r0, [r7, #20]
 80024c0:	f001 f9fe 	bl	80038c0 <USB_WritePacket>

    ep->xfer_buff  += len;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	68da      	ldr	r2, [r3, #12]
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	441a      	add	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	695a      	ldr	r2, [r3, #20]
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	441a      	add	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	015a      	lsls	r2, r3, #5
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	4413      	add	r3, r2
 80024e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d809      	bhi.n	8002506 <PCD_WriteEmptyTxFifo+0xde>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	695a      	ldr	r2, [r3, #20]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d203      	bcs.n	8002506 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1bf      	bne.n	8002486 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	691a      	ldr	r2, [r3, #16]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	429a      	cmp	r2, r3
 8002510:	d811      	bhi.n	8002536 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	f003 030f 	and.w	r3, r3, #15
 8002518:	2201      	movs	r2, #1
 800251a:	fa02 f303 	lsl.w	r3, r2, r3
 800251e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002526:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	43db      	mvns	r3, r3
 800252c:	6939      	ldr	r1, [r7, #16]
 800252e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002532:	4013      	ands	r3, r2
 8002534:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	3720      	adds	r7, #32
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b088      	sub	sp, #32
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	333c      	adds	r3, #60	@ 0x3c
 8002558:	3304      	adds	r3, #4
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	015a      	lsls	r2, r3, #5
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	4413      	add	r3, r2
 8002566:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	799b      	ldrb	r3, [r3, #6]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d17b      	bne.n	800266e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	f003 0308 	and.w	r3, r3, #8
 800257c:	2b00      	cmp	r3, #0
 800257e:	d015      	beq.n	80025ac <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	4a61      	ldr	r2, [pc, #388]	@ (8002708 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002584:	4293      	cmp	r3, r2
 8002586:	f240 80b9 	bls.w	80026fc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002590:	2b00      	cmp	r3, #0
 8002592:	f000 80b3 	beq.w	80026fc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	015a      	lsls	r2, r3, #5
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	4413      	add	r3, r2
 800259e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025a2:	461a      	mov	r2, r3
 80025a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80025a8:	6093      	str	r3, [r2, #8]
 80025aa:	e0a7      	b.n	80026fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	f003 0320 	and.w	r3, r3, #32
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d009      	beq.n	80025ca <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	015a      	lsls	r2, r3, #5
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	4413      	add	r3, r2
 80025be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025c2:	461a      	mov	r2, r3
 80025c4:	2320      	movs	r3, #32
 80025c6:	6093      	str	r3, [r2, #8]
 80025c8:	e098      	b.n	80026fc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f040 8093 	bne.w	80026fc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	4a4b      	ldr	r2, [pc, #300]	@ (8002708 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d90f      	bls.n	80025fe <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d00a      	beq.n	80025fe <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	015a      	lsls	r2, r3, #5
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	4413      	add	r3, r2
 80025f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025f4:	461a      	mov	r2, r3
 80025f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80025fa:	6093      	str	r3, [r2, #8]
 80025fc:	e07e      	b.n	80026fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	4613      	mov	r3, r2
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	4413      	add	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	4413      	add	r3, r2
 8002610:	3304      	adds	r3, #4
 8002612:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6a1a      	ldr	r2, [r3, #32]
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	0159      	lsls	r1, r3, #5
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	440b      	add	r3, r1
 8002620:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800262a:	1ad2      	subs	r2, r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d114      	bne.n	8002660 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d109      	bne.n	8002652 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6818      	ldr	r0, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002648:	461a      	mov	r2, r3
 800264a:	2101      	movs	r1, #1
 800264c:	f001 fbce 	bl	8003dec <USB_EP0_OutStart>
 8002650:	e006      	b.n	8002660 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	68da      	ldr	r2, [r3, #12]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	441a      	add	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	b2db      	uxtb	r3, r3
 8002664:	4619      	mov	r1, r3
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f003 fe68 	bl	800633c <HAL_PCD_DataOutStageCallback>
 800266c:	e046      	b.n	80026fc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	4a26      	ldr	r2, [pc, #152]	@ (800270c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d124      	bne.n	80026c0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00a      	beq.n	8002696 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	015a      	lsls	r2, r3, #5
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	4413      	add	r3, r2
 8002688:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800268c:	461a      	mov	r2, r3
 800268e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002692:	6093      	str	r3, [r2, #8]
 8002694:	e032      	b.n	80026fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	f003 0320 	and.w	r3, r3, #32
 800269c:	2b00      	cmp	r3, #0
 800269e:	d008      	beq.n	80026b2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	015a      	lsls	r2, r3, #5
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	4413      	add	r3, r2
 80026a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026ac:	461a      	mov	r2, r3
 80026ae:	2320      	movs	r3, #32
 80026b0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	4619      	mov	r1, r3
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f003 fe3f 	bl	800633c <HAL_PCD_DataOutStageCallback>
 80026be:	e01d      	b.n	80026fc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d114      	bne.n	80026f0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	4613      	mov	r3, r2
 80026cc:	00db      	lsls	r3, r3, #3
 80026ce:	4413      	add	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	440b      	add	r3, r1
 80026d4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d108      	bne.n	80026f0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6818      	ldr	r0, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80026e8:	461a      	mov	r2, r3
 80026ea:	2100      	movs	r1, #0
 80026ec:	f001 fb7e 	bl	8003dec <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	4619      	mov	r1, r3
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f003 fe20 	bl	800633c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3720      	adds	r7, #32
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	4f54300a 	.word	0x4f54300a
 800270c:	4f54310a 	.word	0x4f54310a

08002710 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	333c      	adds	r3, #60	@ 0x3c
 8002728:	3304      	adds	r3, #4
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	015a      	lsls	r2, r3, #5
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	4413      	add	r3, r2
 8002736:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	4a15      	ldr	r2, [pc, #84]	@ (8002798 <PCD_EP_OutSetupPacket_int+0x88>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d90e      	bls.n	8002764 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800274c:	2b00      	cmp	r3, #0
 800274e:	d009      	beq.n	8002764 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	015a      	lsls	r2, r3, #5
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	4413      	add	r3, r2
 8002758:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800275c:	461a      	mov	r2, r3
 800275e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002762:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f003 fdd7 	bl	8006318 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	4a0a      	ldr	r2, [pc, #40]	@ (8002798 <PCD_EP_OutSetupPacket_int+0x88>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d90c      	bls.n	800278c <PCD_EP_OutSetupPacket_int+0x7c>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	799b      	ldrb	r3, [r3, #6]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d108      	bne.n	800278c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6818      	ldr	r0, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002784:	461a      	mov	r2, r3
 8002786:	2101      	movs	r1, #1
 8002788:	f001 fb30 	bl	8003dec <USB_EP0_OutStart>
  }

  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3718      	adds	r7, #24
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	4f54300a 	.word	0x4f54300a

0800279c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	460b      	mov	r3, r1
 80027a6:	70fb      	strb	r3, [r7, #3]
 80027a8:	4613      	mov	r3, r2
 80027aa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80027b4:	78fb      	ldrb	r3, [r7, #3]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d107      	bne.n	80027ca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80027ba:	883b      	ldrh	r3, [r7, #0]
 80027bc:	0419      	lsls	r1, r3, #16
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68ba      	ldr	r2, [r7, #8]
 80027c4:	430a      	orrs	r2, r1
 80027c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80027c8:	e028      	b.n	800281c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027d0:	0c1b      	lsrs	r3, r3, #16
 80027d2:	68ba      	ldr	r2, [r7, #8]
 80027d4:	4413      	add	r3, r2
 80027d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80027d8:	2300      	movs	r3, #0
 80027da:	73fb      	strb	r3, [r7, #15]
 80027dc:	e00d      	b.n	80027fa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	7bfb      	ldrb	r3, [r7, #15]
 80027e4:	3340      	adds	r3, #64	@ 0x40
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4413      	add	r3, r2
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	0c1b      	lsrs	r3, r3, #16
 80027ee:	68ba      	ldr	r2, [r7, #8]
 80027f0:	4413      	add	r3, r2
 80027f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80027f4:	7bfb      	ldrb	r3, [r7, #15]
 80027f6:	3301      	adds	r3, #1
 80027f8:	73fb      	strb	r3, [r7, #15]
 80027fa:	7bfa      	ldrb	r2, [r7, #15]
 80027fc:	78fb      	ldrb	r3, [r7, #3]
 80027fe:	3b01      	subs	r3, #1
 8002800:	429a      	cmp	r2, r3
 8002802:	d3ec      	bcc.n	80027de <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002804:	883b      	ldrh	r3, [r7, #0]
 8002806:	0418      	lsls	r0, r3, #16
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6819      	ldr	r1, [r3, #0]
 800280c:	78fb      	ldrb	r3, [r7, #3]
 800280e:	3b01      	subs	r3, #1
 8002810:	68ba      	ldr	r2, [r7, #8]
 8002812:	4302      	orrs	r2, r0
 8002814:	3340      	adds	r3, #64	@ 0x40
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	440b      	add	r3, r1
 800281a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3714      	adds	r7, #20
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800282a:	b480      	push	{r7}
 800282c:	b083      	sub	sp, #12
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
 8002832:	460b      	mov	r3, r1
 8002834:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	887a      	ldrh	r2, [r7, #2]
 800283c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	460b      	mov	r3, r1
 8002856:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002868:	4b03      	ldr	r3, [pc, #12]	@ (8002878 <HAL_RCC_GetHCLKFreq+0x14>)
 800286a:	681b      	ldr	r3, [r3, #0]
}
 800286c:	4618      	mov	r0, r3
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	20000004 	.word	0x20000004

0800287c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800287c:	b084      	sub	sp, #16
 800287e:	b580      	push	{r7, lr}
 8002880:	b084      	sub	sp, #16
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
 8002886:	f107 001c 	add.w	r0, r7, #28
 800288a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800288e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002892:	2b01      	cmp	r3, #1
 8002894:	d123      	bne.n	80028de <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800289a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80028aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80028be:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d105      	bne.n	80028d2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f001 fae8 	bl	8003ea8 <USB_CoreReset>
 80028d8:	4603      	mov	r3, r0
 80028da:	73fb      	strb	r3, [r7, #15]
 80028dc:	e01b      	b.n	8002916 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f001 fadc 	bl	8003ea8 <USB_CoreReset>
 80028f0:	4603      	mov	r3, r0
 80028f2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80028f4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d106      	bne.n	800290a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002900:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	639a      	str	r2, [r3, #56]	@ 0x38
 8002908:	e005      	b.n	8002916 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800290e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002916:	7fbb      	ldrb	r3, [r7, #30]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d10b      	bne.n	8002934 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f043 0206 	orr.w	r2, r3, #6
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f043 0220 	orr.w	r2, r3, #32
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002934:	7bfb      	ldrb	r3, [r7, #15]
}
 8002936:	4618      	mov	r0, r3
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002940:	b004      	add	sp, #16
 8002942:	4770      	bx	lr

08002944 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002944:	b480      	push	{r7}
 8002946:	b087      	sub	sp, #28
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	4613      	mov	r3, r2
 8002950:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002952:	79fb      	ldrb	r3, [r7, #7]
 8002954:	2b02      	cmp	r3, #2
 8002956:	d165      	bne.n	8002a24 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	4a41      	ldr	r2, [pc, #260]	@ (8002a60 <USB_SetTurnaroundTime+0x11c>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d906      	bls.n	800296e <USB_SetTurnaroundTime+0x2a>
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	4a40      	ldr	r2, [pc, #256]	@ (8002a64 <USB_SetTurnaroundTime+0x120>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d202      	bcs.n	800296e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002968:	230f      	movs	r3, #15
 800296a:	617b      	str	r3, [r7, #20]
 800296c:	e062      	b.n	8002a34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	4a3c      	ldr	r2, [pc, #240]	@ (8002a64 <USB_SetTurnaroundTime+0x120>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d306      	bcc.n	8002984 <USB_SetTurnaroundTime+0x40>
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	4a3b      	ldr	r2, [pc, #236]	@ (8002a68 <USB_SetTurnaroundTime+0x124>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d202      	bcs.n	8002984 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800297e:	230e      	movs	r3, #14
 8002980:	617b      	str	r3, [r7, #20]
 8002982:	e057      	b.n	8002a34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	4a38      	ldr	r2, [pc, #224]	@ (8002a68 <USB_SetTurnaroundTime+0x124>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d306      	bcc.n	800299a <USB_SetTurnaroundTime+0x56>
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	4a37      	ldr	r2, [pc, #220]	@ (8002a6c <USB_SetTurnaroundTime+0x128>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d202      	bcs.n	800299a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002994:	230d      	movs	r3, #13
 8002996:	617b      	str	r3, [r7, #20]
 8002998:	e04c      	b.n	8002a34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	4a33      	ldr	r2, [pc, #204]	@ (8002a6c <USB_SetTurnaroundTime+0x128>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d306      	bcc.n	80029b0 <USB_SetTurnaroundTime+0x6c>
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	4a32      	ldr	r2, [pc, #200]	@ (8002a70 <USB_SetTurnaroundTime+0x12c>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d802      	bhi.n	80029b0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80029aa:	230c      	movs	r3, #12
 80029ac:	617b      	str	r3, [r7, #20]
 80029ae:	e041      	b.n	8002a34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	4a2f      	ldr	r2, [pc, #188]	@ (8002a70 <USB_SetTurnaroundTime+0x12c>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d906      	bls.n	80029c6 <USB_SetTurnaroundTime+0x82>
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	4a2e      	ldr	r2, [pc, #184]	@ (8002a74 <USB_SetTurnaroundTime+0x130>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d802      	bhi.n	80029c6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80029c0:	230b      	movs	r3, #11
 80029c2:	617b      	str	r3, [r7, #20]
 80029c4:	e036      	b.n	8002a34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	4a2a      	ldr	r2, [pc, #168]	@ (8002a74 <USB_SetTurnaroundTime+0x130>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d906      	bls.n	80029dc <USB_SetTurnaroundTime+0x98>
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	4a29      	ldr	r2, [pc, #164]	@ (8002a78 <USB_SetTurnaroundTime+0x134>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d802      	bhi.n	80029dc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80029d6:	230a      	movs	r3, #10
 80029d8:	617b      	str	r3, [r7, #20]
 80029da:	e02b      	b.n	8002a34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	4a26      	ldr	r2, [pc, #152]	@ (8002a78 <USB_SetTurnaroundTime+0x134>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d906      	bls.n	80029f2 <USB_SetTurnaroundTime+0xae>
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	4a25      	ldr	r2, [pc, #148]	@ (8002a7c <USB_SetTurnaroundTime+0x138>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d202      	bcs.n	80029f2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80029ec:	2309      	movs	r3, #9
 80029ee:	617b      	str	r3, [r7, #20]
 80029f0:	e020      	b.n	8002a34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	4a21      	ldr	r2, [pc, #132]	@ (8002a7c <USB_SetTurnaroundTime+0x138>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d306      	bcc.n	8002a08 <USB_SetTurnaroundTime+0xc4>
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	4a20      	ldr	r2, [pc, #128]	@ (8002a80 <USB_SetTurnaroundTime+0x13c>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d802      	bhi.n	8002a08 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002a02:	2308      	movs	r3, #8
 8002a04:	617b      	str	r3, [r7, #20]
 8002a06:	e015      	b.n	8002a34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	4a1d      	ldr	r2, [pc, #116]	@ (8002a80 <USB_SetTurnaroundTime+0x13c>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d906      	bls.n	8002a1e <USB_SetTurnaroundTime+0xda>
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	4a1c      	ldr	r2, [pc, #112]	@ (8002a84 <USB_SetTurnaroundTime+0x140>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d202      	bcs.n	8002a1e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002a18:	2307      	movs	r3, #7
 8002a1a:	617b      	str	r3, [r7, #20]
 8002a1c:	e00a      	b.n	8002a34 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002a1e:	2306      	movs	r3, #6
 8002a20:	617b      	str	r3, [r7, #20]
 8002a22:	e007      	b.n	8002a34 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002a24:	79fb      	ldrb	r3, [r7, #7]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d102      	bne.n	8002a30 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002a2a:	2309      	movs	r3, #9
 8002a2c:	617b      	str	r3, [r7, #20]
 8002a2e:	e001      	b.n	8002a34 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002a30:	2309      	movs	r3, #9
 8002a32:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	68da      	ldr	r2, [r3, #12]
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	029b      	lsls	r3, r3, #10
 8002a48:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	371c      	adds	r7, #28
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr
 8002a60:	00d8acbf 	.word	0x00d8acbf
 8002a64:	00e4e1c0 	.word	0x00e4e1c0
 8002a68:	00f42400 	.word	0x00f42400
 8002a6c:	01067380 	.word	0x01067380
 8002a70:	011a499f 	.word	0x011a499f
 8002a74:	01312cff 	.word	0x01312cff
 8002a78:	014ca43f 	.word	0x014ca43f
 8002a7c:	016e3600 	.word	0x016e3600
 8002a80:	01a6ab1f 	.word	0x01a6ab1f
 8002a84:	01e84800 	.word	0x01e84800

08002a88 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f043 0201 	orr.w	r2, r3, #1
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b083      	sub	sp, #12
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f023 0201 	bic.w	r2, r3, #1
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002ae8:	78fb      	ldrb	r3, [r7, #3]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d115      	bne.n	8002b1a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002afa:	200a      	movs	r0, #10
 8002afc:	f7fe f98e 	bl	8000e1c <HAL_Delay>
      ms += 10U;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	330a      	adds	r3, #10
 8002b04:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f001 f93f 	bl	8003d8a <USB_GetMode>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d01e      	beq.n	8002b50 <USB_SetCurrentMode+0x84>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2bc7      	cmp	r3, #199	@ 0xc7
 8002b16:	d9f0      	bls.n	8002afa <USB_SetCurrentMode+0x2e>
 8002b18:	e01a      	b.n	8002b50 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002b1a:	78fb      	ldrb	r3, [r7, #3]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d115      	bne.n	8002b4c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002b2c:	200a      	movs	r0, #10
 8002b2e:	f7fe f975 	bl	8000e1c <HAL_Delay>
      ms += 10U;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	330a      	adds	r3, #10
 8002b36:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f001 f926 	bl	8003d8a <USB_GetMode>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d005      	beq.n	8002b50 <USB_SetCurrentMode+0x84>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2bc7      	cmp	r3, #199	@ 0xc7
 8002b48:	d9f0      	bls.n	8002b2c <USB_SetCurrentMode+0x60>
 8002b4a:	e001      	b.n	8002b50 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e005      	b.n	8002b5c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2bc8      	cmp	r3, #200	@ 0xc8
 8002b54:	d101      	bne.n	8002b5a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e000      	b.n	8002b5c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002b64:	b084      	sub	sp, #16
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b086      	sub	sp, #24
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
 8002b6e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002b72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002b76:	2300      	movs	r3, #0
 8002b78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002b7e:	2300      	movs	r3, #0
 8002b80:	613b      	str	r3, [r7, #16]
 8002b82:	e009      	b.n	8002b98 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	3340      	adds	r3, #64	@ 0x40
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4413      	add	r3, r2
 8002b8e:	2200      	movs	r2, #0
 8002b90:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	3301      	adds	r3, #1
 8002b96:	613b      	str	r3, [r7, #16]
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	2b0e      	cmp	r3, #14
 8002b9c:	d9f2      	bls.n	8002b84 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002b9e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d11c      	bne.n	8002be0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002bb4:	f043 0302 	orr.w	r3, r3, #2
 8002bb8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bbe:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bca:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bd6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	639a      	str	r2, [r3, #56]	@ 0x38
 8002bde:	e00b      	b.n	8002bf8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002be4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bf0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8002bfe:	461a      	mov	r2, r3
 8002c00:	2300      	movs	r3, #0
 8002c02:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002c04:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d10d      	bne.n	8002c28 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002c0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d104      	bne.n	8002c1e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002c14:	2100      	movs	r1, #0
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 f968 	bl	8002eec <USB_SetDevSpeed>
 8002c1c:	e008      	b.n	8002c30 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002c1e:	2101      	movs	r1, #1
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 f963 	bl	8002eec <USB_SetDevSpeed>
 8002c26:	e003      	b.n	8002c30 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002c28:	2103      	movs	r1, #3
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 f95e 	bl	8002eec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002c30:	2110      	movs	r1, #16
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 f8fa 	bl	8002e2c <USB_FlushTxFifo>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f924 	bl	8002e90 <USB_FlushRxFifo>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c58:	461a      	mov	r2, r3
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c64:	461a      	mov	r2, r3
 8002c66:	2300      	movs	r3, #0
 8002c68:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c70:	461a      	mov	r2, r3
 8002c72:	2300      	movs	r3, #0
 8002c74:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002c76:	2300      	movs	r3, #0
 8002c78:	613b      	str	r3, [r7, #16]
 8002c7a:	e043      	b.n	8002d04 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	015a      	lsls	r2, r3, #5
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	4413      	add	r3, r2
 8002c84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002c8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002c92:	d118      	bne.n	8002cc6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10a      	bne.n	8002cb0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	015a      	lsls	r2, r3, #5
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002cac:	6013      	str	r3, [r2, #0]
 8002cae:	e013      	b.n	8002cd8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	015a      	lsls	r2, r3, #5
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002cc2:	6013      	str	r3, [r2, #0]
 8002cc4:	e008      	b.n	8002cd8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	015a      	lsls	r2, r3, #5
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	4413      	add	r3, r2
 8002cce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	015a      	lsls	r2, r3, #5
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	4413      	add	r3, r2
 8002ce0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	015a      	lsls	r2, r3, #5
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002cfc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	3301      	adds	r3, #1
 8002d02:	613b      	str	r3, [r7, #16]
 8002d04:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002d08:	461a      	mov	r2, r3
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d3b5      	bcc.n	8002c7c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002d10:	2300      	movs	r3, #0
 8002d12:	613b      	str	r3, [r7, #16]
 8002d14:	e043      	b.n	8002d9e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	015a      	lsls	r2, r3, #5
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002d28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d2c:	d118      	bne.n	8002d60 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10a      	bne.n	8002d4a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	015a      	lsls	r2, r3, #5
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d40:	461a      	mov	r2, r3
 8002d42:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002d46:	6013      	str	r3, [r2, #0]
 8002d48:	e013      	b.n	8002d72 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	015a      	lsls	r2, r3, #5
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	4413      	add	r3, r2
 8002d52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d56:	461a      	mov	r2, r3
 8002d58:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002d5c:	6013      	str	r3, [r2, #0]
 8002d5e:	e008      	b.n	8002d72 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	015a      	lsls	r2, r3, #5
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	4413      	add	r3, r2
 8002d68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	2300      	movs	r3, #0
 8002d70:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	015a      	lsls	r2, r3, #5
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	4413      	add	r3, r2
 8002d7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d7e:	461a      	mov	r2, r3
 8002d80:	2300      	movs	r3, #0
 8002d82:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	015a      	lsls	r2, r3, #5
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d90:	461a      	mov	r2, r3
 8002d92:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002d96:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	613b      	str	r3, [r7, #16]
 8002d9e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002da2:	461a      	mov	r2, r3
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d3b5      	bcc.n	8002d16 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002db8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002dbc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8002dca:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002dcc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d105      	bne.n	8002de0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	f043 0210 	orr.w	r2, r3, #16
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	699a      	ldr	r2, [r3, #24]
 8002de4:	4b10      	ldr	r3, [pc, #64]	@ (8002e28 <USB_DevInit+0x2c4>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002dec:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d005      	beq.n	8002e00 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	f043 0208 	orr.w	r2, r3, #8
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002e00:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d107      	bne.n	8002e18 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002e10:	f043 0304 	orr.w	r3, r3, #4
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002e18:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3718      	adds	r7, #24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002e24:	b004      	add	sp, #16
 8002e26:	4770      	bx	lr
 8002e28:	803c3800 	.word	0x803c3800

08002e2c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8002e36:	2300      	movs	r3, #0
 8002e38:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002e46:	d901      	bls.n	8002e4c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e01b      	b.n	8002e84 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	daf2      	bge.n	8002e3a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8002e54:	2300      	movs	r3, #0
 8002e56:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	019b      	lsls	r3, r3, #6
 8002e5c:	f043 0220 	orr.w	r2, r3, #32
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	3301      	adds	r3, #1
 8002e68:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002e70:	d901      	bls.n	8002e76 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e006      	b.n	8002e84 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	f003 0320 	and.w	r3, r3, #32
 8002e7e:	2b20      	cmp	r3, #32
 8002e80:	d0f0      	beq.n	8002e64 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3714      	adds	r7, #20
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002ea8:	d901      	bls.n	8002eae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e018      	b.n	8002ee0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	daf2      	bge.n	8002e9c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2210      	movs	r2, #16
 8002ebe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002ecc:	d901      	bls.n	8002ed2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e006      	b.n	8002ee0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	f003 0310 	and.w	r3, r3, #16
 8002eda:	2b10      	cmp	r3, #16
 8002edc:	d0f0      	beq.n	8002ec0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3714      	adds	r7, #20
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	78fb      	ldrb	r3, [r7, #3]
 8002f06:	68f9      	ldr	r1, [r7, #12]
 8002f08:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3714      	adds	r7, #20
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b087      	sub	sp, #28
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f003 0306 	and.w	r3, r3, #6
 8002f36:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d102      	bne.n	8002f44 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	75fb      	strb	r3, [r7, #23]
 8002f42:	e00a      	b.n	8002f5a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d002      	beq.n	8002f50 <USB_GetDevSpeed+0x32>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2b06      	cmp	r3, #6
 8002f4e:	d102      	bne.n	8002f56 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8002f50:	2302      	movs	r3, #2
 8002f52:	75fb      	strb	r3, [r7, #23]
 8002f54:	e001      	b.n	8002f5a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8002f56:	230f      	movs	r3, #15
 8002f58:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8002f5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	371c      	adds	r7, #28
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	785b      	ldrb	r3, [r3, #1]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d13a      	bne.n	8002ffa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f8a:	69da      	ldr	r2, [r3, #28]
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	f003 030f 	and.w	r3, r3, #15
 8002f94:	2101      	movs	r1, #1
 8002f96:	fa01 f303 	lsl.w	r3, r1, r3
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	68f9      	ldr	r1, [r7, #12]
 8002f9e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	015a      	lsls	r2, r3, #5
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	4413      	add	r3, r2
 8002fae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d155      	bne.n	8003068 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	015a      	lsls	r2, r3, #5
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	791b      	ldrb	r3, [r3, #4]
 8002fd6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002fd8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	059b      	lsls	r3, r3, #22
 8002fde:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	68ba      	ldr	r2, [r7, #8]
 8002fe4:	0151      	lsls	r1, r2, #5
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	440a      	add	r2, r1
 8002fea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002fee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ff2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ff6:	6013      	str	r3, [r2, #0]
 8002ff8:	e036      	b.n	8003068 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003000:	69da      	ldr	r2, [r3, #28]
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	f003 030f 	and.w	r3, r3, #15
 800300a:	2101      	movs	r1, #1
 800300c:	fa01 f303 	lsl.w	r3, r1, r3
 8003010:	041b      	lsls	r3, r3, #16
 8003012:	68f9      	ldr	r1, [r7, #12]
 8003014:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003018:	4313      	orrs	r3, r2
 800301a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	015a      	lsls	r2, r3, #5
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	4413      	add	r3, r2
 8003024:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d11a      	bne.n	8003068 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	015a      	lsls	r2, r3, #5
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	4413      	add	r3, r2
 800303a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	791b      	ldrb	r3, [r3, #4]
 800304c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800304e:	430b      	orrs	r3, r1
 8003050:	4313      	orrs	r3, r2
 8003052:	68ba      	ldr	r2, [r7, #8]
 8003054:	0151      	lsls	r1, r2, #5
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	440a      	add	r2, r1
 800305a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800305e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003062:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003066:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3714      	adds	r7, #20
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
	...

08003078 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	785b      	ldrb	r3, [r3, #1]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d161      	bne.n	8003158 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	015a      	lsls	r2, r3, #5
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	4413      	add	r3, r2
 800309c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80030a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80030aa:	d11f      	bne.n	80030ec <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	015a      	lsls	r2, r3, #5
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	4413      	add	r3, r2
 80030b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68ba      	ldr	r2, [r7, #8]
 80030bc:	0151      	lsls	r1, r2, #5
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	440a      	add	r2, r1
 80030c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80030c6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80030ca:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	015a      	lsls	r2, r3, #5
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	4413      	add	r3, r2
 80030d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68ba      	ldr	r2, [r7, #8]
 80030dc:	0151      	lsls	r1, r2, #5
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	440a      	add	r2, r1
 80030e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80030e6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80030ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	f003 030f 	and.w	r3, r3, #15
 80030fc:	2101      	movs	r1, #1
 80030fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003102:	b29b      	uxth	r3, r3
 8003104:	43db      	mvns	r3, r3
 8003106:	68f9      	ldr	r1, [r7, #12]
 8003108:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800310c:	4013      	ands	r3, r2
 800310e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003116:	69da      	ldr	r2, [r3, #28]
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	f003 030f 	and.w	r3, r3, #15
 8003120:	2101      	movs	r1, #1
 8003122:	fa01 f303 	lsl.w	r3, r1, r3
 8003126:	b29b      	uxth	r3, r3
 8003128:	43db      	mvns	r3, r3
 800312a:	68f9      	ldr	r1, [r7, #12]
 800312c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003130:	4013      	ands	r3, r2
 8003132:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	015a      	lsls	r2, r3, #5
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	4413      	add	r3, r2
 800313c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	0159      	lsls	r1, r3, #5
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	440b      	add	r3, r1
 800314a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800314e:	4619      	mov	r1, r3
 8003150:	4b35      	ldr	r3, [pc, #212]	@ (8003228 <USB_DeactivateEndpoint+0x1b0>)
 8003152:	4013      	ands	r3, r2
 8003154:	600b      	str	r3, [r1, #0]
 8003156:	e060      	b.n	800321a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	015a      	lsls	r2, r3, #5
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	4413      	add	r3, r2
 8003160:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800316a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800316e:	d11f      	bne.n	80031b0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	015a      	lsls	r2, r3, #5
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	4413      	add	r3, r2
 8003178:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	0151      	lsls	r1, r2, #5
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	440a      	add	r2, r1
 8003186:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800318a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800318e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	015a      	lsls	r2, r3, #5
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	4413      	add	r3, r2
 8003198:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68ba      	ldr	r2, [r7, #8]
 80031a0:	0151      	lsls	r1, r2, #5
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	440a      	add	r2, r1
 80031a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80031aa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80031ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	f003 030f 	and.w	r3, r3, #15
 80031c0:	2101      	movs	r1, #1
 80031c2:	fa01 f303 	lsl.w	r3, r1, r3
 80031c6:	041b      	lsls	r3, r3, #16
 80031c8:	43db      	mvns	r3, r3
 80031ca:	68f9      	ldr	r1, [r7, #12]
 80031cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80031d0:	4013      	ands	r3, r2
 80031d2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031da:	69da      	ldr	r2, [r3, #28]
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	f003 030f 	and.w	r3, r3, #15
 80031e4:	2101      	movs	r1, #1
 80031e6:	fa01 f303 	lsl.w	r3, r1, r3
 80031ea:	041b      	lsls	r3, r3, #16
 80031ec:	43db      	mvns	r3, r3
 80031ee:	68f9      	ldr	r1, [r7, #12]
 80031f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80031f4:	4013      	ands	r3, r2
 80031f6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	015a      	lsls	r2, r3, #5
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	4413      	add	r3, r2
 8003200:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	0159      	lsls	r1, r3, #5
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	440b      	add	r3, r1
 800320e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003212:	4619      	mov	r1, r3
 8003214:	4b05      	ldr	r3, [pc, #20]	@ (800322c <USB_DeactivateEndpoint+0x1b4>)
 8003216:	4013      	ands	r3, r2
 8003218:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3714      	adds	r7, #20
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	ec337800 	.word	0xec337800
 800322c:	eff37800 	.word	0xeff37800

08003230 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b08a      	sub	sp, #40	@ 0x28
 8003234:	af02      	add	r7, sp, #8
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	4613      	mov	r3, r2
 800323c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	785b      	ldrb	r3, [r3, #1]
 800324c:	2b01      	cmp	r3, #1
 800324e:	f040 817f 	bne.w	8003550 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d132      	bne.n	80032c0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	015a      	lsls	r2, r3, #5
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	4413      	add	r3, r2
 8003262:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	0151      	lsls	r1, r2, #5
 800326c:	69fa      	ldr	r2, [r7, #28]
 800326e:	440a      	add	r2, r1
 8003270:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003274:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003278:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800327c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	015a      	lsls	r2, r3, #5
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	4413      	add	r3, r2
 8003286:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	0151      	lsls	r1, r2, #5
 8003290:	69fa      	ldr	r2, [r7, #28]
 8003292:	440a      	add	r2, r1
 8003294:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003298:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800329c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	015a      	lsls	r2, r3, #5
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	4413      	add	r3, r2
 80032a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	0151      	lsls	r1, r2, #5
 80032b0:	69fa      	ldr	r2, [r7, #28]
 80032b2:	440a      	add	r2, r1
 80032b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80032b8:	0cdb      	lsrs	r3, r3, #19
 80032ba:	04db      	lsls	r3, r3, #19
 80032bc:	6113      	str	r3, [r2, #16]
 80032be:	e097      	b.n	80033f0 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	015a      	lsls	r2, r3, #5
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	4413      	add	r3, r2
 80032c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	0151      	lsls	r1, r2, #5
 80032d2:	69fa      	ldr	r2, [r7, #28]
 80032d4:	440a      	add	r2, r1
 80032d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80032da:	0cdb      	lsrs	r3, r3, #19
 80032dc:	04db      	lsls	r3, r3, #19
 80032de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	015a      	lsls	r2, r3, #5
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	4413      	add	r3, r2
 80032e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	0151      	lsls	r1, r2, #5
 80032f2:	69fa      	ldr	r2, [r7, #28]
 80032f4:	440a      	add	r2, r1
 80032f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80032fa:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80032fe:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003302:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d11a      	bne.n	8003340 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	691a      	ldr	r2, [r3, #16]
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	429a      	cmp	r2, r3
 8003314:	d903      	bls.n	800331e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	689a      	ldr	r2, [r3, #8]
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	015a      	lsls	r2, r3, #5
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	4413      	add	r3, r2
 8003326:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	0151      	lsls	r1, r2, #5
 8003330:	69fa      	ldr	r2, [r7, #28]
 8003332:	440a      	add	r2, r1
 8003334:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003338:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800333c:	6113      	str	r3, [r2, #16]
 800333e:	e044      	b.n	80033ca <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	691a      	ldr	r2, [r3, #16]
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	4413      	add	r3, r2
 800334a:	1e5a      	subs	r2, r3, #1
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	fbb2 f3f3 	udiv	r3, r2, r3
 8003354:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	015a      	lsls	r2, r3, #5
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	4413      	add	r3, r2
 800335e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003362:	691a      	ldr	r2, [r3, #16]
 8003364:	8afb      	ldrh	r3, [r7, #22]
 8003366:	04d9      	lsls	r1, r3, #19
 8003368:	4ba4      	ldr	r3, [pc, #656]	@ (80035fc <USB_EPStartXfer+0x3cc>)
 800336a:	400b      	ands	r3, r1
 800336c:	69b9      	ldr	r1, [r7, #24]
 800336e:	0148      	lsls	r0, r1, #5
 8003370:	69f9      	ldr	r1, [r7, #28]
 8003372:	4401      	add	r1, r0
 8003374:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003378:	4313      	orrs	r3, r2
 800337a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	791b      	ldrb	r3, [r3, #4]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d122      	bne.n	80033ca <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	015a      	lsls	r2, r3, #5
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	4413      	add	r3, r2
 800338c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	0151      	lsls	r1, r2, #5
 8003396:	69fa      	ldr	r2, [r7, #28]
 8003398:	440a      	add	r2, r1
 800339a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800339e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80033a2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	015a      	lsls	r2, r3, #5
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	4413      	add	r3, r2
 80033ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033b0:	691a      	ldr	r2, [r3, #16]
 80033b2:	8afb      	ldrh	r3, [r7, #22]
 80033b4:	075b      	lsls	r3, r3, #29
 80033b6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80033ba:	69b9      	ldr	r1, [r7, #24]
 80033bc:	0148      	lsls	r0, r1, #5
 80033be:	69f9      	ldr	r1, [r7, #28]
 80033c0:	4401      	add	r1, r0
 80033c2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80033c6:	4313      	orrs	r3, r2
 80033c8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	015a      	lsls	r2, r3, #5
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	4413      	add	r3, r2
 80033d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033d6:	691a      	ldr	r2, [r3, #16]
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033e0:	69b9      	ldr	r1, [r7, #24]
 80033e2:	0148      	lsls	r0, r1, #5
 80033e4:	69f9      	ldr	r1, [r7, #28]
 80033e6:	4401      	add	r1, r0
 80033e8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80033ec:	4313      	orrs	r3, r2
 80033ee:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80033f0:	79fb      	ldrb	r3, [r7, #7]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d14b      	bne.n	800348e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d009      	beq.n	8003412 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	015a      	lsls	r2, r3, #5
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	4413      	add	r3, r2
 8003406:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800340a:	461a      	mov	r2, r3
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	69db      	ldr	r3, [r3, #28]
 8003410:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	791b      	ldrb	r3, [r3, #4]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d128      	bne.n	800346c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003426:	2b00      	cmp	r3, #0
 8003428:	d110      	bne.n	800344c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	015a      	lsls	r2, r3, #5
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	4413      	add	r3, r2
 8003432:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	0151      	lsls	r1, r2, #5
 800343c:	69fa      	ldr	r2, [r7, #28]
 800343e:	440a      	add	r2, r1
 8003440:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003444:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003448:	6013      	str	r3, [r2, #0]
 800344a:	e00f      	b.n	800346c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	015a      	lsls	r2, r3, #5
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	4413      	add	r3, r2
 8003454:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	0151      	lsls	r1, r2, #5
 800345e:	69fa      	ldr	r2, [r7, #28]
 8003460:	440a      	add	r2, r1
 8003462:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003466:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800346a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	015a      	lsls	r2, r3, #5
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	4413      	add	r3, r2
 8003474:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	0151      	lsls	r1, r2, #5
 800347e:	69fa      	ldr	r2, [r7, #28]
 8003480:	440a      	add	r2, r1
 8003482:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003486:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800348a:	6013      	str	r3, [r2, #0]
 800348c:	e166      	b.n	800375c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	015a      	lsls	r2, r3, #5
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	4413      	add	r3, r2
 8003496:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	0151      	lsls	r1, r2, #5
 80034a0:	69fa      	ldr	r2, [r7, #28]
 80034a2:	440a      	add	r2, r1
 80034a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80034a8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80034ac:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	791b      	ldrb	r3, [r3, #4]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d015      	beq.n	80034e2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 814e 	beq.w	800375c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	f003 030f 	and.w	r3, r3, #15
 80034d0:	2101      	movs	r1, #1
 80034d2:	fa01 f303 	lsl.w	r3, r1, r3
 80034d6:	69f9      	ldr	r1, [r7, #28]
 80034d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80034dc:	4313      	orrs	r3, r2
 80034de:	634b      	str	r3, [r1, #52]	@ 0x34
 80034e0:	e13c      	b.n	800375c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d110      	bne.n	8003514 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	015a      	lsls	r2, r3, #5
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	4413      	add	r3, r2
 80034fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	0151      	lsls	r1, r2, #5
 8003504:	69fa      	ldr	r2, [r7, #28]
 8003506:	440a      	add	r2, r1
 8003508:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800350c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003510:	6013      	str	r3, [r2, #0]
 8003512:	e00f      	b.n	8003534 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	015a      	lsls	r2, r3, #5
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	4413      	add	r3, r2
 800351c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	69ba      	ldr	r2, [r7, #24]
 8003524:	0151      	lsls	r1, r2, #5
 8003526:	69fa      	ldr	r2, [r7, #28]
 8003528:	440a      	add	r2, r1
 800352a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800352e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003532:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	68d9      	ldr	r1, [r3, #12]
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	781a      	ldrb	r2, [r3, #0]
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	b298      	uxth	r0, r3
 8003542:	79fb      	ldrb	r3, [r7, #7]
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	4603      	mov	r3, r0
 8003548:	68f8      	ldr	r0, [r7, #12]
 800354a:	f000 f9b9 	bl	80038c0 <USB_WritePacket>
 800354e:	e105      	b.n	800375c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	015a      	lsls	r2, r3, #5
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	4413      	add	r3, r2
 8003558:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	0151      	lsls	r1, r2, #5
 8003562:	69fa      	ldr	r2, [r7, #28]
 8003564:	440a      	add	r2, r1
 8003566:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800356a:	0cdb      	lsrs	r3, r3, #19
 800356c:	04db      	lsls	r3, r3, #19
 800356e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	015a      	lsls	r2, r3, #5
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	4413      	add	r3, r2
 8003578:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	0151      	lsls	r1, r2, #5
 8003582:	69fa      	ldr	r2, [r7, #28]
 8003584:	440a      	add	r2, r1
 8003586:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800358a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800358e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003592:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d132      	bne.n	8003600 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	689a      	ldr	r2, [r3, #8]
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	689a      	ldr	r2, [r3, #8]
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	015a      	lsls	r2, r3, #5
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	4413      	add	r3, r2
 80035ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035be:	691a      	ldr	r2, [r3, #16]
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035c8:	69b9      	ldr	r1, [r7, #24]
 80035ca:	0148      	lsls	r0, r1, #5
 80035cc:	69f9      	ldr	r1, [r7, #28]
 80035ce:	4401      	add	r1, r0
 80035d0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80035d4:	4313      	orrs	r3, r2
 80035d6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	015a      	lsls	r2, r3, #5
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	4413      	add	r3, r2
 80035e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	69ba      	ldr	r2, [r7, #24]
 80035e8:	0151      	lsls	r1, r2, #5
 80035ea:	69fa      	ldr	r2, [r7, #28]
 80035ec:	440a      	add	r2, r1
 80035ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80035f2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80035f6:	6113      	str	r3, [r2, #16]
 80035f8:	e062      	b.n	80036c0 <USB_EPStartXfer+0x490>
 80035fa:	bf00      	nop
 80035fc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d123      	bne.n	8003650 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	015a      	lsls	r2, r3, #5
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	4413      	add	r3, r2
 8003610:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003614:	691a      	ldr	r2, [r3, #16]
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800361e:	69b9      	ldr	r1, [r7, #24]
 8003620:	0148      	lsls	r0, r1, #5
 8003622:	69f9      	ldr	r1, [r7, #28]
 8003624:	4401      	add	r1, r0
 8003626:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800362a:	4313      	orrs	r3, r2
 800362c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	015a      	lsls	r2, r3, #5
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	4413      	add	r3, r2
 8003636:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	0151      	lsls	r1, r2, #5
 8003640:	69fa      	ldr	r2, [r7, #28]
 8003642:	440a      	add	r2, r1
 8003644:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003648:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800364c:	6113      	str	r3, [r2, #16]
 800364e:	e037      	b.n	80036c0 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	691a      	ldr	r2, [r3, #16]
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	4413      	add	r3, r2
 800365a:	1e5a      	subs	r2, r3, #1
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	fbb2 f3f3 	udiv	r3, r2, r3
 8003664:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	8afa      	ldrh	r2, [r7, #22]
 800366c:	fb03 f202 	mul.w	r2, r3, r2
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	015a      	lsls	r2, r3, #5
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	4413      	add	r3, r2
 800367c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003680:	691a      	ldr	r2, [r3, #16]
 8003682:	8afb      	ldrh	r3, [r7, #22]
 8003684:	04d9      	lsls	r1, r3, #19
 8003686:	4b38      	ldr	r3, [pc, #224]	@ (8003768 <USB_EPStartXfer+0x538>)
 8003688:	400b      	ands	r3, r1
 800368a:	69b9      	ldr	r1, [r7, #24]
 800368c:	0148      	lsls	r0, r1, #5
 800368e:	69f9      	ldr	r1, [r7, #28]
 8003690:	4401      	add	r1, r0
 8003692:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003696:	4313      	orrs	r3, r2
 8003698:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	015a      	lsls	r2, r3, #5
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	4413      	add	r3, r2
 80036a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036a6:	691a      	ldr	r2, [r3, #16]
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	6a1b      	ldr	r3, [r3, #32]
 80036ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036b0:	69b9      	ldr	r1, [r7, #24]
 80036b2:	0148      	lsls	r0, r1, #5
 80036b4:	69f9      	ldr	r1, [r7, #28]
 80036b6:	4401      	add	r1, r0
 80036b8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80036bc:	4313      	orrs	r3, r2
 80036be:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80036c0:	79fb      	ldrb	r3, [r7, #7]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d10d      	bne.n	80036e2 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d009      	beq.n	80036e2 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	68d9      	ldr	r1, [r3, #12]
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	015a      	lsls	r2, r3, #5
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	4413      	add	r3, r2
 80036da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036de:	460a      	mov	r2, r1
 80036e0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	791b      	ldrb	r3, [r3, #4]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d128      	bne.n	800373c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d110      	bne.n	800371c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	015a      	lsls	r2, r3, #5
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	4413      	add	r3, r2
 8003702:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	0151      	lsls	r1, r2, #5
 800370c:	69fa      	ldr	r2, [r7, #28]
 800370e:	440a      	add	r2, r1
 8003710:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003714:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003718:	6013      	str	r3, [r2, #0]
 800371a:	e00f      	b.n	800373c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	015a      	lsls	r2, r3, #5
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	4413      	add	r3, r2
 8003724:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	0151      	lsls	r1, r2, #5
 800372e:	69fa      	ldr	r2, [r7, #28]
 8003730:	440a      	add	r2, r1
 8003732:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003736:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800373a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	015a      	lsls	r2, r3, #5
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	4413      	add	r3, r2
 8003744:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	69ba      	ldr	r2, [r7, #24]
 800374c:	0151      	lsls	r1, r2, #5
 800374e:	69fa      	ldr	r2, [r7, #28]
 8003750:	440a      	add	r2, r1
 8003752:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003756:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800375a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3720      	adds	r7, #32
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	1ff80000 	.word	0x1ff80000

0800376c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800376c:	b480      	push	{r7}
 800376e:	b087      	sub	sp, #28
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003776:	2300      	movs	r3, #0
 8003778:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800377a:	2300      	movs	r3, #0
 800377c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	785b      	ldrb	r3, [r3, #1]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d14a      	bne.n	8003820 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	015a      	lsls	r2, r3, #5
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	4413      	add	r3, r2
 8003794:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800379e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80037a2:	f040 8086 	bne.w	80038b2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	015a      	lsls	r2, r3, #5
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	4413      	add	r3, r2
 80037b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	683a      	ldr	r2, [r7, #0]
 80037b8:	7812      	ldrb	r2, [r2, #0]
 80037ba:	0151      	lsls	r1, r2, #5
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	440a      	add	r2, r1
 80037c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80037c4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80037c8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	015a      	lsls	r2, r3, #5
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	4413      	add	r3, r2
 80037d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	683a      	ldr	r2, [r7, #0]
 80037dc:	7812      	ldrb	r2, [r2, #0]
 80037de:	0151      	lsls	r1, r2, #5
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	440a      	add	r2, r1
 80037e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80037e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80037ec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	3301      	adds	r3, #1
 80037f2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d902      	bls.n	8003804 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	75fb      	strb	r3, [r7, #23]
          break;
 8003802:	e056      	b.n	80038b2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	015a      	lsls	r2, r3, #5
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	4413      	add	r3, r2
 800380e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003818:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800381c:	d0e7      	beq.n	80037ee <USB_EPStopXfer+0x82>
 800381e:	e048      	b.n	80038b2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	015a      	lsls	r2, r3, #5
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	4413      	add	r3, r2
 800382a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003834:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003838:	d13b      	bne.n	80038b2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	015a      	lsls	r2, r3, #5
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	4413      	add	r3, r2
 8003844:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	683a      	ldr	r2, [r7, #0]
 800384c:	7812      	ldrb	r2, [r2, #0]
 800384e:	0151      	lsls	r1, r2, #5
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	440a      	add	r2, r1
 8003854:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003858:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800385c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	015a      	lsls	r2, r3, #5
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	4413      	add	r3, r2
 8003868:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	7812      	ldrb	r2, [r2, #0]
 8003872:	0151      	lsls	r1, r2, #5
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	440a      	add	r2, r1
 8003878:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800387c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003880:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	3301      	adds	r3, #1
 8003886:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800388e:	4293      	cmp	r3, r2
 8003890:	d902      	bls.n	8003898 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	75fb      	strb	r3, [r7, #23]
          break;
 8003896:	e00c      	b.n	80038b2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	015a      	lsls	r2, r3, #5
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	4413      	add	r3, r2
 80038a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80038ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80038b0:	d0e7      	beq.n	8003882 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80038b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	371c      	adds	r7, #28
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b089      	sub	sp, #36	@ 0x24
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	4611      	mov	r1, r2
 80038cc:	461a      	mov	r2, r3
 80038ce:	460b      	mov	r3, r1
 80038d0:	71fb      	strb	r3, [r7, #7]
 80038d2:	4613      	mov	r3, r2
 80038d4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80038de:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d123      	bne.n	800392e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80038e6:	88bb      	ldrh	r3, [r7, #4]
 80038e8:	3303      	adds	r3, #3
 80038ea:	089b      	lsrs	r3, r3, #2
 80038ec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80038ee:	2300      	movs	r3, #0
 80038f0:	61bb      	str	r3, [r7, #24]
 80038f2:	e018      	b.n	8003926 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80038f4:	79fb      	ldrb	r3, [r7, #7]
 80038f6:	031a      	lsls	r2, r3, #12
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	4413      	add	r3, r2
 80038fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003900:	461a      	mov	r2, r3
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	3301      	adds	r3, #1
 800390c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	3301      	adds	r3, #1
 8003912:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	3301      	adds	r3, #1
 8003918:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	3301      	adds	r3, #1
 800391e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	3301      	adds	r3, #1
 8003924:	61bb      	str	r3, [r7, #24]
 8003926:	69ba      	ldr	r2, [r7, #24]
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	429a      	cmp	r2, r3
 800392c:	d3e2      	bcc.n	80038f4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3724      	adds	r7, #36	@ 0x24
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800393c:	b480      	push	{r7}
 800393e:	b08b      	sub	sp, #44	@ 0x2c
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	4613      	mov	r3, r2
 8003948:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003952:	88fb      	ldrh	r3, [r7, #6]
 8003954:	089b      	lsrs	r3, r3, #2
 8003956:	b29b      	uxth	r3, r3
 8003958:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800395a:	88fb      	ldrh	r3, [r7, #6]
 800395c:	f003 0303 	and.w	r3, r3, #3
 8003960:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003962:	2300      	movs	r3, #0
 8003964:	623b      	str	r3, [r7, #32]
 8003966:	e014      	b.n	8003992 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003972:	601a      	str	r2, [r3, #0]
    pDest++;
 8003974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003976:	3301      	adds	r3, #1
 8003978:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800397a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800397c:	3301      	adds	r3, #1
 800397e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003982:	3301      	adds	r3, #1
 8003984:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003988:	3301      	adds	r3, #1
 800398a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800398c:	6a3b      	ldr	r3, [r7, #32]
 800398e:	3301      	adds	r3, #1
 8003990:	623b      	str	r3, [r7, #32]
 8003992:	6a3a      	ldr	r2, [r7, #32]
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	429a      	cmp	r2, r3
 8003998:	d3e6      	bcc.n	8003968 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800399a:	8bfb      	ldrh	r3, [r7, #30]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d01e      	beq.n	80039de <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80039a0:	2300      	movs	r3, #0
 80039a2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039aa:	461a      	mov	r2, r3
 80039ac:	f107 0310 	add.w	r3, r7, #16
 80039b0:	6812      	ldr	r2, [r2, #0]
 80039b2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80039b4:	693a      	ldr	r2, [r7, #16]
 80039b6:	6a3b      	ldr	r3, [r7, #32]
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	fa22 f303 	lsr.w	r3, r2, r3
 80039c0:	b2da      	uxtb	r2, r3
 80039c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c4:	701a      	strb	r2, [r3, #0]
      i++;
 80039c6:	6a3b      	ldr	r3, [r7, #32]
 80039c8:	3301      	adds	r3, #1
 80039ca:	623b      	str	r3, [r7, #32]
      pDest++;
 80039cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ce:	3301      	adds	r3, #1
 80039d0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80039d2:	8bfb      	ldrh	r3, [r7, #30]
 80039d4:	3b01      	subs	r3, #1
 80039d6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80039d8:	8bfb      	ldrh	r3, [r7, #30]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1ea      	bne.n	80039b4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80039de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	372c      	adds	r7, #44	@ 0x2c
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	785b      	ldrb	r3, [r3, #1]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d12c      	bne.n	8003a62 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	015a      	lsls	r2, r3, #5
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	4413      	add	r3, r2
 8003a10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	db12      	blt.n	8003a40 <USB_EPSetStall+0x54>
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00f      	beq.n	8003a40 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	015a      	lsls	r2, r3, #5
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	4413      	add	r3, r2
 8003a28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68ba      	ldr	r2, [r7, #8]
 8003a30:	0151      	lsls	r1, r2, #5
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	440a      	add	r2, r1
 8003a36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003a3a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003a3e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	015a      	lsls	r2, r3, #5
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	4413      	add	r3, r2
 8003a48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	0151      	lsls	r1, r2, #5
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	440a      	add	r2, r1
 8003a56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003a5a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003a5e:	6013      	str	r3, [r2, #0]
 8003a60:	e02b      	b.n	8003aba <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	015a      	lsls	r2, r3, #5
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	4413      	add	r3, r2
 8003a6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	db12      	blt.n	8003a9a <USB_EPSetStall+0xae>
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00f      	beq.n	8003a9a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	015a      	lsls	r2, r3, #5
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	4413      	add	r3, r2
 8003a82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68ba      	ldr	r2, [r7, #8]
 8003a8a:	0151      	lsls	r1, r2, #5
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	440a      	add	r2, r1
 8003a90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003a94:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003a98:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	015a      	lsls	r2, r3, #5
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68ba      	ldr	r2, [r7, #8]
 8003aaa:	0151      	lsls	r1, r2, #5
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	440a      	add	r2, r1
 8003ab0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003ab4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003ab8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3714      	adds	r7, #20
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	785b      	ldrb	r3, [r3, #1]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d128      	bne.n	8003b36 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	015a      	lsls	r2, r3, #5
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	4413      	add	r3, r2
 8003aec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	0151      	lsls	r1, r2, #5
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	440a      	add	r2, r1
 8003afa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003afe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003b02:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	791b      	ldrb	r3, [r3, #4]
 8003b08:	2b03      	cmp	r3, #3
 8003b0a:	d003      	beq.n	8003b14 <USB_EPClearStall+0x4c>
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	791b      	ldrb	r3, [r3, #4]
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d138      	bne.n	8003b86 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	015a      	lsls	r2, r3, #5
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	0151      	lsls	r1, r2, #5
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	440a      	add	r2, r1
 8003b2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003b2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b32:	6013      	str	r3, [r2, #0]
 8003b34:	e027      	b.n	8003b86 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	015a      	lsls	r2, r3, #5
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	0151      	lsls	r1, r2, #5
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	440a      	add	r2, r1
 8003b4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003b50:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003b54:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	791b      	ldrb	r3, [r3, #4]
 8003b5a:	2b03      	cmp	r3, #3
 8003b5c:	d003      	beq.n	8003b66 <USB_EPClearStall+0x9e>
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	791b      	ldrb	r3, [r3, #4]
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d10f      	bne.n	8003b86 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	015a      	lsls	r2, r3, #5
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68ba      	ldr	r2, [r7, #8]
 8003b76:	0151      	lsls	r1, r2, #5
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	440a      	add	r2, r1
 8003b7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003b80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b84:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3714      	adds	r7, #20
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003bb2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003bb6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	78fb      	ldrb	r3, [r7, #3]
 8003bc2:	011b      	lsls	r3, r3, #4
 8003bc4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8003bc8:	68f9      	ldr	r1, [r7, #12]
 8003bca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3714      	adds	r7, #20
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003bfa:	f023 0303 	bic.w	r3, r3, #3
 8003bfe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c0e:	f023 0302 	bic.w	r3, r3, #2
 8003c12:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3714      	adds	r7, #20
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003c22:	b480      	push	{r7}
 8003c24:	b085      	sub	sp, #20
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003c3c:	f023 0303 	bic.w	r3, r3, #3
 8003c40:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c50:	f043 0302 	orr.w	r3, r3, #2
 8003c54:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3714      	adds	r7, #20
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	695b      	ldr	r3, [r3, #20]
 8003c70:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3714      	adds	r7, #20
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr

08003c8a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b085      	sub	sp, #20
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ca6:	69db      	ldr	r3, [r3, #28]
 8003ca8:	68ba      	ldr	r2, [r7, #8]
 8003caa:	4013      	ands	r3, r2
 8003cac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	0c1b      	lsrs	r3, r3, #16
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3714      	adds	r7, #20
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b085      	sub	sp, #20
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cda:	69db      	ldr	r3, [r3, #28]
 8003cdc:	68ba      	ldr	r2, [r7, #8]
 8003cde:	4013      	ands	r3, r2
 8003ce0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	b29b      	uxth	r3, r3
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3714      	adds	r7, #20
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b085      	sub	sp, #20
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003d02:	78fb      	ldrb	r3, [r7, #3]
 8003d04:	015a      	lsls	r2, r3, #5
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	4413      	add	r3, r2
 8003d0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	68ba      	ldr	r2, [r7, #8]
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003d20:	68bb      	ldr	r3, [r7, #8]
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3714      	adds	r7, #20
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b087      	sub	sp, #28
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
 8003d36:	460b      	mov	r3, r1
 8003d38:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d50:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8003d52:	78fb      	ldrb	r3, [r7, #3]
 8003d54:	f003 030f 	and.w	r3, r3, #15
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d5e:	01db      	lsls	r3, r3, #7
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003d68:	78fb      	ldrb	r3, [r7, #3]
 8003d6a:	015a      	lsls	r2, r3, #5
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	4413      	add	r3, r2
 8003d70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	4013      	ands	r3, r2
 8003d7a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003d7c:	68bb      	ldr	r3, [r7, #8]
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	371c      	adds	r7, #28
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr

08003d8a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	b083      	sub	sp, #12
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	f003 0301 	and.w	r3, r3, #1
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr

08003da6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8003da6:	b480      	push	{r7}
 8003da8:	b085      	sub	sp, #20
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003dc0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003dc4:	f023 0307 	bic.w	r3, r3, #7
 8003dc8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003dd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ddc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3714      	adds	r7, #20
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b087      	sub	sp, #28
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	460b      	mov	r3, r1
 8003df6:	607a      	str	r2, [r7, #4]
 8003df8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	333c      	adds	r3, #60	@ 0x3c
 8003e02:	3304      	adds	r3, #4
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	4a26      	ldr	r2, [pc, #152]	@ (8003ea4 <USB_EP0_OutStart+0xb8>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d90a      	bls.n	8003e26 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003e1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e20:	d101      	bne.n	8003e26 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8003e22:	2300      	movs	r3, #0
 8003e24:	e037      	b.n	8003e96 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	2300      	movs	r3, #0
 8003e30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e40:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003e44:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e54:	f043 0318 	orr.w	r3, r3, #24
 8003e58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e68:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8003e6c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8003e6e:	7afb      	ldrb	r3, [r7, #11]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d10f      	bne.n	8003e94 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e8e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8003e92:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	371c      	adds	r7, #28
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	4f54300a 	.word	0x4f54300a

08003ea8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003ec0:	d901      	bls.n	8003ec6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e01b      	b.n	8003efe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	daf2      	bge.n	8003eb4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	f043 0201 	orr.w	r2, r3, #1
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003eea:	d901      	bls.n	8003ef0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e006      	b.n	8003efe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d0f0      	beq.n	8003ede <USB_CoreReset+0x36>

  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3714      	adds	r7, #20
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
	...

08003f0c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	460b      	mov	r3, r1
 8003f16:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8003f18:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8003f1c:	f002 fc78 	bl	8006810 <USBD_static_malloc>
 8003f20:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d109      	bne.n	8003f3c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	32b0      	adds	r2, #176	@ 0xb0
 8003f32:	2100      	movs	r1, #0
 8003f34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8003f38:	2302      	movs	r3, #2
 8003f3a:	e0d4      	b.n	80040e6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8003f3c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8003f40:	2100      	movs	r1, #0
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f002 fea0 	bl	8006c88 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	32b0      	adds	r2, #176	@ 0xb0
 8003f52:	68f9      	ldr	r1, [r7, #12]
 8003f54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	32b0      	adds	r2, #176	@ 0xb0
 8003f62:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	7c1b      	ldrb	r3, [r3, #16]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d138      	bne.n	8003fe6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8003f74:	4b5e      	ldr	r3, [pc, #376]	@ (80040f0 <USBD_CDC_Init+0x1e4>)
 8003f76:	7819      	ldrb	r1, [r3, #0]
 8003f78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003f7c:	2202      	movs	r2, #2
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f002 fb23 	bl	80065ca <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8003f84:	4b5a      	ldr	r3, [pc, #360]	@ (80040f0 <USBD_CDC_Init+0x1e4>)
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	f003 020f 	and.w	r2, r3, #15
 8003f8c:	6879      	ldr	r1, [r7, #4]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	4413      	add	r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	440b      	add	r3, r1
 8003f98:	3324      	adds	r3, #36	@ 0x24
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8003f9e:	4b55      	ldr	r3, [pc, #340]	@ (80040f4 <USBD_CDC_Init+0x1e8>)
 8003fa0:	7819      	ldrb	r1, [r3, #0]
 8003fa2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f002 fb0e 	bl	80065ca <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8003fae:	4b51      	ldr	r3, [pc, #324]	@ (80040f4 <USBD_CDC_Init+0x1e8>)
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	f003 020f 	and.w	r2, r3, #15
 8003fb6:	6879      	ldr	r1, [r7, #4]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	4413      	add	r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	440b      	add	r3, r1
 8003fc2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8003fca:	4b4b      	ldr	r3, [pc, #300]	@ (80040f8 <USBD_CDC_Init+0x1ec>)
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	f003 020f 	and.w	r2, r3, #15
 8003fd2:	6879      	ldr	r1, [r7, #4]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	4413      	add	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	440b      	add	r3, r1
 8003fde:	3326      	adds	r3, #38	@ 0x26
 8003fe0:	2210      	movs	r2, #16
 8003fe2:	801a      	strh	r2, [r3, #0]
 8003fe4:	e035      	b.n	8004052 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8003fe6:	4b42      	ldr	r3, [pc, #264]	@ (80040f0 <USBD_CDC_Init+0x1e4>)
 8003fe8:	7819      	ldrb	r1, [r3, #0]
 8003fea:	2340      	movs	r3, #64	@ 0x40
 8003fec:	2202      	movs	r2, #2
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f002 faeb 	bl	80065ca <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8003ff4:	4b3e      	ldr	r3, [pc, #248]	@ (80040f0 <USBD_CDC_Init+0x1e4>)
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	f003 020f 	and.w	r2, r3, #15
 8003ffc:	6879      	ldr	r1, [r7, #4]
 8003ffe:	4613      	mov	r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	4413      	add	r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	440b      	add	r3, r1
 8004008:	3324      	adds	r3, #36	@ 0x24
 800400a:	2201      	movs	r2, #1
 800400c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800400e:	4b39      	ldr	r3, [pc, #228]	@ (80040f4 <USBD_CDC_Init+0x1e8>)
 8004010:	7819      	ldrb	r1, [r3, #0]
 8004012:	2340      	movs	r3, #64	@ 0x40
 8004014:	2202      	movs	r2, #2
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f002 fad7 	bl	80065ca <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800401c:	4b35      	ldr	r3, [pc, #212]	@ (80040f4 <USBD_CDC_Init+0x1e8>)
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	f003 020f 	and.w	r2, r3, #15
 8004024:	6879      	ldr	r1, [r7, #4]
 8004026:	4613      	mov	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4413      	add	r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	440b      	add	r3, r1
 8004030:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004034:	2201      	movs	r2, #1
 8004036:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004038:	4b2f      	ldr	r3, [pc, #188]	@ (80040f8 <USBD_CDC_Init+0x1ec>)
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	f003 020f 	and.w	r2, r3, #15
 8004040:	6879      	ldr	r1, [r7, #4]
 8004042:	4613      	mov	r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	4413      	add	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	440b      	add	r3, r1
 800404c:	3326      	adds	r3, #38	@ 0x26
 800404e:	2210      	movs	r2, #16
 8004050:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004052:	4b29      	ldr	r3, [pc, #164]	@ (80040f8 <USBD_CDC_Init+0x1ec>)
 8004054:	7819      	ldrb	r1, [r3, #0]
 8004056:	2308      	movs	r3, #8
 8004058:	2203      	movs	r2, #3
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f002 fab5 	bl	80065ca <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004060:	4b25      	ldr	r3, [pc, #148]	@ (80040f8 <USBD_CDC_Init+0x1ec>)
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	f003 020f 	and.w	r2, r3, #15
 8004068:	6879      	ldr	r1, [r7, #4]
 800406a:	4613      	mov	r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	4413      	add	r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	440b      	add	r3, r1
 8004074:	3324      	adds	r3, #36	@ 0x24
 8004076:	2201      	movs	r2, #1
 8004078:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	33b0      	adds	r3, #176	@ 0xb0
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	4413      	add	r3, r2
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d101      	bne.n	80040b4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80040b0:	2302      	movs	r3, #2
 80040b2:	e018      	b.n	80040e6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	7c1b      	ldrb	r3, [r3, #16]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d10a      	bne.n	80040d2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80040bc:	4b0d      	ldr	r3, [pc, #52]	@ (80040f4 <USBD_CDC_Init+0x1e8>)
 80040be:	7819      	ldrb	r1, [r3, #0]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80040c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f002 fb6c 	bl	80067a8 <USBD_LL_PrepareReceive>
 80040d0:	e008      	b.n	80040e4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80040d2:	4b08      	ldr	r3, [pc, #32]	@ (80040f4 <USBD_CDC_Init+0x1e8>)
 80040d4:	7819      	ldrb	r1, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80040dc:	2340      	movs	r3, #64	@ 0x40
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f002 fb62 	bl	80067a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	20000097 	.word	0x20000097
 80040f4:	20000098 	.word	0x20000098
 80040f8:	20000099 	.word	0x20000099

080040fc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	460b      	mov	r3, r1
 8004106:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004108:	4b3a      	ldr	r3, [pc, #232]	@ (80041f4 <USBD_CDC_DeInit+0xf8>)
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	4619      	mov	r1, r3
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f002 fa81 	bl	8006616 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004114:	4b37      	ldr	r3, [pc, #220]	@ (80041f4 <USBD_CDC_DeInit+0xf8>)
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	f003 020f 	and.w	r2, r3, #15
 800411c:	6879      	ldr	r1, [r7, #4]
 800411e:	4613      	mov	r3, r2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	4413      	add	r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	440b      	add	r3, r1
 8004128:	3324      	adds	r3, #36	@ 0x24
 800412a:	2200      	movs	r2, #0
 800412c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800412e:	4b32      	ldr	r3, [pc, #200]	@ (80041f8 <USBD_CDC_DeInit+0xfc>)
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	4619      	mov	r1, r3
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f002 fa6e 	bl	8006616 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800413a:	4b2f      	ldr	r3, [pc, #188]	@ (80041f8 <USBD_CDC_DeInit+0xfc>)
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	f003 020f 	and.w	r2, r3, #15
 8004142:	6879      	ldr	r1, [r7, #4]
 8004144:	4613      	mov	r3, r2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	4413      	add	r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	440b      	add	r3, r1
 800414e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004152:	2200      	movs	r2, #0
 8004154:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004156:	4b29      	ldr	r3, [pc, #164]	@ (80041fc <USBD_CDC_DeInit+0x100>)
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	4619      	mov	r1, r3
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f002 fa5a 	bl	8006616 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004162:	4b26      	ldr	r3, [pc, #152]	@ (80041fc <USBD_CDC_DeInit+0x100>)
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	f003 020f 	and.w	r2, r3, #15
 800416a:	6879      	ldr	r1, [r7, #4]
 800416c:	4613      	mov	r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	4413      	add	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	440b      	add	r3, r1
 8004176:	3324      	adds	r3, #36	@ 0x24
 8004178:	2200      	movs	r2, #0
 800417a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800417c:	4b1f      	ldr	r3, [pc, #124]	@ (80041fc <USBD_CDC_DeInit+0x100>)
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	f003 020f 	and.w	r2, r3, #15
 8004184:	6879      	ldr	r1, [r7, #4]
 8004186:	4613      	mov	r3, r2
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	4413      	add	r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	440b      	add	r3, r1
 8004190:	3326      	adds	r3, #38	@ 0x26
 8004192:	2200      	movs	r2, #0
 8004194:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	32b0      	adds	r2, #176	@ 0xb0
 80041a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d01f      	beq.n	80041e8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	33b0      	adds	r3, #176	@ 0xb0
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4413      	add	r3, r2
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	32b0      	adds	r2, #176	@ 0xb0
 80041c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041ca:	4618      	mov	r0, r3
 80041cc:	f002 fb2e 	bl	800682c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	32b0      	adds	r2, #176	@ 0xb0
 80041da:	2100      	movs	r1, #0
 80041dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3708      	adds	r7, #8
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	20000097 	.word	0x20000097
 80041f8:	20000098 	.word	0x20000098
 80041fc:	20000099 	.word	0x20000099

08004200 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	32b0      	adds	r2, #176	@ 0xb0
 8004214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004218:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800421a:	2300      	movs	r3, #0
 800421c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800421e:	2300      	movs	r3, #0
 8004220:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004222:	2300      	movs	r3, #0
 8004224:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d101      	bne.n	8004230 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800422c:	2303      	movs	r3, #3
 800422e:	e0bf      	b.n	80043b0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004238:	2b00      	cmp	r3, #0
 800423a:	d050      	beq.n	80042de <USBD_CDC_Setup+0xde>
 800423c:	2b20      	cmp	r3, #32
 800423e:	f040 80af 	bne.w	80043a0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	88db      	ldrh	r3, [r3, #6]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d03a      	beq.n	80042c0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	b25b      	sxtb	r3, r3
 8004250:	2b00      	cmp	r3, #0
 8004252:	da1b      	bge.n	800428c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	33b0      	adds	r3, #176	@ 0xb0
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	4413      	add	r3, r2
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800426a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800426c:	683a      	ldr	r2, [r7, #0]
 800426e:	88d2      	ldrh	r2, [r2, #6]
 8004270:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	88db      	ldrh	r3, [r3, #6]
 8004276:	2b07      	cmp	r3, #7
 8004278:	bf28      	it	cs
 800427a:	2307      	movcs	r3, #7
 800427c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	89fa      	ldrh	r2, [r7, #14]
 8004282:	4619      	mov	r1, r3
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f001 fd93 	bl	8005db0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800428a:	e090      	b.n	80043ae <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	785a      	ldrb	r2, [r3, #1]
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	88db      	ldrh	r3, [r3, #6]
 800429a:	2b3f      	cmp	r3, #63	@ 0x3f
 800429c:	d803      	bhi.n	80042a6 <USBD_CDC_Setup+0xa6>
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	88db      	ldrh	r3, [r3, #6]
 80042a2:	b2da      	uxtb	r2, r3
 80042a4:	e000      	b.n	80042a8 <USBD_CDC_Setup+0xa8>
 80042a6:	2240      	movs	r2, #64	@ 0x40
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80042ae:	6939      	ldr	r1, [r7, #16]
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80042b6:	461a      	mov	r2, r3
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f001 fda5 	bl	8005e08 <USBD_CtlPrepareRx>
      break;
 80042be:	e076      	b.n	80043ae <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	33b0      	adds	r3, #176	@ 0xb0
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	4413      	add	r3, r2
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	683a      	ldr	r2, [r7, #0]
 80042d4:	7850      	ldrb	r0, [r2, #1]
 80042d6:	2200      	movs	r2, #0
 80042d8:	6839      	ldr	r1, [r7, #0]
 80042da:	4798      	blx	r3
      break;
 80042dc:	e067      	b.n	80043ae <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	785b      	ldrb	r3, [r3, #1]
 80042e2:	2b0b      	cmp	r3, #11
 80042e4:	d851      	bhi.n	800438a <USBD_CDC_Setup+0x18a>
 80042e6:	a201      	add	r2, pc, #4	@ (adr r2, 80042ec <USBD_CDC_Setup+0xec>)
 80042e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ec:	0800431d 	.word	0x0800431d
 80042f0:	08004399 	.word	0x08004399
 80042f4:	0800438b 	.word	0x0800438b
 80042f8:	0800438b 	.word	0x0800438b
 80042fc:	0800438b 	.word	0x0800438b
 8004300:	0800438b 	.word	0x0800438b
 8004304:	0800438b 	.word	0x0800438b
 8004308:	0800438b 	.word	0x0800438b
 800430c:	0800438b 	.word	0x0800438b
 8004310:	0800438b 	.word	0x0800438b
 8004314:	08004347 	.word	0x08004347
 8004318:	08004371 	.word	0x08004371
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004322:	b2db      	uxtb	r3, r3
 8004324:	2b03      	cmp	r3, #3
 8004326:	d107      	bne.n	8004338 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004328:	f107 030a 	add.w	r3, r7, #10
 800432c:	2202      	movs	r2, #2
 800432e:	4619      	mov	r1, r3
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f001 fd3d 	bl	8005db0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004336:	e032      	b.n	800439e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004338:	6839      	ldr	r1, [r7, #0]
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f001 fcbb 	bl	8005cb6 <USBD_CtlError>
            ret = USBD_FAIL;
 8004340:	2303      	movs	r3, #3
 8004342:	75fb      	strb	r3, [r7, #23]
          break;
 8004344:	e02b      	b.n	800439e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b03      	cmp	r3, #3
 8004350:	d107      	bne.n	8004362 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004352:	f107 030d 	add.w	r3, r7, #13
 8004356:	2201      	movs	r2, #1
 8004358:	4619      	mov	r1, r3
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f001 fd28 	bl	8005db0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004360:	e01d      	b.n	800439e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004362:	6839      	ldr	r1, [r7, #0]
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f001 fca6 	bl	8005cb6 <USBD_CtlError>
            ret = USBD_FAIL;
 800436a:	2303      	movs	r3, #3
 800436c:	75fb      	strb	r3, [r7, #23]
          break;
 800436e:	e016      	b.n	800439e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b03      	cmp	r3, #3
 800437a:	d00f      	beq.n	800439c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800437c:	6839      	ldr	r1, [r7, #0]
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f001 fc99 	bl	8005cb6 <USBD_CtlError>
            ret = USBD_FAIL;
 8004384:	2303      	movs	r3, #3
 8004386:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004388:	e008      	b.n	800439c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800438a:	6839      	ldr	r1, [r7, #0]
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f001 fc92 	bl	8005cb6 <USBD_CtlError>
          ret = USBD_FAIL;
 8004392:	2303      	movs	r3, #3
 8004394:	75fb      	strb	r3, [r7, #23]
          break;
 8004396:	e002      	b.n	800439e <USBD_CDC_Setup+0x19e>
          break;
 8004398:	bf00      	nop
 800439a:	e008      	b.n	80043ae <USBD_CDC_Setup+0x1ae>
          break;
 800439c:	bf00      	nop
      }
      break;
 800439e:	e006      	b.n	80043ae <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80043a0:	6839      	ldr	r1, [r7, #0]
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f001 fc87 	bl	8005cb6 <USBD_CtlError>
      ret = USBD_FAIL;
 80043a8:	2303      	movs	r3, #3
 80043aa:	75fb      	strb	r3, [r7, #23]
      break;
 80043ac:	bf00      	nop
  }

  return (uint8_t)ret;
 80043ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3718      	adds	r7, #24
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	460b      	mov	r3, r1
 80043c2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80043ca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	32b0      	adds	r2, #176	@ 0xb0
 80043d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80043de:	2303      	movs	r3, #3
 80043e0:	e065      	b.n	80044ae <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	32b0      	adds	r2, #176	@ 0xb0
 80043ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043f0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80043f2:	78fb      	ldrb	r3, [r7, #3]
 80043f4:	f003 020f 	and.w	r2, r3, #15
 80043f8:	6879      	ldr	r1, [r7, #4]
 80043fa:	4613      	mov	r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	4413      	add	r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	440b      	add	r3, r1
 8004404:	3318      	adds	r3, #24
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d02f      	beq.n	800446c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800440c:	78fb      	ldrb	r3, [r7, #3]
 800440e:	f003 020f 	and.w	r2, r3, #15
 8004412:	6879      	ldr	r1, [r7, #4]
 8004414:	4613      	mov	r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	4413      	add	r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	440b      	add	r3, r1
 800441e:	3318      	adds	r3, #24
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	78fb      	ldrb	r3, [r7, #3]
 8004424:	f003 010f 	and.w	r1, r3, #15
 8004428:	68f8      	ldr	r0, [r7, #12]
 800442a:	460b      	mov	r3, r1
 800442c:	00db      	lsls	r3, r3, #3
 800442e:	440b      	add	r3, r1
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	4403      	add	r3, r0
 8004434:	331c      	adds	r3, #28
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	fbb2 f1f3 	udiv	r1, r2, r3
 800443c:	fb01 f303 	mul.w	r3, r1, r3
 8004440:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004442:	2b00      	cmp	r3, #0
 8004444:	d112      	bne.n	800446c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8004446:	78fb      	ldrb	r3, [r7, #3]
 8004448:	f003 020f 	and.w	r2, r3, #15
 800444c:	6879      	ldr	r1, [r7, #4]
 800444e:	4613      	mov	r3, r2
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	4413      	add	r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	440b      	add	r3, r1
 8004458:	3318      	adds	r3, #24
 800445a:	2200      	movs	r2, #0
 800445c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800445e:	78f9      	ldrb	r1, [r7, #3]
 8004460:	2300      	movs	r3, #0
 8004462:	2200      	movs	r2, #0
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f002 f97e 	bl	8006766 <USBD_LL_Transmit>
 800446a:	e01f      	b.n	80044ac <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	2200      	movs	r2, #0
 8004470:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	33b0      	adds	r3, #176	@ 0xb0
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	4413      	add	r3, r2
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d010      	beq.n	80044ac <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	33b0      	adds	r3, #176	@ 0xb0
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	4413      	add	r3, r2
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	68ba      	ldr	r2, [r7, #8]
 800449e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80044a2:	68ba      	ldr	r2, [r7, #8]
 80044a4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80044a8:	78fa      	ldrb	r2, [r7, #3]
 80044aa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b084      	sub	sp, #16
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
 80044be:	460b      	mov	r3, r1
 80044c0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	32b0      	adds	r2, #176	@ 0xb0
 80044cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044d0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	32b0      	adds	r2, #176	@ 0xb0
 80044dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d101      	bne.n	80044e8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e01a      	b.n	800451e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80044e8:	78fb      	ldrb	r3, [r7, #3]
 80044ea:	4619      	mov	r1, r3
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f002 f97c 	bl	80067ea <USBD_LL_GetRxDataSize>
 80044f2:	4602      	mov	r2, r0
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	33b0      	adds	r3, #176	@ 0xb0
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	4413      	add	r3, r2
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	68fa      	ldr	r2, [r7, #12]
 800450e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8004518:	4611      	mov	r1, r2
 800451a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3710      	adds	r7, #16
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004526:	b580      	push	{r7, lr}
 8004528:	b084      	sub	sp, #16
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	32b0      	adds	r2, #176	@ 0xb0
 8004538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800453c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d101      	bne.n	8004548 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004544:	2303      	movs	r3, #3
 8004546:	e024      	b.n	8004592 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	33b0      	adds	r3, #176	@ 0xb0
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	4413      	add	r3, r2
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d019      	beq.n	8004590 <USBD_CDC_EP0_RxReady+0x6a>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8004562:	2bff      	cmp	r3, #255	@ 0xff
 8004564:	d014      	beq.n	8004590 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	33b0      	adds	r3, #176	@ 0xb0
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	4413      	add	r3, r2
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800457e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004586:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	22ff      	movs	r2, #255	@ 0xff
 800458c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
	...

0800459c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b086      	sub	sp, #24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80045a4:	2182      	movs	r1, #130	@ 0x82
 80045a6:	4818      	ldr	r0, [pc, #96]	@ (8004608 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80045a8:	f000 fd4f 	bl	800504a <USBD_GetEpDesc>
 80045ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80045ae:	2101      	movs	r1, #1
 80045b0:	4815      	ldr	r0, [pc, #84]	@ (8004608 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80045b2:	f000 fd4a 	bl	800504a <USBD_GetEpDesc>
 80045b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80045b8:	2181      	movs	r1, #129	@ 0x81
 80045ba:	4813      	ldr	r0, [pc, #76]	@ (8004608 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80045bc:	f000 fd45 	bl	800504a <USBD_GetEpDesc>
 80045c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d002      	beq.n	80045ce <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	2210      	movs	r2, #16
 80045cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d006      	beq.n	80045e2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80045dc:	711a      	strb	r2, [r3, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d006      	beq.n	80045f6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80045f0:	711a      	strb	r2, [r3, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2243      	movs	r2, #67	@ 0x43
 80045fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80045fc:	4b02      	ldr	r3, [pc, #8]	@ (8004608 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3718      	adds	r7, #24
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	20000054 	.word	0x20000054

0800460c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b086      	sub	sp, #24
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004614:	2182      	movs	r1, #130	@ 0x82
 8004616:	4818      	ldr	r0, [pc, #96]	@ (8004678 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004618:	f000 fd17 	bl	800504a <USBD_GetEpDesc>
 800461c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800461e:	2101      	movs	r1, #1
 8004620:	4815      	ldr	r0, [pc, #84]	@ (8004678 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004622:	f000 fd12 	bl	800504a <USBD_GetEpDesc>
 8004626:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004628:	2181      	movs	r1, #129	@ 0x81
 800462a:	4813      	ldr	r0, [pc, #76]	@ (8004678 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800462c:	f000 fd0d 	bl	800504a <USBD_GetEpDesc>
 8004630:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d002      	beq.n	800463e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	2210      	movs	r2, #16
 800463c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d006      	beq.n	8004652 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	2200      	movs	r2, #0
 8004648:	711a      	strb	r2, [r3, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	f042 0202 	orr.w	r2, r2, #2
 8004650:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d006      	beq.n	8004666 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	711a      	strb	r2, [r3, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	f042 0202 	orr.w	r2, r2, #2
 8004664:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2243      	movs	r2, #67	@ 0x43
 800466a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800466c:	4b02      	ldr	r3, [pc, #8]	@ (8004678 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800466e:	4618      	mov	r0, r3
 8004670:	3718      	adds	r7, #24
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	20000054 	.word	0x20000054

0800467c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b086      	sub	sp, #24
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004684:	2182      	movs	r1, #130	@ 0x82
 8004686:	4818      	ldr	r0, [pc, #96]	@ (80046e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004688:	f000 fcdf 	bl	800504a <USBD_GetEpDesc>
 800468c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800468e:	2101      	movs	r1, #1
 8004690:	4815      	ldr	r0, [pc, #84]	@ (80046e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004692:	f000 fcda 	bl	800504a <USBD_GetEpDesc>
 8004696:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004698:	2181      	movs	r1, #129	@ 0x81
 800469a:	4813      	ldr	r0, [pc, #76]	@ (80046e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800469c:	f000 fcd5 	bl	800504a <USBD_GetEpDesc>
 80046a0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d002      	beq.n	80046ae <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	2210      	movs	r2, #16
 80046ac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d006      	beq.n	80046c2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046bc:	711a      	strb	r2, [r3, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d006      	beq.n	80046d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046d0:	711a      	strb	r2, [r3, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2243      	movs	r2, #67	@ 0x43
 80046da:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80046dc:	4b02      	ldr	r3, [pc, #8]	@ (80046e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3718      	adds	r7, #24
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	20000054 	.word	0x20000054

080046ec <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	220a      	movs	r2, #10
 80046f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80046fa:	4b03      	ldr	r3, [pc, #12]	@ (8004708 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr
 8004708:	20000010 	.word	0x20000010

0800470c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d101      	bne.n	8004720 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800471c:	2303      	movs	r3, #3
 800471e:	e009      	b.n	8004734 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	33b0      	adds	r3, #176	@ 0xb0
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	4413      	add	r3, r2
 800472e:	683a      	ldr	r2, [r7, #0]
 8004730:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004740:	b480      	push	{r7}
 8004742:	b087      	sub	sp, #28
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	32b0      	adds	r2, #176	@ 0xb0
 8004756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800475a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d101      	bne.n	8004766 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8004762:	2303      	movs	r3, #3
 8004764:	e008      	b.n	8004778 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	371c      	adds	r7, #28
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004784:	b480      	push	{r7}
 8004786:	b085      	sub	sp, #20
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	32b0      	adds	r2, #176	@ 0xb0
 8004798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800479c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d101      	bne.n	80047a8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e004      	b.n	80047b2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3714      	adds	r7, #20
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
	...

080047c0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	32b0      	adds	r2, #176	@ 0xb0
 80047d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047d6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80047d8:	2301      	movs	r3, #1
 80047da:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d101      	bne.n	80047e6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e025      	b.n	8004832 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d11f      	bne.n	8004830 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80047f8:	4b10      	ldr	r3, [pc, #64]	@ (800483c <USBD_CDC_TransmitPacket+0x7c>)
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	f003 020f 	and.w	r2, r3, #15
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	4613      	mov	r3, r2
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	4413      	add	r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	4403      	add	r3, r0
 8004812:	3318      	adds	r3, #24
 8004814:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8004816:	4b09      	ldr	r3, [pc, #36]	@ (800483c <USBD_CDC_TransmitPacket+0x7c>)
 8004818:	7819      	ldrb	r1, [r3, #0]
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f001 ff9d 	bl	8006766 <USBD_LL_Transmit>

    ret = USBD_OK;
 800482c:	2300      	movs	r3, #0
 800482e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8004830:	7bfb      	ldrb	r3, [r7, #15]
}
 8004832:	4618      	mov	r0, r3
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	20000097 	.word	0x20000097

08004840 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	32b0      	adds	r2, #176	@ 0xb0
 8004852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004856:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	32b0      	adds	r2, #176	@ 0xb0
 8004862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d101      	bne.n	800486e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800486a:	2303      	movs	r3, #3
 800486c:	e018      	b.n	80048a0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	7c1b      	ldrb	r3, [r3, #16]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d10a      	bne.n	800488c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004876:	4b0c      	ldr	r3, [pc, #48]	@ (80048a8 <USBD_CDC_ReceivePacket+0x68>)
 8004878:	7819      	ldrb	r1, [r3, #0]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004880:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f001 ff8f 	bl	80067a8 <USBD_LL_PrepareReceive>
 800488a:	e008      	b.n	800489e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800488c:	4b06      	ldr	r3, [pc, #24]	@ (80048a8 <USBD_CDC_ReceivePacket+0x68>)
 800488e:	7819      	ldrb	r1, [r3, #0]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004896:	2340      	movs	r3, #64	@ 0x40
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f001 ff85 	bl	80067a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3710      	adds	r7, #16
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	20000098 	.word	0x20000098

080048ac <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b086      	sub	sp, #24
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	4613      	mov	r3, r2
 80048b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d101      	bne.n	80048c4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e01f      	b.n	8004904 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d003      	beq.n	80048ea <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	68ba      	ldr	r2, [r7, #8]
 80048e6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	79fa      	ldrb	r2, [r7, #7]
 80048f6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	f001 fdff 	bl	80064fc <USBD_LL_Init>
 80048fe:	4603      	mov	r3, r0
 8004900:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004902:	7dfb      	ldrb	r3, [r7, #23]
}
 8004904:	4618      	mov	r0, r3
 8004906:	3718      	adds	r7, #24
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004916:	2300      	movs	r3, #0
 8004918:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d101      	bne.n	8004924 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004920:	2303      	movs	r3, #3
 8004922:	e025      	b.n	8004970 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	683a      	ldr	r2, [r7, #0]
 8004928:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	32ae      	adds	r2, #174	@ 0xae
 8004936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800493a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00f      	beq.n	8004960 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	32ae      	adds	r2, #174	@ 0xae
 800494a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800494e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004950:	f107 020e 	add.w	r2, r7, #14
 8004954:	4610      	mov	r0, r2
 8004956:	4798      	blx	r3
 8004958:	4602      	mov	r2, r0
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8004966:	1c5a      	adds	r2, r3, #1
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3710      	adds	r7, #16
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f001 fe07 	bl	8006594 <USBD_LL_Start>
 8004986:	4603      	mov	r3, r0
}
 8004988:	4618      	mov	r0, r3
 800498a:	3708      	adds	r7, #8
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004998:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800499a:	4618      	mov	r0, r3
 800499c:	370c      	adds	r7, #12
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr

080049a6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b084      	sub	sp, #16
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
 80049ae:	460b      	mov	r3, r1
 80049b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80049b2:	2300      	movs	r3, #0
 80049b4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d009      	beq.n	80049d4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	78fa      	ldrb	r2, [r7, #3]
 80049ca:	4611      	mov	r1, r2
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	4798      	blx	r3
 80049d0:	4603      	mov	r3, r0
 80049d2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80049d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b084      	sub	sp, #16
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
 80049e6:	460b      	mov	r3, r1
 80049e8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80049ea:	2300      	movs	r3, #0
 80049ec:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	78fa      	ldrb	r2, [r7, #3]
 80049f8:	4611      	mov	r1, r2
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	4798      	blx	r3
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d001      	beq.n	8004a08 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8004a04:	2303      	movs	r3, #3
 8004a06:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004a12:	b580      	push	{r7, lr}
 8004a14:	b084      	sub	sp, #16
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
 8004a1a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004a22:	6839      	ldr	r1, [r7, #0]
 8004a24:	4618      	mov	r0, r3
 8004a26:	f001 f90c 	bl	8005c42 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8004a38:	461a      	mov	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004a46:	f003 031f 	and.w	r3, r3, #31
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d01a      	beq.n	8004a84 <USBD_LL_SetupStage+0x72>
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d822      	bhi.n	8004a98 <USBD_LL_SetupStage+0x86>
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d002      	beq.n	8004a5c <USBD_LL_SetupStage+0x4a>
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d00a      	beq.n	8004a70 <USBD_LL_SetupStage+0x5e>
 8004a5a:	e01d      	b.n	8004a98 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004a62:	4619      	mov	r1, r3
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 fb63 	bl	8005130 <USBD_StdDevReq>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	73fb      	strb	r3, [r7, #15]
      break;
 8004a6e:	e020      	b.n	8004ab2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004a76:	4619      	mov	r1, r3
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 fbcb 	bl	8005214 <USBD_StdItfReq>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	73fb      	strb	r3, [r7, #15]
      break;
 8004a82:	e016      	b.n	8004ab2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f000 fc2d 	bl	80052ec <USBD_StdEPReq>
 8004a92:	4603      	mov	r3, r0
 8004a94:	73fb      	strb	r3, [r7, #15]
      break;
 8004a96:	e00c      	b.n	8004ab2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004a9e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f001 fdd4 	bl	8006654 <USBD_LL_StallEP>
 8004aac:	4603      	mov	r3, r0
 8004aae:	73fb      	strb	r3, [r7, #15]
      break;
 8004ab0:	bf00      	nop
  }

  return ret;
 8004ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3710      	adds	r7, #16
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b086      	sub	sp, #24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	607a      	str	r2, [r7, #4]
 8004ac8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8004aca:	2300      	movs	r3, #0
 8004acc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8004ace:	7afb      	ldrb	r3, [r7, #11]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d16e      	bne.n	8004bb2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8004ada:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004ae2:	2b03      	cmp	r3, #3
 8004ae4:	f040 8098 	bne.w	8004c18 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	689a      	ldr	r2, [r3, #8]
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d913      	bls.n	8004b1c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	689a      	ldr	r2, [r3, #8]
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	1ad2      	subs	r2, r2, r3
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	68da      	ldr	r2, [r3, #12]
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	bf28      	it	cs
 8004b0e:	4613      	movcs	r3, r2
 8004b10:	461a      	mov	r2, r3
 8004b12:	6879      	ldr	r1, [r7, #4]
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	f001 f994 	bl	8005e42 <USBD_CtlContinueRx>
 8004b1a:	e07d      	b.n	8004c18 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004b22:	f003 031f 	and.w	r3, r3, #31
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d014      	beq.n	8004b54 <USBD_LL_DataOutStage+0x98>
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d81d      	bhi.n	8004b6a <USBD_LL_DataOutStage+0xae>
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d002      	beq.n	8004b38 <USBD_LL_DataOutStage+0x7c>
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d003      	beq.n	8004b3e <USBD_LL_DataOutStage+0x82>
 8004b36:	e018      	b.n	8004b6a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	75bb      	strb	r3, [r7, #22]
            break;
 8004b3c:	e018      	b.n	8004b70 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	4619      	mov	r1, r3
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f000 fa64 	bl	8005016 <USBD_CoreFindIF>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	75bb      	strb	r3, [r7, #22]
            break;
 8004b52:	e00d      	b.n	8004b70 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f000 fa66 	bl	8005030 <USBD_CoreFindEP>
 8004b64:	4603      	mov	r3, r0
 8004b66:	75bb      	strb	r3, [r7, #22]
            break;
 8004b68:	e002      	b.n	8004b70 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	75bb      	strb	r3, [r7, #22]
            break;
 8004b6e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8004b70:	7dbb      	ldrb	r3, [r7, #22]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d119      	bne.n	8004baa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	2b03      	cmp	r3, #3
 8004b80:	d113      	bne.n	8004baa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8004b82:	7dba      	ldrb	r2, [r7, #22]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	32ae      	adds	r2, #174	@ 0xae
 8004b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00b      	beq.n	8004baa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8004b92:	7dba      	ldrb	r2, [r7, #22]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8004b9a:	7dba      	ldrb	r2, [r7, #22]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	32ae      	adds	r2, #174	@ 0xae
 8004ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004baa:	68f8      	ldr	r0, [r7, #12]
 8004bac:	f001 f95a 	bl	8005e64 <USBD_CtlSendStatus>
 8004bb0:	e032      	b.n	8004c18 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8004bb2:	7afb      	ldrb	r3, [r7, #11]
 8004bb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	4619      	mov	r1, r3
 8004bbc:	68f8      	ldr	r0, [r7, #12]
 8004bbe:	f000 fa37 	bl	8005030 <USBD_CoreFindEP>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004bc6:	7dbb      	ldrb	r3, [r7, #22]
 8004bc8:	2bff      	cmp	r3, #255	@ 0xff
 8004bca:	d025      	beq.n	8004c18 <USBD_LL_DataOutStage+0x15c>
 8004bcc:	7dbb      	ldrb	r3, [r7, #22]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d122      	bne.n	8004c18 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	2b03      	cmp	r3, #3
 8004bdc:	d117      	bne.n	8004c0e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8004bde:	7dba      	ldrb	r2, [r7, #22]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	32ae      	adds	r2, #174	@ 0xae
 8004be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00f      	beq.n	8004c0e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8004bee:	7dba      	ldrb	r2, [r7, #22]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8004bf6:	7dba      	ldrb	r2, [r7, #22]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	32ae      	adds	r2, #174	@ 0xae
 8004bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	7afa      	ldrb	r2, [r7, #11]
 8004c04:	4611      	mov	r1, r2
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	4798      	blx	r3
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8004c0e:	7dfb      	ldrb	r3, [r7, #23]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d001      	beq.n	8004c18 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8004c14:	7dfb      	ldrb	r3, [r7, #23]
 8004c16:	e000      	b.n	8004c1a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3718      	adds	r7, #24
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b086      	sub	sp, #24
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	60f8      	str	r0, [r7, #12]
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	607a      	str	r2, [r7, #4]
 8004c2e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8004c30:	7afb      	ldrb	r3, [r7, #11]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d16f      	bne.n	8004d16 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	3314      	adds	r3, #20
 8004c3a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d15a      	bne.n	8004cfc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	689a      	ldr	r2, [r3, #8]
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d914      	bls.n	8004c7c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	689a      	ldr	r2, [r3, #8]
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	1ad2      	subs	r2, r2, r3
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	461a      	mov	r2, r3
 8004c66:	6879      	ldr	r1, [r7, #4]
 8004c68:	68f8      	ldr	r0, [r7, #12]
 8004c6a:	f001 f8bc 	bl	8005de6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004c6e:	2300      	movs	r3, #0
 8004c70:	2200      	movs	r2, #0
 8004c72:	2100      	movs	r1, #0
 8004c74:	68f8      	ldr	r0, [r7, #12]
 8004c76:	f001 fd97 	bl	80067a8 <USBD_LL_PrepareReceive>
 8004c7a:	e03f      	b.n	8004cfc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	68da      	ldr	r2, [r3, #12]
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d11c      	bne.n	8004cc2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	685a      	ldr	r2, [r3, #4]
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d316      	bcc.n	8004cc2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	685a      	ldr	r2, [r3, #4]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d20f      	bcs.n	8004cc2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	2100      	movs	r1, #0
 8004ca6:	68f8      	ldr	r0, [r7, #12]
 8004ca8:	f001 f89d 	bl	8005de6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	2100      	movs	r1, #0
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	f001 fd74 	bl	80067a8 <USBD_LL_PrepareReceive>
 8004cc0:	e01c      	b.n	8004cfc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	2b03      	cmp	r3, #3
 8004ccc:	d10f      	bne.n	8004cee <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d009      	beq.n	8004cee <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	68f8      	ldr	r0, [r7, #12]
 8004cec:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004cee:	2180      	movs	r1, #128	@ 0x80
 8004cf0:	68f8      	ldr	r0, [r7, #12]
 8004cf2:	f001 fcaf 	bl	8006654 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f001 f8c7 	bl	8005e8a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d03a      	beq.n	8004d7c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8004d06:	68f8      	ldr	r0, [r7, #12]
 8004d08:	f7ff fe42 	bl	8004990 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8004d14:	e032      	b.n	8004d7c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8004d16:	7afb      	ldrb	r3, [r7, #11]
 8004d18:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	4619      	mov	r1, r3
 8004d20:	68f8      	ldr	r0, [r7, #12]
 8004d22:	f000 f985 	bl	8005030 <USBD_CoreFindEP>
 8004d26:	4603      	mov	r3, r0
 8004d28:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004d2a:	7dfb      	ldrb	r3, [r7, #23]
 8004d2c:	2bff      	cmp	r3, #255	@ 0xff
 8004d2e:	d025      	beq.n	8004d7c <USBD_LL_DataInStage+0x15a>
 8004d30:	7dfb      	ldrb	r3, [r7, #23]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d122      	bne.n	8004d7c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b03      	cmp	r3, #3
 8004d40:	d11c      	bne.n	8004d7c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8004d42:	7dfa      	ldrb	r2, [r7, #23]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	32ae      	adds	r2, #174	@ 0xae
 8004d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d014      	beq.n	8004d7c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8004d52:	7dfa      	ldrb	r2, [r7, #23]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8004d5a:	7dfa      	ldrb	r2, [r7, #23]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	32ae      	adds	r2, #174	@ 0xae
 8004d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	7afa      	ldrb	r2, [r7, #11]
 8004d68:	4611      	mov	r1, r2
 8004d6a:	68f8      	ldr	r0, [r7, #12]
 8004d6c:	4798      	blx	r3
 8004d6e:	4603      	mov	r3, r0
 8004d70:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8004d72:	7dbb      	ldrb	r3, [r7, #22]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d001      	beq.n	8004d7c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8004d78:	7dbb      	ldrb	r3, [r7, #22]
 8004d7a:	e000      	b.n	8004d7e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3718      	adds	r7, #24
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b084      	sub	sp, #16
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d014      	beq.n	8004dec <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00e      	beq.n	8004dec <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	6852      	ldr	r2, [r2, #4]
 8004dda:	b2d2      	uxtb	r2, r2
 8004ddc:	4611      	mov	r1, r2
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	4798      	blx	r3
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d001      	beq.n	8004dec <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8004de8:	2303      	movs	r3, #3
 8004dea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004dec:	2340      	movs	r3, #64	@ 0x40
 8004dee:	2200      	movs	r2, #0
 8004df0:	2100      	movs	r1, #0
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f001 fbe9 	bl	80065ca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2240      	movs	r2, #64	@ 0x40
 8004e04:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004e08:	2340      	movs	r3, #64	@ 0x40
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	2180      	movs	r1, #128	@ 0x80
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f001 fbdb 	bl	80065ca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2240      	movs	r2, #64	@ 0x40
 8004e1e:	621a      	str	r2, [r3, #32]

  return ret;
 8004e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3710      	adds	r7, #16
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004e2a:	b480      	push	{r7}
 8004e2c:	b083      	sub	sp, #12
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
 8004e32:	460b      	mov	r3, r1
 8004e34:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	78fa      	ldrb	r2, [r7, #3]
 8004e3a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	370c      	adds	r7, #12
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr

08004e4a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	b083      	sub	sp, #12
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	2b04      	cmp	r3, #4
 8004e5c:	d006      	beq.n	8004e6c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004e64:	b2da      	uxtb	r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2204      	movs	r2, #4
 8004e70:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	370c      	adds	r7, #12
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr

08004e82 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004e82:	b480      	push	{r7}
 8004e84:	b083      	sub	sp, #12
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b04      	cmp	r3, #4
 8004e94:	d106      	bne.n	8004ea4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8004e9c:	b2da      	uxtb	r2, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	370c      	adds	r7, #12
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr

08004eb2 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004eb2:	b580      	push	{r7, lr}
 8004eb4:	b082      	sub	sp, #8
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	2b03      	cmp	r3, #3
 8004ec4:	d110      	bne.n	8004ee8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00b      	beq.n	8004ee8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004ed6:	69db      	ldr	r3, [r3, #28]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d005      	beq.n	8004ee8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004ee2:	69db      	ldr	r3, [r3, #28]
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3708      	adds	r7, #8
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b082      	sub	sp, #8
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
 8004efa:	460b      	mov	r3, r1
 8004efc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	32ae      	adds	r2, #174	@ 0xae
 8004f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d101      	bne.n	8004f14 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e01c      	b.n	8004f4e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	2b03      	cmp	r3, #3
 8004f1e:	d115      	bne.n	8004f4c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	32ae      	adds	r2, #174	@ 0xae
 8004f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f2e:	6a1b      	ldr	r3, [r3, #32]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d00b      	beq.n	8004f4c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	32ae      	adds	r2, #174	@ 0xae
 8004f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f42:	6a1b      	ldr	r3, [r3, #32]
 8004f44:	78fa      	ldrb	r2, [r7, #3]
 8004f46:	4611      	mov	r1, r2
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3708      	adds	r7, #8
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}

08004f56 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004f56:	b580      	push	{r7, lr}
 8004f58:	b082      	sub	sp, #8
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
 8004f5e:	460b      	mov	r3, r1
 8004f60:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	32ae      	adds	r2, #174	@ 0xae
 8004f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d101      	bne.n	8004f78 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e01c      	b.n	8004fb2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	2b03      	cmp	r3, #3
 8004f82:	d115      	bne.n	8004fb0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	32ae      	adds	r2, #174	@ 0xae
 8004f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00b      	beq.n	8004fb0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	32ae      	adds	r2, #174	@ 0xae
 8004fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa8:	78fa      	ldrb	r2, [r7, #3]
 8004faa:	4611      	mov	r1, r2
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3708      	adds	r7, #8
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004fba:	b480      	push	{r7}
 8004fbc:	b083      	sub	sp, #12
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00e      	beq.n	800500c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	6852      	ldr	r2, [r2, #4]
 8004ffa:	b2d2      	uxtb	r2, r2
 8004ffc:	4611      	mov	r1, r2
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	4798      	blx	r3
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d001      	beq.n	800500c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005008:	2303      	movs	r3, #3
 800500a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800500c:	7bfb      	ldrb	r3, [r7, #15]
}
 800500e:	4618      	mov	r0, r3
 8005010:	3710      	adds	r7, #16
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005016:	b480      	push	{r7}
 8005018:	b083      	sub	sp, #12
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
 800501e:	460b      	mov	r3, r1
 8005020:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005022:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005024:	4618      	mov	r0, r3
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	460b      	mov	r3, r1
 800503a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800503c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800503e:	4618      	mov	r0, r3
 8005040:	370c      	adds	r7, #12
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr

0800504a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800504a:	b580      	push	{r7, lr}
 800504c:	b086      	sub	sp, #24
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
 8005052:	460b      	mov	r3, r1
 8005054:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800505e:	2300      	movs	r3, #0
 8005060:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	885b      	ldrh	r3, [r3, #2]
 8005066:	b29b      	uxth	r3, r3
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	7812      	ldrb	r2, [r2, #0]
 800506c:	4293      	cmp	r3, r2
 800506e:	d91f      	bls.n	80050b0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005076:	e013      	b.n	80050a0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005078:	f107 030a 	add.w	r3, r7, #10
 800507c:	4619      	mov	r1, r3
 800507e:	6978      	ldr	r0, [r7, #20]
 8005080:	f000 f81b 	bl	80050ba <USBD_GetNextDesc>
 8005084:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	785b      	ldrb	r3, [r3, #1]
 800508a:	2b05      	cmp	r3, #5
 800508c:	d108      	bne.n	80050a0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	789b      	ldrb	r3, [r3, #2]
 8005096:	78fa      	ldrb	r2, [r7, #3]
 8005098:	429a      	cmp	r2, r3
 800509a:	d008      	beq.n	80050ae <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800509c:	2300      	movs	r3, #0
 800509e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	885b      	ldrh	r3, [r3, #2]
 80050a4:	b29a      	uxth	r2, r3
 80050a6:	897b      	ldrh	r3, [r7, #10]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d8e5      	bhi.n	8005078 <USBD_GetEpDesc+0x2e>
 80050ac:	e000      	b.n	80050b0 <USBD_GetEpDesc+0x66>
          break;
 80050ae:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80050b0:	693b      	ldr	r3, [r7, #16]
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3718      	adds	r7, #24
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80050ba:	b480      	push	{r7}
 80050bc:	b085      	sub	sp, #20
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
 80050c2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	881b      	ldrh	r3, [r3, #0]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	7812      	ldrb	r2, [r2, #0]
 80050d0:	4413      	add	r3, r2
 80050d2:	b29a      	uxth	r2, r3
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	461a      	mov	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4413      	add	r3, r2
 80050e2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80050e4:	68fb      	ldr	r3, [r7, #12]
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3714      	adds	r7, #20
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr

080050f2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80050f2:	b480      	push	{r7}
 80050f4:	b087      	sub	sp, #28
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	3301      	adds	r3, #1
 8005108:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005110:	8a3b      	ldrh	r3, [r7, #16]
 8005112:	021b      	lsls	r3, r3, #8
 8005114:	b21a      	sxth	r2, r3
 8005116:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800511a:	4313      	orrs	r3, r2
 800511c:	b21b      	sxth	r3, r3
 800511e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005120:	89fb      	ldrh	r3, [r7, #14]
}
 8005122:	4618      	mov	r0, r3
 8005124:	371c      	adds	r7, #28
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
	...

08005130 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800513a:	2300      	movs	r3, #0
 800513c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005146:	2b40      	cmp	r3, #64	@ 0x40
 8005148:	d005      	beq.n	8005156 <USBD_StdDevReq+0x26>
 800514a:	2b40      	cmp	r3, #64	@ 0x40
 800514c:	d857      	bhi.n	80051fe <USBD_StdDevReq+0xce>
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00f      	beq.n	8005172 <USBD_StdDevReq+0x42>
 8005152:	2b20      	cmp	r3, #32
 8005154:	d153      	bne.n	80051fe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	32ae      	adds	r2, #174	@ 0xae
 8005160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	6839      	ldr	r1, [r7, #0]
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	4798      	blx	r3
 800516c:	4603      	mov	r3, r0
 800516e:	73fb      	strb	r3, [r7, #15]
      break;
 8005170:	e04a      	b.n	8005208 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	785b      	ldrb	r3, [r3, #1]
 8005176:	2b09      	cmp	r3, #9
 8005178:	d83b      	bhi.n	80051f2 <USBD_StdDevReq+0xc2>
 800517a:	a201      	add	r2, pc, #4	@ (adr r2, 8005180 <USBD_StdDevReq+0x50>)
 800517c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005180:	080051d5 	.word	0x080051d5
 8005184:	080051e9 	.word	0x080051e9
 8005188:	080051f3 	.word	0x080051f3
 800518c:	080051df 	.word	0x080051df
 8005190:	080051f3 	.word	0x080051f3
 8005194:	080051b3 	.word	0x080051b3
 8005198:	080051a9 	.word	0x080051a9
 800519c:	080051f3 	.word	0x080051f3
 80051a0:	080051cb 	.word	0x080051cb
 80051a4:	080051bd 	.word	0x080051bd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80051a8:	6839      	ldr	r1, [r7, #0]
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 fa3c 	bl	8005628 <USBD_GetDescriptor>
          break;
 80051b0:	e024      	b.n	80051fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80051b2:	6839      	ldr	r1, [r7, #0]
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 fba1 	bl	80058fc <USBD_SetAddress>
          break;
 80051ba:	e01f      	b.n	80051fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80051bc:	6839      	ldr	r1, [r7, #0]
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 fbe0 	bl	8005984 <USBD_SetConfig>
 80051c4:	4603      	mov	r3, r0
 80051c6:	73fb      	strb	r3, [r7, #15]
          break;
 80051c8:	e018      	b.n	80051fc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80051ca:	6839      	ldr	r1, [r7, #0]
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f000 fc83 	bl	8005ad8 <USBD_GetConfig>
          break;
 80051d2:	e013      	b.n	80051fc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80051d4:	6839      	ldr	r1, [r7, #0]
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 fcb4 	bl	8005b44 <USBD_GetStatus>
          break;
 80051dc:	e00e      	b.n	80051fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80051de:	6839      	ldr	r1, [r7, #0]
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 fce3 	bl	8005bac <USBD_SetFeature>
          break;
 80051e6:	e009      	b.n	80051fc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80051e8:	6839      	ldr	r1, [r7, #0]
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 fd07 	bl	8005bfe <USBD_ClrFeature>
          break;
 80051f0:	e004      	b.n	80051fc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80051f2:	6839      	ldr	r1, [r7, #0]
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f000 fd5e 	bl	8005cb6 <USBD_CtlError>
          break;
 80051fa:	bf00      	nop
      }
      break;
 80051fc:	e004      	b.n	8005208 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80051fe:	6839      	ldr	r1, [r7, #0]
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 fd58 	bl	8005cb6 <USBD_CtlError>
      break;
 8005206:	bf00      	nop
  }

  return ret;
 8005208:	7bfb      	ldrb	r3, [r7, #15]
}
 800520a:	4618      	mov	r0, r3
 800520c:	3710      	adds	r7, #16
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop

08005214 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800521e:	2300      	movs	r3, #0
 8005220:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800522a:	2b40      	cmp	r3, #64	@ 0x40
 800522c:	d005      	beq.n	800523a <USBD_StdItfReq+0x26>
 800522e:	2b40      	cmp	r3, #64	@ 0x40
 8005230:	d852      	bhi.n	80052d8 <USBD_StdItfReq+0xc4>
 8005232:	2b00      	cmp	r3, #0
 8005234:	d001      	beq.n	800523a <USBD_StdItfReq+0x26>
 8005236:	2b20      	cmp	r3, #32
 8005238:	d14e      	bne.n	80052d8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005240:	b2db      	uxtb	r3, r3
 8005242:	3b01      	subs	r3, #1
 8005244:	2b02      	cmp	r3, #2
 8005246:	d840      	bhi.n	80052ca <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	889b      	ldrh	r3, [r3, #4]
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2b01      	cmp	r3, #1
 8005250:	d836      	bhi.n	80052c0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	889b      	ldrh	r3, [r3, #4]
 8005256:	b2db      	uxtb	r3, r3
 8005258:	4619      	mov	r1, r3
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f7ff fedb 	bl	8005016 <USBD_CoreFindIF>
 8005260:	4603      	mov	r3, r0
 8005262:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005264:	7bbb      	ldrb	r3, [r7, #14]
 8005266:	2bff      	cmp	r3, #255	@ 0xff
 8005268:	d01d      	beq.n	80052a6 <USBD_StdItfReq+0x92>
 800526a:	7bbb      	ldrb	r3, [r7, #14]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d11a      	bne.n	80052a6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005270:	7bba      	ldrb	r2, [r7, #14]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	32ae      	adds	r2, #174	@ 0xae
 8005276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00f      	beq.n	80052a0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005280:	7bba      	ldrb	r2, [r7, #14]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005288:	7bba      	ldrb	r2, [r7, #14]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	32ae      	adds	r2, #174	@ 0xae
 800528e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	6839      	ldr	r1, [r7, #0]
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	4798      	blx	r3
 800529a:	4603      	mov	r3, r0
 800529c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800529e:	e004      	b.n	80052aa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80052a0:	2303      	movs	r3, #3
 80052a2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80052a4:	e001      	b.n	80052aa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80052a6:	2303      	movs	r3, #3
 80052a8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	88db      	ldrh	r3, [r3, #6]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d110      	bne.n	80052d4 <USBD_StdItfReq+0xc0>
 80052b2:	7bfb      	ldrb	r3, [r7, #15]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d10d      	bne.n	80052d4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 fdd3 	bl	8005e64 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80052be:	e009      	b.n	80052d4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80052c0:	6839      	ldr	r1, [r7, #0]
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 fcf7 	bl	8005cb6 <USBD_CtlError>
          break;
 80052c8:	e004      	b.n	80052d4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80052ca:	6839      	ldr	r1, [r7, #0]
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 fcf2 	bl	8005cb6 <USBD_CtlError>
          break;
 80052d2:	e000      	b.n	80052d6 <USBD_StdItfReq+0xc2>
          break;
 80052d4:	bf00      	nop
      }
      break;
 80052d6:	e004      	b.n	80052e2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80052d8:	6839      	ldr	r1, [r7, #0]
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 fceb 	bl	8005cb6 <USBD_CtlError>
      break;
 80052e0:	bf00      	nop
  }

  return ret;
 80052e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3710      	adds	r7, #16
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80052f6:	2300      	movs	r3, #0
 80052f8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	889b      	ldrh	r3, [r3, #4]
 80052fe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005308:	2b40      	cmp	r3, #64	@ 0x40
 800530a:	d007      	beq.n	800531c <USBD_StdEPReq+0x30>
 800530c:	2b40      	cmp	r3, #64	@ 0x40
 800530e:	f200 817f 	bhi.w	8005610 <USBD_StdEPReq+0x324>
 8005312:	2b00      	cmp	r3, #0
 8005314:	d02a      	beq.n	800536c <USBD_StdEPReq+0x80>
 8005316:	2b20      	cmp	r3, #32
 8005318:	f040 817a 	bne.w	8005610 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800531c:	7bbb      	ldrb	r3, [r7, #14]
 800531e:	4619      	mov	r1, r3
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f7ff fe85 	bl	8005030 <USBD_CoreFindEP>
 8005326:	4603      	mov	r3, r0
 8005328:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800532a:	7b7b      	ldrb	r3, [r7, #13]
 800532c:	2bff      	cmp	r3, #255	@ 0xff
 800532e:	f000 8174 	beq.w	800561a <USBD_StdEPReq+0x32e>
 8005332:	7b7b      	ldrb	r3, [r7, #13]
 8005334:	2b00      	cmp	r3, #0
 8005336:	f040 8170 	bne.w	800561a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800533a:	7b7a      	ldrb	r2, [r7, #13]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005342:	7b7a      	ldrb	r2, [r7, #13]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	32ae      	adds	r2, #174	@ 0xae
 8005348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	2b00      	cmp	r3, #0
 8005350:	f000 8163 	beq.w	800561a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005354:	7b7a      	ldrb	r2, [r7, #13]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	32ae      	adds	r2, #174	@ 0xae
 800535a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	6839      	ldr	r1, [r7, #0]
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	4798      	blx	r3
 8005366:	4603      	mov	r3, r0
 8005368:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800536a:	e156      	b.n	800561a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	785b      	ldrb	r3, [r3, #1]
 8005370:	2b03      	cmp	r3, #3
 8005372:	d008      	beq.n	8005386 <USBD_StdEPReq+0x9a>
 8005374:	2b03      	cmp	r3, #3
 8005376:	f300 8145 	bgt.w	8005604 <USBD_StdEPReq+0x318>
 800537a:	2b00      	cmp	r3, #0
 800537c:	f000 809b 	beq.w	80054b6 <USBD_StdEPReq+0x1ca>
 8005380:	2b01      	cmp	r3, #1
 8005382:	d03c      	beq.n	80053fe <USBD_StdEPReq+0x112>
 8005384:	e13e      	b.n	8005604 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800538c:	b2db      	uxtb	r3, r3
 800538e:	2b02      	cmp	r3, #2
 8005390:	d002      	beq.n	8005398 <USBD_StdEPReq+0xac>
 8005392:	2b03      	cmp	r3, #3
 8005394:	d016      	beq.n	80053c4 <USBD_StdEPReq+0xd8>
 8005396:	e02c      	b.n	80053f2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005398:	7bbb      	ldrb	r3, [r7, #14]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00d      	beq.n	80053ba <USBD_StdEPReq+0xce>
 800539e:	7bbb      	ldrb	r3, [r7, #14]
 80053a0:	2b80      	cmp	r3, #128	@ 0x80
 80053a2:	d00a      	beq.n	80053ba <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80053a4:	7bbb      	ldrb	r3, [r7, #14]
 80053a6:	4619      	mov	r1, r3
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f001 f953 	bl	8006654 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80053ae:	2180      	movs	r1, #128	@ 0x80
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f001 f94f 	bl	8006654 <USBD_LL_StallEP>
 80053b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80053b8:	e020      	b.n	80053fc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80053ba:	6839      	ldr	r1, [r7, #0]
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 fc7a 	bl	8005cb6 <USBD_CtlError>
              break;
 80053c2:	e01b      	b.n	80053fc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	885b      	ldrh	r3, [r3, #2]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d10e      	bne.n	80053ea <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80053cc:	7bbb      	ldrb	r3, [r7, #14]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00b      	beq.n	80053ea <USBD_StdEPReq+0xfe>
 80053d2:	7bbb      	ldrb	r3, [r7, #14]
 80053d4:	2b80      	cmp	r3, #128	@ 0x80
 80053d6:	d008      	beq.n	80053ea <USBD_StdEPReq+0xfe>
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	88db      	ldrh	r3, [r3, #6]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d104      	bne.n	80053ea <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80053e0:	7bbb      	ldrb	r3, [r7, #14]
 80053e2:	4619      	mov	r1, r3
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f001 f935 	bl	8006654 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 fd3a 	bl	8005e64 <USBD_CtlSendStatus>

              break;
 80053f0:	e004      	b.n	80053fc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80053f2:	6839      	ldr	r1, [r7, #0]
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 fc5e 	bl	8005cb6 <USBD_CtlError>
              break;
 80053fa:	bf00      	nop
          }
          break;
 80053fc:	e107      	b.n	800560e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005404:	b2db      	uxtb	r3, r3
 8005406:	2b02      	cmp	r3, #2
 8005408:	d002      	beq.n	8005410 <USBD_StdEPReq+0x124>
 800540a:	2b03      	cmp	r3, #3
 800540c:	d016      	beq.n	800543c <USBD_StdEPReq+0x150>
 800540e:	e04b      	b.n	80054a8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005410:	7bbb      	ldrb	r3, [r7, #14]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d00d      	beq.n	8005432 <USBD_StdEPReq+0x146>
 8005416:	7bbb      	ldrb	r3, [r7, #14]
 8005418:	2b80      	cmp	r3, #128	@ 0x80
 800541a:	d00a      	beq.n	8005432 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800541c:	7bbb      	ldrb	r3, [r7, #14]
 800541e:	4619      	mov	r1, r3
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f001 f917 	bl	8006654 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005426:	2180      	movs	r1, #128	@ 0x80
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f001 f913 	bl	8006654 <USBD_LL_StallEP>
 800542e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005430:	e040      	b.n	80054b4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005432:	6839      	ldr	r1, [r7, #0]
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 fc3e 	bl	8005cb6 <USBD_CtlError>
              break;
 800543a:	e03b      	b.n	80054b4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	885b      	ldrh	r3, [r3, #2]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d136      	bne.n	80054b2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005444:	7bbb      	ldrb	r3, [r7, #14]
 8005446:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800544a:	2b00      	cmp	r3, #0
 800544c:	d004      	beq.n	8005458 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800544e:	7bbb      	ldrb	r3, [r7, #14]
 8005450:	4619      	mov	r1, r3
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f001 f91d 	bl	8006692 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 fd03 	bl	8005e64 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800545e:	7bbb      	ldrb	r3, [r7, #14]
 8005460:	4619      	mov	r1, r3
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f7ff fde4 	bl	8005030 <USBD_CoreFindEP>
 8005468:	4603      	mov	r3, r0
 800546a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800546c:	7b7b      	ldrb	r3, [r7, #13]
 800546e:	2bff      	cmp	r3, #255	@ 0xff
 8005470:	d01f      	beq.n	80054b2 <USBD_StdEPReq+0x1c6>
 8005472:	7b7b      	ldrb	r3, [r7, #13]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d11c      	bne.n	80054b2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005478:	7b7a      	ldrb	r2, [r7, #13]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005480:	7b7a      	ldrb	r2, [r7, #13]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	32ae      	adds	r2, #174	@ 0xae
 8005486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d010      	beq.n	80054b2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005490:	7b7a      	ldrb	r2, [r7, #13]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	32ae      	adds	r2, #174	@ 0xae
 8005496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	6839      	ldr	r1, [r7, #0]
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	4798      	blx	r3
 80054a2:	4603      	mov	r3, r0
 80054a4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80054a6:	e004      	b.n	80054b2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80054a8:	6839      	ldr	r1, [r7, #0]
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 fc03 	bl	8005cb6 <USBD_CtlError>
              break;
 80054b0:	e000      	b.n	80054b4 <USBD_StdEPReq+0x1c8>
              break;
 80054b2:	bf00      	nop
          }
          break;
 80054b4:	e0ab      	b.n	800560e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d002      	beq.n	80054c8 <USBD_StdEPReq+0x1dc>
 80054c2:	2b03      	cmp	r3, #3
 80054c4:	d032      	beq.n	800552c <USBD_StdEPReq+0x240>
 80054c6:	e097      	b.n	80055f8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80054c8:	7bbb      	ldrb	r3, [r7, #14]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d007      	beq.n	80054de <USBD_StdEPReq+0x1f2>
 80054ce:	7bbb      	ldrb	r3, [r7, #14]
 80054d0:	2b80      	cmp	r3, #128	@ 0x80
 80054d2:	d004      	beq.n	80054de <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80054d4:	6839      	ldr	r1, [r7, #0]
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 fbed 	bl	8005cb6 <USBD_CtlError>
                break;
 80054dc:	e091      	b.n	8005602 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80054de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	da0b      	bge.n	80054fe <USBD_StdEPReq+0x212>
 80054e6:	7bbb      	ldrb	r3, [r7, #14]
 80054e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80054ec:	4613      	mov	r3, r2
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	4413      	add	r3, r2
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	3310      	adds	r3, #16
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	4413      	add	r3, r2
 80054fa:	3304      	adds	r3, #4
 80054fc:	e00b      	b.n	8005516 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80054fe:	7bbb      	ldrb	r3, [r7, #14]
 8005500:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005504:	4613      	mov	r3, r2
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	4413      	add	r3, r2
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	4413      	add	r3, r2
 8005514:	3304      	adds	r3, #4
 8005516:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	2200      	movs	r2, #0
 800551c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	2202      	movs	r2, #2
 8005522:	4619      	mov	r1, r3
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 fc43 	bl	8005db0 <USBD_CtlSendData>
              break;
 800552a:	e06a      	b.n	8005602 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800552c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005530:	2b00      	cmp	r3, #0
 8005532:	da11      	bge.n	8005558 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005534:	7bbb      	ldrb	r3, [r7, #14]
 8005536:	f003 020f 	and.w	r2, r3, #15
 800553a:	6879      	ldr	r1, [r7, #4]
 800553c:	4613      	mov	r3, r2
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4413      	add	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	440b      	add	r3, r1
 8005546:	3324      	adds	r3, #36	@ 0x24
 8005548:	881b      	ldrh	r3, [r3, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d117      	bne.n	800557e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800554e:	6839      	ldr	r1, [r7, #0]
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 fbb0 	bl	8005cb6 <USBD_CtlError>
                  break;
 8005556:	e054      	b.n	8005602 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005558:	7bbb      	ldrb	r3, [r7, #14]
 800555a:	f003 020f 	and.w	r2, r3, #15
 800555e:	6879      	ldr	r1, [r7, #4]
 8005560:	4613      	mov	r3, r2
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	4413      	add	r3, r2
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	440b      	add	r3, r1
 800556a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800556e:	881b      	ldrh	r3, [r3, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d104      	bne.n	800557e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005574:	6839      	ldr	r1, [r7, #0]
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 fb9d 	bl	8005cb6 <USBD_CtlError>
                  break;
 800557c:	e041      	b.n	8005602 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800557e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005582:	2b00      	cmp	r3, #0
 8005584:	da0b      	bge.n	800559e <USBD_StdEPReq+0x2b2>
 8005586:	7bbb      	ldrb	r3, [r7, #14]
 8005588:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800558c:	4613      	mov	r3, r2
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	4413      	add	r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	3310      	adds	r3, #16
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	4413      	add	r3, r2
 800559a:	3304      	adds	r3, #4
 800559c:	e00b      	b.n	80055b6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800559e:	7bbb      	ldrb	r3, [r7, #14]
 80055a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80055a4:	4613      	mov	r3, r2
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	4413      	add	r3, r2
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	4413      	add	r3, r2
 80055b4:	3304      	adds	r3, #4
 80055b6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80055b8:	7bbb      	ldrb	r3, [r7, #14]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d002      	beq.n	80055c4 <USBD_StdEPReq+0x2d8>
 80055be:	7bbb      	ldrb	r3, [r7, #14]
 80055c0:	2b80      	cmp	r3, #128	@ 0x80
 80055c2:	d103      	bne.n	80055cc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	2200      	movs	r2, #0
 80055c8:	601a      	str	r2, [r3, #0]
 80055ca:	e00e      	b.n	80055ea <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80055cc:	7bbb      	ldrb	r3, [r7, #14]
 80055ce:	4619      	mov	r1, r3
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f001 f87d 	bl	80066d0 <USBD_LL_IsStallEP>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d003      	beq.n	80055e4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	2201      	movs	r2, #1
 80055e0:	601a      	str	r2, [r3, #0]
 80055e2:	e002      	b.n	80055ea <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	2200      	movs	r2, #0
 80055e8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	2202      	movs	r2, #2
 80055ee:	4619      	mov	r1, r3
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 fbdd 	bl	8005db0 <USBD_CtlSendData>
              break;
 80055f6:	e004      	b.n	8005602 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80055f8:	6839      	ldr	r1, [r7, #0]
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 fb5b 	bl	8005cb6 <USBD_CtlError>
              break;
 8005600:	bf00      	nop
          }
          break;
 8005602:	e004      	b.n	800560e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005604:	6839      	ldr	r1, [r7, #0]
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 fb55 	bl	8005cb6 <USBD_CtlError>
          break;
 800560c:	bf00      	nop
      }
      break;
 800560e:	e005      	b.n	800561c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005610:	6839      	ldr	r1, [r7, #0]
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 fb4f 	bl	8005cb6 <USBD_CtlError>
      break;
 8005618:	e000      	b.n	800561c <USBD_StdEPReq+0x330>
      break;
 800561a:	bf00      	nop
  }

  return ret;
 800561c:	7bfb      	ldrb	r3, [r7, #15]
}
 800561e:	4618      	mov	r0, r3
 8005620:	3710      	adds	r7, #16
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
	...

08005628 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005632:	2300      	movs	r3, #0
 8005634:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005636:	2300      	movs	r3, #0
 8005638:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800563a:	2300      	movs	r3, #0
 800563c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	885b      	ldrh	r3, [r3, #2]
 8005642:	0a1b      	lsrs	r3, r3, #8
 8005644:	b29b      	uxth	r3, r3
 8005646:	3b01      	subs	r3, #1
 8005648:	2b06      	cmp	r3, #6
 800564a:	f200 8128 	bhi.w	800589e <USBD_GetDescriptor+0x276>
 800564e:	a201      	add	r2, pc, #4	@ (adr r2, 8005654 <USBD_GetDescriptor+0x2c>)
 8005650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005654:	08005671 	.word	0x08005671
 8005658:	08005689 	.word	0x08005689
 800565c:	080056c9 	.word	0x080056c9
 8005660:	0800589f 	.word	0x0800589f
 8005664:	0800589f 	.word	0x0800589f
 8005668:	0800583f 	.word	0x0800583f
 800566c:	0800586b 	.word	0x0800586b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	7c12      	ldrb	r2, [r2, #16]
 800567c:	f107 0108 	add.w	r1, r7, #8
 8005680:	4610      	mov	r0, r2
 8005682:	4798      	blx	r3
 8005684:	60f8      	str	r0, [r7, #12]
      break;
 8005686:	e112      	b.n	80058ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	7c1b      	ldrb	r3, [r3, #16]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d10d      	bne.n	80056ac <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005698:	f107 0208 	add.w	r2, r7, #8
 800569c:	4610      	mov	r0, r2
 800569e:	4798      	blx	r3
 80056a0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	3301      	adds	r3, #1
 80056a6:	2202      	movs	r2, #2
 80056a8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80056aa:	e100      	b.n	80058ae <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80056b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b4:	f107 0208 	add.w	r2, r7, #8
 80056b8:	4610      	mov	r0, r2
 80056ba:	4798      	blx	r3
 80056bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	3301      	adds	r3, #1
 80056c2:	2202      	movs	r2, #2
 80056c4:	701a      	strb	r2, [r3, #0]
      break;
 80056c6:	e0f2      	b.n	80058ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	885b      	ldrh	r3, [r3, #2]
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	2b05      	cmp	r3, #5
 80056d0:	f200 80ac 	bhi.w	800582c <USBD_GetDescriptor+0x204>
 80056d4:	a201      	add	r2, pc, #4	@ (adr r2, 80056dc <USBD_GetDescriptor+0xb4>)
 80056d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056da:	bf00      	nop
 80056dc:	080056f5 	.word	0x080056f5
 80056e0:	08005729 	.word	0x08005729
 80056e4:	0800575d 	.word	0x0800575d
 80056e8:	08005791 	.word	0x08005791
 80056ec:	080057c5 	.word	0x080057c5
 80056f0:	080057f9 	.word	0x080057f9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00b      	beq.n	8005718 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	7c12      	ldrb	r2, [r2, #16]
 800570c:	f107 0108 	add.w	r1, r7, #8
 8005710:	4610      	mov	r0, r2
 8005712:	4798      	blx	r3
 8005714:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005716:	e091      	b.n	800583c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005718:	6839      	ldr	r1, [r7, #0]
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 facb 	bl	8005cb6 <USBD_CtlError>
            err++;
 8005720:	7afb      	ldrb	r3, [r7, #11]
 8005722:	3301      	adds	r3, #1
 8005724:	72fb      	strb	r3, [r7, #11]
          break;
 8005726:	e089      	b.n	800583c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d00b      	beq.n	800574c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	7c12      	ldrb	r2, [r2, #16]
 8005740:	f107 0108 	add.w	r1, r7, #8
 8005744:	4610      	mov	r0, r2
 8005746:	4798      	blx	r3
 8005748:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800574a:	e077      	b.n	800583c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800574c:	6839      	ldr	r1, [r7, #0]
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 fab1 	bl	8005cb6 <USBD_CtlError>
            err++;
 8005754:	7afb      	ldrb	r3, [r7, #11]
 8005756:	3301      	adds	r3, #1
 8005758:	72fb      	strb	r3, [r7, #11]
          break;
 800575a:	e06f      	b.n	800583c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d00b      	beq.n	8005780 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	7c12      	ldrb	r2, [r2, #16]
 8005774:	f107 0108 	add.w	r1, r7, #8
 8005778:	4610      	mov	r0, r2
 800577a:	4798      	blx	r3
 800577c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800577e:	e05d      	b.n	800583c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005780:	6839      	ldr	r1, [r7, #0]
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 fa97 	bl	8005cb6 <USBD_CtlError>
            err++;
 8005788:	7afb      	ldrb	r3, [r7, #11]
 800578a:	3301      	adds	r3, #1
 800578c:	72fb      	strb	r3, [r7, #11]
          break;
 800578e:	e055      	b.n	800583c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d00b      	beq.n	80057b4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	7c12      	ldrb	r2, [r2, #16]
 80057a8:	f107 0108 	add.w	r1, r7, #8
 80057ac:	4610      	mov	r0, r2
 80057ae:	4798      	blx	r3
 80057b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80057b2:	e043      	b.n	800583c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80057b4:	6839      	ldr	r1, [r7, #0]
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 fa7d 	bl	8005cb6 <USBD_CtlError>
            err++;
 80057bc:	7afb      	ldrb	r3, [r7, #11]
 80057be:	3301      	adds	r3, #1
 80057c0:	72fb      	strb	r3, [r7, #11]
          break;
 80057c2:	e03b      	b.n	800583c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80057ca:	695b      	ldr	r3, [r3, #20]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d00b      	beq.n	80057e8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80057d6:	695b      	ldr	r3, [r3, #20]
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	7c12      	ldrb	r2, [r2, #16]
 80057dc:	f107 0108 	add.w	r1, r7, #8
 80057e0:	4610      	mov	r0, r2
 80057e2:	4798      	blx	r3
 80057e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80057e6:	e029      	b.n	800583c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80057e8:	6839      	ldr	r1, [r7, #0]
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 fa63 	bl	8005cb6 <USBD_CtlError>
            err++;
 80057f0:	7afb      	ldrb	r3, [r7, #11]
 80057f2:	3301      	adds	r3, #1
 80057f4:	72fb      	strb	r3, [r7, #11]
          break;
 80057f6:	e021      	b.n	800583c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d00b      	beq.n	800581c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	7c12      	ldrb	r2, [r2, #16]
 8005810:	f107 0108 	add.w	r1, r7, #8
 8005814:	4610      	mov	r0, r2
 8005816:	4798      	blx	r3
 8005818:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800581a:	e00f      	b.n	800583c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800581c:	6839      	ldr	r1, [r7, #0]
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 fa49 	bl	8005cb6 <USBD_CtlError>
            err++;
 8005824:	7afb      	ldrb	r3, [r7, #11]
 8005826:	3301      	adds	r3, #1
 8005828:	72fb      	strb	r3, [r7, #11]
          break;
 800582a:	e007      	b.n	800583c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800582c:	6839      	ldr	r1, [r7, #0]
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 fa41 	bl	8005cb6 <USBD_CtlError>
          err++;
 8005834:	7afb      	ldrb	r3, [r7, #11]
 8005836:	3301      	adds	r3, #1
 8005838:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800583a:	bf00      	nop
      }
      break;
 800583c:	e037      	b.n	80058ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	7c1b      	ldrb	r3, [r3, #16]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d109      	bne.n	800585a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800584c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800584e:	f107 0208 	add.w	r2, r7, #8
 8005852:	4610      	mov	r0, r2
 8005854:	4798      	blx	r3
 8005856:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005858:	e029      	b.n	80058ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800585a:	6839      	ldr	r1, [r7, #0]
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f000 fa2a 	bl	8005cb6 <USBD_CtlError>
        err++;
 8005862:	7afb      	ldrb	r3, [r7, #11]
 8005864:	3301      	adds	r3, #1
 8005866:	72fb      	strb	r3, [r7, #11]
      break;
 8005868:	e021      	b.n	80058ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	7c1b      	ldrb	r3, [r3, #16]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d10d      	bne.n	800588e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800587a:	f107 0208 	add.w	r2, r7, #8
 800587e:	4610      	mov	r0, r2
 8005880:	4798      	blx	r3
 8005882:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	3301      	adds	r3, #1
 8005888:	2207      	movs	r2, #7
 800588a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800588c:	e00f      	b.n	80058ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800588e:	6839      	ldr	r1, [r7, #0]
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f000 fa10 	bl	8005cb6 <USBD_CtlError>
        err++;
 8005896:	7afb      	ldrb	r3, [r7, #11]
 8005898:	3301      	adds	r3, #1
 800589a:	72fb      	strb	r3, [r7, #11]
      break;
 800589c:	e007      	b.n	80058ae <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800589e:	6839      	ldr	r1, [r7, #0]
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 fa08 	bl	8005cb6 <USBD_CtlError>
      err++;
 80058a6:	7afb      	ldrb	r3, [r7, #11]
 80058a8:	3301      	adds	r3, #1
 80058aa:	72fb      	strb	r3, [r7, #11]
      break;
 80058ac:	bf00      	nop
  }

  if (err != 0U)
 80058ae:	7afb      	ldrb	r3, [r7, #11]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d11e      	bne.n	80058f2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	88db      	ldrh	r3, [r3, #6]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d016      	beq.n	80058ea <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80058bc:	893b      	ldrh	r3, [r7, #8]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00e      	beq.n	80058e0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	88da      	ldrh	r2, [r3, #6]
 80058c6:	893b      	ldrh	r3, [r7, #8]
 80058c8:	4293      	cmp	r3, r2
 80058ca:	bf28      	it	cs
 80058cc:	4613      	movcs	r3, r2
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80058d2:	893b      	ldrh	r3, [r7, #8]
 80058d4:	461a      	mov	r2, r3
 80058d6:	68f9      	ldr	r1, [r7, #12]
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 fa69 	bl	8005db0 <USBD_CtlSendData>
 80058de:	e009      	b.n	80058f4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80058e0:	6839      	ldr	r1, [r7, #0]
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 f9e7 	bl	8005cb6 <USBD_CtlError>
 80058e8:	e004      	b.n	80058f4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 faba 	bl	8005e64 <USBD_CtlSendStatus>
 80058f0:	e000      	b.n	80058f4 <USBD_GetDescriptor+0x2cc>
    return;
 80058f2:	bf00      	nop
  }
}
 80058f4:	3710      	adds	r7, #16
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop

080058fc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	889b      	ldrh	r3, [r3, #4]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d131      	bne.n	8005972 <USBD_SetAddress+0x76>
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	88db      	ldrh	r3, [r3, #6]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d12d      	bne.n	8005972 <USBD_SetAddress+0x76>
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	885b      	ldrh	r3, [r3, #2]
 800591a:	2b7f      	cmp	r3, #127	@ 0x7f
 800591c:	d829      	bhi.n	8005972 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	885b      	ldrh	r3, [r3, #2]
 8005922:	b2db      	uxtb	r3, r3
 8005924:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005928:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b03      	cmp	r3, #3
 8005934:	d104      	bne.n	8005940 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005936:	6839      	ldr	r1, [r7, #0]
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 f9bc 	bl	8005cb6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800593e:	e01d      	b.n	800597c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	7bfa      	ldrb	r2, [r7, #15]
 8005944:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005948:	7bfb      	ldrb	r3, [r7, #15]
 800594a:	4619      	mov	r1, r3
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 feeb 	bl	8006728 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 fa86 	bl	8005e64 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005958:	7bfb      	ldrb	r3, [r7, #15]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d004      	beq.n	8005968 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2202      	movs	r2, #2
 8005962:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005966:	e009      	b.n	800597c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005970:	e004      	b.n	800597c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005972:	6839      	ldr	r1, [r7, #0]
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 f99e 	bl	8005cb6 <USBD_CtlError>
  }
}
 800597a:	bf00      	nop
 800597c:	bf00      	nop
 800597e:	3710      	adds	r7, #16
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800598e:	2300      	movs	r3, #0
 8005990:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	885b      	ldrh	r3, [r3, #2]
 8005996:	b2da      	uxtb	r2, r3
 8005998:	4b4e      	ldr	r3, [pc, #312]	@ (8005ad4 <USBD_SetConfig+0x150>)
 800599a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800599c:	4b4d      	ldr	r3, [pc, #308]	@ (8005ad4 <USBD_SetConfig+0x150>)
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d905      	bls.n	80059b0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80059a4:	6839      	ldr	r1, [r7, #0]
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 f985 	bl	8005cb6 <USBD_CtlError>
    return USBD_FAIL;
 80059ac:	2303      	movs	r3, #3
 80059ae:	e08c      	b.n	8005aca <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d002      	beq.n	80059c2 <USBD_SetConfig+0x3e>
 80059bc:	2b03      	cmp	r3, #3
 80059be:	d029      	beq.n	8005a14 <USBD_SetConfig+0x90>
 80059c0:	e075      	b.n	8005aae <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80059c2:	4b44      	ldr	r3, [pc, #272]	@ (8005ad4 <USBD_SetConfig+0x150>)
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d020      	beq.n	8005a0c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80059ca:	4b42      	ldr	r3, [pc, #264]	@ (8005ad4 <USBD_SetConfig+0x150>)
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	461a      	mov	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80059d4:	4b3f      	ldr	r3, [pc, #252]	@ (8005ad4 <USBD_SetConfig+0x150>)
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	4619      	mov	r1, r3
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f7fe ffe3 	bl	80049a6 <USBD_SetClassConfig>
 80059e0:	4603      	mov	r3, r0
 80059e2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80059e4:	7bfb      	ldrb	r3, [r7, #15]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d008      	beq.n	80059fc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80059ea:	6839      	ldr	r1, [r7, #0]
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 f962 	bl	8005cb6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2202      	movs	r2, #2
 80059f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80059fa:	e065      	b.n	8005ac8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 fa31 	bl	8005e64 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2203      	movs	r2, #3
 8005a06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8005a0a:	e05d      	b.n	8005ac8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 fa29 	bl	8005e64 <USBD_CtlSendStatus>
      break;
 8005a12:	e059      	b.n	8005ac8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005a14:	4b2f      	ldr	r3, [pc, #188]	@ (8005ad4 <USBD_SetConfig+0x150>)
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d112      	bne.n	8005a42 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2202      	movs	r2, #2
 8005a20:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8005a24:	4b2b      	ldr	r3, [pc, #172]	@ (8005ad4 <USBD_SetConfig+0x150>)
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	461a      	mov	r2, r3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005a2e:	4b29      	ldr	r3, [pc, #164]	@ (8005ad4 <USBD_SetConfig+0x150>)
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	4619      	mov	r1, r3
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f7fe ffd2 	bl	80049de <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 fa12 	bl	8005e64 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005a40:	e042      	b.n	8005ac8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8005a42:	4b24      	ldr	r3, [pc, #144]	@ (8005ad4 <USBD_SetConfig+0x150>)
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	461a      	mov	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d02a      	beq.n	8005aa6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	4619      	mov	r1, r3
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f7fe ffc0 	bl	80049de <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005a5e:	4b1d      	ldr	r3, [pc, #116]	@ (8005ad4 <USBD_SetConfig+0x150>)
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	461a      	mov	r2, r3
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005a68:	4b1a      	ldr	r3, [pc, #104]	@ (8005ad4 <USBD_SetConfig+0x150>)
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f7fe ff99 	bl	80049a6 <USBD_SetClassConfig>
 8005a74:	4603      	mov	r3, r0
 8005a76:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005a78:	7bfb      	ldrb	r3, [r7, #15]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00f      	beq.n	8005a9e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8005a7e:	6839      	ldr	r1, [r7, #0]
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 f918 	bl	8005cb6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f7fe ffa5 	bl	80049de <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2202      	movs	r2, #2
 8005a98:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8005a9c:	e014      	b.n	8005ac8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 f9e0 	bl	8005e64 <USBD_CtlSendStatus>
      break;
 8005aa4:	e010      	b.n	8005ac8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 f9dc 	bl	8005e64 <USBD_CtlSendStatus>
      break;
 8005aac:	e00c      	b.n	8005ac8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8005aae:	6839      	ldr	r1, [r7, #0]
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 f900 	bl	8005cb6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005ab6:	4b07      	ldr	r3, [pc, #28]	@ (8005ad4 <USBD_SetConfig+0x150>)
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	4619      	mov	r1, r3
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f7fe ff8e 	bl	80049de <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	73fb      	strb	r3, [r7, #15]
      break;
 8005ac6:	bf00      	nop
  }

  return ret;
 8005ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3710      	adds	r7, #16
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	20000188 	.word	0x20000188

08005ad8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	88db      	ldrh	r3, [r3, #6]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d004      	beq.n	8005af4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005aea:	6839      	ldr	r1, [r7, #0]
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 f8e2 	bl	8005cb6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005af2:	e023      	b.n	8005b3c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	dc02      	bgt.n	8005b06 <USBD_GetConfig+0x2e>
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	dc03      	bgt.n	8005b0c <USBD_GetConfig+0x34>
 8005b04:	e015      	b.n	8005b32 <USBD_GetConfig+0x5a>
 8005b06:	2b03      	cmp	r3, #3
 8005b08:	d00b      	beq.n	8005b22 <USBD_GetConfig+0x4a>
 8005b0a:	e012      	b.n	8005b32 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	3308      	adds	r3, #8
 8005b16:	2201      	movs	r2, #1
 8005b18:	4619      	mov	r1, r3
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 f948 	bl	8005db0 <USBD_CtlSendData>
        break;
 8005b20:	e00c      	b.n	8005b3c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	3304      	adds	r3, #4
 8005b26:	2201      	movs	r2, #1
 8005b28:	4619      	mov	r1, r3
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 f940 	bl	8005db0 <USBD_CtlSendData>
        break;
 8005b30:	e004      	b.n	8005b3c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005b32:	6839      	ldr	r1, [r7, #0]
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 f8be 	bl	8005cb6 <USBD_CtlError>
        break;
 8005b3a:	bf00      	nop
}
 8005b3c:	bf00      	nop
 8005b3e:	3708      	adds	r7, #8
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	3b01      	subs	r3, #1
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d81e      	bhi.n	8005b9a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	88db      	ldrh	r3, [r3, #6]
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d004      	beq.n	8005b6e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005b64:	6839      	ldr	r1, [r7, #0]
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 f8a5 	bl	8005cb6 <USBD_CtlError>
        break;
 8005b6c:	e01a      	b.n	8005ba4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2201      	movs	r2, #1
 8005b72:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d005      	beq.n	8005b8a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	f043 0202 	orr.w	r2, r3, #2
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	330c      	adds	r3, #12
 8005b8e:	2202      	movs	r2, #2
 8005b90:	4619      	mov	r1, r3
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 f90c 	bl	8005db0 <USBD_CtlSendData>
      break;
 8005b98:	e004      	b.n	8005ba4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005b9a:	6839      	ldr	r1, [r7, #0]
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f000 f88a 	bl	8005cb6 <USBD_CtlError>
      break;
 8005ba2:	bf00      	nop
  }
}
 8005ba4:	bf00      	nop
 8005ba6:	3708      	adds	r7, #8
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	885b      	ldrh	r3, [r3, #2]
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d107      	bne.n	8005bce <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 f94c 	bl	8005e64 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8005bcc:	e013      	b.n	8005bf6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	885b      	ldrh	r3, [r3, #2]
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	d10b      	bne.n	8005bee <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	889b      	ldrh	r3, [r3, #4]
 8005bda:	0a1b      	lsrs	r3, r3, #8
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	b2da      	uxtb	r2, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 f93c 	bl	8005e64 <USBD_CtlSendStatus>
}
 8005bec:	e003      	b.n	8005bf6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8005bee:	6839      	ldr	r1, [r7, #0]
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 f860 	bl	8005cb6 <USBD_CtlError>
}
 8005bf6:	bf00      	nop
 8005bf8:	3708      	adds	r7, #8
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b082      	sub	sp, #8
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
 8005c06:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	3b01      	subs	r3, #1
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d80b      	bhi.n	8005c2e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	885b      	ldrh	r3, [r3, #2]
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d10c      	bne.n	8005c38 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 f91c 	bl	8005e64 <USBD_CtlSendStatus>
      }
      break;
 8005c2c:	e004      	b.n	8005c38 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005c2e:	6839      	ldr	r1, [r7, #0]
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 f840 	bl	8005cb6 <USBD_CtlError>
      break;
 8005c36:	e000      	b.n	8005c3a <USBD_ClrFeature+0x3c>
      break;
 8005c38:	bf00      	nop
  }
}
 8005c3a:	bf00      	nop
 8005c3c:	3708      	adds	r7, #8
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}

08005c42 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005c42:	b580      	push	{r7, lr}
 8005c44:	b084      	sub	sp, #16
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
 8005c4a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	781a      	ldrb	r2, [r3, #0]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	781a      	ldrb	r2, [r3, #0]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	3301      	adds	r3, #1
 8005c6a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f7ff fa40 	bl	80050f2 <SWAPBYTE>
 8005c72:	4603      	mov	r3, r0
 8005c74:	461a      	mov	r2, r3
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	3301      	adds	r3, #1
 8005c84:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005c86:	68f8      	ldr	r0, [r7, #12]
 8005c88:	f7ff fa33 	bl	80050f2 <SWAPBYTE>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	461a      	mov	r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	3301      	adds	r3, #1
 8005c98:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005ca0:	68f8      	ldr	r0, [r7, #12]
 8005ca2:	f7ff fa26 	bl	80050f2 <SWAPBYTE>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	461a      	mov	r2, r3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	80da      	strh	r2, [r3, #6]
}
 8005cae:	bf00      	nop
 8005cb0:	3710      	adds	r7, #16
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b082      	sub	sp, #8
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
 8005cbe:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005cc0:	2180      	movs	r1, #128	@ 0x80
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 fcc6 	bl	8006654 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005cc8:	2100      	movs	r1, #0
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 fcc2 	bl	8006654 <USBD_LL_StallEP>
}
 8005cd0:	bf00      	nop
 8005cd2:	3708      	adds	r7, #8
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b086      	sub	sp, #24
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d042      	beq.n	8005d74 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8005cf2:	6938      	ldr	r0, [r7, #16]
 8005cf4:	f000 f842 	bl	8005d7c <USBD_GetLen>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	005b      	lsls	r3, r3, #1
 8005cfe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d02:	d808      	bhi.n	8005d16 <USBD_GetString+0x3e>
 8005d04:	6938      	ldr	r0, [r7, #16]
 8005d06:	f000 f839 	bl	8005d7c <USBD_GetLen>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	005b      	lsls	r3, r3, #1
 8005d12:	b29a      	uxth	r2, r3
 8005d14:	e001      	b.n	8005d1a <USBD_GetString+0x42>
 8005d16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005d1e:	7dfb      	ldrb	r3, [r7, #23]
 8005d20:	68ba      	ldr	r2, [r7, #8]
 8005d22:	4413      	add	r3, r2
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	7812      	ldrb	r2, [r2, #0]
 8005d28:	701a      	strb	r2, [r3, #0]
  idx++;
 8005d2a:	7dfb      	ldrb	r3, [r7, #23]
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005d30:	7dfb      	ldrb	r3, [r7, #23]
 8005d32:	68ba      	ldr	r2, [r7, #8]
 8005d34:	4413      	add	r3, r2
 8005d36:	2203      	movs	r2, #3
 8005d38:	701a      	strb	r2, [r3, #0]
  idx++;
 8005d3a:	7dfb      	ldrb	r3, [r7, #23]
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005d40:	e013      	b.n	8005d6a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8005d42:	7dfb      	ldrb	r3, [r7, #23]
 8005d44:	68ba      	ldr	r2, [r7, #8]
 8005d46:	4413      	add	r3, r2
 8005d48:	693a      	ldr	r2, [r7, #16]
 8005d4a:	7812      	ldrb	r2, [r2, #0]
 8005d4c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	3301      	adds	r3, #1
 8005d52:	613b      	str	r3, [r7, #16]
    idx++;
 8005d54:	7dfb      	ldrb	r3, [r7, #23]
 8005d56:	3301      	adds	r3, #1
 8005d58:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005d5a:	7dfb      	ldrb	r3, [r7, #23]
 8005d5c:	68ba      	ldr	r2, [r7, #8]
 8005d5e:	4413      	add	r3, r2
 8005d60:	2200      	movs	r2, #0
 8005d62:	701a      	strb	r2, [r3, #0]
    idx++;
 8005d64:	7dfb      	ldrb	r3, [r7, #23]
 8005d66:	3301      	adds	r3, #1
 8005d68:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d1e7      	bne.n	8005d42 <USBD_GetString+0x6a>
 8005d72:	e000      	b.n	8005d76 <USBD_GetString+0x9e>
    return;
 8005d74:	bf00      	nop
  }
}
 8005d76:	3718      	adds	r7, #24
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b085      	sub	sp, #20
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005d84:	2300      	movs	r3, #0
 8005d86:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005d8c:	e005      	b.n	8005d9a <USBD_GetLen+0x1e>
  {
    len++;
 8005d8e:	7bfb      	ldrb	r3, [r7, #15]
 8005d90:	3301      	adds	r3, #1
 8005d92:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	3301      	adds	r3, #1
 8005d98:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d1f5      	bne.n	8005d8e <USBD_GetLen+0x12>
  }

  return len;
 8005da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3714      	adds	r7, #20
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2202      	movs	r2, #2
 8005dc0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	68ba      	ldr	r2, [r7, #8]
 8005dd4:	2100      	movs	r1, #0
 8005dd6:	68f8      	ldr	r0, [r7, #12]
 8005dd8:	f000 fcc5 	bl	8006766 <USBD_LL_Transmit>

  return USBD_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b084      	sub	sp, #16
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	60f8      	str	r0, [r7, #12]
 8005dee:	60b9      	str	r1, [r7, #8]
 8005df0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	68ba      	ldr	r2, [r7, #8]
 8005df6:	2100      	movs	r1, #0
 8005df8:	68f8      	ldr	r0, [r7, #12]
 8005dfa:	f000 fcb4 	bl	8006766 <USBD_LL_Transmit>

  return USBD_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3710      	adds	r7, #16
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2203      	movs	r2, #3
 8005e18:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	68ba      	ldr	r2, [r7, #8]
 8005e30:	2100      	movs	r1, #0
 8005e32:	68f8      	ldr	r0, [r7, #12]
 8005e34:	f000 fcb8 	bl	80067a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3710      	adds	r7, #16
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}

08005e42 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005e42:	b580      	push	{r7, lr}
 8005e44:	b084      	sub	sp, #16
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	60f8      	str	r0, [r7, #12]
 8005e4a:	60b9      	str	r1, [r7, #8]
 8005e4c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	68ba      	ldr	r2, [r7, #8]
 8005e52:	2100      	movs	r1, #0
 8005e54:	68f8      	ldr	r0, [r7, #12]
 8005e56:	f000 fca7 	bl	80067a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3710      	adds	r7, #16
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2204      	movs	r2, #4
 8005e70:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005e74:	2300      	movs	r3, #0
 8005e76:	2200      	movs	r2, #0
 8005e78:	2100      	movs	r1, #0
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 fc73 	bl	8006766 <USBD_LL_Transmit>

  return USBD_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3708      	adds	r7, #8
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b082      	sub	sp, #8
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2205      	movs	r2, #5
 8005e96:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	2100      	movs	r1, #0
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f000 fc81 	bl	80067a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3708      	adds	r7, #8
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	4912      	ldr	r1, [pc, #72]	@ (8005f00 <MX_USB_DEVICE_Init+0x50>)
 8005eb8:	4812      	ldr	r0, [pc, #72]	@ (8005f04 <MX_USB_DEVICE_Init+0x54>)
 8005eba:	f7fe fcf7 	bl	80048ac <USBD_Init>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d001      	beq.n	8005ec8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005ec4:	f7fa fe16 	bl	8000af4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005ec8:	490f      	ldr	r1, [pc, #60]	@ (8005f08 <MX_USB_DEVICE_Init+0x58>)
 8005eca:	480e      	ldr	r0, [pc, #56]	@ (8005f04 <MX_USB_DEVICE_Init+0x54>)
 8005ecc:	f7fe fd1e 	bl	800490c <USBD_RegisterClass>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d001      	beq.n	8005eda <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005ed6:	f7fa fe0d 	bl	8000af4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005eda:	490c      	ldr	r1, [pc, #48]	@ (8005f0c <MX_USB_DEVICE_Init+0x5c>)
 8005edc:	4809      	ldr	r0, [pc, #36]	@ (8005f04 <MX_USB_DEVICE_Init+0x54>)
 8005ede:	f7fe fc15 	bl	800470c <USBD_CDC_RegisterInterface>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d001      	beq.n	8005eec <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005ee8:	f7fa fe04 	bl	8000af4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005eec:	4805      	ldr	r0, [pc, #20]	@ (8005f04 <MX_USB_DEVICE_Init+0x54>)
 8005eee:	f7fe fd43 	bl	8004978 <USBD_Start>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d001      	beq.n	8005efc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005ef8:	f7fa fdfc 	bl	8000af4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005efc:	bf00      	nop
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	200000b0 	.word	0x200000b0
 8005f04:	2000018c 	.word	0x2000018c
 8005f08:	2000001c 	.word	0x2000001c
 8005f0c:	2000009c 	.word	0x2000009c

08005f10 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005f14:	2200      	movs	r2, #0
 8005f16:	4905      	ldr	r1, [pc, #20]	@ (8005f2c <CDC_Init_FS+0x1c>)
 8005f18:	4805      	ldr	r0, [pc, #20]	@ (8005f30 <CDC_Init_FS+0x20>)
 8005f1a:	f7fe fc11 	bl	8004740 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005f1e:	4905      	ldr	r1, [pc, #20]	@ (8005f34 <CDC_Init_FS+0x24>)
 8005f20:	4803      	ldr	r0, [pc, #12]	@ (8005f30 <CDC_Init_FS+0x20>)
 8005f22:	f7fe fc2f 	bl	8004784 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8005f26:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	20000c68 	.word	0x20000c68
 8005f30:	2000018c 	.word	0x2000018c
 8005f34:	20000468 	.word	0x20000468

08005f38 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005f3c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	4603      	mov	r3, r0
 8005f50:	6039      	str	r1, [r7, #0]
 8005f52:	71fb      	strb	r3, [r7, #7]
 8005f54:	4613      	mov	r3, r2
 8005f56:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005f58:	79fb      	ldrb	r3, [r7, #7]
 8005f5a:	2b23      	cmp	r3, #35	@ 0x23
 8005f5c:	d84a      	bhi.n	8005ff4 <CDC_Control_FS+0xac>
 8005f5e:	a201      	add	r2, pc, #4	@ (adr r2, 8005f64 <CDC_Control_FS+0x1c>)
 8005f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f64:	08005ff5 	.word	0x08005ff5
 8005f68:	08005ff5 	.word	0x08005ff5
 8005f6c:	08005ff5 	.word	0x08005ff5
 8005f70:	08005ff5 	.word	0x08005ff5
 8005f74:	08005ff5 	.word	0x08005ff5
 8005f78:	08005ff5 	.word	0x08005ff5
 8005f7c:	08005ff5 	.word	0x08005ff5
 8005f80:	08005ff5 	.word	0x08005ff5
 8005f84:	08005ff5 	.word	0x08005ff5
 8005f88:	08005ff5 	.word	0x08005ff5
 8005f8c:	08005ff5 	.word	0x08005ff5
 8005f90:	08005ff5 	.word	0x08005ff5
 8005f94:	08005ff5 	.word	0x08005ff5
 8005f98:	08005ff5 	.word	0x08005ff5
 8005f9c:	08005ff5 	.word	0x08005ff5
 8005fa0:	08005ff5 	.word	0x08005ff5
 8005fa4:	08005ff5 	.word	0x08005ff5
 8005fa8:	08005ff5 	.word	0x08005ff5
 8005fac:	08005ff5 	.word	0x08005ff5
 8005fb0:	08005ff5 	.word	0x08005ff5
 8005fb4:	08005ff5 	.word	0x08005ff5
 8005fb8:	08005ff5 	.word	0x08005ff5
 8005fbc:	08005ff5 	.word	0x08005ff5
 8005fc0:	08005ff5 	.word	0x08005ff5
 8005fc4:	08005ff5 	.word	0x08005ff5
 8005fc8:	08005ff5 	.word	0x08005ff5
 8005fcc:	08005ff5 	.word	0x08005ff5
 8005fd0:	08005ff5 	.word	0x08005ff5
 8005fd4:	08005ff5 	.word	0x08005ff5
 8005fd8:	08005ff5 	.word	0x08005ff5
 8005fdc:	08005ff5 	.word	0x08005ff5
 8005fe0:	08005ff5 	.word	0x08005ff5
 8005fe4:	08005ff5 	.word	0x08005ff5
 8005fe8:	08005ff5 	.word	0x08005ff5
 8005fec:	08005ff5 	.word	0x08005ff5
 8005ff0:	08005ff5 	.word	0x08005ff5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8005ff4:	bf00      	nop
  }

  return (USBD_OK);
 8005ff6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b082      	sub	sp, #8
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800600e:	6879      	ldr	r1, [r7, #4]
 8006010:	4805      	ldr	r0, [pc, #20]	@ (8006028 <CDC_Receive_FS+0x24>)
 8006012:	f7fe fbb7 	bl	8004784 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006016:	4804      	ldr	r0, [pc, #16]	@ (8006028 <CDC_Receive_FS+0x24>)
 8006018:	f7fe fc12 	bl	8004840 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800601c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800601e:	4618      	mov	r0, r3
 8006020:	3708      	adds	r7, #8
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	2000018c 	.word	0x2000018c

0800602c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800602c:	b480      	push	{r7}
 800602e:	b087      	sub	sp, #28
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	4613      	mov	r3, r2
 8006038:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800603a:	2300      	movs	r3, #0
 800603c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800603e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006042:	4618      	mov	r0, r3
 8006044:	371c      	adds	r7, #28
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr
	...

08006050 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	4603      	mov	r3, r0
 8006058:	6039      	str	r1, [r7, #0]
 800605a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	2212      	movs	r2, #18
 8006060:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006062:	4b03      	ldr	r3, [pc, #12]	@ (8006070 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006064:	4618      	mov	r0, r3
 8006066:	370c      	adds	r7, #12
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr
 8006070:	200000cc 	.word	0x200000cc

08006074 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	4603      	mov	r3, r0
 800607c:	6039      	str	r1, [r7, #0]
 800607e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	2204      	movs	r2, #4
 8006084:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006086:	4b03      	ldr	r3, [pc, #12]	@ (8006094 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006088:	4618      	mov	r0, r3
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr
 8006094:	200000e0 	.word	0x200000e0

08006098 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b082      	sub	sp, #8
 800609c:	af00      	add	r7, sp, #0
 800609e:	4603      	mov	r3, r0
 80060a0:	6039      	str	r1, [r7, #0]
 80060a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80060a4:	79fb      	ldrb	r3, [r7, #7]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d105      	bne.n	80060b6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80060aa:	683a      	ldr	r2, [r7, #0]
 80060ac:	4907      	ldr	r1, [pc, #28]	@ (80060cc <USBD_FS_ProductStrDescriptor+0x34>)
 80060ae:	4808      	ldr	r0, [pc, #32]	@ (80060d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80060b0:	f7ff fe12 	bl	8005cd8 <USBD_GetString>
 80060b4:	e004      	b.n	80060c0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80060b6:	683a      	ldr	r2, [r7, #0]
 80060b8:	4904      	ldr	r1, [pc, #16]	@ (80060cc <USBD_FS_ProductStrDescriptor+0x34>)
 80060ba:	4805      	ldr	r0, [pc, #20]	@ (80060d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80060bc:	f7ff fe0c 	bl	8005cd8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80060c0:	4b02      	ldr	r3, [pc, #8]	@ (80060cc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3708      	adds	r7, #8
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	20001468 	.word	0x20001468
 80060d0:	0800722c 	.word	0x0800722c

080060d4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	4603      	mov	r3, r0
 80060dc:	6039      	str	r1, [r7, #0]
 80060de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80060e0:	683a      	ldr	r2, [r7, #0]
 80060e2:	4904      	ldr	r1, [pc, #16]	@ (80060f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80060e4:	4804      	ldr	r0, [pc, #16]	@ (80060f8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80060e6:	f7ff fdf7 	bl	8005cd8 <USBD_GetString>
  return USBD_StrDesc;
 80060ea:	4b02      	ldr	r3, [pc, #8]	@ (80060f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3708      	adds	r7, #8
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	20001468 	.word	0x20001468
 80060f8:	08007244 	.word	0x08007244

080060fc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b082      	sub	sp, #8
 8006100:	af00      	add	r7, sp, #0
 8006102:	4603      	mov	r3, r0
 8006104:	6039      	str	r1, [r7, #0]
 8006106:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	221a      	movs	r2, #26
 800610c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800610e:	f000 f843 	bl	8006198 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006112:	4b02      	ldr	r3, [pc, #8]	@ (800611c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006114:	4618      	mov	r0, r3
 8006116:	3708      	adds	r7, #8
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}
 800611c:	200000e4 	.word	0x200000e4

08006120 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b082      	sub	sp, #8
 8006124:	af00      	add	r7, sp, #0
 8006126:	4603      	mov	r3, r0
 8006128:	6039      	str	r1, [r7, #0]
 800612a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800612c:	79fb      	ldrb	r3, [r7, #7]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d105      	bne.n	800613e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006132:	683a      	ldr	r2, [r7, #0]
 8006134:	4907      	ldr	r1, [pc, #28]	@ (8006154 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006136:	4808      	ldr	r0, [pc, #32]	@ (8006158 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006138:	f7ff fdce 	bl	8005cd8 <USBD_GetString>
 800613c:	e004      	b.n	8006148 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800613e:	683a      	ldr	r2, [r7, #0]
 8006140:	4904      	ldr	r1, [pc, #16]	@ (8006154 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006142:	4805      	ldr	r0, [pc, #20]	@ (8006158 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006144:	f7ff fdc8 	bl	8005cd8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006148:	4b02      	ldr	r3, [pc, #8]	@ (8006154 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800614a:	4618      	mov	r0, r3
 800614c:	3708      	adds	r7, #8
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	20001468 	.word	0x20001468
 8006158:	08007258 	.word	0x08007258

0800615c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
 8006162:	4603      	mov	r3, r0
 8006164:	6039      	str	r1, [r7, #0]
 8006166:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006168:	79fb      	ldrb	r3, [r7, #7]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d105      	bne.n	800617a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800616e:	683a      	ldr	r2, [r7, #0]
 8006170:	4907      	ldr	r1, [pc, #28]	@ (8006190 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006172:	4808      	ldr	r0, [pc, #32]	@ (8006194 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006174:	f7ff fdb0 	bl	8005cd8 <USBD_GetString>
 8006178:	e004      	b.n	8006184 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800617a:	683a      	ldr	r2, [r7, #0]
 800617c:	4904      	ldr	r1, [pc, #16]	@ (8006190 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800617e:	4805      	ldr	r0, [pc, #20]	@ (8006194 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006180:	f7ff fdaa 	bl	8005cd8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006184:	4b02      	ldr	r3, [pc, #8]	@ (8006190 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006186:	4618      	mov	r0, r3
 8006188:	3708      	adds	r7, #8
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	20001468 	.word	0x20001468
 8006194:	08007264 	.word	0x08007264

08006198 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800619e:	4b0f      	ldr	r3, [pc, #60]	@ (80061dc <Get_SerialNum+0x44>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80061a4:	4b0e      	ldr	r3, [pc, #56]	@ (80061e0 <Get_SerialNum+0x48>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80061aa:	4b0e      	ldr	r3, [pc, #56]	@ (80061e4 <Get_SerialNum+0x4c>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4413      	add	r3, r2
 80061b6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d009      	beq.n	80061d2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80061be:	2208      	movs	r2, #8
 80061c0:	4909      	ldr	r1, [pc, #36]	@ (80061e8 <Get_SerialNum+0x50>)
 80061c2:	68f8      	ldr	r0, [r7, #12]
 80061c4:	f000 f814 	bl	80061f0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80061c8:	2204      	movs	r2, #4
 80061ca:	4908      	ldr	r1, [pc, #32]	@ (80061ec <Get_SerialNum+0x54>)
 80061cc:	68b8      	ldr	r0, [r7, #8]
 80061ce:	f000 f80f 	bl	80061f0 <IntToUnicode>
  }
}
 80061d2:	bf00      	nop
 80061d4:	3710      	adds	r7, #16
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	1fff7a10 	.word	0x1fff7a10
 80061e0:	1fff7a14 	.word	0x1fff7a14
 80061e4:	1fff7a18 	.word	0x1fff7a18
 80061e8:	200000e6 	.word	0x200000e6
 80061ec:	200000f6 	.word	0x200000f6

080061f0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b087      	sub	sp, #28
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	4613      	mov	r3, r2
 80061fc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80061fe:	2300      	movs	r3, #0
 8006200:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006202:	2300      	movs	r3, #0
 8006204:	75fb      	strb	r3, [r7, #23]
 8006206:	e027      	b.n	8006258 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	0f1b      	lsrs	r3, r3, #28
 800620c:	2b09      	cmp	r3, #9
 800620e:	d80b      	bhi.n	8006228 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	0f1b      	lsrs	r3, r3, #28
 8006214:	b2da      	uxtb	r2, r3
 8006216:	7dfb      	ldrb	r3, [r7, #23]
 8006218:	005b      	lsls	r3, r3, #1
 800621a:	4619      	mov	r1, r3
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	440b      	add	r3, r1
 8006220:	3230      	adds	r2, #48	@ 0x30
 8006222:	b2d2      	uxtb	r2, r2
 8006224:	701a      	strb	r2, [r3, #0]
 8006226:	e00a      	b.n	800623e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	0f1b      	lsrs	r3, r3, #28
 800622c:	b2da      	uxtb	r2, r3
 800622e:	7dfb      	ldrb	r3, [r7, #23]
 8006230:	005b      	lsls	r3, r3, #1
 8006232:	4619      	mov	r1, r3
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	440b      	add	r3, r1
 8006238:	3237      	adds	r2, #55	@ 0x37
 800623a:	b2d2      	uxtb	r2, r2
 800623c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	011b      	lsls	r3, r3, #4
 8006242:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006244:	7dfb      	ldrb	r3, [r7, #23]
 8006246:	005b      	lsls	r3, r3, #1
 8006248:	3301      	adds	r3, #1
 800624a:	68ba      	ldr	r2, [r7, #8]
 800624c:	4413      	add	r3, r2
 800624e:	2200      	movs	r2, #0
 8006250:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006252:	7dfb      	ldrb	r3, [r7, #23]
 8006254:	3301      	adds	r3, #1
 8006256:	75fb      	strb	r3, [r7, #23]
 8006258:	7dfa      	ldrb	r2, [r7, #23]
 800625a:	79fb      	ldrb	r3, [r7, #7]
 800625c:	429a      	cmp	r2, r3
 800625e:	d3d3      	bcc.n	8006208 <IntToUnicode+0x18>
  }
}
 8006260:	bf00      	nop
 8006262:	bf00      	nop
 8006264:	371c      	adds	r7, #28
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr
	...

08006270 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b08a      	sub	sp, #40	@ 0x28
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006278:	f107 0314 	add.w	r3, r7, #20
 800627c:	2200      	movs	r2, #0
 800627e:	601a      	str	r2, [r3, #0]
 8006280:	605a      	str	r2, [r3, #4]
 8006282:	609a      	str	r2, [r3, #8]
 8006284:	60da      	str	r2, [r3, #12]
 8006286:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006290:	d13a      	bne.n	8006308 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006292:	2300      	movs	r3, #0
 8006294:	613b      	str	r3, [r7, #16]
 8006296:	4b1e      	ldr	r3, [pc, #120]	@ (8006310 <HAL_PCD_MspInit+0xa0>)
 8006298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800629a:	4a1d      	ldr	r2, [pc, #116]	@ (8006310 <HAL_PCD_MspInit+0xa0>)
 800629c:	f043 0301 	orr.w	r3, r3, #1
 80062a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80062a2:	4b1b      	ldr	r3, [pc, #108]	@ (8006310 <HAL_PCD_MspInit+0xa0>)
 80062a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062a6:	f003 0301 	and.w	r3, r3, #1
 80062aa:	613b      	str	r3, [r7, #16]
 80062ac:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80062ae:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80062b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062b4:	2302      	movs	r3, #2
 80062b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062b8:	2300      	movs	r3, #0
 80062ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062bc:	2303      	movs	r3, #3
 80062be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80062c0:	230a      	movs	r3, #10
 80062c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062c4:	f107 0314 	add.w	r3, r7, #20
 80062c8:	4619      	mov	r1, r3
 80062ca:	4812      	ldr	r0, [pc, #72]	@ (8006314 <HAL_PCD_MspInit+0xa4>)
 80062cc:	f7fa fedc 	bl	8001088 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80062d0:	4b0f      	ldr	r3, [pc, #60]	@ (8006310 <HAL_PCD_MspInit+0xa0>)
 80062d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062d4:	4a0e      	ldr	r2, [pc, #56]	@ (8006310 <HAL_PCD_MspInit+0xa0>)
 80062d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062da:	6353      	str	r3, [r2, #52]	@ 0x34
 80062dc:	2300      	movs	r3, #0
 80062de:	60fb      	str	r3, [r7, #12]
 80062e0:	4b0b      	ldr	r3, [pc, #44]	@ (8006310 <HAL_PCD_MspInit+0xa0>)
 80062e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062e4:	4a0a      	ldr	r2, [pc, #40]	@ (8006310 <HAL_PCD_MspInit+0xa0>)
 80062e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80062ea:	6453      	str	r3, [r2, #68]	@ 0x44
 80062ec:	4b08      	ldr	r3, [pc, #32]	@ (8006310 <HAL_PCD_MspInit+0xa0>)
 80062ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80062f4:	60fb      	str	r3, [r7, #12]
 80062f6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80062f8:	2200      	movs	r2, #0
 80062fa:	2100      	movs	r1, #0
 80062fc:	2043      	movs	r0, #67	@ 0x43
 80062fe:	f7fa fe8c 	bl	800101a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006302:	2043      	movs	r0, #67	@ 0x43
 8006304:	f7fa fea5 	bl	8001052 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006308:	bf00      	nop
 800630a:	3728      	adds	r7, #40	@ 0x28
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	40023800 	.word	0x40023800
 8006314:	40020000 	.word	0x40020000

08006318 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800632c:	4619      	mov	r1, r3
 800632e:	4610      	mov	r0, r2
 8006330:	f7fe fb6f 	bl	8004a12 <USBD_LL_SetupStage>
}
 8006334:	bf00      	nop
 8006336:	3708      	adds	r7, #8
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b082      	sub	sp, #8
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	460b      	mov	r3, r1
 8006346:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800634e:	78fa      	ldrb	r2, [r7, #3]
 8006350:	6879      	ldr	r1, [r7, #4]
 8006352:	4613      	mov	r3, r2
 8006354:	00db      	lsls	r3, r3, #3
 8006356:	4413      	add	r3, r2
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	440b      	add	r3, r1
 800635c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	78fb      	ldrb	r3, [r7, #3]
 8006364:	4619      	mov	r1, r3
 8006366:	f7fe fba9 	bl	8004abc <USBD_LL_DataOutStage>
}
 800636a:	bf00      	nop
 800636c:	3708      	adds	r7, #8
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}

08006372 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006372:	b580      	push	{r7, lr}
 8006374:	b082      	sub	sp, #8
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
 800637a:	460b      	mov	r3, r1
 800637c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8006384:	78fa      	ldrb	r2, [r7, #3]
 8006386:	6879      	ldr	r1, [r7, #4]
 8006388:	4613      	mov	r3, r2
 800638a:	00db      	lsls	r3, r3, #3
 800638c:	4413      	add	r3, r2
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	440b      	add	r3, r1
 8006392:	3320      	adds	r3, #32
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	78fb      	ldrb	r3, [r7, #3]
 8006398:	4619      	mov	r1, r3
 800639a:	f7fe fc42 	bl	8004c22 <USBD_LL_DataInStage>
}
 800639e:	bf00      	nop
 80063a0:	3708      	adds	r7, #8
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}

080063a6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063a6:	b580      	push	{r7, lr}
 80063a8:	b082      	sub	sp, #8
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80063b4:	4618      	mov	r0, r3
 80063b6:	f7fe fd7c 	bl	8004eb2 <USBD_LL_SOF>
}
 80063ba:	bf00      	nop
 80063bc:	3708      	adds	r7, #8
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}

080063c2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b084      	sub	sp, #16
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80063ca:	2301      	movs	r3, #1
 80063cc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	79db      	ldrb	r3, [r3, #7]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d102      	bne.n	80063dc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80063d6:	2300      	movs	r3, #0
 80063d8:	73fb      	strb	r3, [r7, #15]
 80063da:	e008      	b.n	80063ee <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	79db      	ldrb	r3, [r3, #7]
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	d102      	bne.n	80063ea <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80063e4:	2301      	movs	r3, #1
 80063e6:	73fb      	strb	r3, [r7, #15]
 80063e8:	e001      	b.n	80063ee <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80063ea:	f7fa fb83 	bl	8000af4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80063f4:	7bfa      	ldrb	r2, [r7, #15]
 80063f6:	4611      	mov	r1, r2
 80063f8:	4618      	mov	r0, r3
 80063fa:	f7fe fd16 	bl	8004e2a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006404:	4618      	mov	r0, r3
 8006406:	f7fe fcbe 	bl	8004d86 <USBD_LL_Reset>
}
 800640a:	bf00      	nop
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
	...

08006414 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b082      	sub	sp, #8
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006422:	4618      	mov	r0, r3
 8006424:	f7fe fd11 	bl	8004e4a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	6812      	ldr	r2, [r2, #0]
 8006436:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800643a:	f043 0301 	orr.w	r3, r3, #1
 800643e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	7adb      	ldrb	r3, [r3, #11]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d005      	beq.n	8006454 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006448:	4b04      	ldr	r3, [pc, #16]	@ (800645c <HAL_PCD_SuspendCallback+0x48>)
 800644a:	691b      	ldr	r3, [r3, #16]
 800644c:	4a03      	ldr	r2, [pc, #12]	@ (800645c <HAL_PCD_SuspendCallback+0x48>)
 800644e:	f043 0306 	orr.w	r3, r3, #6
 8006452:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006454:	bf00      	nop
 8006456:	3708      	adds	r7, #8
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	e000ed00 	.word	0xe000ed00

08006460 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800646e:	4618      	mov	r0, r3
 8006470:	f7fe fd07 	bl	8004e82 <USBD_LL_Resume>
}
 8006474:	bf00      	nop
 8006476:	3708      	adds	r7, #8
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b082      	sub	sp, #8
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	460b      	mov	r3, r1
 8006486:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800648e:	78fa      	ldrb	r2, [r7, #3]
 8006490:	4611      	mov	r1, r2
 8006492:	4618      	mov	r0, r3
 8006494:	f7fe fd5f 	bl	8004f56 <USBD_LL_IsoOUTIncomplete>
}
 8006498:	bf00      	nop
 800649a:	3708      	adds	r7, #8
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	460b      	mov	r3, r1
 80064aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80064b2:	78fa      	ldrb	r2, [r7, #3]
 80064b4:	4611      	mov	r1, r2
 80064b6:	4618      	mov	r0, r3
 80064b8:	f7fe fd1b 	bl	8004ef2 <USBD_LL_IsoINIncomplete>
}
 80064bc:	bf00      	nop
 80064be:	3708      	adds	r7, #8
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b082      	sub	sp, #8
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80064d2:	4618      	mov	r0, r3
 80064d4:	f7fe fd71 	bl	8004fba <USBD_LL_DevConnected>
}
 80064d8:	bf00      	nop
 80064da:	3708      	adds	r7, #8
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b082      	sub	sp, #8
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80064ee:	4618      	mov	r0, r3
 80064f0:	f7fe fd6e 	bl	8004fd0 <USBD_LL_DevDisconnected>
}
 80064f4:	bf00      	nop
 80064f6:	3708      	adds	r7, #8
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b082      	sub	sp, #8
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d13c      	bne.n	8006586 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800650c:	4a20      	ldr	r2, [pc, #128]	@ (8006590 <USBD_LL_Init+0x94>)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a1e      	ldr	r2, [pc, #120]	@ (8006590 <USBD_LL_Init+0x94>)
 8006518:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800651c:	4b1c      	ldr	r3, [pc, #112]	@ (8006590 <USBD_LL_Init+0x94>)
 800651e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8006522:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006524:	4b1a      	ldr	r3, [pc, #104]	@ (8006590 <USBD_LL_Init+0x94>)
 8006526:	2204      	movs	r2, #4
 8006528:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800652a:	4b19      	ldr	r3, [pc, #100]	@ (8006590 <USBD_LL_Init+0x94>)
 800652c:	2202      	movs	r2, #2
 800652e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006530:	4b17      	ldr	r3, [pc, #92]	@ (8006590 <USBD_LL_Init+0x94>)
 8006532:	2200      	movs	r2, #0
 8006534:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006536:	4b16      	ldr	r3, [pc, #88]	@ (8006590 <USBD_LL_Init+0x94>)
 8006538:	2202      	movs	r2, #2
 800653a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800653c:	4b14      	ldr	r3, [pc, #80]	@ (8006590 <USBD_LL_Init+0x94>)
 800653e:	2200      	movs	r2, #0
 8006540:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006542:	4b13      	ldr	r3, [pc, #76]	@ (8006590 <USBD_LL_Init+0x94>)
 8006544:	2200      	movs	r2, #0
 8006546:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006548:	4b11      	ldr	r3, [pc, #68]	@ (8006590 <USBD_LL_Init+0x94>)
 800654a:	2200      	movs	r2, #0
 800654c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800654e:	4b10      	ldr	r3, [pc, #64]	@ (8006590 <USBD_LL_Init+0x94>)
 8006550:	2200      	movs	r2, #0
 8006552:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006554:	4b0e      	ldr	r3, [pc, #56]	@ (8006590 <USBD_LL_Init+0x94>)
 8006556:	2200      	movs	r2, #0
 8006558:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800655a:	480d      	ldr	r0, [pc, #52]	@ (8006590 <USBD_LL_Init+0x94>)
 800655c:	f7fa ff30 	bl	80013c0 <HAL_PCD_Init>
 8006560:	4603      	mov	r3, r0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d001      	beq.n	800656a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006566:	f7fa fac5 	bl	8000af4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800656a:	2180      	movs	r1, #128	@ 0x80
 800656c:	4808      	ldr	r0, [pc, #32]	@ (8006590 <USBD_LL_Init+0x94>)
 800656e:	f7fc f95c 	bl	800282a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006572:	2240      	movs	r2, #64	@ 0x40
 8006574:	2100      	movs	r1, #0
 8006576:	4806      	ldr	r0, [pc, #24]	@ (8006590 <USBD_LL_Init+0x94>)
 8006578:	f7fc f910 	bl	800279c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800657c:	2280      	movs	r2, #128	@ 0x80
 800657e:	2101      	movs	r1, #1
 8006580:	4803      	ldr	r0, [pc, #12]	@ (8006590 <USBD_LL_Init+0x94>)
 8006582:	f7fc f90b 	bl	800279c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006586:	2300      	movs	r3, #0
}
 8006588:	4618      	mov	r0, r3
 800658a:	3708      	adds	r7, #8
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}
 8006590:	20001668 	.word	0x20001668

08006594 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800659c:	2300      	movs	r3, #0
 800659e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80065a0:	2300      	movs	r3, #0
 80065a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80065aa:	4618      	mov	r0, r3
 80065ac:	f7fb f817 	bl	80015de <HAL_PCD_Start>
 80065b0:	4603      	mov	r3, r0
 80065b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80065b4:	7bfb      	ldrb	r3, [r7, #15]
 80065b6:	4618      	mov	r0, r3
 80065b8:	f000 f942 	bl	8006840 <USBD_Get_USB_Status>
 80065bc:	4603      	mov	r3, r0
 80065be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80065c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3710      	adds	r7, #16
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}

080065ca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b084      	sub	sp, #16
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
 80065d2:	4608      	mov	r0, r1
 80065d4:	4611      	mov	r1, r2
 80065d6:	461a      	mov	r2, r3
 80065d8:	4603      	mov	r3, r0
 80065da:	70fb      	strb	r3, [r7, #3]
 80065dc:	460b      	mov	r3, r1
 80065de:	70bb      	strb	r3, [r7, #2]
 80065e0:	4613      	mov	r3, r2
 80065e2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80065e4:	2300      	movs	r3, #0
 80065e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80065e8:	2300      	movs	r3, #0
 80065ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80065f2:	78bb      	ldrb	r3, [r7, #2]
 80065f4:	883a      	ldrh	r2, [r7, #0]
 80065f6:	78f9      	ldrb	r1, [r7, #3]
 80065f8:	f7fb fceb 	bl	8001fd2 <HAL_PCD_EP_Open>
 80065fc:	4603      	mov	r3, r0
 80065fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006600:	7bfb      	ldrb	r3, [r7, #15]
 8006602:	4618      	mov	r0, r3
 8006604:	f000 f91c 	bl	8006840 <USBD_Get_USB_Status>
 8006608:	4603      	mov	r3, r0
 800660a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800660c:	7bbb      	ldrb	r3, [r7, #14]
}
 800660e:	4618      	mov	r0, r3
 8006610:	3710      	adds	r7, #16
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006616:	b580      	push	{r7, lr}
 8006618:	b084      	sub	sp, #16
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
 800661e:	460b      	mov	r3, r1
 8006620:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006622:	2300      	movs	r3, #0
 8006624:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006626:	2300      	movs	r3, #0
 8006628:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006630:	78fa      	ldrb	r2, [r7, #3]
 8006632:	4611      	mov	r1, r2
 8006634:	4618      	mov	r0, r3
 8006636:	f7fb fd36 	bl	80020a6 <HAL_PCD_EP_Close>
 800663a:	4603      	mov	r3, r0
 800663c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800663e:	7bfb      	ldrb	r3, [r7, #15]
 8006640:	4618      	mov	r0, r3
 8006642:	f000 f8fd 	bl	8006840 <USBD_Get_USB_Status>
 8006646:	4603      	mov	r3, r0
 8006648:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800664a:	7bbb      	ldrb	r3, [r7, #14]
}
 800664c:	4618      	mov	r0, r3
 800664e:	3710      	adds	r7, #16
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	460b      	mov	r3, r1
 800665e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006660:	2300      	movs	r3, #0
 8006662:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006664:	2300      	movs	r3, #0
 8006666:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800666e:	78fa      	ldrb	r2, [r7, #3]
 8006670:	4611      	mov	r1, r2
 8006672:	4618      	mov	r0, r3
 8006674:	f7fb fdee 	bl	8002254 <HAL_PCD_EP_SetStall>
 8006678:	4603      	mov	r3, r0
 800667a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800667c:	7bfb      	ldrb	r3, [r7, #15]
 800667e:	4618      	mov	r0, r3
 8006680:	f000 f8de 	bl	8006840 <USBD_Get_USB_Status>
 8006684:	4603      	mov	r3, r0
 8006686:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006688:	7bbb      	ldrb	r3, [r7, #14]
}
 800668a:	4618      	mov	r0, r3
 800668c:	3710      	adds	r7, #16
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}

08006692 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006692:	b580      	push	{r7, lr}
 8006694:	b084      	sub	sp, #16
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
 800669a:	460b      	mov	r3, r1
 800669c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800669e:	2300      	movs	r3, #0
 80066a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80066a2:	2300      	movs	r3, #0
 80066a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80066ac:	78fa      	ldrb	r2, [r7, #3]
 80066ae:	4611      	mov	r1, r2
 80066b0:	4618      	mov	r0, r3
 80066b2:	f7fb fe32 	bl	800231a <HAL_PCD_EP_ClrStall>
 80066b6:	4603      	mov	r3, r0
 80066b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80066ba:	7bfb      	ldrb	r3, [r7, #15]
 80066bc:	4618      	mov	r0, r3
 80066be:	f000 f8bf 	bl	8006840 <USBD_Get_USB_Status>
 80066c2:	4603      	mov	r3, r0
 80066c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80066c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3710      	adds	r7, #16
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	460b      	mov	r3, r1
 80066da:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80066e2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80066e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	da0b      	bge.n	8006704 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80066ec:	78fb      	ldrb	r3, [r7, #3]
 80066ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80066f2:	68f9      	ldr	r1, [r7, #12]
 80066f4:	4613      	mov	r3, r2
 80066f6:	00db      	lsls	r3, r3, #3
 80066f8:	4413      	add	r3, r2
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	440b      	add	r3, r1
 80066fe:	3316      	adds	r3, #22
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	e00b      	b.n	800671c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006704:	78fb      	ldrb	r3, [r7, #3]
 8006706:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800670a:	68f9      	ldr	r1, [r7, #12]
 800670c:	4613      	mov	r3, r2
 800670e:	00db      	lsls	r3, r3, #3
 8006710:	4413      	add	r3, r2
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	440b      	add	r3, r1
 8006716:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800671a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800671c:	4618      	mov	r0, r3
 800671e:	3714      	adds	r7, #20
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	460b      	mov	r3, r1
 8006732:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006734:	2300      	movs	r3, #0
 8006736:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006738:	2300      	movs	r3, #0
 800673a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006742:	78fa      	ldrb	r2, [r7, #3]
 8006744:	4611      	mov	r1, r2
 8006746:	4618      	mov	r0, r3
 8006748:	f7fb fc1f 	bl	8001f8a <HAL_PCD_SetAddress>
 800674c:	4603      	mov	r3, r0
 800674e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006750:	7bfb      	ldrb	r3, [r7, #15]
 8006752:	4618      	mov	r0, r3
 8006754:	f000 f874 	bl	8006840 <USBD_Get_USB_Status>
 8006758:	4603      	mov	r3, r0
 800675a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800675c:	7bbb      	ldrb	r3, [r7, #14]
}
 800675e:	4618      	mov	r0, r3
 8006760:	3710      	adds	r7, #16
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}

08006766 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006766:	b580      	push	{r7, lr}
 8006768:	b086      	sub	sp, #24
 800676a:	af00      	add	r7, sp, #0
 800676c:	60f8      	str	r0, [r7, #12]
 800676e:	607a      	str	r2, [r7, #4]
 8006770:	603b      	str	r3, [r7, #0]
 8006772:	460b      	mov	r3, r1
 8006774:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006776:	2300      	movs	r3, #0
 8006778:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800677a:	2300      	movs	r3, #0
 800677c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006784:	7af9      	ldrb	r1, [r7, #11]
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	f7fb fd29 	bl	80021e0 <HAL_PCD_EP_Transmit>
 800678e:	4603      	mov	r3, r0
 8006790:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006792:	7dfb      	ldrb	r3, [r7, #23]
 8006794:	4618      	mov	r0, r3
 8006796:	f000 f853 	bl	8006840 <USBD_Get_USB_Status>
 800679a:	4603      	mov	r3, r0
 800679c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800679e:	7dbb      	ldrb	r3, [r7, #22]
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3718      	adds	r7, #24
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b086      	sub	sp, #24
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	607a      	str	r2, [r7, #4]
 80067b2:	603b      	str	r3, [r7, #0]
 80067b4:	460b      	mov	r3, r1
 80067b6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80067b8:	2300      	movs	r3, #0
 80067ba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80067bc:	2300      	movs	r3, #0
 80067be:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80067c6:	7af9      	ldrb	r1, [r7, #11]
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	f7fb fcb5 	bl	800213a <HAL_PCD_EP_Receive>
 80067d0:	4603      	mov	r3, r0
 80067d2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80067d4:	7dfb      	ldrb	r3, [r7, #23]
 80067d6:	4618      	mov	r0, r3
 80067d8:	f000 f832 	bl	8006840 <USBD_Get_USB_Status>
 80067dc:	4603      	mov	r3, r0
 80067de:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80067e0:	7dbb      	ldrb	r3, [r7, #22]
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3718      	adds	r7, #24
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}

080067ea <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80067ea:	b580      	push	{r7, lr}
 80067ec:	b082      	sub	sp, #8
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
 80067f2:	460b      	mov	r3, r1
 80067f4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80067fc:	78fa      	ldrb	r2, [r7, #3]
 80067fe:	4611      	mov	r1, r2
 8006800:	4618      	mov	r0, r3
 8006802:	f7fb fcd5 	bl	80021b0 <HAL_PCD_EP_GetRxCount>
 8006806:	4603      	mov	r3, r0
}
 8006808:	4618      	mov	r0, r3
 800680a:	3708      	adds	r7, #8
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006818:	4b03      	ldr	r3, [pc, #12]	@ (8006828 <USBD_static_malloc+0x18>)
}
 800681a:	4618      	mov	r0, r3
 800681c:	370c      	adds	r7, #12
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop
 8006828:	20001b4c 	.word	0x20001b4c

0800682c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]

}
 8006834:	bf00      	nop
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	4603      	mov	r3, r0
 8006848:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800684a:	2300      	movs	r3, #0
 800684c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800684e:	79fb      	ldrb	r3, [r7, #7]
 8006850:	2b03      	cmp	r3, #3
 8006852:	d817      	bhi.n	8006884 <USBD_Get_USB_Status+0x44>
 8006854:	a201      	add	r2, pc, #4	@ (adr r2, 800685c <USBD_Get_USB_Status+0x1c>)
 8006856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800685a:	bf00      	nop
 800685c:	0800686d 	.word	0x0800686d
 8006860:	08006873 	.word	0x08006873
 8006864:	08006879 	.word	0x08006879
 8006868:	0800687f 	.word	0x0800687f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800686c:	2300      	movs	r3, #0
 800686e:	73fb      	strb	r3, [r7, #15]
    break;
 8006870:	e00b      	b.n	800688a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006872:	2303      	movs	r3, #3
 8006874:	73fb      	strb	r3, [r7, #15]
    break;
 8006876:	e008      	b.n	800688a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006878:	2301      	movs	r3, #1
 800687a:	73fb      	strb	r3, [r7, #15]
    break;
 800687c:	e005      	b.n	800688a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800687e:	2303      	movs	r3, #3
 8006880:	73fb      	strb	r3, [r7, #15]
    break;
 8006882:	e002      	b.n	800688a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006884:	2303      	movs	r3, #3
 8006886:	73fb      	strb	r3, [r7, #15]
    break;
 8006888:	bf00      	nop
  }
  return usb_status;
 800688a:	7bfb      	ldrb	r3, [r7, #15]
}
 800688c:	4618      	mov	r0, r3
 800688e:	3714      	adds	r7, #20
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <std>:
 8006898:	2300      	movs	r3, #0
 800689a:	b510      	push	{r4, lr}
 800689c:	4604      	mov	r4, r0
 800689e:	e9c0 3300 	strd	r3, r3, [r0]
 80068a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80068a6:	6083      	str	r3, [r0, #8]
 80068a8:	8181      	strh	r1, [r0, #12]
 80068aa:	6643      	str	r3, [r0, #100]	@ 0x64
 80068ac:	81c2      	strh	r2, [r0, #14]
 80068ae:	6183      	str	r3, [r0, #24]
 80068b0:	4619      	mov	r1, r3
 80068b2:	2208      	movs	r2, #8
 80068b4:	305c      	adds	r0, #92	@ 0x5c
 80068b6:	f000 f9e7 	bl	8006c88 <memset>
 80068ba:	4b0d      	ldr	r3, [pc, #52]	@ (80068f0 <std+0x58>)
 80068bc:	6263      	str	r3, [r4, #36]	@ 0x24
 80068be:	4b0d      	ldr	r3, [pc, #52]	@ (80068f4 <std+0x5c>)
 80068c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80068c2:	4b0d      	ldr	r3, [pc, #52]	@ (80068f8 <std+0x60>)
 80068c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80068c6:	4b0d      	ldr	r3, [pc, #52]	@ (80068fc <std+0x64>)
 80068c8:	6323      	str	r3, [r4, #48]	@ 0x30
 80068ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006900 <std+0x68>)
 80068cc:	6224      	str	r4, [r4, #32]
 80068ce:	429c      	cmp	r4, r3
 80068d0:	d006      	beq.n	80068e0 <std+0x48>
 80068d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80068d6:	4294      	cmp	r4, r2
 80068d8:	d002      	beq.n	80068e0 <std+0x48>
 80068da:	33d0      	adds	r3, #208	@ 0xd0
 80068dc:	429c      	cmp	r4, r3
 80068de:	d105      	bne.n	80068ec <std+0x54>
 80068e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80068e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068e8:	f000 ba46 	b.w	8006d78 <__retarget_lock_init_recursive>
 80068ec:	bd10      	pop	{r4, pc}
 80068ee:	bf00      	nop
 80068f0:	08006ad9 	.word	0x08006ad9
 80068f4:	08006afb 	.word	0x08006afb
 80068f8:	08006b33 	.word	0x08006b33
 80068fc:	08006b57 	.word	0x08006b57
 8006900:	20001d6c 	.word	0x20001d6c

08006904 <stdio_exit_handler>:
 8006904:	4a02      	ldr	r2, [pc, #8]	@ (8006910 <stdio_exit_handler+0xc>)
 8006906:	4903      	ldr	r1, [pc, #12]	@ (8006914 <stdio_exit_handler+0x10>)
 8006908:	4803      	ldr	r0, [pc, #12]	@ (8006918 <stdio_exit_handler+0x14>)
 800690a:	f000 b869 	b.w	80069e0 <_fwalk_sglue>
 800690e:	bf00      	nop
 8006910:	20000100 	.word	0x20000100
 8006914:	08007079 	.word	0x08007079
 8006918:	20000110 	.word	0x20000110

0800691c <cleanup_stdio>:
 800691c:	6841      	ldr	r1, [r0, #4]
 800691e:	4b0c      	ldr	r3, [pc, #48]	@ (8006950 <cleanup_stdio+0x34>)
 8006920:	4299      	cmp	r1, r3
 8006922:	b510      	push	{r4, lr}
 8006924:	4604      	mov	r4, r0
 8006926:	d001      	beq.n	800692c <cleanup_stdio+0x10>
 8006928:	f000 fba6 	bl	8007078 <_fflush_r>
 800692c:	68a1      	ldr	r1, [r4, #8]
 800692e:	4b09      	ldr	r3, [pc, #36]	@ (8006954 <cleanup_stdio+0x38>)
 8006930:	4299      	cmp	r1, r3
 8006932:	d002      	beq.n	800693a <cleanup_stdio+0x1e>
 8006934:	4620      	mov	r0, r4
 8006936:	f000 fb9f 	bl	8007078 <_fflush_r>
 800693a:	68e1      	ldr	r1, [r4, #12]
 800693c:	4b06      	ldr	r3, [pc, #24]	@ (8006958 <cleanup_stdio+0x3c>)
 800693e:	4299      	cmp	r1, r3
 8006940:	d004      	beq.n	800694c <cleanup_stdio+0x30>
 8006942:	4620      	mov	r0, r4
 8006944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006948:	f000 bb96 	b.w	8007078 <_fflush_r>
 800694c:	bd10      	pop	{r4, pc}
 800694e:	bf00      	nop
 8006950:	20001d6c 	.word	0x20001d6c
 8006954:	20001dd4 	.word	0x20001dd4
 8006958:	20001e3c 	.word	0x20001e3c

0800695c <global_stdio_init.part.0>:
 800695c:	b510      	push	{r4, lr}
 800695e:	4b0b      	ldr	r3, [pc, #44]	@ (800698c <global_stdio_init.part.0+0x30>)
 8006960:	4c0b      	ldr	r4, [pc, #44]	@ (8006990 <global_stdio_init.part.0+0x34>)
 8006962:	4a0c      	ldr	r2, [pc, #48]	@ (8006994 <global_stdio_init.part.0+0x38>)
 8006964:	601a      	str	r2, [r3, #0]
 8006966:	4620      	mov	r0, r4
 8006968:	2200      	movs	r2, #0
 800696a:	2104      	movs	r1, #4
 800696c:	f7ff ff94 	bl	8006898 <std>
 8006970:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006974:	2201      	movs	r2, #1
 8006976:	2109      	movs	r1, #9
 8006978:	f7ff ff8e 	bl	8006898 <std>
 800697c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006980:	2202      	movs	r2, #2
 8006982:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006986:	2112      	movs	r1, #18
 8006988:	f7ff bf86 	b.w	8006898 <std>
 800698c:	20001ea4 	.word	0x20001ea4
 8006990:	20001d6c 	.word	0x20001d6c
 8006994:	08006905 	.word	0x08006905

08006998 <__sfp_lock_acquire>:
 8006998:	4801      	ldr	r0, [pc, #4]	@ (80069a0 <__sfp_lock_acquire+0x8>)
 800699a:	f000 b9ee 	b.w	8006d7a <__retarget_lock_acquire_recursive>
 800699e:	bf00      	nop
 80069a0:	20001ead 	.word	0x20001ead

080069a4 <__sfp_lock_release>:
 80069a4:	4801      	ldr	r0, [pc, #4]	@ (80069ac <__sfp_lock_release+0x8>)
 80069a6:	f000 b9e9 	b.w	8006d7c <__retarget_lock_release_recursive>
 80069aa:	bf00      	nop
 80069ac:	20001ead 	.word	0x20001ead

080069b0 <__sinit>:
 80069b0:	b510      	push	{r4, lr}
 80069b2:	4604      	mov	r4, r0
 80069b4:	f7ff fff0 	bl	8006998 <__sfp_lock_acquire>
 80069b8:	6a23      	ldr	r3, [r4, #32]
 80069ba:	b11b      	cbz	r3, 80069c4 <__sinit+0x14>
 80069bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069c0:	f7ff bff0 	b.w	80069a4 <__sfp_lock_release>
 80069c4:	4b04      	ldr	r3, [pc, #16]	@ (80069d8 <__sinit+0x28>)
 80069c6:	6223      	str	r3, [r4, #32]
 80069c8:	4b04      	ldr	r3, [pc, #16]	@ (80069dc <__sinit+0x2c>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d1f5      	bne.n	80069bc <__sinit+0xc>
 80069d0:	f7ff ffc4 	bl	800695c <global_stdio_init.part.0>
 80069d4:	e7f2      	b.n	80069bc <__sinit+0xc>
 80069d6:	bf00      	nop
 80069d8:	0800691d 	.word	0x0800691d
 80069dc:	20001ea4 	.word	0x20001ea4

080069e0 <_fwalk_sglue>:
 80069e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069e4:	4607      	mov	r7, r0
 80069e6:	4688      	mov	r8, r1
 80069e8:	4614      	mov	r4, r2
 80069ea:	2600      	movs	r6, #0
 80069ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80069f0:	f1b9 0901 	subs.w	r9, r9, #1
 80069f4:	d505      	bpl.n	8006a02 <_fwalk_sglue+0x22>
 80069f6:	6824      	ldr	r4, [r4, #0]
 80069f8:	2c00      	cmp	r4, #0
 80069fa:	d1f7      	bne.n	80069ec <_fwalk_sglue+0xc>
 80069fc:	4630      	mov	r0, r6
 80069fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a02:	89ab      	ldrh	r3, [r5, #12]
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d907      	bls.n	8006a18 <_fwalk_sglue+0x38>
 8006a08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	d003      	beq.n	8006a18 <_fwalk_sglue+0x38>
 8006a10:	4629      	mov	r1, r5
 8006a12:	4638      	mov	r0, r7
 8006a14:	47c0      	blx	r8
 8006a16:	4306      	orrs	r6, r0
 8006a18:	3568      	adds	r5, #104	@ 0x68
 8006a1a:	e7e9      	b.n	80069f0 <_fwalk_sglue+0x10>

08006a1c <_puts_r>:
 8006a1c:	6a03      	ldr	r3, [r0, #32]
 8006a1e:	b570      	push	{r4, r5, r6, lr}
 8006a20:	6884      	ldr	r4, [r0, #8]
 8006a22:	4605      	mov	r5, r0
 8006a24:	460e      	mov	r6, r1
 8006a26:	b90b      	cbnz	r3, 8006a2c <_puts_r+0x10>
 8006a28:	f7ff ffc2 	bl	80069b0 <__sinit>
 8006a2c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006a2e:	07db      	lsls	r3, r3, #31
 8006a30:	d405      	bmi.n	8006a3e <_puts_r+0x22>
 8006a32:	89a3      	ldrh	r3, [r4, #12]
 8006a34:	0598      	lsls	r0, r3, #22
 8006a36:	d402      	bmi.n	8006a3e <_puts_r+0x22>
 8006a38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a3a:	f000 f99e 	bl	8006d7a <__retarget_lock_acquire_recursive>
 8006a3e:	89a3      	ldrh	r3, [r4, #12]
 8006a40:	0719      	lsls	r1, r3, #28
 8006a42:	d502      	bpl.n	8006a4a <_puts_r+0x2e>
 8006a44:	6923      	ldr	r3, [r4, #16]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d135      	bne.n	8006ab6 <_puts_r+0x9a>
 8006a4a:	4621      	mov	r1, r4
 8006a4c:	4628      	mov	r0, r5
 8006a4e:	f000 f8c5 	bl	8006bdc <__swsetup_r>
 8006a52:	b380      	cbz	r0, 8006ab6 <_puts_r+0x9a>
 8006a54:	f04f 35ff 	mov.w	r5, #4294967295
 8006a58:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006a5a:	07da      	lsls	r2, r3, #31
 8006a5c:	d405      	bmi.n	8006a6a <_puts_r+0x4e>
 8006a5e:	89a3      	ldrh	r3, [r4, #12]
 8006a60:	059b      	lsls	r3, r3, #22
 8006a62:	d402      	bmi.n	8006a6a <_puts_r+0x4e>
 8006a64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a66:	f000 f989 	bl	8006d7c <__retarget_lock_release_recursive>
 8006a6a:	4628      	mov	r0, r5
 8006a6c:	bd70      	pop	{r4, r5, r6, pc}
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	da04      	bge.n	8006a7c <_puts_r+0x60>
 8006a72:	69a2      	ldr	r2, [r4, #24]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	dc17      	bgt.n	8006aa8 <_puts_r+0x8c>
 8006a78:	290a      	cmp	r1, #10
 8006a7a:	d015      	beq.n	8006aa8 <_puts_r+0x8c>
 8006a7c:	6823      	ldr	r3, [r4, #0]
 8006a7e:	1c5a      	adds	r2, r3, #1
 8006a80:	6022      	str	r2, [r4, #0]
 8006a82:	7019      	strb	r1, [r3, #0]
 8006a84:	68a3      	ldr	r3, [r4, #8]
 8006a86:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	60a3      	str	r3, [r4, #8]
 8006a8e:	2900      	cmp	r1, #0
 8006a90:	d1ed      	bne.n	8006a6e <_puts_r+0x52>
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	da11      	bge.n	8006aba <_puts_r+0x9e>
 8006a96:	4622      	mov	r2, r4
 8006a98:	210a      	movs	r1, #10
 8006a9a:	4628      	mov	r0, r5
 8006a9c:	f000 f85f 	bl	8006b5e <__swbuf_r>
 8006aa0:	3001      	adds	r0, #1
 8006aa2:	d0d7      	beq.n	8006a54 <_puts_r+0x38>
 8006aa4:	250a      	movs	r5, #10
 8006aa6:	e7d7      	b.n	8006a58 <_puts_r+0x3c>
 8006aa8:	4622      	mov	r2, r4
 8006aaa:	4628      	mov	r0, r5
 8006aac:	f000 f857 	bl	8006b5e <__swbuf_r>
 8006ab0:	3001      	adds	r0, #1
 8006ab2:	d1e7      	bne.n	8006a84 <_puts_r+0x68>
 8006ab4:	e7ce      	b.n	8006a54 <_puts_r+0x38>
 8006ab6:	3e01      	subs	r6, #1
 8006ab8:	e7e4      	b.n	8006a84 <_puts_r+0x68>
 8006aba:	6823      	ldr	r3, [r4, #0]
 8006abc:	1c5a      	adds	r2, r3, #1
 8006abe:	6022      	str	r2, [r4, #0]
 8006ac0:	220a      	movs	r2, #10
 8006ac2:	701a      	strb	r2, [r3, #0]
 8006ac4:	e7ee      	b.n	8006aa4 <_puts_r+0x88>
	...

08006ac8 <puts>:
 8006ac8:	4b02      	ldr	r3, [pc, #8]	@ (8006ad4 <puts+0xc>)
 8006aca:	4601      	mov	r1, r0
 8006acc:	6818      	ldr	r0, [r3, #0]
 8006ace:	f7ff bfa5 	b.w	8006a1c <_puts_r>
 8006ad2:	bf00      	nop
 8006ad4:	2000010c 	.word	0x2000010c

08006ad8 <__sread>:
 8006ad8:	b510      	push	{r4, lr}
 8006ada:	460c      	mov	r4, r1
 8006adc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ae0:	f000 f8fc 	bl	8006cdc <_read_r>
 8006ae4:	2800      	cmp	r0, #0
 8006ae6:	bfab      	itete	ge
 8006ae8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006aea:	89a3      	ldrhlt	r3, [r4, #12]
 8006aec:	181b      	addge	r3, r3, r0
 8006aee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006af2:	bfac      	ite	ge
 8006af4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006af6:	81a3      	strhlt	r3, [r4, #12]
 8006af8:	bd10      	pop	{r4, pc}

08006afa <__swrite>:
 8006afa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006afe:	461f      	mov	r7, r3
 8006b00:	898b      	ldrh	r3, [r1, #12]
 8006b02:	05db      	lsls	r3, r3, #23
 8006b04:	4605      	mov	r5, r0
 8006b06:	460c      	mov	r4, r1
 8006b08:	4616      	mov	r6, r2
 8006b0a:	d505      	bpl.n	8006b18 <__swrite+0x1e>
 8006b0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b10:	2302      	movs	r3, #2
 8006b12:	2200      	movs	r2, #0
 8006b14:	f000 f8d0 	bl	8006cb8 <_lseek_r>
 8006b18:	89a3      	ldrh	r3, [r4, #12]
 8006b1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b1e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006b22:	81a3      	strh	r3, [r4, #12]
 8006b24:	4632      	mov	r2, r6
 8006b26:	463b      	mov	r3, r7
 8006b28:	4628      	mov	r0, r5
 8006b2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b2e:	f000 b8e7 	b.w	8006d00 <_write_r>

08006b32 <__sseek>:
 8006b32:	b510      	push	{r4, lr}
 8006b34:	460c      	mov	r4, r1
 8006b36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b3a:	f000 f8bd 	bl	8006cb8 <_lseek_r>
 8006b3e:	1c43      	adds	r3, r0, #1
 8006b40:	89a3      	ldrh	r3, [r4, #12]
 8006b42:	bf15      	itete	ne
 8006b44:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006b46:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006b4a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006b4e:	81a3      	strheq	r3, [r4, #12]
 8006b50:	bf18      	it	ne
 8006b52:	81a3      	strhne	r3, [r4, #12]
 8006b54:	bd10      	pop	{r4, pc}

08006b56 <__sclose>:
 8006b56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b5a:	f000 b89d 	b.w	8006c98 <_close_r>

08006b5e <__swbuf_r>:
 8006b5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b60:	460e      	mov	r6, r1
 8006b62:	4614      	mov	r4, r2
 8006b64:	4605      	mov	r5, r0
 8006b66:	b118      	cbz	r0, 8006b70 <__swbuf_r+0x12>
 8006b68:	6a03      	ldr	r3, [r0, #32]
 8006b6a:	b90b      	cbnz	r3, 8006b70 <__swbuf_r+0x12>
 8006b6c:	f7ff ff20 	bl	80069b0 <__sinit>
 8006b70:	69a3      	ldr	r3, [r4, #24]
 8006b72:	60a3      	str	r3, [r4, #8]
 8006b74:	89a3      	ldrh	r3, [r4, #12]
 8006b76:	071a      	lsls	r2, r3, #28
 8006b78:	d501      	bpl.n	8006b7e <__swbuf_r+0x20>
 8006b7a:	6923      	ldr	r3, [r4, #16]
 8006b7c:	b943      	cbnz	r3, 8006b90 <__swbuf_r+0x32>
 8006b7e:	4621      	mov	r1, r4
 8006b80:	4628      	mov	r0, r5
 8006b82:	f000 f82b 	bl	8006bdc <__swsetup_r>
 8006b86:	b118      	cbz	r0, 8006b90 <__swbuf_r+0x32>
 8006b88:	f04f 37ff 	mov.w	r7, #4294967295
 8006b8c:	4638      	mov	r0, r7
 8006b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b90:	6823      	ldr	r3, [r4, #0]
 8006b92:	6922      	ldr	r2, [r4, #16]
 8006b94:	1a98      	subs	r0, r3, r2
 8006b96:	6963      	ldr	r3, [r4, #20]
 8006b98:	b2f6      	uxtb	r6, r6
 8006b9a:	4283      	cmp	r3, r0
 8006b9c:	4637      	mov	r7, r6
 8006b9e:	dc05      	bgt.n	8006bac <__swbuf_r+0x4e>
 8006ba0:	4621      	mov	r1, r4
 8006ba2:	4628      	mov	r0, r5
 8006ba4:	f000 fa68 	bl	8007078 <_fflush_r>
 8006ba8:	2800      	cmp	r0, #0
 8006baa:	d1ed      	bne.n	8006b88 <__swbuf_r+0x2a>
 8006bac:	68a3      	ldr	r3, [r4, #8]
 8006bae:	3b01      	subs	r3, #1
 8006bb0:	60a3      	str	r3, [r4, #8]
 8006bb2:	6823      	ldr	r3, [r4, #0]
 8006bb4:	1c5a      	adds	r2, r3, #1
 8006bb6:	6022      	str	r2, [r4, #0]
 8006bb8:	701e      	strb	r6, [r3, #0]
 8006bba:	6962      	ldr	r2, [r4, #20]
 8006bbc:	1c43      	adds	r3, r0, #1
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d004      	beq.n	8006bcc <__swbuf_r+0x6e>
 8006bc2:	89a3      	ldrh	r3, [r4, #12]
 8006bc4:	07db      	lsls	r3, r3, #31
 8006bc6:	d5e1      	bpl.n	8006b8c <__swbuf_r+0x2e>
 8006bc8:	2e0a      	cmp	r6, #10
 8006bca:	d1df      	bne.n	8006b8c <__swbuf_r+0x2e>
 8006bcc:	4621      	mov	r1, r4
 8006bce:	4628      	mov	r0, r5
 8006bd0:	f000 fa52 	bl	8007078 <_fflush_r>
 8006bd4:	2800      	cmp	r0, #0
 8006bd6:	d0d9      	beq.n	8006b8c <__swbuf_r+0x2e>
 8006bd8:	e7d6      	b.n	8006b88 <__swbuf_r+0x2a>
	...

08006bdc <__swsetup_r>:
 8006bdc:	b538      	push	{r3, r4, r5, lr}
 8006bde:	4b29      	ldr	r3, [pc, #164]	@ (8006c84 <__swsetup_r+0xa8>)
 8006be0:	4605      	mov	r5, r0
 8006be2:	6818      	ldr	r0, [r3, #0]
 8006be4:	460c      	mov	r4, r1
 8006be6:	b118      	cbz	r0, 8006bf0 <__swsetup_r+0x14>
 8006be8:	6a03      	ldr	r3, [r0, #32]
 8006bea:	b90b      	cbnz	r3, 8006bf0 <__swsetup_r+0x14>
 8006bec:	f7ff fee0 	bl	80069b0 <__sinit>
 8006bf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bf4:	0719      	lsls	r1, r3, #28
 8006bf6:	d422      	bmi.n	8006c3e <__swsetup_r+0x62>
 8006bf8:	06da      	lsls	r2, r3, #27
 8006bfa:	d407      	bmi.n	8006c0c <__swsetup_r+0x30>
 8006bfc:	2209      	movs	r2, #9
 8006bfe:	602a      	str	r2, [r5, #0]
 8006c00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c04:	81a3      	strh	r3, [r4, #12]
 8006c06:	f04f 30ff 	mov.w	r0, #4294967295
 8006c0a:	e033      	b.n	8006c74 <__swsetup_r+0x98>
 8006c0c:	0758      	lsls	r0, r3, #29
 8006c0e:	d512      	bpl.n	8006c36 <__swsetup_r+0x5a>
 8006c10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006c12:	b141      	cbz	r1, 8006c26 <__swsetup_r+0x4a>
 8006c14:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006c18:	4299      	cmp	r1, r3
 8006c1a:	d002      	beq.n	8006c22 <__swsetup_r+0x46>
 8006c1c:	4628      	mov	r0, r5
 8006c1e:	f000 f8af 	bl	8006d80 <_free_r>
 8006c22:	2300      	movs	r3, #0
 8006c24:	6363      	str	r3, [r4, #52]	@ 0x34
 8006c26:	89a3      	ldrh	r3, [r4, #12]
 8006c28:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006c2c:	81a3      	strh	r3, [r4, #12]
 8006c2e:	2300      	movs	r3, #0
 8006c30:	6063      	str	r3, [r4, #4]
 8006c32:	6923      	ldr	r3, [r4, #16]
 8006c34:	6023      	str	r3, [r4, #0]
 8006c36:	89a3      	ldrh	r3, [r4, #12]
 8006c38:	f043 0308 	orr.w	r3, r3, #8
 8006c3c:	81a3      	strh	r3, [r4, #12]
 8006c3e:	6923      	ldr	r3, [r4, #16]
 8006c40:	b94b      	cbnz	r3, 8006c56 <__swsetup_r+0x7a>
 8006c42:	89a3      	ldrh	r3, [r4, #12]
 8006c44:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006c48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c4c:	d003      	beq.n	8006c56 <__swsetup_r+0x7a>
 8006c4e:	4621      	mov	r1, r4
 8006c50:	4628      	mov	r0, r5
 8006c52:	f000 fa5f 	bl	8007114 <__smakebuf_r>
 8006c56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c5a:	f013 0201 	ands.w	r2, r3, #1
 8006c5e:	d00a      	beq.n	8006c76 <__swsetup_r+0x9a>
 8006c60:	2200      	movs	r2, #0
 8006c62:	60a2      	str	r2, [r4, #8]
 8006c64:	6962      	ldr	r2, [r4, #20]
 8006c66:	4252      	negs	r2, r2
 8006c68:	61a2      	str	r2, [r4, #24]
 8006c6a:	6922      	ldr	r2, [r4, #16]
 8006c6c:	b942      	cbnz	r2, 8006c80 <__swsetup_r+0xa4>
 8006c6e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006c72:	d1c5      	bne.n	8006c00 <__swsetup_r+0x24>
 8006c74:	bd38      	pop	{r3, r4, r5, pc}
 8006c76:	0799      	lsls	r1, r3, #30
 8006c78:	bf58      	it	pl
 8006c7a:	6962      	ldrpl	r2, [r4, #20]
 8006c7c:	60a2      	str	r2, [r4, #8]
 8006c7e:	e7f4      	b.n	8006c6a <__swsetup_r+0x8e>
 8006c80:	2000      	movs	r0, #0
 8006c82:	e7f7      	b.n	8006c74 <__swsetup_r+0x98>
 8006c84:	2000010c 	.word	0x2000010c

08006c88 <memset>:
 8006c88:	4402      	add	r2, r0
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d100      	bne.n	8006c92 <memset+0xa>
 8006c90:	4770      	bx	lr
 8006c92:	f803 1b01 	strb.w	r1, [r3], #1
 8006c96:	e7f9      	b.n	8006c8c <memset+0x4>

08006c98 <_close_r>:
 8006c98:	b538      	push	{r3, r4, r5, lr}
 8006c9a:	4d06      	ldr	r5, [pc, #24]	@ (8006cb4 <_close_r+0x1c>)
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	4604      	mov	r4, r0
 8006ca0:	4608      	mov	r0, r1
 8006ca2:	602b      	str	r3, [r5, #0]
 8006ca4:	f7f9 ffa1 	bl	8000bea <_close>
 8006ca8:	1c43      	adds	r3, r0, #1
 8006caa:	d102      	bne.n	8006cb2 <_close_r+0x1a>
 8006cac:	682b      	ldr	r3, [r5, #0]
 8006cae:	b103      	cbz	r3, 8006cb2 <_close_r+0x1a>
 8006cb0:	6023      	str	r3, [r4, #0]
 8006cb2:	bd38      	pop	{r3, r4, r5, pc}
 8006cb4:	20001ea8 	.word	0x20001ea8

08006cb8 <_lseek_r>:
 8006cb8:	b538      	push	{r3, r4, r5, lr}
 8006cba:	4d07      	ldr	r5, [pc, #28]	@ (8006cd8 <_lseek_r+0x20>)
 8006cbc:	4604      	mov	r4, r0
 8006cbe:	4608      	mov	r0, r1
 8006cc0:	4611      	mov	r1, r2
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	602a      	str	r2, [r5, #0]
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	f7f9 ffb6 	bl	8000c38 <_lseek>
 8006ccc:	1c43      	adds	r3, r0, #1
 8006cce:	d102      	bne.n	8006cd6 <_lseek_r+0x1e>
 8006cd0:	682b      	ldr	r3, [r5, #0]
 8006cd2:	b103      	cbz	r3, 8006cd6 <_lseek_r+0x1e>
 8006cd4:	6023      	str	r3, [r4, #0]
 8006cd6:	bd38      	pop	{r3, r4, r5, pc}
 8006cd8:	20001ea8 	.word	0x20001ea8

08006cdc <_read_r>:
 8006cdc:	b538      	push	{r3, r4, r5, lr}
 8006cde:	4d07      	ldr	r5, [pc, #28]	@ (8006cfc <_read_r+0x20>)
 8006ce0:	4604      	mov	r4, r0
 8006ce2:	4608      	mov	r0, r1
 8006ce4:	4611      	mov	r1, r2
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	602a      	str	r2, [r5, #0]
 8006cea:	461a      	mov	r2, r3
 8006cec:	f7f9 ff44 	bl	8000b78 <_read>
 8006cf0:	1c43      	adds	r3, r0, #1
 8006cf2:	d102      	bne.n	8006cfa <_read_r+0x1e>
 8006cf4:	682b      	ldr	r3, [r5, #0]
 8006cf6:	b103      	cbz	r3, 8006cfa <_read_r+0x1e>
 8006cf8:	6023      	str	r3, [r4, #0]
 8006cfa:	bd38      	pop	{r3, r4, r5, pc}
 8006cfc:	20001ea8 	.word	0x20001ea8

08006d00 <_write_r>:
 8006d00:	b538      	push	{r3, r4, r5, lr}
 8006d02:	4d07      	ldr	r5, [pc, #28]	@ (8006d20 <_write_r+0x20>)
 8006d04:	4604      	mov	r4, r0
 8006d06:	4608      	mov	r0, r1
 8006d08:	4611      	mov	r1, r2
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	602a      	str	r2, [r5, #0]
 8006d0e:	461a      	mov	r2, r3
 8006d10:	f7f9 ff4f 	bl	8000bb2 <_write>
 8006d14:	1c43      	adds	r3, r0, #1
 8006d16:	d102      	bne.n	8006d1e <_write_r+0x1e>
 8006d18:	682b      	ldr	r3, [r5, #0]
 8006d1a:	b103      	cbz	r3, 8006d1e <_write_r+0x1e>
 8006d1c:	6023      	str	r3, [r4, #0]
 8006d1e:	bd38      	pop	{r3, r4, r5, pc}
 8006d20:	20001ea8 	.word	0x20001ea8

08006d24 <__errno>:
 8006d24:	4b01      	ldr	r3, [pc, #4]	@ (8006d2c <__errno+0x8>)
 8006d26:	6818      	ldr	r0, [r3, #0]
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop
 8006d2c:	2000010c 	.word	0x2000010c

08006d30 <__libc_init_array>:
 8006d30:	b570      	push	{r4, r5, r6, lr}
 8006d32:	4d0d      	ldr	r5, [pc, #52]	@ (8006d68 <__libc_init_array+0x38>)
 8006d34:	4c0d      	ldr	r4, [pc, #52]	@ (8006d6c <__libc_init_array+0x3c>)
 8006d36:	1b64      	subs	r4, r4, r5
 8006d38:	10a4      	asrs	r4, r4, #2
 8006d3a:	2600      	movs	r6, #0
 8006d3c:	42a6      	cmp	r6, r4
 8006d3e:	d109      	bne.n	8006d54 <__libc_init_array+0x24>
 8006d40:	4d0b      	ldr	r5, [pc, #44]	@ (8006d70 <__libc_init_array+0x40>)
 8006d42:	4c0c      	ldr	r4, [pc, #48]	@ (8006d74 <__libc_init_array+0x44>)
 8006d44:	f000 fa54 	bl	80071f0 <_init>
 8006d48:	1b64      	subs	r4, r4, r5
 8006d4a:	10a4      	asrs	r4, r4, #2
 8006d4c:	2600      	movs	r6, #0
 8006d4e:	42a6      	cmp	r6, r4
 8006d50:	d105      	bne.n	8006d5e <__libc_init_array+0x2e>
 8006d52:	bd70      	pop	{r4, r5, r6, pc}
 8006d54:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d58:	4798      	blx	r3
 8006d5a:	3601      	adds	r6, #1
 8006d5c:	e7ee      	b.n	8006d3c <__libc_init_array+0xc>
 8006d5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d62:	4798      	blx	r3
 8006d64:	3601      	adds	r6, #1
 8006d66:	e7f2      	b.n	8006d4e <__libc_init_array+0x1e>
 8006d68:	08007284 	.word	0x08007284
 8006d6c:	08007284 	.word	0x08007284
 8006d70:	08007284 	.word	0x08007284
 8006d74:	08007288 	.word	0x08007288

08006d78 <__retarget_lock_init_recursive>:
 8006d78:	4770      	bx	lr

08006d7a <__retarget_lock_acquire_recursive>:
 8006d7a:	4770      	bx	lr

08006d7c <__retarget_lock_release_recursive>:
 8006d7c:	4770      	bx	lr
	...

08006d80 <_free_r>:
 8006d80:	b538      	push	{r3, r4, r5, lr}
 8006d82:	4605      	mov	r5, r0
 8006d84:	2900      	cmp	r1, #0
 8006d86:	d041      	beq.n	8006e0c <_free_r+0x8c>
 8006d88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d8c:	1f0c      	subs	r4, r1, #4
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	bfb8      	it	lt
 8006d92:	18e4      	addlt	r4, r4, r3
 8006d94:	f000 f8e0 	bl	8006f58 <__malloc_lock>
 8006d98:	4a1d      	ldr	r2, [pc, #116]	@ (8006e10 <_free_r+0x90>)
 8006d9a:	6813      	ldr	r3, [r2, #0]
 8006d9c:	b933      	cbnz	r3, 8006dac <_free_r+0x2c>
 8006d9e:	6063      	str	r3, [r4, #4]
 8006da0:	6014      	str	r4, [r2, #0]
 8006da2:	4628      	mov	r0, r5
 8006da4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006da8:	f000 b8dc 	b.w	8006f64 <__malloc_unlock>
 8006dac:	42a3      	cmp	r3, r4
 8006dae:	d908      	bls.n	8006dc2 <_free_r+0x42>
 8006db0:	6820      	ldr	r0, [r4, #0]
 8006db2:	1821      	adds	r1, r4, r0
 8006db4:	428b      	cmp	r3, r1
 8006db6:	bf01      	itttt	eq
 8006db8:	6819      	ldreq	r1, [r3, #0]
 8006dba:	685b      	ldreq	r3, [r3, #4]
 8006dbc:	1809      	addeq	r1, r1, r0
 8006dbe:	6021      	streq	r1, [r4, #0]
 8006dc0:	e7ed      	b.n	8006d9e <_free_r+0x1e>
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	b10b      	cbz	r3, 8006dcc <_free_r+0x4c>
 8006dc8:	42a3      	cmp	r3, r4
 8006dca:	d9fa      	bls.n	8006dc2 <_free_r+0x42>
 8006dcc:	6811      	ldr	r1, [r2, #0]
 8006dce:	1850      	adds	r0, r2, r1
 8006dd0:	42a0      	cmp	r0, r4
 8006dd2:	d10b      	bne.n	8006dec <_free_r+0x6c>
 8006dd4:	6820      	ldr	r0, [r4, #0]
 8006dd6:	4401      	add	r1, r0
 8006dd8:	1850      	adds	r0, r2, r1
 8006dda:	4283      	cmp	r3, r0
 8006ddc:	6011      	str	r1, [r2, #0]
 8006dde:	d1e0      	bne.n	8006da2 <_free_r+0x22>
 8006de0:	6818      	ldr	r0, [r3, #0]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	6053      	str	r3, [r2, #4]
 8006de6:	4408      	add	r0, r1
 8006de8:	6010      	str	r0, [r2, #0]
 8006dea:	e7da      	b.n	8006da2 <_free_r+0x22>
 8006dec:	d902      	bls.n	8006df4 <_free_r+0x74>
 8006dee:	230c      	movs	r3, #12
 8006df0:	602b      	str	r3, [r5, #0]
 8006df2:	e7d6      	b.n	8006da2 <_free_r+0x22>
 8006df4:	6820      	ldr	r0, [r4, #0]
 8006df6:	1821      	adds	r1, r4, r0
 8006df8:	428b      	cmp	r3, r1
 8006dfa:	bf04      	itt	eq
 8006dfc:	6819      	ldreq	r1, [r3, #0]
 8006dfe:	685b      	ldreq	r3, [r3, #4]
 8006e00:	6063      	str	r3, [r4, #4]
 8006e02:	bf04      	itt	eq
 8006e04:	1809      	addeq	r1, r1, r0
 8006e06:	6021      	streq	r1, [r4, #0]
 8006e08:	6054      	str	r4, [r2, #4]
 8006e0a:	e7ca      	b.n	8006da2 <_free_r+0x22>
 8006e0c:	bd38      	pop	{r3, r4, r5, pc}
 8006e0e:	bf00      	nop
 8006e10:	20001eb4 	.word	0x20001eb4

08006e14 <sbrk_aligned>:
 8006e14:	b570      	push	{r4, r5, r6, lr}
 8006e16:	4e0f      	ldr	r6, [pc, #60]	@ (8006e54 <sbrk_aligned+0x40>)
 8006e18:	460c      	mov	r4, r1
 8006e1a:	6831      	ldr	r1, [r6, #0]
 8006e1c:	4605      	mov	r5, r0
 8006e1e:	b911      	cbnz	r1, 8006e26 <sbrk_aligned+0x12>
 8006e20:	f000 f9d6 	bl	80071d0 <_sbrk_r>
 8006e24:	6030      	str	r0, [r6, #0]
 8006e26:	4621      	mov	r1, r4
 8006e28:	4628      	mov	r0, r5
 8006e2a:	f000 f9d1 	bl	80071d0 <_sbrk_r>
 8006e2e:	1c43      	adds	r3, r0, #1
 8006e30:	d103      	bne.n	8006e3a <sbrk_aligned+0x26>
 8006e32:	f04f 34ff 	mov.w	r4, #4294967295
 8006e36:	4620      	mov	r0, r4
 8006e38:	bd70      	pop	{r4, r5, r6, pc}
 8006e3a:	1cc4      	adds	r4, r0, #3
 8006e3c:	f024 0403 	bic.w	r4, r4, #3
 8006e40:	42a0      	cmp	r0, r4
 8006e42:	d0f8      	beq.n	8006e36 <sbrk_aligned+0x22>
 8006e44:	1a21      	subs	r1, r4, r0
 8006e46:	4628      	mov	r0, r5
 8006e48:	f000 f9c2 	bl	80071d0 <_sbrk_r>
 8006e4c:	3001      	adds	r0, #1
 8006e4e:	d1f2      	bne.n	8006e36 <sbrk_aligned+0x22>
 8006e50:	e7ef      	b.n	8006e32 <sbrk_aligned+0x1e>
 8006e52:	bf00      	nop
 8006e54:	20001eb0 	.word	0x20001eb0

08006e58 <_malloc_r>:
 8006e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e5c:	1ccd      	adds	r5, r1, #3
 8006e5e:	f025 0503 	bic.w	r5, r5, #3
 8006e62:	3508      	adds	r5, #8
 8006e64:	2d0c      	cmp	r5, #12
 8006e66:	bf38      	it	cc
 8006e68:	250c      	movcc	r5, #12
 8006e6a:	2d00      	cmp	r5, #0
 8006e6c:	4606      	mov	r6, r0
 8006e6e:	db01      	blt.n	8006e74 <_malloc_r+0x1c>
 8006e70:	42a9      	cmp	r1, r5
 8006e72:	d904      	bls.n	8006e7e <_malloc_r+0x26>
 8006e74:	230c      	movs	r3, #12
 8006e76:	6033      	str	r3, [r6, #0]
 8006e78:	2000      	movs	r0, #0
 8006e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006f54 <_malloc_r+0xfc>
 8006e82:	f000 f869 	bl	8006f58 <__malloc_lock>
 8006e86:	f8d8 3000 	ldr.w	r3, [r8]
 8006e8a:	461c      	mov	r4, r3
 8006e8c:	bb44      	cbnz	r4, 8006ee0 <_malloc_r+0x88>
 8006e8e:	4629      	mov	r1, r5
 8006e90:	4630      	mov	r0, r6
 8006e92:	f7ff ffbf 	bl	8006e14 <sbrk_aligned>
 8006e96:	1c43      	adds	r3, r0, #1
 8006e98:	4604      	mov	r4, r0
 8006e9a:	d158      	bne.n	8006f4e <_malloc_r+0xf6>
 8006e9c:	f8d8 4000 	ldr.w	r4, [r8]
 8006ea0:	4627      	mov	r7, r4
 8006ea2:	2f00      	cmp	r7, #0
 8006ea4:	d143      	bne.n	8006f2e <_malloc_r+0xd6>
 8006ea6:	2c00      	cmp	r4, #0
 8006ea8:	d04b      	beq.n	8006f42 <_malloc_r+0xea>
 8006eaa:	6823      	ldr	r3, [r4, #0]
 8006eac:	4639      	mov	r1, r7
 8006eae:	4630      	mov	r0, r6
 8006eb0:	eb04 0903 	add.w	r9, r4, r3
 8006eb4:	f000 f98c 	bl	80071d0 <_sbrk_r>
 8006eb8:	4581      	cmp	r9, r0
 8006eba:	d142      	bne.n	8006f42 <_malloc_r+0xea>
 8006ebc:	6821      	ldr	r1, [r4, #0]
 8006ebe:	1a6d      	subs	r5, r5, r1
 8006ec0:	4629      	mov	r1, r5
 8006ec2:	4630      	mov	r0, r6
 8006ec4:	f7ff ffa6 	bl	8006e14 <sbrk_aligned>
 8006ec8:	3001      	adds	r0, #1
 8006eca:	d03a      	beq.n	8006f42 <_malloc_r+0xea>
 8006ecc:	6823      	ldr	r3, [r4, #0]
 8006ece:	442b      	add	r3, r5
 8006ed0:	6023      	str	r3, [r4, #0]
 8006ed2:	f8d8 3000 	ldr.w	r3, [r8]
 8006ed6:	685a      	ldr	r2, [r3, #4]
 8006ed8:	bb62      	cbnz	r2, 8006f34 <_malloc_r+0xdc>
 8006eda:	f8c8 7000 	str.w	r7, [r8]
 8006ede:	e00f      	b.n	8006f00 <_malloc_r+0xa8>
 8006ee0:	6822      	ldr	r2, [r4, #0]
 8006ee2:	1b52      	subs	r2, r2, r5
 8006ee4:	d420      	bmi.n	8006f28 <_malloc_r+0xd0>
 8006ee6:	2a0b      	cmp	r2, #11
 8006ee8:	d917      	bls.n	8006f1a <_malloc_r+0xc2>
 8006eea:	1961      	adds	r1, r4, r5
 8006eec:	42a3      	cmp	r3, r4
 8006eee:	6025      	str	r5, [r4, #0]
 8006ef0:	bf18      	it	ne
 8006ef2:	6059      	strne	r1, [r3, #4]
 8006ef4:	6863      	ldr	r3, [r4, #4]
 8006ef6:	bf08      	it	eq
 8006ef8:	f8c8 1000 	streq.w	r1, [r8]
 8006efc:	5162      	str	r2, [r4, r5]
 8006efe:	604b      	str	r3, [r1, #4]
 8006f00:	4630      	mov	r0, r6
 8006f02:	f000 f82f 	bl	8006f64 <__malloc_unlock>
 8006f06:	f104 000b 	add.w	r0, r4, #11
 8006f0a:	1d23      	adds	r3, r4, #4
 8006f0c:	f020 0007 	bic.w	r0, r0, #7
 8006f10:	1ac2      	subs	r2, r0, r3
 8006f12:	bf1c      	itt	ne
 8006f14:	1a1b      	subne	r3, r3, r0
 8006f16:	50a3      	strne	r3, [r4, r2]
 8006f18:	e7af      	b.n	8006e7a <_malloc_r+0x22>
 8006f1a:	6862      	ldr	r2, [r4, #4]
 8006f1c:	42a3      	cmp	r3, r4
 8006f1e:	bf0c      	ite	eq
 8006f20:	f8c8 2000 	streq.w	r2, [r8]
 8006f24:	605a      	strne	r2, [r3, #4]
 8006f26:	e7eb      	b.n	8006f00 <_malloc_r+0xa8>
 8006f28:	4623      	mov	r3, r4
 8006f2a:	6864      	ldr	r4, [r4, #4]
 8006f2c:	e7ae      	b.n	8006e8c <_malloc_r+0x34>
 8006f2e:	463c      	mov	r4, r7
 8006f30:	687f      	ldr	r7, [r7, #4]
 8006f32:	e7b6      	b.n	8006ea2 <_malloc_r+0x4a>
 8006f34:	461a      	mov	r2, r3
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	42a3      	cmp	r3, r4
 8006f3a:	d1fb      	bne.n	8006f34 <_malloc_r+0xdc>
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	6053      	str	r3, [r2, #4]
 8006f40:	e7de      	b.n	8006f00 <_malloc_r+0xa8>
 8006f42:	230c      	movs	r3, #12
 8006f44:	6033      	str	r3, [r6, #0]
 8006f46:	4630      	mov	r0, r6
 8006f48:	f000 f80c 	bl	8006f64 <__malloc_unlock>
 8006f4c:	e794      	b.n	8006e78 <_malloc_r+0x20>
 8006f4e:	6005      	str	r5, [r0, #0]
 8006f50:	e7d6      	b.n	8006f00 <_malloc_r+0xa8>
 8006f52:	bf00      	nop
 8006f54:	20001eb4 	.word	0x20001eb4

08006f58 <__malloc_lock>:
 8006f58:	4801      	ldr	r0, [pc, #4]	@ (8006f60 <__malloc_lock+0x8>)
 8006f5a:	f7ff bf0e 	b.w	8006d7a <__retarget_lock_acquire_recursive>
 8006f5e:	bf00      	nop
 8006f60:	20001eac 	.word	0x20001eac

08006f64 <__malloc_unlock>:
 8006f64:	4801      	ldr	r0, [pc, #4]	@ (8006f6c <__malloc_unlock+0x8>)
 8006f66:	f7ff bf09 	b.w	8006d7c <__retarget_lock_release_recursive>
 8006f6a:	bf00      	nop
 8006f6c:	20001eac 	.word	0x20001eac

08006f70 <__sflush_r>:
 8006f70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f78:	0716      	lsls	r6, r2, #28
 8006f7a:	4605      	mov	r5, r0
 8006f7c:	460c      	mov	r4, r1
 8006f7e:	d454      	bmi.n	800702a <__sflush_r+0xba>
 8006f80:	684b      	ldr	r3, [r1, #4]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	dc02      	bgt.n	8006f8c <__sflush_r+0x1c>
 8006f86:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	dd48      	ble.n	800701e <__sflush_r+0xae>
 8006f8c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006f8e:	2e00      	cmp	r6, #0
 8006f90:	d045      	beq.n	800701e <__sflush_r+0xae>
 8006f92:	2300      	movs	r3, #0
 8006f94:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006f98:	682f      	ldr	r7, [r5, #0]
 8006f9a:	6a21      	ldr	r1, [r4, #32]
 8006f9c:	602b      	str	r3, [r5, #0]
 8006f9e:	d030      	beq.n	8007002 <__sflush_r+0x92>
 8006fa0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006fa2:	89a3      	ldrh	r3, [r4, #12]
 8006fa4:	0759      	lsls	r1, r3, #29
 8006fa6:	d505      	bpl.n	8006fb4 <__sflush_r+0x44>
 8006fa8:	6863      	ldr	r3, [r4, #4]
 8006faa:	1ad2      	subs	r2, r2, r3
 8006fac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006fae:	b10b      	cbz	r3, 8006fb4 <__sflush_r+0x44>
 8006fb0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006fb2:	1ad2      	subs	r2, r2, r3
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006fb8:	6a21      	ldr	r1, [r4, #32]
 8006fba:	4628      	mov	r0, r5
 8006fbc:	47b0      	blx	r6
 8006fbe:	1c43      	adds	r3, r0, #1
 8006fc0:	89a3      	ldrh	r3, [r4, #12]
 8006fc2:	d106      	bne.n	8006fd2 <__sflush_r+0x62>
 8006fc4:	6829      	ldr	r1, [r5, #0]
 8006fc6:	291d      	cmp	r1, #29
 8006fc8:	d82b      	bhi.n	8007022 <__sflush_r+0xb2>
 8006fca:	4a2a      	ldr	r2, [pc, #168]	@ (8007074 <__sflush_r+0x104>)
 8006fcc:	410a      	asrs	r2, r1
 8006fce:	07d6      	lsls	r6, r2, #31
 8006fd0:	d427      	bmi.n	8007022 <__sflush_r+0xb2>
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	6062      	str	r2, [r4, #4]
 8006fd6:	04d9      	lsls	r1, r3, #19
 8006fd8:	6922      	ldr	r2, [r4, #16]
 8006fda:	6022      	str	r2, [r4, #0]
 8006fdc:	d504      	bpl.n	8006fe8 <__sflush_r+0x78>
 8006fde:	1c42      	adds	r2, r0, #1
 8006fe0:	d101      	bne.n	8006fe6 <__sflush_r+0x76>
 8006fe2:	682b      	ldr	r3, [r5, #0]
 8006fe4:	b903      	cbnz	r3, 8006fe8 <__sflush_r+0x78>
 8006fe6:	6560      	str	r0, [r4, #84]	@ 0x54
 8006fe8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006fea:	602f      	str	r7, [r5, #0]
 8006fec:	b1b9      	cbz	r1, 800701e <__sflush_r+0xae>
 8006fee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006ff2:	4299      	cmp	r1, r3
 8006ff4:	d002      	beq.n	8006ffc <__sflush_r+0x8c>
 8006ff6:	4628      	mov	r0, r5
 8006ff8:	f7ff fec2 	bl	8006d80 <_free_r>
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	6363      	str	r3, [r4, #52]	@ 0x34
 8007000:	e00d      	b.n	800701e <__sflush_r+0xae>
 8007002:	2301      	movs	r3, #1
 8007004:	4628      	mov	r0, r5
 8007006:	47b0      	blx	r6
 8007008:	4602      	mov	r2, r0
 800700a:	1c50      	adds	r0, r2, #1
 800700c:	d1c9      	bne.n	8006fa2 <__sflush_r+0x32>
 800700e:	682b      	ldr	r3, [r5, #0]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d0c6      	beq.n	8006fa2 <__sflush_r+0x32>
 8007014:	2b1d      	cmp	r3, #29
 8007016:	d001      	beq.n	800701c <__sflush_r+0xac>
 8007018:	2b16      	cmp	r3, #22
 800701a:	d11e      	bne.n	800705a <__sflush_r+0xea>
 800701c:	602f      	str	r7, [r5, #0]
 800701e:	2000      	movs	r0, #0
 8007020:	e022      	b.n	8007068 <__sflush_r+0xf8>
 8007022:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007026:	b21b      	sxth	r3, r3
 8007028:	e01b      	b.n	8007062 <__sflush_r+0xf2>
 800702a:	690f      	ldr	r7, [r1, #16]
 800702c:	2f00      	cmp	r7, #0
 800702e:	d0f6      	beq.n	800701e <__sflush_r+0xae>
 8007030:	0793      	lsls	r3, r2, #30
 8007032:	680e      	ldr	r6, [r1, #0]
 8007034:	bf08      	it	eq
 8007036:	694b      	ldreq	r3, [r1, #20]
 8007038:	600f      	str	r7, [r1, #0]
 800703a:	bf18      	it	ne
 800703c:	2300      	movne	r3, #0
 800703e:	eba6 0807 	sub.w	r8, r6, r7
 8007042:	608b      	str	r3, [r1, #8]
 8007044:	f1b8 0f00 	cmp.w	r8, #0
 8007048:	dde9      	ble.n	800701e <__sflush_r+0xae>
 800704a:	6a21      	ldr	r1, [r4, #32]
 800704c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800704e:	4643      	mov	r3, r8
 8007050:	463a      	mov	r2, r7
 8007052:	4628      	mov	r0, r5
 8007054:	47b0      	blx	r6
 8007056:	2800      	cmp	r0, #0
 8007058:	dc08      	bgt.n	800706c <__sflush_r+0xfc>
 800705a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800705e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007062:	81a3      	strh	r3, [r4, #12]
 8007064:	f04f 30ff 	mov.w	r0, #4294967295
 8007068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800706c:	4407      	add	r7, r0
 800706e:	eba8 0800 	sub.w	r8, r8, r0
 8007072:	e7e7      	b.n	8007044 <__sflush_r+0xd4>
 8007074:	dfbffffe 	.word	0xdfbffffe

08007078 <_fflush_r>:
 8007078:	b538      	push	{r3, r4, r5, lr}
 800707a:	690b      	ldr	r3, [r1, #16]
 800707c:	4605      	mov	r5, r0
 800707e:	460c      	mov	r4, r1
 8007080:	b913      	cbnz	r3, 8007088 <_fflush_r+0x10>
 8007082:	2500      	movs	r5, #0
 8007084:	4628      	mov	r0, r5
 8007086:	bd38      	pop	{r3, r4, r5, pc}
 8007088:	b118      	cbz	r0, 8007092 <_fflush_r+0x1a>
 800708a:	6a03      	ldr	r3, [r0, #32]
 800708c:	b90b      	cbnz	r3, 8007092 <_fflush_r+0x1a>
 800708e:	f7ff fc8f 	bl	80069b0 <__sinit>
 8007092:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d0f3      	beq.n	8007082 <_fflush_r+0xa>
 800709a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800709c:	07d0      	lsls	r0, r2, #31
 800709e:	d404      	bmi.n	80070aa <_fflush_r+0x32>
 80070a0:	0599      	lsls	r1, r3, #22
 80070a2:	d402      	bmi.n	80070aa <_fflush_r+0x32>
 80070a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80070a6:	f7ff fe68 	bl	8006d7a <__retarget_lock_acquire_recursive>
 80070aa:	4628      	mov	r0, r5
 80070ac:	4621      	mov	r1, r4
 80070ae:	f7ff ff5f 	bl	8006f70 <__sflush_r>
 80070b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80070b4:	07da      	lsls	r2, r3, #31
 80070b6:	4605      	mov	r5, r0
 80070b8:	d4e4      	bmi.n	8007084 <_fflush_r+0xc>
 80070ba:	89a3      	ldrh	r3, [r4, #12]
 80070bc:	059b      	lsls	r3, r3, #22
 80070be:	d4e1      	bmi.n	8007084 <_fflush_r+0xc>
 80070c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80070c2:	f7ff fe5b 	bl	8006d7c <__retarget_lock_release_recursive>
 80070c6:	e7dd      	b.n	8007084 <_fflush_r+0xc>

080070c8 <__swhatbuf_r>:
 80070c8:	b570      	push	{r4, r5, r6, lr}
 80070ca:	460c      	mov	r4, r1
 80070cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070d0:	2900      	cmp	r1, #0
 80070d2:	b096      	sub	sp, #88	@ 0x58
 80070d4:	4615      	mov	r5, r2
 80070d6:	461e      	mov	r6, r3
 80070d8:	da0d      	bge.n	80070f6 <__swhatbuf_r+0x2e>
 80070da:	89a3      	ldrh	r3, [r4, #12]
 80070dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80070e0:	f04f 0100 	mov.w	r1, #0
 80070e4:	bf14      	ite	ne
 80070e6:	2340      	movne	r3, #64	@ 0x40
 80070e8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80070ec:	2000      	movs	r0, #0
 80070ee:	6031      	str	r1, [r6, #0]
 80070f0:	602b      	str	r3, [r5, #0]
 80070f2:	b016      	add	sp, #88	@ 0x58
 80070f4:	bd70      	pop	{r4, r5, r6, pc}
 80070f6:	466a      	mov	r2, sp
 80070f8:	f000 f848 	bl	800718c <_fstat_r>
 80070fc:	2800      	cmp	r0, #0
 80070fe:	dbec      	blt.n	80070da <__swhatbuf_r+0x12>
 8007100:	9901      	ldr	r1, [sp, #4]
 8007102:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007106:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800710a:	4259      	negs	r1, r3
 800710c:	4159      	adcs	r1, r3
 800710e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007112:	e7eb      	b.n	80070ec <__swhatbuf_r+0x24>

08007114 <__smakebuf_r>:
 8007114:	898b      	ldrh	r3, [r1, #12]
 8007116:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007118:	079d      	lsls	r5, r3, #30
 800711a:	4606      	mov	r6, r0
 800711c:	460c      	mov	r4, r1
 800711e:	d507      	bpl.n	8007130 <__smakebuf_r+0x1c>
 8007120:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007124:	6023      	str	r3, [r4, #0]
 8007126:	6123      	str	r3, [r4, #16]
 8007128:	2301      	movs	r3, #1
 800712a:	6163      	str	r3, [r4, #20]
 800712c:	b003      	add	sp, #12
 800712e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007130:	ab01      	add	r3, sp, #4
 8007132:	466a      	mov	r2, sp
 8007134:	f7ff ffc8 	bl	80070c8 <__swhatbuf_r>
 8007138:	9f00      	ldr	r7, [sp, #0]
 800713a:	4605      	mov	r5, r0
 800713c:	4639      	mov	r1, r7
 800713e:	4630      	mov	r0, r6
 8007140:	f7ff fe8a 	bl	8006e58 <_malloc_r>
 8007144:	b948      	cbnz	r0, 800715a <__smakebuf_r+0x46>
 8007146:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800714a:	059a      	lsls	r2, r3, #22
 800714c:	d4ee      	bmi.n	800712c <__smakebuf_r+0x18>
 800714e:	f023 0303 	bic.w	r3, r3, #3
 8007152:	f043 0302 	orr.w	r3, r3, #2
 8007156:	81a3      	strh	r3, [r4, #12]
 8007158:	e7e2      	b.n	8007120 <__smakebuf_r+0xc>
 800715a:	89a3      	ldrh	r3, [r4, #12]
 800715c:	6020      	str	r0, [r4, #0]
 800715e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007162:	81a3      	strh	r3, [r4, #12]
 8007164:	9b01      	ldr	r3, [sp, #4]
 8007166:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800716a:	b15b      	cbz	r3, 8007184 <__smakebuf_r+0x70>
 800716c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007170:	4630      	mov	r0, r6
 8007172:	f000 f81d 	bl	80071b0 <_isatty_r>
 8007176:	b128      	cbz	r0, 8007184 <__smakebuf_r+0x70>
 8007178:	89a3      	ldrh	r3, [r4, #12]
 800717a:	f023 0303 	bic.w	r3, r3, #3
 800717e:	f043 0301 	orr.w	r3, r3, #1
 8007182:	81a3      	strh	r3, [r4, #12]
 8007184:	89a3      	ldrh	r3, [r4, #12]
 8007186:	431d      	orrs	r5, r3
 8007188:	81a5      	strh	r5, [r4, #12]
 800718a:	e7cf      	b.n	800712c <__smakebuf_r+0x18>

0800718c <_fstat_r>:
 800718c:	b538      	push	{r3, r4, r5, lr}
 800718e:	4d07      	ldr	r5, [pc, #28]	@ (80071ac <_fstat_r+0x20>)
 8007190:	2300      	movs	r3, #0
 8007192:	4604      	mov	r4, r0
 8007194:	4608      	mov	r0, r1
 8007196:	4611      	mov	r1, r2
 8007198:	602b      	str	r3, [r5, #0]
 800719a:	f7f9 fd32 	bl	8000c02 <_fstat>
 800719e:	1c43      	adds	r3, r0, #1
 80071a0:	d102      	bne.n	80071a8 <_fstat_r+0x1c>
 80071a2:	682b      	ldr	r3, [r5, #0]
 80071a4:	b103      	cbz	r3, 80071a8 <_fstat_r+0x1c>
 80071a6:	6023      	str	r3, [r4, #0]
 80071a8:	bd38      	pop	{r3, r4, r5, pc}
 80071aa:	bf00      	nop
 80071ac:	20001ea8 	.word	0x20001ea8

080071b0 <_isatty_r>:
 80071b0:	b538      	push	{r3, r4, r5, lr}
 80071b2:	4d06      	ldr	r5, [pc, #24]	@ (80071cc <_isatty_r+0x1c>)
 80071b4:	2300      	movs	r3, #0
 80071b6:	4604      	mov	r4, r0
 80071b8:	4608      	mov	r0, r1
 80071ba:	602b      	str	r3, [r5, #0]
 80071bc:	f7f9 fd31 	bl	8000c22 <_isatty>
 80071c0:	1c43      	adds	r3, r0, #1
 80071c2:	d102      	bne.n	80071ca <_isatty_r+0x1a>
 80071c4:	682b      	ldr	r3, [r5, #0]
 80071c6:	b103      	cbz	r3, 80071ca <_isatty_r+0x1a>
 80071c8:	6023      	str	r3, [r4, #0]
 80071ca:	bd38      	pop	{r3, r4, r5, pc}
 80071cc:	20001ea8 	.word	0x20001ea8

080071d0 <_sbrk_r>:
 80071d0:	b538      	push	{r3, r4, r5, lr}
 80071d2:	4d06      	ldr	r5, [pc, #24]	@ (80071ec <_sbrk_r+0x1c>)
 80071d4:	2300      	movs	r3, #0
 80071d6:	4604      	mov	r4, r0
 80071d8:	4608      	mov	r0, r1
 80071da:	602b      	str	r3, [r5, #0]
 80071dc:	f7f9 fd3a 	bl	8000c54 <_sbrk>
 80071e0:	1c43      	adds	r3, r0, #1
 80071e2:	d102      	bne.n	80071ea <_sbrk_r+0x1a>
 80071e4:	682b      	ldr	r3, [r5, #0]
 80071e6:	b103      	cbz	r3, 80071ea <_sbrk_r+0x1a>
 80071e8:	6023      	str	r3, [r4, #0]
 80071ea:	bd38      	pop	{r3, r4, r5, pc}
 80071ec:	20001ea8 	.word	0x20001ea8

080071f0 <_init>:
 80071f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071f2:	bf00      	nop
 80071f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071f6:	bc08      	pop	{r3}
 80071f8:	469e      	mov	lr, r3
 80071fa:	4770      	bx	lr

080071fc <_fini>:
 80071fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071fe:	bf00      	nop
 8007200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007202:	bc08      	pop	{r3}
 8007204:	469e      	mov	lr, r3
 8007206:	4770      	bx	lr
