
BLDC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f90  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08007118  08007118  00008118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007180  08007180  0000915c  2**0
                  CONTENTS
  4 .ARM          00000000  08007180  08007180  0000915c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007180  08007180  0000915c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007180  08007180  00008180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007184  08007184  00008184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000015c  20000000  08007188  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000915c  2**0
                  CONTENTS
 10 .bss          00001d5c  2000015c  2000015c  0000915c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001eb8  20001eb8  0000915c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000915c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dd06  00000000  00000000  0000918c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002be2  00000000  00000000  00016e92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c20  00000000  00000000  00019a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008ed  00000000  00000000  0001a698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024446  00000000  00000000  0001af85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010c6b  00000000  00000000  0003f3cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf049  00000000  00000000  00050036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011f07f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003604  00000000  00000000  0011f0c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000046  00000000  00000000  001226c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000015c 	.word	0x2000015c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007100 	.word	0x08007100

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000160 	.word	0x20000160
 80001c4:	08007100 	.word	0x08007100

080001c8 <handleCommutation>:
//FUNCTIONS
//======================================================

//Function use to handle the hall sequences, provided through "Steps",
//and given the value "pwmVal" to change duty cycle for specific step.
void handleCommutation(uint8_t step, uint8_t pwmVal) {
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	460a      	mov	r2, r1
 80001d2:	71fb      	strb	r3, [r7, #7]
 80001d4:	4613      	mov	r3, r2
 80001d6:	71bb      	strb	r3, [r7, #6]
    switch (step) {
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	2b05      	cmp	r3, #5
 80001dc:	dc14      	bgt.n	8000208 <handleCommutation+0x40>
 80001de:	2b00      	cmp	r3, #0
 80001e0:	f2c0 80b7 	blt.w	8000352 <handleCommutation+0x18a>
 80001e4:	2b05      	cmp	r3, #5
 80001e6:	f200 80b4 	bhi.w	8000352 <handleCommutation+0x18a>
 80001ea:	a201      	add	r2, pc, #4	@ (adr r2, 80001f0 <handleCommutation+0x28>)
 80001ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001f0:	08000211 	.word	0x08000211
 80001f4:	0800023f 	.word	0x0800023f
 80001f8:	0800026d 	.word	0x0800026d
 80001fc:	0800029b 	.word	0x0800029b
 8000200:	080002c9 	.word	0x080002c9
 8000204:	080002f7 	.word	0x080002f7
 8000208:	2bff      	cmp	r3, #255	@ 0xff
 800020a:	f000 808b 	beq.w	8000324 <handleCommutation+0x15c>
			SET_PWM_1_H3(highMin);
			SET_PWM_1_L1(lowMin);
			SET_PWM_1_L2(lowMin);
			SET_PWM_1_L3(lowMin);
    }
}
 800020e:	e0a0      	b.n	8000352 <handleCommutation+0x18a>
            SET_PWM_1_H3(pwmVal);
 8000210:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000214:	79bb      	ldrb	r3, [r7, #6]
 8000216:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SET_PWM_1_L2(lowMax);
 8000218:	4b51      	ldr	r3, [pc, #324]	@ (8000360 <handleCommutation+0x198>)
 800021a:	2200      	movs	r2, #0
 800021c:	635a      	str	r2, [r3, #52]	@ 0x34
            SET_PWM_1_H1(highMin);
 800021e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000222:	2200      	movs	r2, #0
 8000224:	635a      	str	r2, [r3, #52]	@ 0x34
            SET_PWM_1_H2(highMin);
 8000226:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800022a:	2200      	movs	r2, #0
 800022c:	639a      	str	r2, [r3, #56]	@ 0x38
            SET_PWM_1_L1(lowMin);
 800022e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000232:	22ff      	movs	r2, #255	@ 0xff
 8000234:	641a      	str	r2, [r3, #64]	@ 0x40
            SET_PWM_1_L3(lowMin);
 8000236:	4b4a      	ldr	r3, [pc, #296]	@ (8000360 <handleCommutation+0x198>)
 8000238:	22ff      	movs	r2, #255	@ 0xff
 800023a:	639a      	str	r2, [r3, #56]	@ 0x38
            break;
 800023c:	e089      	b.n	8000352 <handleCommutation+0x18a>
			SET_PWM_1_H2(pwmVal);
 800023e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000242:	79bb      	ldrb	r3, [r7, #6]
 8000244:	6393      	str	r3, [r2, #56]	@ 0x38
			SET_PWM_1_L1(lowMax);
 8000246:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800024a:	2200      	movs	r2, #0
 800024c:	641a      	str	r2, [r3, #64]	@ 0x40
			SET_PWM_1_H1(highMin);
 800024e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000252:	2200      	movs	r2, #0
 8000254:	635a      	str	r2, [r3, #52]	@ 0x34
			SET_PWM_1_H3(highMin);
 8000256:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800025a:	2200      	movs	r2, #0
 800025c:	63da      	str	r2, [r3, #60]	@ 0x3c
			SET_PWM_1_L2(lowMin);
 800025e:	4b40      	ldr	r3, [pc, #256]	@ (8000360 <handleCommutation+0x198>)
 8000260:	22ff      	movs	r2, #255	@ 0xff
 8000262:	635a      	str	r2, [r3, #52]	@ 0x34
			SET_PWM_1_L3(lowMin);
 8000264:	4b3e      	ldr	r3, [pc, #248]	@ (8000360 <handleCommutation+0x198>)
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	639a      	str	r2, [r3, #56]	@ 0x38
            break;
 800026a:	e072      	b.n	8000352 <handleCommutation+0x18a>
            SET_PWM_1_H3(pwmVal);
 800026c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000270:	79bb      	ldrb	r3, [r7, #6]
 8000272:	63d3      	str	r3, [r2, #60]	@ 0x3c
			SET_PWM_1_L1(lowMax);
 8000274:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000278:	2200      	movs	r2, #0
 800027a:	641a      	str	r2, [r3, #64]	@ 0x40
			SET_PWM_1_H1(highMin);
 800027c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000280:	2200      	movs	r2, #0
 8000282:	635a      	str	r2, [r3, #52]	@ 0x34
			SET_PWM_1_H2(highMin);
 8000284:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000288:	2200      	movs	r2, #0
 800028a:	639a      	str	r2, [r3, #56]	@ 0x38
			SET_PWM_1_L2(lowMin);
 800028c:	4b34      	ldr	r3, [pc, #208]	@ (8000360 <handleCommutation+0x198>)
 800028e:	22ff      	movs	r2, #255	@ 0xff
 8000290:	635a      	str	r2, [r3, #52]	@ 0x34
			SET_PWM_1_L3(lowMin);
 8000292:	4b33      	ldr	r3, [pc, #204]	@ (8000360 <handleCommutation+0x198>)
 8000294:	22ff      	movs	r2, #255	@ 0xff
 8000296:	639a      	str	r2, [r3, #56]	@ 0x38
            break;
 8000298:	e05b      	b.n	8000352 <handleCommutation+0x18a>
            SET_PWM_1_H1(pwmVal);
 800029a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800029e:	79bb      	ldrb	r3, [r7, #6]
 80002a0:	6353      	str	r3, [r2, #52]	@ 0x34
			SET_PWM_1_L3(lowMax);
 80002a2:	4b2f      	ldr	r3, [pc, #188]	@ (8000360 <handleCommutation+0x198>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	639a      	str	r2, [r3, #56]	@ 0x38
			SET_PWM_1_H2(highMin);
 80002a8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002ac:	2200      	movs	r2, #0
 80002ae:	639a      	str	r2, [r3, #56]	@ 0x38
			SET_PWM_1_H3(highMin);
 80002b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002b4:	2200      	movs	r2, #0
 80002b6:	63da      	str	r2, [r3, #60]	@ 0x3c
			SET_PWM_1_L1(lowMin);
 80002b8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002bc:	22ff      	movs	r2, #255	@ 0xff
 80002be:	641a      	str	r2, [r3, #64]	@ 0x40
			SET_PWM_1_L2(lowMin);
 80002c0:	4b27      	ldr	r3, [pc, #156]	@ (8000360 <handleCommutation+0x198>)
 80002c2:	22ff      	movs	r2, #255	@ 0xff
 80002c4:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 80002c6:	e044      	b.n	8000352 <handleCommutation+0x18a>
            SET_PWM_1_H1(pwmVal);
 80002c8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002cc:	79bb      	ldrb	r3, [r7, #6]
 80002ce:	6353      	str	r3, [r2, #52]	@ 0x34
			SET_PWM_1_L2(lowMax);
 80002d0:	4b23      	ldr	r3, [pc, #140]	@ (8000360 <handleCommutation+0x198>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	635a      	str	r2, [r3, #52]	@ 0x34
			SET_PWM_1_H2(highMin);
 80002d6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002da:	2200      	movs	r2, #0
 80002dc:	639a      	str	r2, [r3, #56]	@ 0x38
			SET_PWM_1_H3(highMin);
 80002de:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002e2:	2200      	movs	r2, #0
 80002e4:	63da      	str	r2, [r3, #60]	@ 0x3c
			SET_PWM_1_L1(lowMin);
 80002e6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002ea:	22ff      	movs	r2, #255	@ 0xff
 80002ec:	641a      	str	r2, [r3, #64]	@ 0x40
			SET_PWM_1_L3(lowMin);
 80002ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000360 <handleCommutation+0x198>)
 80002f0:	22ff      	movs	r2, #255	@ 0xff
 80002f2:	639a      	str	r2, [r3, #56]	@ 0x38
            break;
 80002f4:	e02d      	b.n	8000352 <handleCommutation+0x18a>
            SET_PWM_1_H2(pwmVal);
 80002f6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002fa:	79bb      	ldrb	r3, [r7, #6]
 80002fc:	6393      	str	r3, [r2, #56]	@ 0x38
			SET_PWM_1_L3(lowMax);
 80002fe:	4b18      	ldr	r3, [pc, #96]	@ (8000360 <handleCommutation+0x198>)
 8000300:	2200      	movs	r2, #0
 8000302:	639a      	str	r2, [r3, #56]	@ 0x38
			SET_PWM_1_H1(highMin);
 8000304:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000308:	2200      	movs	r2, #0
 800030a:	635a      	str	r2, [r3, #52]	@ 0x34
			SET_PWM_1_H3(highMin);
 800030c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000310:	2200      	movs	r2, #0
 8000312:	63da      	str	r2, [r3, #60]	@ 0x3c
			SET_PWM_1_L1(lowMin);
 8000314:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000318:	22ff      	movs	r2, #255	@ 0xff
 800031a:	641a      	str	r2, [r3, #64]	@ 0x40
			SET_PWM_1_L2(lowMin);
 800031c:	4b10      	ldr	r3, [pc, #64]	@ (8000360 <handleCommutation+0x198>)
 800031e:	22ff      	movs	r2, #255	@ 0xff
 8000320:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 8000322:	e016      	b.n	8000352 <handleCommutation+0x18a>
            SET_PWM_1_H1(highMin);
 8000324:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000328:	2200      	movs	r2, #0
 800032a:	635a      	str	r2, [r3, #52]	@ 0x34
			SET_PWM_1_H2(highMin);
 800032c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000330:	2200      	movs	r2, #0
 8000332:	639a      	str	r2, [r3, #56]	@ 0x38
			SET_PWM_1_H3(highMin);
 8000334:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000338:	2200      	movs	r2, #0
 800033a:	63da      	str	r2, [r3, #60]	@ 0x3c
			SET_PWM_1_L1(lowMin);
 800033c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000340:	22ff      	movs	r2, #255	@ 0xff
 8000342:	641a      	str	r2, [r3, #64]	@ 0x40
			SET_PWM_1_L2(lowMin);
 8000344:	4b06      	ldr	r3, [pc, #24]	@ (8000360 <handleCommutation+0x198>)
 8000346:	22ff      	movs	r2, #255	@ 0xff
 8000348:	635a      	str	r2, [r3, #52]	@ 0x34
			SET_PWM_1_L3(lowMin);
 800034a:	4b05      	ldr	r3, [pc, #20]	@ (8000360 <handleCommutation+0x198>)
 800034c:	22ff      	movs	r2, #255	@ 0xff
 800034e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000350:	e7ff      	b.n	8000352 <handleCommutation+0x18a>
 8000352:	bf00      	nop
 8000354:	370c      	adds	r7, #12
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	40000400 	.word	0x40000400

08000364 <EXTI9_5_IRQHandler>:

//Interupted is called when HALL SENSOR got a change of data
//used to find the right hall sequence, and provide the next step for handleCommutation
void EXTI9_5_IRQHandler(void)
{
 8000364:	b480      	push	{r7}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0
    // 1. Đọc trực tiếp giá trị các chân PA5, PA6, PA7 từ GPIOA->IDR
    uint32_t idr = GPIOA->IDR;
 800036a:	4b44      	ldr	r3, [pc, #272]	@ (800047c <EXTI9_5_IRQHandler+0x118>)
 800036c:	691b      	ldr	r3, [r3, #16]
 800036e:	607b      	str	r3, [r7, #4]
    uint8_t hallA = (idr >> 5) & 0x01;
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	095b      	lsrs	r3, r3, #5
 8000374:	b2db      	uxtb	r3, r3
 8000376:	f003 0301 	and.w	r3, r3, #1
 800037a:	70fb      	strb	r3, [r7, #3]
    uint8_t hallB = (idr >> 6) & 0x01;
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	099b      	lsrs	r3, r3, #6
 8000380:	b2db      	uxtb	r3, r3
 8000382:	f003 0301 	and.w	r3, r3, #1
 8000386:	70bb      	strb	r3, [r7, #2]
    uint8_t hallC = (idr >> 7) & 0x01;
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	09db      	lsrs	r3, r3, #7
 800038c:	b2db      	uxtb	r3, r3
 800038e:	f003 0301 	and.w	r3, r3, #1
 8000392:	707b      	strb	r3, [r7, #1]

    // 2. Gộp thành hallState
    hallState = (hallA << 2) | (hallB << 1) | hallC;
 8000394:	78fb      	ldrb	r3, [r7, #3]
 8000396:	009b      	lsls	r3, r3, #2
 8000398:	b25a      	sxtb	r2, r3
 800039a:	78bb      	ldrb	r3, [r7, #2]
 800039c:	005b      	lsls	r3, r3, #1
 800039e:	b25b      	sxtb	r3, r3
 80003a0:	4313      	orrs	r3, r2
 80003a2:	b25a      	sxtb	r2, r3
 80003a4:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80003a8:	4313      	orrs	r3, r2
 80003aa:	b25b      	sxtb	r3, r3
 80003ac:	b2da      	uxtb	r2, r3
 80003ae:	4b34      	ldr	r3, [pc, #208]	@ (8000480 <EXTI9_5_IRQHandler+0x11c>)
 80003b0:	701a      	strb	r2, [r3, #0]

    // 3. Tra bảng commutation
    switch (hallState) {
 80003b2:	4b33      	ldr	r3, [pc, #204]	@ (8000480 <EXTI9_5_IRQHandler+0x11c>)
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	b2db      	uxtb	r3, r3
 80003b8:	3b01      	subs	r3, #1
 80003ba:	2b05      	cmp	r3, #5
 80003bc:	d826      	bhi.n	800040c <EXTI9_5_IRQHandler+0xa8>
 80003be:	a201      	add	r2, pc, #4	@ (adr r2, 80003c4 <EXTI9_5_IRQHandler+0x60>)
 80003c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003c4:	080003dd 	.word	0x080003dd
 80003c8:	080003ed 	.word	0x080003ed
 80003cc:	080003e5 	.word	0x080003e5
 80003d0:	080003fd 	.word	0x080003fd
 80003d4:	08000405 	.word	0x08000405
 80003d8:	080003f5 	.word	0x080003f5
        case 0b001: currentCommStep = 0; break;
 80003dc:	4b29      	ldr	r3, [pc, #164]	@ (8000484 <EXTI9_5_IRQHandler+0x120>)
 80003de:	2200      	movs	r2, #0
 80003e0:	701a      	strb	r2, [r3, #0]
 80003e2:	e017      	b.n	8000414 <EXTI9_5_IRQHandler+0xb0>
        case 0b011: currentCommStep = 1; break;
 80003e4:	4b27      	ldr	r3, [pc, #156]	@ (8000484 <EXTI9_5_IRQHandler+0x120>)
 80003e6:	2201      	movs	r2, #1
 80003e8:	701a      	strb	r2, [r3, #0]
 80003ea:	e013      	b.n	8000414 <EXTI9_5_IRQHandler+0xb0>
        case 0b010: currentCommStep = 2; break;
 80003ec:	4b25      	ldr	r3, [pc, #148]	@ (8000484 <EXTI9_5_IRQHandler+0x120>)
 80003ee:	2202      	movs	r2, #2
 80003f0:	701a      	strb	r2, [r3, #0]
 80003f2:	e00f      	b.n	8000414 <EXTI9_5_IRQHandler+0xb0>
        case 0b110: currentCommStep = 3; break;
 80003f4:	4b23      	ldr	r3, [pc, #140]	@ (8000484 <EXTI9_5_IRQHandler+0x120>)
 80003f6:	2203      	movs	r2, #3
 80003f8:	701a      	strb	r2, [r3, #0]
 80003fa:	e00b      	b.n	8000414 <EXTI9_5_IRQHandler+0xb0>
        case 0b100: currentCommStep = 4; break;
 80003fc:	4b21      	ldr	r3, [pc, #132]	@ (8000484 <EXTI9_5_IRQHandler+0x120>)
 80003fe:	2204      	movs	r2, #4
 8000400:	701a      	strb	r2, [r3, #0]
 8000402:	e007      	b.n	8000414 <EXTI9_5_IRQHandler+0xb0>
        case 0b101: currentCommStep = 5; break;
 8000404:	4b1f      	ldr	r3, [pc, #124]	@ (8000484 <EXTI9_5_IRQHandler+0x120>)
 8000406:	2205      	movs	r2, #5
 8000408:	701a      	strb	r2, [r3, #0]
 800040a:	e003      	b.n	8000414 <EXTI9_5_IRQHandler+0xb0>
        default:    currentCommStep = 255; break;
 800040c:	4b1d      	ldr	r3, [pc, #116]	@ (8000484 <EXTI9_5_IRQHandler+0x120>)
 800040e:	22ff      	movs	r2, #255	@ 0xff
 8000410:	701a      	strb	r2, [r3, #0]
 8000412:	bf00      	nop
    }

    // 4. Ghi vào buffer nếu còn trống
    uint8_t nextHead = (bufferHead + 1) % BUFFER_SIZE;
 8000414:	4b1c      	ldr	r3, [pc, #112]	@ (8000488 <EXTI9_5_IRQHandler+0x124>)
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	b2db      	uxtb	r3, r3
 800041a:	3301      	adds	r3, #1
 800041c:	2b00      	cmp	r3, #0
 800041e:	f003 0301 	and.w	r3, r3, #1
 8000422:	bfb8      	it	lt
 8000424:	425b      	neglt	r3, r3
 8000426:	703b      	strb	r3, [r7, #0]
    if (nextHead != bufferTail) {
 8000428:	4b18      	ldr	r3, [pc, #96]	@ (800048c <EXTI9_5_IRQHandler+0x128>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	b2db      	uxtb	r3, r3
 800042e:	783a      	ldrb	r2, [r7, #0]
 8000430:	429a      	cmp	r2, r3
 8000432:	d00b      	beq.n	800044c <EXTI9_5_IRQHandler+0xe8>
        commBuffer[bufferHead] = currentCommStep;
 8000434:	4b14      	ldr	r3, [pc, #80]	@ (8000488 <EXTI9_5_IRQHandler+0x124>)
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	b2db      	uxtb	r3, r3
 800043a:	461a      	mov	r2, r3
 800043c:	4b11      	ldr	r3, [pc, #68]	@ (8000484 <EXTI9_5_IRQHandler+0x120>)
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	b2d9      	uxtb	r1, r3
 8000442:	4b13      	ldr	r3, [pc, #76]	@ (8000490 <EXTI9_5_IRQHandler+0x12c>)
 8000444:	5499      	strb	r1, [r3, r2]
        bufferHead = nextHead;
 8000446:	4a10      	ldr	r2, [pc, #64]	@ (8000488 <EXTI9_5_IRQHandler+0x124>)
 8000448:	783b      	ldrb	r3, [r7, #0]
 800044a:	7013      	strb	r3, [r2, #0]
    }

    // 5. Xóa cờ ngắt EXTI line 5~9 (tránh ngắt lặp lại)
    EXTI->PR |= (1 << 5);
 800044c:	4b11      	ldr	r3, [pc, #68]	@ (8000494 <EXTI9_5_IRQHandler+0x130>)
 800044e:	695b      	ldr	r3, [r3, #20]
 8000450:	4a10      	ldr	r2, [pc, #64]	@ (8000494 <EXTI9_5_IRQHandler+0x130>)
 8000452:	f043 0320 	orr.w	r3, r3, #32
 8000456:	6153      	str	r3, [r2, #20]
    EXTI->PR |= (1 << 6);
 8000458:	4b0e      	ldr	r3, [pc, #56]	@ (8000494 <EXTI9_5_IRQHandler+0x130>)
 800045a:	695b      	ldr	r3, [r3, #20]
 800045c:	4a0d      	ldr	r2, [pc, #52]	@ (8000494 <EXTI9_5_IRQHandler+0x130>)
 800045e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000462:	6153      	str	r3, [r2, #20]
    EXTI->PR |= (1 << 7);
 8000464:	4b0b      	ldr	r3, [pc, #44]	@ (8000494 <EXTI9_5_IRQHandler+0x130>)
 8000466:	695b      	ldr	r3, [r3, #20]
 8000468:	4a0a      	ldr	r2, [pc, #40]	@ (8000494 <EXTI9_5_IRQHandler+0x130>)
 800046a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800046e:	6153      	str	r3, [r2, #20]
}
 8000470:	bf00      	nop
 8000472:	370c      	adds	r7, #12
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr
 800047c:	40020000 	.word	0x40020000
 8000480:	2000017c 	.word	0x2000017c
 8000484:	2000017d 	.word	0x2000017d
 8000488:	2000017a 	.word	0x2000017a
 800048c:	2000017b 	.word	0x2000017b
 8000490:	20000178 	.word	0x20000178
 8000494:	40013c00 	.word	0x40013c00

08000498 <BLDC_Start>:

//Function initialize the BLDC, by picking the first HALL sequence,
//or create 1 if its undefined
void BLDC_Start() {
 8000498:	b580      	push	{r7, lr}
 800049a:	b084      	sub	sp, #16
 800049c:	af00      	add	r7, sp, #0
  // Đọc giá trị các chân PA5, PA6, PA7 trực tiếp từ thanh ghi
  uint32_t idr = GPIOA->IDR;
 800049e:	4b27      	ldr	r3, [pc, #156]	@ (800053c <BLDC_Start+0xa4>)
 80004a0:	691b      	ldr	r3, [r3, #16]
 80004a2:	60bb      	str	r3, [r7, #8]
  uint8_t hallA = (idr >> 5) & 0x01;
 80004a4:	68bb      	ldr	r3, [r7, #8]
 80004a6:	095b      	lsrs	r3, r3, #5
 80004a8:	b2db      	uxtb	r3, r3
 80004aa:	f003 0301 	and.w	r3, r3, #1
 80004ae:	71fb      	strb	r3, [r7, #7]
  uint8_t hallB = (idr >> 6) & 0x01;
 80004b0:	68bb      	ldr	r3, [r7, #8]
 80004b2:	099b      	lsrs	r3, r3, #6
 80004b4:	b2db      	uxtb	r3, r3
 80004b6:	f003 0301 	and.w	r3, r3, #1
 80004ba:	71bb      	strb	r3, [r7, #6]
  uint8_t hallC = (idr >> 7) & 0x01;
 80004bc:	68bb      	ldr	r3, [r7, #8]
 80004be:	09db      	lsrs	r3, r3, #7
 80004c0:	b2db      	uxtb	r3, r3
 80004c2:	f003 0301 	and.w	r3, r3, #1
 80004c6:	717b      	strb	r3, [r7, #5]

  hallState = (hallA << 2) | (hallB << 1) | hallC;
 80004c8:	79fb      	ldrb	r3, [r7, #7]
 80004ca:	009b      	lsls	r3, r3, #2
 80004cc:	b25a      	sxtb	r2, r3
 80004ce:	79bb      	ldrb	r3, [r7, #6]
 80004d0:	005b      	lsls	r3, r3, #1
 80004d2:	b25b      	sxtb	r3, r3
 80004d4:	4313      	orrs	r3, r2
 80004d6:	b25a      	sxtb	r2, r3
 80004d8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80004dc:	4313      	orrs	r3, r2
 80004de:	b25b      	sxtb	r3, r3
 80004e0:	b2da      	uxtb	r2, r3
 80004e2:	4b17      	ldr	r3, [pc, #92]	@ (8000540 <BLDC_Start+0xa8>)
 80004e4:	701a      	strb	r2, [r3, #0]

  // Nếu hallState không hợp lệ (000), đặt bước đầu tiên
  if (hallState == 0) {
 80004e6:	4b16      	ldr	r3, [pc, #88]	@ (8000540 <BLDC_Start+0xa8>)
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d103      	bne.n	80004f8 <BLDC_Start+0x60>
	  currentCommStep = 0;
 80004f0:	4b14      	ldr	r3, [pc, #80]	@ (8000544 <BLDC_Start+0xac>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	701a      	strb	r2, [r3, #0]
 80004f6:	e014      	b.n	8000522 <BLDC_Start+0x8a>
  } else {
	  // Tra trong bảng hallSequenceCW[]
	  for (uint8_t i = 0; i < 6; i++) {
 80004f8:	2300      	movs	r3, #0
 80004fa:	73fb      	strb	r3, [r7, #15]
 80004fc:	e00e      	b.n	800051c <BLDC_Start+0x84>
		  if (hallState == hallSequenceCW[i]) {
 80004fe:	7bfb      	ldrb	r3, [r7, #15]
 8000500:	4a11      	ldr	r2, [pc, #68]	@ (8000548 <BLDC_Start+0xb0>)
 8000502:	5cd2      	ldrb	r2, [r2, r3]
 8000504:	4b0e      	ldr	r3, [pc, #56]	@ (8000540 <BLDC_Start+0xa8>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	b2db      	uxtb	r3, r3
 800050a:	429a      	cmp	r2, r3
 800050c:	d103      	bne.n	8000516 <BLDC_Start+0x7e>
			  currentCommStep = i;
 800050e:	4a0d      	ldr	r2, [pc, #52]	@ (8000544 <BLDC_Start+0xac>)
 8000510:	7bfb      	ldrb	r3, [r7, #15]
 8000512:	7013      	strb	r3, [r2, #0]
			  break;
 8000514:	e005      	b.n	8000522 <BLDC_Start+0x8a>
	  for (uint8_t i = 0; i < 6; i++) {
 8000516:	7bfb      	ldrb	r3, [r7, #15]
 8000518:	3301      	adds	r3, #1
 800051a:	73fb      	strb	r3, [r7, #15]
 800051c:	7bfb      	ldrb	r3, [r7, #15]
 800051e:	2b05      	cmp	r3, #5
 8000520:	d9ed      	bls.n	80004fe <BLDC_Start+0x66>
		  }
	  }
  }
    handleCommutation(currentCommStep, pwmVal);
 8000522:	4b08      	ldr	r3, [pc, #32]	@ (8000544 <BLDC_Start+0xac>)
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	b2db      	uxtb	r3, r3
 8000528:	4a08      	ldr	r2, [pc, #32]	@ (800054c <BLDC_Start+0xb4>)
 800052a:	7812      	ldrb	r2, [r2, #0]
 800052c:	4611      	mov	r1, r2
 800052e:	4618      	mov	r0, r3
 8000530:	f7ff fe4a 	bl	80001c8 <handleCommutation>
}
 8000534:	bf00      	nop
 8000536:	3710      	adds	r7, #16
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	40020000 	.word	0x40020000
 8000540:	2000017c 	.word	0x2000017c
 8000544:	2000017d 	.word	0x2000017d
 8000548:	08007178 	.word	0x08007178
 800054c:	20000000 	.word	0x20000000

08000550 <main>:
//======================================================
//MAIN
//======================================================

int main(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
  HAL_Init();
 8000556:	f000 fbb7 	bl	8000cc8 <HAL_Init>
  SystemClock_Config();
 800055a:	f000 f839 	bl	80005d0 <SystemClock_Config>

  MX_USB_DEVICE_Init();
 800055e:	f005 fc2f 	bl	8005dc0 <MX_USB_DEVICE_Init>

  GPIO_Init();
 8000562:	f000 f995 	bl	8000890 <GPIO_Init>

  TIM2_Init();
 8000566:	f000 f891 	bl	800068c <TIM2_Init>
  TIM3_Init();
 800056a:	f000 f8f1 	bl	8000750 <TIM3_Init>
  TIM4_Init();
 800056e:	f000 f93f 	bl	80007f0 <TIM4_Init>

  USART1_UART_Init();
 8000572:	f000 fa63 	bl	8000a3c <USART1_UART_Init>

  BLDC_Start();
 8000576:	f7ff ff8f 	bl	8000498 <BLDC_Start>

  while (1)
  {
	if (bufferTail != bufferHead) {
 800057a:	4b11      	ldr	r3, [pc, #68]	@ (80005c0 <main+0x70>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	b2da      	uxtb	r2, r3
 8000580:	4b10      	ldr	r3, [pc, #64]	@ (80005c4 <main+0x74>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	b2db      	uxtb	r3, r3
 8000586:	429a      	cmp	r2, r3
 8000588:	d0f7      	beq.n	800057a <main+0x2a>
	  uint8_t step = commBuffer[bufferTail];
 800058a:	4b0d      	ldr	r3, [pc, #52]	@ (80005c0 <main+0x70>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	b2db      	uxtb	r3, r3
 8000590:	461a      	mov	r2, r3
 8000592:	4b0d      	ldr	r3, [pc, #52]	@ (80005c8 <main+0x78>)
 8000594:	5c9b      	ldrb	r3, [r3, r2]
 8000596:	71fb      	strb	r3, [r7, #7]
	  bufferTail = (bufferTail + 1) % BUFFER_SIZE;
 8000598:	4b09      	ldr	r3, [pc, #36]	@ (80005c0 <main+0x70>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	b2db      	uxtb	r3, r3
 800059e:	3301      	adds	r3, #1
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	f003 0301 	and.w	r3, r3, #1
 80005a6:	bfb8      	it	lt
 80005a8:	425b      	neglt	r3, r3
 80005aa:	b2da      	uxtb	r2, r3
 80005ac:	4b04      	ldr	r3, [pc, #16]	@ (80005c0 <main+0x70>)
 80005ae:	701a      	strb	r2, [r3, #0]
	  handleCommutation(step, pwmVal);
 80005b0:	4b06      	ldr	r3, [pc, #24]	@ (80005cc <main+0x7c>)
 80005b2:	781a      	ldrb	r2, [r3, #0]
 80005b4:	79fb      	ldrb	r3, [r7, #7]
 80005b6:	4611      	mov	r1, r2
 80005b8:	4618      	mov	r0, r3
 80005ba:	f7ff fe05 	bl	80001c8 <handleCommutation>
	if (bufferTail != bufferHead) {
 80005be:	e7dc      	b.n	800057a <main+0x2a>
 80005c0:	2000017b 	.word	0x2000017b
 80005c4:	2000017a 	.word	0x2000017a
 80005c8:	20000178 	.word	0x20000178
 80005cc:	20000000 	.word	0x20000000

080005d0 <SystemClock_Config>:

//======================================================
//SYSTEMCLOCK CONFIG
//======================================================
void SystemClock_Config(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
    // 1. Enable HSI (High-Speed Internal Clock)
    RCC->CR |= RCC_CR_HSION;
 80005d4:	4b2a      	ldr	r3, [pc, #168]	@ (8000680 <SystemClock_Config+0xb0>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a29      	ldr	r2, [pc, #164]	@ (8000680 <SystemClock_Config+0xb0>)
 80005da:	f043 0301 	orr.w	r3, r3, #1
 80005de:	6013      	str	r3, [r2, #0]
    while ((RCC->CR & RCC_CR_HSIRDY) == 0); // Wait till HSI is ready
 80005e0:	bf00      	nop
 80005e2:	4b27      	ldr	r3, [pc, #156]	@ (8000680 <SystemClock_Config+0xb0>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	f003 0302 	and.w	r3, r3, #2
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d0f9      	beq.n	80005e2 <SystemClock_Config+0x12>

    // 2. Reset PLL
    RCC->CR &= ~RCC_CR_PLLON; // Turn off PLL
 80005ee:	4b24      	ldr	r3, [pc, #144]	@ (8000680 <SystemClock_Config+0xb0>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a23      	ldr	r2, [pc, #140]	@ (8000680 <SystemClock_Config+0xb0>)
 80005f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80005f8:	6013      	str	r3, [r2, #0]
    while (RCC->CR & RCC_CR_PLLRDY); // Wait PLL disabled
 80005fa:	bf00      	nop
 80005fc:	4b20      	ldr	r3, [pc, #128]	@ (8000680 <SystemClock_Config+0xb0>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000604:	2b00      	cmp	r3, #0
 8000606:	d1f9      	bne.n	80005fc <SystemClock_Config+0x2c>
     * PLL_P = 4 (00: /2, 01: /4, ...)
     * PLL_Q = 7
     *
     * SYSCLK = ((16 MHz / 16) * 336) / 4 = 84 MHz
     */
    RCC->PLLCFGR = (16 << RCC_PLLCFGR_PLLM_Pos) |
 8000608:	4b1d      	ldr	r3, [pc, #116]	@ (8000680 <SystemClock_Config+0xb0>)
 800060a:	4a1e      	ldr	r2, [pc, #120]	@ (8000684 <SystemClock_Config+0xb4>)
 800060c:	605a      	str	r2, [r3, #4]
                   (1 << RCC_PLLCFGR_PLLP_Pos) |  // PLLP = 4 -> 01b
                   (7 << RCC_PLLCFGR_PLLQ_Pos) |
                   (RCC_PLLCFGR_PLLSRC_HSI);      // PLL source = HSI

    // 4. Enable PLL
    RCC->CR |= RCC_CR_PLLON;
 800060e:	4b1c      	ldr	r3, [pc, #112]	@ (8000680 <SystemClock_Config+0xb0>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4a1b      	ldr	r2, [pc, #108]	@ (8000680 <SystemClock_Config+0xb0>)
 8000614:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000618:	6013      	str	r3, [r2, #0]
    while ((RCC->CR & RCC_CR_PLLRDY) == 0); // Wait till PLL is ready
 800061a:	bf00      	nop
 800061c:	4b18      	ldr	r3, [pc, #96]	@ (8000680 <SystemClock_Config+0xb0>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000624:	2b00      	cmp	r3, #0
 8000626:	d0f9      	beq.n	800061c <SystemClock_Config+0x4c>

    // 5. Configure Flash Latency
    FLASH->ACR = FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_PRFTEN | FLASH_ACR_LATENCY_2WS;
 8000628:	4b17      	ldr	r3, [pc, #92]	@ (8000688 <SystemClock_Config+0xb8>)
 800062a:	f240 7202 	movw	r2, #1794	@ 0x702
 800062e:	601a      	str	r2, [r3, #0]

    // 6. Set AHB, APB1, APB2 prescaler
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;   // AHB prescaler = /1 -> 84 MHz
 8000630:	4b13      	ldr	r3, [pc, #76]	@ (8000680 <SystemClock_Config+0xb0>)
 8000632:	4a13      	ldr	r2, [pc, #76]	@ (8000680 <SystemClock_Config+0xb0>)
 8000634:	689b      	ldr	r3, [r3, #8]
 8000636:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;  // APB1 prescaler = /2 -> 42 MHz
 8000638:	4b11      	ldr	r3, [pc, #68]	@ (8000680 <SystemClock_Config+0xb0>)
 800063a:	689b      	ldr	r3, [r3, #8]
 800063c:	4a10      	ldr	r2, [pc, #64]	@ (8000680 <SystemClock_Config+0xb0>)
 800063e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000642:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;  // APB2 prescaler = /1 -> 84 MHz
 8000644:	4b0e      	ldr	r3, [pc, #56]	@ (8000680 <SystemClock_Config+0xb0>)
 8000646:	4a0e      	ldr	r2, [pc, #56]	@ (8000680 <SystemClock_Config+0xb0>)
 8000648:	689b      	ldr	r3, [r3, #8]
 800064a:	6093      	str	r3, [r2, #8]

    // 7. Select PLL as system clock
    RCC->CFGR &= ~RCC_CFGR_SW;         // Clear SW bits
 800064c:	4b0c      	ldr	r3, [pc, #48]	@ (8000680 <SystemClock_Config+0xb0>)
 800064e:	689b      	ldr	r3, [r3, #8]
 8000650:	4a0b      	ldr	r2, [pc, #44]	@ (8000680 <SystemClock_Config+0xb0>)
 8000652:	f023 0303 	bic.w	r3, r3, #3
 8000656:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;      // Select PLL as system clock
 8000658:	4b09      	ldr	r3, [pc, #36]	@ (8000680 <SystemClock_Config+0xb0>)
 800065a:	689b      	ldr	r3, [r3, #8]
 800065c:	4a08      	ldr	r2, [pc, #32]	@ (8000680 <SystemClock_Config+0xb0>)
 800065e:	f043 0302 	orr.w	r3, r3, #2
 8000662:	6093      	str	r3, [r2, #8]
    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL); // Wait till PLL is system clock
 8000664:	bf00      	nop
 8000666:	4b06      	ldr	r3, [pc, #24]	@ (8000680 <SystemClock_Config+0xb0>)
 8000668:	689b      	ldr	r3, [r3, #8]
 800066a:	f003 030c 	and.w	r3, r3, #12
 800066e:	2b08      	cmp	r3, #8
 8000670:	d1f9      	bne.n	8000666 <SystemClock_Config+0x96>
}
 8000672:	bf00      	nop
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	40023800 	.word	0x40023800
 8000684:	07015410 	.word	0x07015410
 8000688:	40023c00 	.word	0x40023c00

0800068c <TIM2_Init>:

//======================================================
//TIMER INITIALIZE
//======================================================
void TIM2_Init(void) {
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
    // Enable TIM2 clock
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000690:	4b2e      	ldr	r3, [pc, #184]	@ (800074c <TIM2_Init+0xc0>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000694:	4a2d      	ldr	r2, [pc, #180]	@ (800074c <TIM2_Init+0xc0>)
 8000696:	f043 0301 	orr.w	r3, r3, #1
 800069a:	6413      	str	r3, [r2, #64]	@ 0x40

    // Set prescaler and auto-reload for 1kHz PWM
    TIM2->PSC = 3;     // 84MHz / (3+1) = 21MHz
 800069c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006a0:	2203      	movs	r2, #3
 80006a2:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 1000;   // PWM frequency ~ 20.9Khz
 80006a4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006a8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80006ac:	62da      	str	r2, [r3, #44]	@ 0x2c

    // PWM mode 1, preload enable for CH1-CH4
    TIM2->CCMR1 |= (6 << 4) | TIM_CCMR1_OC1PE;  // CH1
 80006ae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006b8:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 80006bc:	6193      	str	r3, [r2, #24]
    TIM2->CCMR1 |= (6 << 12) | TIM_CCMR1_OC2PE; // CH2
 80006be:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006c8:	f443 43d0 	orr.w	r3, r3, #26624	@ 0x6800
 80006cc:	6193      	str	r3, [r2, #24]
    TIM2->CCMR2 |= (6 << 4) | TIM_CCMR2_OC3PE;  // CH3
 80006ce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006d2:	69db      	ldr	r3, [r3, #28]
 80006d4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006d8:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 80006dc:	61d3      	str	r3, [r2, #28]
    TIM2->CCMR2 |= (6 << 12) | TIM_CCMR2_OC4PE; // CH4
 80006de:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006e2:	69db      	ldr	r3, [r3, #28]
 80006e4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006e8:	f443 43d0 	orr.w	r3, r3, #26624	@ 0x6800
 80006ec:	61d3      	str	r3, [r2, #28]

    // Enable outputs
    TIM2->CCER |= TIM_CCER_CC1E | TIM_CCER_CC2E |
 80006ee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006f2:	6a1b      	ldr	r3, [r3, #32]
 80006f4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006f8:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 80006fc:	f043 0311 	orr.w	r3, r3, #17
 8000700:	6213      	str	r3, [r2, #32]
                  TIM_CCER_CC3E | TIM_CCER_CC4E;

    // Force update
    TIM2->EGR |= TIM_EGR_UG;
 8000702:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000706:	695b      	ldr	r3, [r3, #20]
 8000708:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	6153      	str	r3, [r2, #20]

    // Set duty cycle = 0
    TIM2->CCR1 = 0;
 8000712:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000716:	2200      	movs	r2, #0
 8000718:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2->CCR2 = 0;
 800071a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800071e:	2200      	movs	r2, #0
 8000720:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM2->CCR3 = 0;
 8000722:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000726:	2200      	movs	r2, #0
 8000728:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2->CCR4 = 0;
 800072a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800072e:	2200      	movs	r2, #0
 8000730:	641a      	str	r2, [r3, #64]	@ 0x40

    // Enable counter
    TIM2->CR1 |= TIM_CR1_CEN;
 8000732:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6013      	str	r3, [r2, #0]
}
 8000742:	bf00      	nop
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	40023800 	.word	0x40023800

08000750 <TIM3_Init>:

void TIM3_Init(void) {
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000754:	4b24      	ldr	r3, [pc, #144]	@ (80007e8 <TIM3_Init+0x98>)
 8000756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000758:	4a23      	ldr	r2, [pc, #140]	@ (80007e8 <TIM3_Init+0x98>)
 800075a:	f043 0302 	orr.w	r3, r3, #2
 800075e:	6413      	str	r3, [r2, #64]	@ 0x40
    TIM3->PSC = 3;
 8000760:	4b22      	ldr	r3, [pc, #136]	@ (80007ec <TIM3_Init+0x9c>)
 8000762:	2203      	movs	r2, #3
 8000764:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM3->ARR = 1000;
 8000766:	4b21      	ldr	r3, [pc, #132]	@ (80007ec <TIM3_Init+0x9c>)
 8000768:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800076c:	62da      	str	r2, [r3, #44]	@ 0x2c

    TIM3->CCMR1 |= (6 << 4) | TIM_CCMR1_OC1PE;
 800076e:	4b1f      	ldr	r3, [pc, #124]	@ (80007ec <TIM3_Init+0x9c>)
 8000770:	699b      	ldr	r3, [r3, #24]
 8000772:	4a1e      	ldr	r2, [pc, #120]	@ (80007ec <TIM3_Init+0x9c>)
 8000774:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 8000778:	6193      	str	r3, [r2, #24]
    TIM3->CCMR1 |= (6 << 12) | TIM_CCMR1_OC2PE;
 800077a:	4b1c      	ldr	r3, [pc, #112]	@ (80007ec <TIM3_Init+0x9c>)
 800077c:	699b      	ldr	r3, [r3, #24]
 800077e:	4a1b      	ldr	r2, [pc, #108]	@ (80007ec <TIM3_Init+0x9c>)
 8000780:	f443 43d0 	orr.w	r3, r3, #26624	@ 0x6800
 8000784:	6193      	str	r3, [r2, #24]
    TIM3->CCMR2 |= (6 << 4) | TIM_CCMR2_OC3PE;
 8000786:	4b19      	ldr	r3, [pc, #100]	@ (80007ec <TIM3_Init+0x9c>)
 8000788:	69db      	ldr	r3, [r3, #28]
 800078a:	4a18      	ldr	r2, [pc, #96]	@ (80007ec <TIM3_Init+0x9c>)
 800078c:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 8000790:	61d3      	str	r3, [r2, #28]
    TIM3->CCMR2 |= (6 << 12) | TIM_CCMR2_OC4PE;
 8000792:	4b16      	ldr	r3, [pc, #88]	@ (80007ec <TIM3_Init+0x9c>)
 8000794:	69db      	ldr	r3, [r3, #28]
 8000796:	4a15      	ldr	r2, [pc, #84]	@ (80007ec <TIM3_Init+0x9c>)
 8000798:	f443 43d0 	orr.w	r3, r3, #26624	@ 0x6800
 800079c:	61d3      	str	r3, [r2, #28]

    TIM3->CCER |= TIM_CCER_CC1E | TIM_CCER_CC2E |
 800079e:	4b13      	ldr	r3, [pc, #76]	@ (80007ec <TIM3_Init+0x9c>)
 80007a0:	6a1b      	ldr	r3, [r3, #32]
 80007a2:	4a12      	ldr	r2, [pc, #72]	@ (80007ec <TIM3_Init+0x9c>)
 80007a4:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 80007a8:	f043 0311 	orr.w	r3, r3, #17
 80007ac:	6213      	str	r3, [r2, #32]
                  TIM_CCER_CC3E | TIM_CCER_CC4E;

    TIM3->EGR |= TIM_EGR_UG;
 80007ae:	4b0f      	ldr	r3, [pc, #60]	@ (80007ec <TIM3_Init+0x9c>)
 80007b0:	695b      	ldr	r3, [r3, #20]
 80007b2:	4a0e      	ldr	r2, [pc, #56]	@ (80007ec <TIM3_Init+0x9c>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6153      	str	r3, [r2, #20]

    TIM3->CCR1 = 0;
 80007ba:	4b0c      	ldr	r3, [pc, #48]	@ (80007ec <TIM3_Init+0x9c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3->CCR2 = 0;
 80007c0:	4b0a      	ldr	r3, [pc, #40]	@ (80007ec <TIM3_Init+0x9c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3->CCR3 = 0;
 80007c6:	4b09      	ldr	r3, [pc, #36]	@ (80007ec <TIM3_Init+0x9c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM3->CCR4 = 0;
 80007cc:	4b07      	ldr	r3, [pc, #28]	@ (80007ec <TIM3_Init+0x9c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	641a      	str	r2, [r3, #64]	@ 0x40

    TIM3->CR1 |= TIM_CR1_CEN;
 80007d2:	4b06      	ldr	r3, [pc, #24]	@ (80007ec <TIM3_Init+0x9c>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a05      	ldr	r2, [pc, #20]	@ (80007ec <TIM3_Init+0x9c>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	6013      	str	r3, [r2, #0]
}
 80007de:	bf00      	nop
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40000400 	.word	0x40000400

080007f0 <TIM4_Init>:

void TIM4_Init(void) {
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 80007f4:	4b24      	ldr	r3, [pc, #144]	@ (8000888 <TIM4_Init+0x98>)
 80007f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f8:	4a23      	ldr	r2, [pc, #140]	@ (8000888 <TIM4_Init+0x98>)
 80007fa:	f043 0304 	orr.w	r3, r3, #4
 80007fe:	6413      	str	r3, [r2, #64]	@ 0x40
    TIM4->PSC = 3;
 8000800:	4b22      	ldr	r3, [pc, #136]	@ (800088c <TIM4_Init+0x9c>)
 8000802:	2203      	movs	r2, #3
 8000804:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM4->ARR = 1000;
 8000806:	4b21      	ldr	r3, [pc, #132]	@ (800088c <TIM4_Init+0x9c>)
 8000808:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800080c:	62da      	str	r2, [r3, #44]	@ 0x2c

    TIM4->CCMR1 |= (6 << 4) | TIM_CCMR1_OC1PE;
 800080e:	4b1f      	ldr	r3, [pc, #124]	@ (800088c <TIM4_Init+0x9c>)
 8000810:	699b      	ldr	r3, [r3, #24]
 8000812:	4a1e      	ldr	r2, [pc, #120]	@ (800088c <TIM4_Init+0x9c>)
 8000814:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 8000818:	6193      	str	r3, [r2, #24]
    TIM4->CCMR1 |= (6 << 12) | TIM_CCMR1_OC2PE;
 800081a:	4b1c      	ldr	r3, [pc, #112]	@ (800088c <TIM4_Init+0x9c>)
 800081c:	699b      	ldr	r3, [r3, #24]
 800081e:	4a1b      	ldr	r2, [pc, #108]	@ (800088c <TIM4_Init+0x9c>)
 8000820:	f443 43d0 	orr.w	r3, r3, #26624	@ 0x6800
 8000824:	6193      	str	r3, [r2, #24]
    TIM4->CCMR2 |= (6 << 4) | TIM_CCMR2_OC3PE;
 8000826:	4b19      	ldr	r3, [pc, #100]	@ (800088c <TIM4_Init+0x9c>)
 8000828:	69db      	ldr	r3, [r3, #28]
 800082a:	4a18      	ldr	r2, [pc, #96]	@ (800088c <TIM4_Init+0x9c>)
 800082c:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 8000830:	61d3      	str	r3, [r2, #28]
    TIM4->CCMR2 |= (6 << 12) | TIM_CCMR2_OC4PE;
 8000832:	4b16      	ldr	r3, [pc, #88]	@ (800088c <TIM4_Init+0x9c>)
 8000834:	69db      	ldr	r3, [r3, #28]
 8000836:	4a15      	ldr	r2, [pc, #84]	@ (800088c <TIM4_Init+0x9c>)
 8000838:	f443 43d0 	orr.w	r3, r3, #26624	@ 0x6800
 800083c:	61d3      	str	r3, [r2, #28]

    TIM4->CCER |= TIM_CCER_CC1E | TIM_CCER_CC2E |
 800083e:	4b13      	ldr	r3, [pc, #76]	@ (800088c <TIM4_Init+0x9c>)
 8000840:	6a1b      	ldr	r3, [r3, #32]
 8000842:	4a12      	ldr	r2, [pc, #72]	@ (800088c <TIM4_Init+0x9c>)
 8000844:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 8000848:	f043 0311 	orr.w	r3, r3, #17
 800084c:	6213      	str	r3, [r2, #32]
                  TIM_CCER_CC3E | TIM_CCER_CC4E;

    TIM4->EGR |= TIM_EGR_UG;
 800084e:	4b0f      	ldr	r3, [pc, #60]	@ (800088c <TIM4_Init+0x9c>)
 8000850:	695b      	ldr	r3, [r3, #20]
 8000852:	4a0e      	ldr	r2, [pc, #56]	@ (800088c <TIM4_Init+0x9c>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6153      	str	r3, [r2, #20]

    TIM4->CCR1 = 0;
 800085a:	4b0c      	ldr	r3, [pc, #48]	@ (800088c <TIM4_Init+0x9c>)
 800085c:	2200      	movs	r2, #0
 800085e:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM4->CCR2 = 0;
 8000860:	4b0a      	ldr	r3, [pc, #40]	@ (800088c <TIM4_Init+0x9c>)
 8000862:	2200      	movs	r2, #0
 8000864:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM4->CCR3 = 0;
 8000866:	4b09      	ldr	r3, [pc, #36]	@ (800088c <TIM4_Init+0x9c>)
 8000868:	2200      	movs	r2, #0
 800086a:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM4->CCR4 = 0;
 800086c:	4b07      	ldr	r3, [pc, #28]	@ (800088c <TIM4_Init+0x9c>)
 800086e:	2200      	movs	r2, #0
 8000870:	641a      	str	r2, [r3, #64]	@ 0x40

    TIM4->CR1 |= TIM_CR1_CEN;
 8000872:	4b06      	ldr	r3, [pc, #24]	@ (800088c <TIM4_Init+0x9c>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4a05      	ldr	r2, [pc, #20]	@ (800088c <TIM4_Init+0x9c>)
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	6013      	str	r3, [r2, #0]
}
 800087e:	bf00      	nop
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	40023800 	.word	0x40023800
 800088c:	40000800 	.word	0x40000800

08000890 <GPIO_Init>:

//======================================================
//GPIO INITIALIZE
//======================================================
void GPIO_Init(void) {
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
    // Enable GPIOA and GPIOB clock
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000894:	4b66      	ldr	r3, [pc, #408]	@ (8000a30 <GPIO_Init+0x1a0>)
 8000896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000898:	4a65      	ldr	r2, [pc, #404]	@ (8000a30 <GPIO_Init+0x1a0>)
 800089a:	f043 0301 	orr.w	r3, r3, #1
 800089e:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80008a0:	4b63      	ldr	r3, [pc, #396]	@ (8000a30 <GPIO_Init+0x1a0>)
 80008a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a4:	4a62      	ldr	r2, [pc, #392]	@ (8000a30 <GPIO_Init+0x1a0>)
 80008a6:	f043 0302 	orr.w	r3, r3, #2
 80008aa:	6313      	str	r3, [r2, #48]	@ 0x30


    // SET TIMER PIN FOR Alternate Function
    // PA0–PA3 (TIM2_CH1–CH4)
    GPIOA->MODER &= ~(0xFF << (0 * 2));          // Clear mode bits for PA0–PA3
 80008ac:	4b61      	ldr	r3, [pc, #388]	@ (8000a34 <GPIO_Init+0x1a4>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a60      	ldr	r2, [pc, #384]	@ (8000a34 <GPIO_Init+0x1a4>)
 80008b2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80008b6:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (0xAA << (0 * 2));          // Set mode = AF (10)
 80008b8:	4b5e      	ldr	r3, [pc, #376]	@ (8000a34 <GPIO_Init+0x1a4>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a5d      	ldr	r2, [pc, #372]	@ (8000a34 <GPIO_Init+0x1a4>)
 80008be:	f043 03aa 	orr.w	r3, r3, #170	@ 0xaa
 80008c2:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= ~0xFFFF;                    // Clear AFRL[15:0]
 80008c4:	4b5b      	ldr	r3, [pc, #364]	@ (8000a34 <GPIO_Init+0x1a4>)
 80008c6:	6a1b      	ldr	r3, [r3, #32]
 80008c8:	4a5a      	ldr	r2, [pc, #360]	@ (8000a34 <GPIO_Init+0x1a4>)
 80008ca:	0c1b      	lsrs	r3, r3, #16
 80008cc:	041b      	lsls	r3, r3, #16
 80008ce:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (0x1111 << 0);              // AF1 for PA0–PA3
 80008d0:	4b58      	ldr	r3, [pc, #352]	@ (8000a34 <GPIO_Init+0x1a4>)
 80008d2:	6a1b      	ldr	r3, [r3, #32]
 80008d4:	4a57      	ldr	r2, [pc, #348]	@ (8000a34 <GPIO_Init+0x1a4>)
 80008d6:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 80008da:	f043 0311 	orr.w	r3, r3, #17
 80008de:	6213      	str	r3, [r2, #32]

    // PA6–PA7 (TIM3_CH1–CH2), AF2
    GPIOA->MODER &= ~(0xF << (6 * 2));
 80008e0:	4b54      	ldr	r3, [pc, #336]	@ (8000a34 <GPIO_Init+0x1a4>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a53      	ldr	r2, [pc, #332]	@ (8000a34 <GPIO_Init+0x1a4>)
 80008e6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80008ea:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (0xA << (6 * 2));
 80008ec:	4b51      	ldr	r3, [pc, #324]	@ (8000a34 <GPIO_Init+0x1a4>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a50      	ldr	r2, [pc, #320]	@ (8000a34 <GPIO_Init+0x1a4>)
 80008f2:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 80008f6:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= ~(0xFF << (6 * 4));
 80008f8:	4b4e      	ldr	r3, [pc, #312]	@ (8000a34 <GPIO_Init+0x1a4>)
 80008fa:	6a1b      	ldr	r3, [r3, #32]
 80008fc:	4a4d      	ldr	r2, [pc, #308]	@ (8000a34 <GPIO_Init+0x1a4>)
 80008fe:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8000902:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |=  (0x22 << (6 * 4));
 8000904:	4b4b      	ldr	r3, [pc, #300]	@ (8000a34 <GPIO_Init+0x1a4>)
 8000906:	6a1b      	ldr	r3, [r3, #32]
 8000908:	4a4a      	ldr	r2, [pc, #296]	@ (8000a34 <GPIO_Init+0x1a4>)
 800090a:	f043 5308 	orr.w	r3, r3, #570425344	@ 0x22000000
 800090e:	6213      	str	r3, [r2, #32]

    // PB0–PB1 (TIM3_CH3–CH4), AF2
    GPIOB->MODER &= ~(0xF << (0 * 2));
 8000910:	4b49      	ldr	r3, [pc, #292]	@ (8000a38 <GPIO_Init+0x1a8>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a48      	ldr	r2, [pc, #288]	@ (8000a38 <GPIO_Init+0x1a8>)
 8000916:	f023 030f 	bic.w	r3, r3, #15
 800091a:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (0xA << (0 * 2));
 800091c:	4b46      	ldr	r3, [pc, #280]	@ (8000a38 <GPIO_Init+0x1a8>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a45      	ldr	r2, [pc, #276]	@ (8000a38 <GPIO_Init+0x1a8>)
 8000922:	f043 030a 	orr.w	r3, r3, #10
 8000926:	6013      	str	r3, [r2, #0]
    GPIOB->AFR[0] &= ~(0xFF << (0 * 4));
 8000928:	4b43      	ldr	r3, [pc, #268]	@ (8000a38 <GPIO_Init+0x1a8>)
 800092a:	6a1b      	ldr	r3, [r3, #32]
 800092c:	4a42      	ldr	r2, [pc, #264]	@ (8000a38 <GPIO_Init+0x1a8>)
 800092e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000932:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[0] |=  (0x22 << (0 * 4));
 8000934:	4b40      	ldr	r3, [pc, #256]	@ (8000a38 <GPIO_Init+0x1a8>)
 8000936:	6a1b      	ldr	r3, [r3, #32]
 8000938:	4a3f      	ldr	r2, [pc, #252]	@ (8000a38 <GPIO_Init+0x1a8>)
 800093a:	f043 0322 	orr.w	r3, r3, #34	@ 0x22
 800093e:	6213      	str	r3, [r2, #32]

    // PB6–PB9 (TIM4_CH1–CH4), AF2
    GPIOB->MODER &= ~(0xFF << (6 * 2));
 8000940:	4b3d      	ldr	r3, [pc, #244]	@ (8000a38 <GPIO_Init+0x1a8>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a3c      	ldr	r2, [pc, #240]	@ (8000a38 <GPIO_Init+0x1a8>)
 8000946:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 800094a:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (0xAA << (6 * 2));
 800094c:	4b3a      	ldr	r3, [pc, #232]	@ (8000a38 <GPIO_Init+0x1a8>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a39      	ldr	r2, [pc, #228]	@ (8000a38 <GPIO_Init+0x1a8>)
 8000952:	f443 232a 	orr.w	r3, r3, #696320	@ 0xaa000
 8000956:	6013      	str	r3, [r2, #0]

    GPIOB->AFR[0] &= ~((0xF << (6 * 4)) | (0xF << (7 * 4)));
 8000958:	4b37      	ldr	r3, [pc, #220]	@ (8000a38 <GPIO_Init+0x1a8>)
 800095a:	6a1b      	ldr	r3, [r3, #32]
 800095c:	4a36      	ldr	r2, [pc, #216]	@ (8000a38 <GPIO_Init+0x1a8>)
 800095e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8000962:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[0] |=  ((0x2 << (6 * 4)) | (0x2 << (7 * 4)));
 8000964:	4b34      	ldr	r3, [pc, #208]	@ (8000a38 <GPIO_Init+0x1a8>)
 8000966:	6a1b      	ldr	r3, [r3, #32]
 8000968:	4a33      	ldr	r2, [pc, #204]	@ (8000a38 <GPIO_Init+0x1a8>)
 800096a:	f043 5308 	orr.w	r3, r3, #570425344	@ 0x22000000
 800096e:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[1] &= ~((0xF << (0 * 4)) | (0xF << (1 * 4)));
 8000970:	4b31      	ldr	r3, [pc, #196]	@ (8000a38 <GPIO_Init+0x1a8>)
 8000972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000974:	4a30      	ldr	r2, [pc, #192]	@ (8000a38 <GPIO_Init+0x1a8>)
 8000976:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800097a:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->AFR[1] |=  ((0x2 << (0 * 4)) | (0x2 << (1 * 4)));
 800097c:	4b2e      	ldr	r3, [pc, #184]	@ (8000a38 <GPIO_Init+0x1a8>)
 800097e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000980:	4a2d      	ldr	r2, [pc, #180]	@ (8000a38 <GPIO_Init+0x1a8>)
 8000982:	f043 0322 	orr.w	r3, r3, #34	@ 0x22
 8000986:	6253      	str	r3, [r2, #36]	@ 0x24


    // SET INPUT PIN FOR HALL SENSOR ( PA5 6 7)
    GPIOA->MODER &= ~(0b11 << (5 * 2));  // Clear PA5
 8000988:	4b2a      	ldr	r3, [pc, #168]	@ (8000a34 <GPIO_Init+0x1a4>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a29      	ldr	r2, [pc, #164]	@ (8000a34 <GPIO_Init+0x1a4>)
 800098e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000992:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~(0b11 << (6 * 2));  // Clear PA6
 8000994:	4b27      	ldr	r3, [pc, #156]	@ (8000a34 <GPIO_Init+0x1a4>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a26      	ldr	r2, [pc, #152]	@ (8000a34 <GPIO_Init+0x1a4>)
 800099a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800099e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~(0b11 << (7 * 2));  // Clear PA7
 80009a0:	4b24      	ldr	r3, [pc, #144]	@ (8000a34 <GPIO_Init+0x1a4>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a23      	ldr	r2, [pc, #140]	@ (8000a34 <GPIO_Init+0x1a4>)
 80009a6:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80009aa:	6013      	str	r3, [r2, #0]

    GPIOA->PUPDR &= ~(0b11 << (5 * 2));
 80009ac:	4b21      	ldr	r3, [pc, #132]	@ (8000a34 <GPIO_Init+0x1a4>)
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	4a20      	ldr	r2, [pc, #128]	@ (8000a34 <GPIO_Init+0x1a4>)
 80009b2:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80009b6:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR |=  (0b01 << (5 * 2));  // Pull-up cho PA5
 80009b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000a34 <GPIO_Init+0x1a4>)
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	4a1d      	ldr	r2, [pc, #116]	@ (8000a34 <GPIO_Init+0x1a4>)
 80009be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009c2:	60d3      	str	r3, [r2, #12]

    GPIOA->PUPDR &= ~(0b11 << (6 * 2));
 80009c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a34 <GPIO_Init+0x1a4>)
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	4a1a      	ldr	r2, [pc, #104]	@ (8000a34 <GPIO_Init+0x1a4>)
 80009ca:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80009ce:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR |=  (0b01 << (6 * 2));  // Pull-up cho PA6
 80009d0:	4b18      	ldr	r3, [pc, #96]	@ (8000a34 <GPIO_Init+0x1a4>)
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	4a17      	ldr	r2, [pc, #92]	@ (8000a34 <GPIO_Init+0x1a4>)
 80009d6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80009da:	60d3      	str	r3, [r2, #12]

    GPIOA->PUPDR &= ~(0b11 << (7 * 2));
 80009dc:	4b15      	ldr	r3, [pc, #84]	@ (8000a34 <GPIO_Init+0x1a4>)
 80009de:	68db      	ldr	r3, [r3, #12]
 80009e0:	4a14      	ldr	r2, [pc, #80]	@ (8000a34 <GPIO_Init+0x1a4>)
 80009e2:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80009e6:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR |=  (0b01 << (7 * 2));  // Pull-up cho PA7
 80009e8:	4b12      	ldr	r3, [pc, #72]	@ (8000a34 <GPIO_Init+0x1a4>)
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	4a11      	ldr	r2, [pc, #68]	@ (8000a34 <GPIO_Init+0x1a4>)
 80009ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009f2:	60d3      	str	r3, [r2, #12]

    //SET PA9 (TX) và PA10 (RX) ở AF7 FOR USART1
    GPIOA->MODER &= ~((0b11 << (9 * 2)) | (0b11 << (10 * 2))); // Clear
 80009f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000a34 <GPIO_Init+0x1a4>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a0e      	ldr	r2, [pc, #56]	@ (8000a34 <GPIO_Init+0x1a4>)
 80009fa:	f423 1370 	bic.w	r3, r3, #3932160	@ 0x3c0000
 80009fe:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  ((0b10 << (9 * 2)) | (0b10 << (10 * 2))); // AF mode
 8000a00:	4b0c      	ldr	r3, [pc, #48]	@ (8000a34 <GPIO_Init+0x1a4>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a0b      	ldr	r2, [pc, #44]	@ (8000a34 <GPIO_Init+0x1a4>)
 8000a06:	f443 1320 	orr.w	r3, r3, #2621440	@ 0x280000
 8000a0a:	6013      	str	r3, [r2, #0]

    GPIOA->AFR[1] &= ~((0xF << (1 * 4)) | (0xF << (2 * 4)));   // Clear AFRH9/10
 8000a0c:	4b09      	ldr	r3, [pc, #36]	@ (8000a34 <GPIO_Init+0x1a4>)
 8000a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a10:	4a08      	ldr	r2, [pc, #32]	@ (8000a34 <GPIO_Init+0x1a4>)
 8000a12:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8000a16:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOA->AFR[1] |=  ((0x7 << (1 * 4)) | (0x7 << (2 * 4)));   // AF7 = USART1
 8000a18:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <GPIO_Init+0x1a4>)
 8000a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a1c:	4a05      	ldr	r2, [pc, #20]	@ (8000a34 <GPIO_Init+0x1a4>)
 8000a1e:	f443 63ee 	orr.w	r3, r3, #1904	@ 0x770
 8000a22:	6253      	str	r3, [r2, #36]	@ 0x24

}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40020000 	.word	0x40020000
 8000a38:	40020400 	.word	0x40020400

08000a3c <USART1_UART_Init>:

//======================================================
//UART INITIALIZE
//======================================================
void USART1_UART_Init(void) {
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN;  // Enable USART1 (nằm trên APB2)
 8000a40:	4b0e      	ldr	r3, [pc, #56]	@ (8000a7c <USART1_UART_Init+0x40>)
 8000a42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a44:	4a0d      	ldr	r2, [pc, #52]	@ (8000a7c <USART1_UART_Init+0x40>)
 8000a46:	f043 0310 	orr.w	r3, r3, #16
 8000a4a:	6453      	str	r3, [r2, #68]	@ 0x44

    USART1->CR1 = 0;  // Tắt USART trước khi cấu hình
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a80 <USART1_UART_Init+0x44>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	60da      	str	r2, [r3, #12]

    // Baudrate: ví dụ 115200 với PCLK2 = 84MHz
    // USARTDIV = 84MHz / (16 * 115200) ≈ 45.5625
    // Mantissa = 45, Fraction = 0.5625 * 16 ≈ 9 → BRR = 0x2D9
    USART1->BRR = (45 << 4) | 9;
 8000a52:	4b0b      	ldr	r3, [pc, #44]	@ (8000a80 <USART1_UART_Init+0x44>)
 8000a54:	f240 22d9 	movw	r2, #729	@ 0x2d9
 8000a58:	609a      	str	r2, [r3, #8]

    // 8-bit data, 1 stop bit, no parity, no flow control
    USART1->CR1 |= USART_CR1_TE | USART_CR1_RE;  // Enable TX + RX
 8000a5a:	4b09      	ldr	r3, [pc, #36]	@ (8000a80 <USART1_UART_Init+0x44>)
 8000a5c:	68db      	ldr	r3, [r3, #12]
 8000a5e:	4a08      	ldr	r2, [pc, #32]	@ (8000a80 <USART1_UART_Init+0x44>)
 8000a60:	f043 030c 	orr.w	r3, r3, #12
 8000a64:	60d3      	str	r3, [r2, #12]
    USART1->CR1 |= USART_CR1_UE;                 // Bật USART
 8000a66:	4b06      	ldr	r3, [pc, #24]	@ (8000a80 <USART1_UART_Init+0x44>)
 8000a68:	68db      	ldr	r3, [r3, #12]
 8000a6a:	4a05      	ldr	r2, [pc, #20]	@ (8000a80 <USART1_UART_Init+0x44>)
 8000a6c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000a70:	60d3      	str	r3, [r2, #12]
}
 8000a72:	bf00      	nop
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	40011000 	.word	0x40011000

08000a84 <Error_Handler>:

//======================================================
//ERROR HANDLER
//======================================================
void Error_Handler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
    printf("Error Handler invoked!\n");
 8000a88:	4802      	ldr	r0, [pc, #8]	@ (8000a94 <Error_Handler+0x10>)
 8000a8a:	f005 ffa5 	bl	80069d8 <puts>
    while(1);
 8000a8e:	bf00      	nop
 8000a90:	e7fd      	b.n	8000a8e <Error_Handler+0xa>
 8000a92:	bf00      	nop
 8000a94:	08007118 	.word	0x08007118

08000a98 <HAL_MspInit>:
#include "main.h"

void HAL_MspInit(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	4b10      	ldr	r3, [pc, #64]	@ (8000ae4 <HAL_MspInit+0x4c>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aa6:	4a0f      	ldr	r2, [pc, #60]	@ (8000ae4 <HAL_MspInit+0x4c>)
 8000aa8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aac:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aae:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae4 <HAL_MspInit+0x4c>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ab2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	603b      	str	r3, [r7, #0]
 8000abe:	4b09      	ldr	r3, [pc, #36]	@ (8000ae4 <HAL_MspInit+0x4c>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac2:	4a08      	ldr	r2, [pc, #32]	@ (8000ae4 <HAL_MspInit+0x4c>)
 8000ac4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ac8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aca:	4b06      	ldr	r3, [pc, #24]	@ (8000ae4 <HAL_MspInit+0x4c>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]
}
 8000ad6:	bf00      	nop
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	40023800 	.word	0x40023800

08000ae8 <SysTick_Handler>:
#include "stm32f4xx_it.h"

extern PCD_HandleTypeDef hpcd_USB_OTG_FS;

void SysTick_Handler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8000aec:	f000 f93e 	bl	8000d6c <HAL_IncTick>
}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <OTG_FS_IRQHandler>:

void OTG_FS_IRQHandler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000af8:	4802      	ldr	r0, [pc, #8]	@ (8000b04 <OTG_FS_IRQHandler+0x10>)
 8000afa:	f000 fd6d 	bl	80015d8 <HAL_PCD_IRQHandler>
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20001668 	.word	0x20001668

08000b08 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]
 8000b18:	e00a      	b.n	8000b30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b1a:	f3af 8000 	nop.w
 8000b1e:	4601      	mov	r1, r0
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	1c5a      	adds	r2, r3, #1
 8000b24:	60ba      	str	r2, [r7, #8]
 8000b26:	b2ca      	uxtb	r2, r1
 8000b28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	617b      	str	r3, [r7, #20]
 8000b30:	697a      	ldr	r2, [r7, #20]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	dbf0      	blt.n	8000b1a <_read+0x12>
  }

  return len;
 8000b38:	687b      	ldr	r3, [r7, #4]
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3718      	adds	r7, #24
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b086      	sub	sp, #24
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	60f8      	str	r0, [r7, #12]
 8000b4a:	60b9      	str	r1, [r7, #8]
 8000b4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b4e:	2300      	movs	r3, #0
 8000b50:	617b      	str	r3, [r7, #20]
 8000b52:	e009      	b.n	8000b68 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	1c5a      	adds	r2, r3, #1
 8000b58:	60ba      	str	r2, [r7, #8]
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	3301      	adds	r3, #1
 8000b66:	617b      	str	r3, [r7, #20]
 8000b68:	697a      	ldr	r2, [r7, #20]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	dbf1      	blt.n	8000b54 <_write+0x12>
  }
  return len;
 8000b70:	687b      	ldr	r3, [r7, #4]
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3718      	adds	r7, #24
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <_close>:

int _close(int file)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	b083      	sub	sp, #12
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b92:	b480      	push	{r7}
 8000b94:	b083      	sub	sp, #12
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
 8000b9a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ba2:	605a      	str	r2, [r3, #4]
  return 0;
 8000ba4:	2300      	movs	r3, #0
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr

08000bb2 <_isatty>:

int _isatty(int file)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	b083      	sub	sp, #12
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bba:	2301      	movs	r3, #1
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3714      	adds	r7, #20
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
	...

08000be4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b086      	sub	sp, #24
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bec:	4a14      	ldr	r2, [pc, #80]	@ (8000c40 <_sbrk+0x5c>)
 8000bee:	4b15      	ldr	r3, [pc, #84]	@ (8000c44 <_sbrk+0x60>)
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bf8:	4b13      	ldr	r3, [pc, #76]	@ (8000c48 <_sbrk+0x64>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d102      	bne.n	8000c06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c00:	4b11      	ldr	r3, [pc, #68]	@ (8000c48 <_sbrk+0x64>)
 8000c02:	4a12      	ldr	r2, [pc, #72]	@ (8000c4c <_sbrk+0x68>)
 8000c04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c06:	4b10      	ldr	r3, [pc, #64]	@ (8000c48 <_sbrk+0x64>)
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d207      	bcs.n	8000c24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c14:	f006 f80e 	bl	8006c34 <__errno>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	220c      	movs	r2, #12
 8000c1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c22:	e009      	b.n	8000c38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c24:	4b08      	ldr	r3, [pc, #32]	@ (8000c48 <_sbrk+0x64>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c2a:	4b07      	ldr	r3, [pc, #28]	@ (8000c48 <_sbrk+0x64>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4413      	add	r3, r2
 8000c32:	4a05      	ldr	r2, [pc, #20]	@ (8000c48 <_sbrk+0x64>)
 8000c34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c36:	68fb      	ldr	r3, [r7, #12]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3718      	adds	r7, #24
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20020000 	.word	0x20020000
 8000c44:	00000400 	.word	0x00000400
 8000c48:	20000180 	.word	0x20000180
 8000c4c:	20001eb8 	.word	0x20001eb8

08000c50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c54:	4b06      	ldr	r3, [pc, #24]	@ (8000c70 <SystemInit+0x20>)
 8000c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c5a:	4a05      	ldr	r2, [pc, #20]	@ (8000c70 <SystemInit+0x20>)
 8000c5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c78:	f7ff ffea 	bl	8000c50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c7c:	480c      	ldr	r0, [pc, #48]	@ (8000cb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c7e:	490d      	ldr	r1, [pc, #52]	@ (8000cb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c80:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c84:	e002      	b.n	8000c8c <LoopCopyDataInit>

08000c86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c8a:	3304      	adds	r3, #4

08000c8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c90:	d3f9      	bcc.n	8000c86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c92:	4a0a      	ldr	r2, [pc, #40]	@ (8000cbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c94:	4c0a      	ldr	r4, [pc, #40]	@ (8000cc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c98:	e001      	b.n	8000c9e <LoopFillZerobss>

08000c9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c9c:	3204      	adds	r2, #4

08000c9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca0:	d3fb      	bcc.n	8000c9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ca2:	f005 ffcd 	bl	8006c40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ca6:	f7ff fc53 	bl	8000550 <main>
  bx  lr    
 8000caa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb4:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 8000cb8:	08007188 	.word	0x08007188
  ldr r2, =_sbss
 8000cbc:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 8000cc0:	20001eb8 	.word	0x20001eb8

08000cc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cc4:	e7fe      	b.n	8000cc4 <ADC_IRQHandler>
	...

08000cc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ccc:	4b0e      	ldr	r3, [pc, #56]	@ (8000d08 <HAL_Init+0x40>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a0d      	ldr	r2, [pc, #52]	@ (8000d08 <HAL_Init+0x40>)
 8000cd2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8000d08 <HAL_Init+0x40>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a0a      	ldr	r2, [pc, #40]	@ (8000d08 <HAL_Init+0x40>)
 8000cde:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ce2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce4:	4b08      	ldr	r3, [pc, #32]	@ (8000d08 <HAL_Init+0x40>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a07      	ldr	r2, [pc, #28]	@ (8000d08 <HAL_Init+0x40>)
 8000cea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf0:	2003      	movs	r0, #3
 8000cf2:	f000 f94f 	bl	8000f94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cf6:	200f      	movs	r0, #15
 8000cf8:	f000 f808 	bl	8000d0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cfc:	f7ff fecc 	bl	8000a98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d00:	2300      	movs	r3, #0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40023c00 	.word	0x40023c00

08000d0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d14:	4b12      	ldr	r3, [pc, #72]	@ (8000d60 <HAL_InitTick+0x54>)
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	4b12      	ldr	r3, [pc, #72]	@ (8000d64 <HAL_InitTick+0x58>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 f967 	bl	8000ffe <HAL_SYSTICK_Config>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	e00e      	b.n	8000d58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2b0f      	cmp	r3, #15
 8000d3e:	d80a      	bhi.n	8000d56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d40:	2200      	movs	r2, #0
 8000d42:	6879      	ldr	r1, [r7, #4]
 8000d44:	f04f 30ff 	mov.w	r0, #4294967295
 8000d48:	f000 f92f 	bl	8000faa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d4c:	4a06      	ldr	r2, [pc, #24]	@ (8000d68 <HAL_InitTick+0x5c>)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d52:	2300      	movs	r3, #0
 8000d54:	e000      	b.n	8000d58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20000004 	.word	0x20000004
 8000d64:	2000000c 	.word	0x2000000c
 8000d68:	20000008 	.word	0x20000008

08000d6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d70:	4b06      	ldr	r3, [pc, #24]	@ (8000d8c <HAL_IncTick+0x20>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	461a      	mov	r2, r3
 8000d76:	4b06      	ldr	r3, [pc, #24]	@ (8000d90 <HAL_IncTick+0x24>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	4a04      	ldr	r2, [pc, #16]	@ (8000d90 <HAL_IncTick+0x24>)
 8000d7e:	6013      	str	r3, [r2, #0]
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	2000000c 	.word	0x2000000c
 8000d90:	20000184 	.word	0x20000184

08000d94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  return uwTick;
 8000d98:	4b03      	ldr	r3, [pc, #12]	@ (8000da8 <HAL_GetTick+0x14>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	20000184 	.word	0x20000184

08000dac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000db4:	f7ff ffee 	bl	8000d94 <HAL_GetTick>
 8000db8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dc4:	d005      	beq.n	8000dd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000df0 <HAL_Delay+0x44>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	4413      	add	r3, r2
 8000dd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dd2:	bf00      	nop
 8000dd4:	f7ff ffde 	bl	8000d94 <HAL_GetTick>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	68fa      	ldr	r2, [r7, #12]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d8f7      	bhi.n	8000dd4 <HAL_Delay+0x28>
  {
  }
}
 8000de4:	bf00      	nop
 8000de6:	bf00      	nop
 8000de8:	3710      	adds	r7, #16
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	2000000c 	.word	0x2000000c

08000df4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	f003 0307 	and.w	r3, r3, #7
 8000e02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e04:	4b0c      	ldr	r3, [pc, #48]	@ (8000e38 <__NVIC_SetPriorityGrouping+0x44>)
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e0a:	68ba      	ldr	r2, [r7, #8]
 8000e0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e10:	4013      	ands	r3, r2
 8000e12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e26:	4a04      	ldr	r2, [pc, #16]	@ (8000e38 <__NVIC_SetPriorityGrouping+0x44>)
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	60d3      	str	r3, [r2, #12]
}
 8000e2c:	bf00      	nop
 8000e2e:	3714      	adds	r7, #20
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e40:	4b04      	ldr	r3, [pc, #16]	@ (8000e54 <__NVIC_GetPriorityGrouping+0x18>)
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	0a1b      	lsrs	r3, r3, #8
 8000e46:	f003 0307 	and.w	r3, r3, #7
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	db0b      	blt.n	8000e82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	f003 021f 	and.w	r2, r3, #31
 8000e70:	4907      	ldr	r1, [pc, #28]	@ (8000e90 <__NVIC_EnableIRQ+0x38>)
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	095b      	lsrs	r3, r3, #5
 8000e78:	2001      	movs	r0, #1
 8000e7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e82:	bf00      	nop
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	e000e100 	.word	0xe000e100

08000e94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	6039      	str	r1, [r7, #0]
 8000e9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	db0a      	blt.n	8000ebe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	b2da      	uxtb	r2, r3
 8000eac:	490c      	ldr	r1, [pc, #48]	@ (8000ee0 <__NVIC_SetPriority+0x4c>)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	0112      	lsls	r2, r2, #4
 8000eb4:	b2d2      	uxtb	r2, r2
 8000eb6:	440b      	add	r3, r1
 8000eb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ebc:	e00a      	b.n	8000ed4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	4908      	ldr	r1, [pc, #32]	@ (8000ee4 <__NVIC_SetPriority+0x50>)
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	f003 030f 	and.w	r3, r3, #15
 8000eca:	3b04      	subs	r3, #4
 8000ecc:	0112      	lsls	r2, r2, #4
 8000ece:	b2d2      	uxtb	r2, r2
 8000ed0:	440b      	add	r3, r1
 8000ed2:	761a      	strb	r2, [r3, #24]
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	e000e100 	.word	0xe000e100
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b089      	sub	sp, #36	@ 0x24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	f1c3 0307 	rsb	r3, r3, #7
 8000f02:	2b04      	cmp	r3, #4
 8000f04:	bf28      	it	cs
 8000f06:	2304      	movcs	r3, #4
 8000f08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	3304      	adds	r3, #4
 8000f0e:	2b06      	cmp	r3, #6
 8000f10:	d902      	bls.n	8000f18 <NVIC_EncodePriority+0x30>
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	3b03      	subs	r3, #3
 8000f16:	e000      	b.n	8000f1a <NVIC_EncodePriority+0x32>
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43da      	mvns	r2, r3
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	401a      	ands	r2, r3
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f30:	f04f 31ff 	mov.w	r1, #4294967295
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3a:	43d9      	mvns	r1, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f40:	4313      	orrs	r3, r2
         );
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3724      	adds	r7, #36	@ 0x24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
	...

08000f50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f60:	d301      	bcc.n	8000f66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f62:	2301      	movs	r3, #1
 8000f64:	e00f      	b.n	8000f86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f66:	4a0a      	ldr	r2, [pc, #40]	@ (8000f90 <SysTick_Config+0x40>)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f6e:	210f      	movs	r1, #15
 8000f70:	f04f 30ff 	mov.w	r0, #4294967295
 8000f74:	f7ff ff8e 	bl	8000e94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f78:	4b05      	ldr	r3, [pc, #20]	@ (8000f90 <SysTick_Config+0x40>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f7e:	4b04      	ldr	r3, [pc, #16]	@ (8000f90 <SysTick_Config+0x40>)
 8000f80:	2207      	movs	r2, #7
 8000f82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	e000e010 	.word	0xe000e010

08000f94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f7ff ff29 	bl	8000df4 <__NVIC_SetPriorityGrouping>
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b086      	sub	sp, #24
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	60b9      	str	r1, [r7, #8]
 8000fb4:	607a      	str	r2, [r7, #4]
 8000fb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fbc:	f7ff ff3e 	bl	8000e3c <__NVIC_GetPriorityGrouping>
 8000fc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	68b9      	ldr	r1, [r7, #8]
 8000fc6:	6978      	ldr	r0, [r7, #20]
 8000fc8:	f7ff ff8e 	bl	8000ee8 <NVIC_EncodePriority>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ff5d 	bl	8000e94 <__NVIC_SetPriority>
}
 8000fda:	bf00      	nop
 8000fdc:	3718      	adds	r7, #24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b082      	sub	sp, #8
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	4603      	mov	r3, r0
 8000fea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff ff31 	bl	8000e58 <__NVIC_EnableIRQ>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b082      	sub	sp, #8
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f7ff ffa2 	bl	8000f50 <SysTick_Config>
 800100c:	4603      	mov	r3, r0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
	...

08001018 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001018:	b480      	push	{r7}
 800101a:	b089      	sub	sp, #36	@ 0x24
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001026:	2300      	movs	r3, #0
 8001028:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800102a:	2300      	movs	r3, #0
 800102c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800102e:	2300      	movs	r3, #0
 8001030:	61fb      	str	r3, [r7, #28]
 8001032:	e16b      	b.n	800130c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001034:	2201      	movs	r2, #1
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	697a      	ldr	r2, [r7, #20]
 8001044:	4013      	ands	r3, r2
 8001046:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	429a      	cmp	r2, r3
 800104e:	f040 815a 	bne.w	8001306 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f003 0303 	and.w	r3, r3, #3
 800105a:	2b01      	cmp	r3, #1
 800105c:	d005      	beq.n	800106a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001066:	2b02      	cmp	r3, #2
 8001068:	d130      	bne.n	80010cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	2203      	movs	r2, #3
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	43db      	mvns	r3, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4013      	ands	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	68da      	ldr	r2, [r3, #12]
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4313      	orrs	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010a0:	2201      	movs	r2, #1
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	091b      	lsrs	r3, r3, #4
 80010b6:	f003 0201 	and.w	r2, r3, #1
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f003 0303 	and.w	r3, r3, #3
 80010d4:	2b03      	cmp	r3, #3
 80010d6:	d017      	beq.n	8001108 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	2203      	movs	r2, #3
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4013      	ands	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	689a      	ldr	r2, [r3, #8]
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4313      	orrs	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f003 0303 	and.w	r3, r3, #3
 8001110:	2b02      	cmp	r3, #2
 8001112:	d123      	bne.n	800115c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	08da      	lsrs	r2, r3, #3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3208      	adds	r2, #8
 800111c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001120:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	f003 0307 	and.w	r3, r3, #7
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	220f      	movs	r2, #15
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	43db      	mvns	r3, r3
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4013      	ands	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	691a      	ldr	r2, [r3, #16]
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4313      	orrs	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	08da      	lsrs	r2, r3, #3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	3208      	adds	r2, #8
 8001156:	69b9      	ldr	r1, [r7, #24]
 8001158:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	2203      	movs	r2, #3
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f003 0203 	and.w	r2, r3, #3
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4313      	orrs	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001198:	2b00      	cmp	r3, #0
 800119a:	f000 80b4 	beq.w	8001306 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	4b60      	ldr	r3, [pc, #384]	@ (8001324 <HAL_GPIO_Init+0x30c>)
 80011a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a6:	4a5f      	ldr	r2, [pc, #380]	@ (8001324 <HAL_GPIO_Init+0x30c>)
 80011a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80011ae:	4b5d      	ldr	r3, [pc, #372]	@ (8001324 <HAL_GPIO_Init+0x30c>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011ba:	4a5b      	ldr	r2, [pc, #364]	@ (8001328 <HAL_GPIO_Init+0x310>)
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	089b      	lsrs	r3, r3, #2
 80011c0:	3302      	adds	r3, #2
 80011c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f003 0303 	and.w	r3, r3, #3
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	220f      	movs	r2, #15
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43db      	mvns	r3, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4013      	ands	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a52      	ldr	r2, [pc, #328]	@ (800132c <HAL_GPIO_Init+0x314>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d02b      	beq.n	800123e <HAL_GPIO_Init+0x226>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a51      	ldr	r2, [pc, #324]	@ (8001330 <HAL_GPIO_Init+0x318>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d025      	beq.n	800123a <HAL_GPIO_Init+0x222>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a50      	ldr	r2, [pc, #320]	@ (8001334 <HAL_GPIO_Init+0x31c>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d01f      	beq.n	8001236 <HAL_GPIO_Init+0x21e>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a4f      	ldr	r2, [pc, #316]	@ (8001338 <HAL_GPIO_Init+0x320>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d019      	beq.n	8001232 <HAL_GPIO_Init+0x21a>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a4e      	ldr	r2, [pc, #312]	@ (800133c <HAL_GPIO_Init+0x324>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d013      	beq.n	800122e <HAL_GPIO_Init+0x216>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a4d      	ldr	r2, [pc, #308]	@ (8001340 <HAL_GPIO_Init+0x328>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d00d      	beq.n	800122a <HAL_GPIO_Init+0x212>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a4c      	ldr	r2, [pc, #304]	@ (8001344 <HAL_GPIO_Init+0x32c>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d007      	beq.n	8001226 <HAL_GPIO_Init+0x20e>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a4b      	ldr	r2, [pc, #300]	@ (8001348 <HAL_GPIO_Init+0x330>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d101      	bne.n	8001222 <HAL_GPIO_Init+0x20a>
 800121e:	2307      	movs	r3, #7
 8001220:	e00e      	b.n	8001240 <HAL_GPIO_Init+0x228>
 8001222:	2308      	movs	r3, #8
 8001224:	e00c      	b.n	8001240 <HAL_GPIO_Init+0x228>
 8001226:	2306      	movs	r3, #6
 8001228:	e00a      	b.n	8001240 <HAL_GPIO_Init+0x228>
 800122a:	2305      	movs	r3, #5
 800122c:	e008      	b.n	8001240 <HAL_GPIO_Init+0x228>
 800122e:	2304      	movs	r3, #4
 8001230:	e006      	b.n	8001240 <HAL_GPIO_Init+0x228>
 8001232:	2303      	movs	r3, #3
 8001234:	e004      	b.n	8001240 <HAL_GPIO_Init+0x228>
 8001236:	2302      	movs	r3, #2
 8001238:	e002      	b.n	8001240 <HAL_GPIO_Init+0x228>
 800123a:	2301      	movs	r3, #1
 800123c:	e000      	b.n	8001240 <HAL_GPIO_Init+0x228>
 800123e:	2300      	movs	r3, #0
 8001240:	69fa      	ldr	r2, [r7, #28]
 8001242:	f002 0203 	and.w	r2, r2, #3
 8001246:	0092      	lsls	r2, r2, #2
 8001248:	4093      	lsls	r3, r2
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4313      	orrs	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001250:	4935      	ldr	r1, [pc, #212]	@ (8001328 <HAL_GPIO_Init+0x310>)
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	089b      	lsrs	r3, r3, #2
 8001256:	3302      	adds	r3, #2
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800125e:	4b3b      	ldr	r3, [pc, #236]	@ (800134c <HAL_GPIO_Init+0x334>)
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	43db      	mvns	r3, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4013      	ands	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d003      	beq.n	8001282 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	4313      	orrs	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001282:	4a32      	ldr	r2, [pc, #200]	@ (800134c <HAL_GPIO_Init+0x334>)
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001288:	4b30      	ldr	r3, [pc, #192]	@ (800134c <HAL_GPIO_Init+0x334>)
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	43db      	mvns	r3, r3
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4013      	ands	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d003      	beq.n	80012ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012ac:	4a27      	ldr	r2, [pc, #156]	@ (800134c <HAL_GPIO_Init+0x334>)
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012b2:	4b26      	ldr	r3, [pc, #152]	@ (800134c <HAL_GPIO_Init+0x334>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	43db      	mvns	r3, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4013      	ands	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012d6:	4a1d      	ldr	r2, [pc, #116]	@ (800134c <HAL_GPIO_Init+0x334>)
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012dc:	4b1b      	ldr	r3, [pc, #108]	@ (800134c <HAL_GPIO_Init+0x334>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	43db      	mvns	r3, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4013      	ands	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d003      	beq.n	8001300 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001300:	4a12      	ldr	r2, [pc, #72]	@ (800134c <HAL_GPIO_Init+0x334>)
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	3301      	adds	r3, #1
 800130a:	61fb      	str	r3, [r7, #28]
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	2b0f      	cmp	r3, #15
 8001310:	f67f ae90 	bls.w	8001034 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001314:	bf00      	nop
 8001316:	bf00      	nop
 8001318:	3724      	adds	r7, #36	@ 0x24
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	40023800 	.word	0x40023800
 8001328:	40013800 	.word	0x40013800
 800132c:	40020000 	.word	0x40020000
 8001330:	40020400 	.word	0x40020400
 8001334:	40020800 	.word	0x40020800
 8001338:	40020c00 	.word	0x40020c00
 800133c:	40021000 	.word	0x40021000
 8001340:	40021400 	.word	0x40021400
 8001344:	40021800 	.word	0x40021800
 8001348:	40021c00 	.word	0x40021c00
 800134c:	40013c00 	.word	0x40013c00

08001350 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af02      	add	r7, sp, #8
 8001356:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d101      	bne.n	8001362 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e101      	b.n	8001566 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800136e:	b2db      	uxtb	r3, r3
 8001370:	2b00      	cmp	r3, #0
 8001372:	d106      	bne.n	8001382 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f004 feff 	bl	8006180 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2203      	movs	r2, #3
 8001386:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001390:	d102      	bne.n	8001398 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2200      	movs	r2, #0
 8001396:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4618      	mov	r0, r3
 800139e:	f001 fb4c 	bl	8002a3a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6818      	ldr	r0, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	7c1a      	ldrb	r2, [r3, #16]
 80013aa:	f88d 2000 	strb.w	r2, [sp]
 80013ae:	3304      	adds	r3, #4
 80013b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013b2:	f001 fa2b 	bl	800280c <USB_CoreInit>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d005      	beq.n	80013c8 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2202      	movs	r2, #2
 80013c0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e0ce      	b.n	8001566 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2100      	movs	r1, #0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f001 fb44 	bl	8002a5c <USB_SetCurrentMode>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d005      	beq.n	80013e6 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2202      	movs	r2, #2
 80013de:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e0bf      	b.n	8001566 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013e6:	2300      	movs	r3, #0
 80013e8:	73fb      	strb	r3, [r7, #15]
 80013ea:	e04a      	b.n	8001482 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013ec:	7bfa      	ldrb	r2, [r7, #15]
 80013ee:	6879      	ldr	r1, [r7, #4]
 80013f0:	4613      	mov	r3, r2
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	4413      	add	r3, r2
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	440b      	add	r3, r1
 80013fa:	3315      	adds	r3, #21
 80013fc:	2201      	movs	r2, #1
 80013fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001400:	7bfa      	ldrb	r2, [r7, #15]
 8001402:	6879      	ldr	r1, [r7, #4]
 8001404:	4613      	mov	r3, r2
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	4413      	add	r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	440b      	add	r3, r1
 800140e:	3314      	adds	r3, #20
 8001410:	7bfa      	ldrb	r2, [r7, #15]
 8001412:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001414:	7bfa      	ldrb	r2, [r7, #15]
 8001416:	7bfb      	ldrb	r3, [r7, #15]
 8001418:	b298      	uxth	r0, r3
 800141a:	6879      	ldr	r1, [r7, #4]
 800141c:	4613      	mov	r3, r2
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	4413      	add	r3, r2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	440b      	add	r3, r1
 8001426:	332e      	adds	r3, #46	@ 0x2e
 8001428:	4602      	mov	r2, r0
 800142a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800142c:	7bfa      	ldrb	r2, [r7, #15]
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	4613      	mov	r3, r2
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	4413      	add	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	440b      	add	r3, r1
 800143a:	3318      	adds	r3, #24
 800143c:	2200      	movs	r2, #0
 800143e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001440:	7bfa      	ldrb	r2, [r7, #15]
 8001442:	6879      	ldr	r1, [r7, #4]
 8001444:	4613      	mov	r3, r2
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	4413      	add	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	440b      	add	r3, r1
 800144e:	331c      	adds	r3, #28
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001454:	7bfa      	ldrb	r2, [r7, #15]
 8001456:	6879      	ldr	r1, [r7, #4]
 8001458:	4613      	mov	r3, r2
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	4413      	add	r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	440b      	add	r3, r1
 8001462:	3320      	adds	r3, #32
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001468:	7bfa      	ldrb	r2, [r7, #15]
 800146a:	6879      	ldr	r1, [r7, #4]
 800146c:	4613      	mov	r3, r2
 800146e:	00db      	lsls	r3, r3, #3
 8001470:	4413      	add	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	440b      	add	r3, r1
 8001476:	3324      	adds	r3, #36	@ 0x24
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800147c:	7bfb      	ldrb	r3, [r7, #15]
 800147e:	3301      	adds	r3, #1
 8001480:	73fb      	strb	r3, [r7, #15]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	791b      	ldrb	r3, [r3, #4]
 8001486:	7bfa      	ldrb	r2, [r7, #15]
 8001488:	429a      	cmp	r2, r3
 800148a:	d3af      	bcc.n	80013ec <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800148c:	2300      	movs	r3, #0
 800148e:	73fb      	strb	r3, [r7, #15]
 8001490:	e044      	b.n	800151c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001492:	7bfa      	ldrb	r2, [r7, #15]
 8001494:	6879      	ldr	r1, [r7, #4]
 8001496:	4613      	mov	r3, r2
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	4413      	add	r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	440b      	add	r3, r1
 80014a0:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80014a4:	2200      	movs	r2, #0
 80014a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80014a8:	7bfa      	ldrb	r2, [r7, #15]
 80014aa:	6879      	ldr	r1, [r7, #4]
 80014ac:	4613      	mov	r3, r2
 80014ae:	00db      	lsls	r3, r3, #3
 80014b0:	4413      	add	r3, r2
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	440b      	add	r3, r1
 80014b6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80014ba:	7bfa      	ldrb	r2, [r7, #15]
 80014bc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80014be:	7bfa      	ldrb	r2, [r7, #15]
 80014c0:	6879      	ldr	r1, [r7, #4]
 80014c2:	4613      	mov	r3, r2
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	4413      	add	r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	440b      	add	r3, r1
 80014cc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80014d0:	2200      	movs	r2, #0
 80014d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80014d4:	7bfa      	ldrb	r2, [r7, #15]
 80014d6:	6879      	ldr	r1, [r7, #4]
 80014d8:	4613      	mov	r3, r2
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	4413      	add	r3, r2
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	440b      	add	r3, r1
 80014e2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014ea:	7bfa      	ldrb	r2, [r7, #15]
 80014ec:	6879      	ldr	r1, [r7, #4]
 80014ee:	4613      	mov	r3, r2
 80014f0:	00db      	lsls	r3, r3, #3
 80014f2:	4413      	add	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	440b      	add	r3, r1
 80014f8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001500:	7bfa      	ldrb	r2, [r7, #15]
 8001502:	6879      	ldr	r1, [r7, #4]
 8001504:	4613      	mov	r3, r2
 8001506:	00db      	lsls	r3, r3, #3
 8001508:	4413      	add	r3, r2
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	440b      	add	r3, r1
 800150e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001516:	7bfb      	ldrb	r3, [r7, #15]
 8001518:	3301      	adds	r3, #1
 800151a:	73fb      	strb	r3, [r7, #15]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	791b      	ldrb	r3, [r3, #4]
 8001520:	7bfa      	ldrb	r2, [r7, #15]
 8001522:	429a      	cmp	r2, r3
 8001524:	d3b5      	bcc.n	8001492 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6818      	ldr	r0, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	7c1a      	ldrb	r2, [r3, #16]
 800152e:	f88d 2000 	strb.w	r2, [sp]
 8001532:	3304      	adds	r3, #4
 8001534:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001536:	f001 fadd 	bl	8002af4 <USB_DevInit>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d005      	beq.n	800154c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2202      	movs	r2, #2
 8001544:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e00c      	b.n	8001566 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2201      	movs	r2, #1
 8001556:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4618      	mov	r0, r3
 8001560:	f002 fb27 	bl	8003bb2 <USB_DevDisconnect>

  return HAL_OK;
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b084      	sub	sp, #16
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001582:	2b01      	cmp	r3, #1
 8001584:	d101      	bne.n	800158a <HAL_PCD_Start+0x1c>
 8001586:	2302      	movs	r3, #2
 8001588:	e022      	b.n	80015d0 <HAL_PCD_Start+0x62>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2201      	movs	r2, #1
 800158e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800159a:	2b00      	cmp	r3, #0
 800159c:	d009      	beq.n	80015b2 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d105      	bne.n	80015b2 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015aa:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f001 fa2e 	bl	8002a18 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f002 fad5 	bl	8003b70 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80015d8:	b590      	push	{r4, r7, lr}
 80015da:	b08d      	sub	sp, #52	@ 0x34
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80015e6:	6a3b      	ldr	r3, [r7, #32]
 80015e8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f002 fb93 	bl	8003d1a <USB_GetMode>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f040 848c 	bne.w	8001f14 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4618      	mov	r0, r3
 8001602:	f002 faf7 	bl	8003bf4 <USB_ReadInterrupts>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	f000 8482 	beq.w	8001f12 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	0a1b      	lsrs	r3, r3, #8
 8001618:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f002 fae4 	bl	8003bf4 <USB_ReadInterrupts>
 800162c:	4603      	mov	r3, r0
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b02      	cmp	r3, #2
 8001634:	d107      	bne.n	8001646 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	695a      	ldr	r2, [r3, #20]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f002 0202 	and.w	r2, r2, #2
 8001644:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4618      	mov	r0, r3
 800164c:	f002 fad2 	bl	8003bf4 <USB_ReadInterrupts>
 8001650:	4603      	mov	r3, r0
 8001652:	f003 0310 	and.w	r3, r3, #16
 8001656:	2b10      	cmp	r3, #16
 8001658:	d161      	bne.n	800171e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	699a      	ldr	r2, [r3, #24]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f022 0210 	bic.w	r2, r2, #16
 8001668:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800166a:	6a3b      	ldr	r3, [r7, #32]
 800166c:	6a1b      	ldr	r3, [r3, #32]
 800166e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	f003 020f 	and.w	r2, r3, #15
 8001676:	4613      	mov	r3, r2
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	4413      	add	r3, r2
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	4413      	add	r3, r2
 8001686:	3304      	adds	r3, #4
 8001688:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	0c5b      	lsrs	r3, r3, #17
 800168e:	f003 030f 	and.w	r3, r3, #15
 8001692:	2b02      	cmp	r3, #2
 8001694:	d124      	bne.n	80016e0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800169c:	4013      	ands	r3, r2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d035      	beq.n	800170e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	091b      	lsrs	r3, r3, #4
 80016aa:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80016ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	461a      	mov	r2, r3
 80016b4:	6a38      	ldr	r0, [r7, #32]
 80016b6:	f002 f909 	bl	80038cc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	68da      	ldr	r2, [r3, #12]
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	091b      	lsrs	r3, r3, #4
 80016c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016c6:	441a      	add	r2, r3
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	695a      	ldr	r2, [r3, #20]
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	091b      	lsrs	r3, r3, #4
 80016d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016d8:	441a      	add	r2, r3
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	615a      	str	r2, [r3, #20]
 80016de:	e016      	b.n	800170e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	0c5b      	lsrs	r3, r3, #17
 80016e4:	f003 030f 	and.w	r3, r3, #15
 80016e8:	2b06      	cmp	r3, #6
 80016ea:	d110      	bne.n	800170e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80016f2:	2208      	movs	r2, #8
 80016f4:	4619      	mov	r1, r3
 80016f6:	6a38      	ldr	r0, [r7, #32]
 80016f8:	f002 f8e8 	bl	80038cc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	695a      	ldr	r2, [r3, #20]
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	091b      	lsrs	r3, r3, #4
 8001704:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001708:	441a      	add	r2, r3
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	699a      	ldr	r2, [r3, #24]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f042 0210 	orr.w	r2, r2, #16
 800171c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4618      	mov	r0, r3
 8001724:	f002 fa66 	bl	8003bf4 <USB_ReadInterrupts>
 8001728:	4603      	mov	r3, r0
 800172a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800172e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001732:	f040 80a7 	bne.w	8001884 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001736:	2300      	movs	r3, #0
 8001738:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4618      	mov	r0, r3
 8001740:	f002 fa6b 	bl	8003c1a <USB_ReadDevAllOutEpInterrupt>
 8001744:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001746:	e099      	b.n	800187c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	2b00      	cmp	r3, #0
 8001750:	f000 808e 	beq.w	8001870 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	4611      	mov	r1, r2
 800175e:	4618      	mov	r0, r3
 8001760:	f002 fa8f 	bl	8003c82 <USB_ReadDevOutEPInterrupt>
 8001764:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	2b00      	cmp	r3, #0
 800176e:	d00c      	beq.n	800178a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001772:	015a      	lsls	r2, r3, #5
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	4413      	add	r3, r2
 8001778:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800177c:	461a      	mov	r2, r3
 800177e:	2301      	movs	r3, #1
 8001780:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001782:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f000 fea3 	bl	80024d0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	f003 0308 	and.w	r3, r3, #8
 8001790:	2b00      	cmp	r3, #0
 8001792:	d00c      	beq.n	80017ae <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001796:	015a      	lsls	r2, r3, #5
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	4413      	add	r3, r2
 800179c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017a0:	461a      	mov	r2, r3
 80017a2:	2308      	movs	r3, #8
 80017a4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80017a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f000 ff79 	bl	80026a0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	f003 0310 	and.w	r3, r3, #16
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d008      	beq.n	80017ca <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80017b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ba:	015a      	lsls	r2, r3, #5
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	4413      	add	r3, r2
 80017c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017c4:	461a      	mov	r2, r3
 80017c6:	2310      	movs	r3, #16
 80017c8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d030      	beq.n	8001836 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80017d4:	6a3b      	ldr	r3, [r7, #32]
 80017d6:	695b      	ldr	r3, [r3, #20]
 80017d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017dc:	2b80      	cmp	r3, #128	@ 0x80
 80017de:	d109      	bne.n	80017f4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	69fa      	ldr	r2, [r7, #28]
 80017ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80017ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017f2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80017f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017f6:	4613      	mov	r3, r2
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	4413      	add	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	4413      	add	r3, r2
 8001806:	3304      	adds	r3, #4
 8001808:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	78db      	ldrb	r3, [r3, #3]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d108      	bne.n	8001824 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	2200      	movs	r2, #0
 8001816:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800181a:	b2db      	uxtb	r3, r3
 800181c:	4619      	mov	r1, r3
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f004 fdb4 	bl	800638c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001826:	015a      	lsls	r2, r3, #5
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	4413      	add	r3, r2
 800182c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001830:	461a      	mov	r2, r3
 8001832:	2302      	movs	r3, #2
 8001834:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	f003 0320 	and.w	r3, r3, #32
 800183c:	2b00      	cmp	r3, #0
 800183e:	d008      	beq.n	8001852 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001842:	015a      	lsls	r2, r3, #5
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	4413      	add	r3, r2
 8001848:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800184c:	461a      	mov	r2, r3
 800184e:	2320      	movs	r3, #32
 8001850:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d009      	beq.n	8001870 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800185c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800185e:	015a      	lsls	r2, r3, #5
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	4413      	add	r3, r2
 8001864:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001868:	461a      	mov	r2, r3
 800186a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800186e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001872:	3301      	adds	r3, #1
 8001874:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001878:	085b      	lsrs	r3, r3, #1
 800187a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800187c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800187e:	2b00      	cmp	r3, #0
 8001880:	f47f af62 	bne.w	8001748 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f002 f9b3 	bl	8003bf4 <USB_ReadInterrupts>
 800188e:	4603      	mov	r3, r0
 8001890:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001894:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001898:	f040 80db 	bne.w	8001a52 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f002 f9d4 	bl	8003c4e <USB_ReadDevAllInEpInterrupt>
 80018a6:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80018a8:	2300      	movs	r3, #0
 80018aa:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80018ac:	e0cd      	b.n	8001a4a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80018ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018b0:	f003 0301 	and.w	r3, r3, #1
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f000 80c2 	beq.w	8001a3e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018c0:	b2d2      	uxtb	r2, r2
 80018c2:	4611      	mov	r1, r2
 80018c4:	4618      	mov	r0, r3
 80018c6:	f002 f9fa 	bl	8003cbe <USB_ReadDevInEPInterrupt>
 80018ca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d057      	beq.n	8001986 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80018d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d8:	f003 030f 	and.w	r3, r3, #15
 80018dc:	2201      	movs	r2, #1
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	43db      	mvns	r3, r3
 80018f0:	69f9      	ldr	r1, [r7, #28]
 80018f2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80018f6:	4013      	ands	r3, r2
 80018f8:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80018fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018fc:	015a      	lsls	r2, r3, #5
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	4413      	add	r3, r2
 8001902:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001906:	461a      	mov	r2, r3
 8001908:	2301      	movs	r3, #1
 800190a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	799b      	ldrb	r3, [r3, #6]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d132      	bne.n	800197a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001914:	6879      	ldr	r1, [r7, #4]
 8001916:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001918:	4613      	mov	r3, r2
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	4413      	add	r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	440b      	add	r3, r1
 8001922:	3320      	adds	r3, #32
 8001924:	6819      	ldr	r1, [r3, #0]
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800192a:	4613      	mov	r3, r2
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	4413      	add	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4403      	add	r3, r0
 8001934:	331c      	adds	r3, #28
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4419      	add	r1, r3
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800193e:	4613      	mov	r3, r2
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	4413      	add	r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	4403      	add	r3, r0
 8001948:	3320      	adds	r3, #32
 800194a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800194c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800194e:	2b00      	cmp	r3, #0
 8001950:	d113      	bne.n	800197a <HAL_PCD_IRQHandler+0x3a2>
 8001952:	6879      	ldr	r1, [r7, #4]
 8001954:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001956:	4613      	mov	r3, r2
 8001958:	00db      	lsls	r3, r3, #3
 800195a:	4413      	add	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	440b      	add	r3, r1
 8001960:	3324      	adds	r3, #36	@ 0x24
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d108      	bne.n	800197a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6818      	ldr	r0, [r3, #0]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001972:	461a      	mov	r2, r3
 8001974:	2101      	movs	r1, #1
 8001976:	f002 fa01 	bl	8003d7c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800197a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800197c:	b2db      	uxtb	r3, r3
 800197e:	4619      	mov	r1, r3
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f004 fc7e 	bl	8006282 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	f003 0308 	and.w	r3, r3, #8
 800198c:	2b00      	cmp	r3, #0
 800198e:	d008      	beq.n	80019a2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001992:	015a      	lsls	r2, r3, #5
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	4413      	add	r3, r2
 8001998:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800199c:	461a      	mov	r2, r3
 800199e:	2308      	movs	r3, #8
 80019a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	f003 0310 	and.w	r3, r3, #16
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d008      	beq.n	80019be <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80019ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ae:	015a      	lsls	r2, r3, #5
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	4413      	add	r3, r2
 80019b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80019b8:	461a      	mov	r2, r3
 80019ba:	2310      	movs	r3, #16
 80019bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d008      	beq.n	80019da <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80019c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ca:	015a      	lsls	r2, r3, #5
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	4413      	add	r3, r2
 80019d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80019d4:	461a      	mov	r2, r3
 80019d6:	2340      	movs	r3, #64	@ 0x40
 80019d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d023      	beq.n	8001a2c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80019e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80019e6:	6a38      	ldr	r0, [r7, #32]
 80019e8:	f001 f9e8 	bl	8002dbc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80019ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019ee:	4613      	mov	r3, r2
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	4413      	add	r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	3310      	adds	r3, #16
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	4413      	add	r3, r2
 80019fc:	3304      	adds	r3, #4
 80019fe:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	78db      	ldrb	r3, [r3, #3]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d108      	bne.n	8001a1a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	4619      	mov	r1, r3
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f004 fccb 	bl	80063b0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1c:	015a      	lsls	r2, r3, #5
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	4413      	add	r3, r2
 8001a22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001a26:	461a      	mov	r2, r3
 8001a28:	2302      	movs	r3, #2
 8001a2a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d003      	beq.n	8001a3e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001a36:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f000 fcbd 	bl	80023b8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a40:	3301      	adds	r3, #1
 8001a42:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a46:	085b      	lsrs	r3, r3, #1
 8001a48:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	f47f af2e 	bne.w	80018ae <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f002 f8cc 	bl	8003bf4 <USB_ReadInterrupts>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001a62:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001a66:	d122      	bne.n	8001aae <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	69fa      	ldr	r2, [r7, #28]
 8001a72:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a76:	f023 0301 	bic.w	r3, r3, #1
 8001a7a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d108      	bne.n	8001a98 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001a8e:	2100      	movs	r1, #0
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f000 fea3 	bl	80027dc <HAL_PCDEx_LPM_Callback>
 8001a96:	e002      	b.n	8001a9e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f004 fc69 	bl	8006370 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	695a      	ldr	r2, [r3, #20]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001aac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f002 f89e 	bl	8003bf4 <USB_ReadInterrupts>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001abe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001ac2:	d112      	bne.n	8001aea <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d102      	bne.n	8001ada <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f004 fc25 	bl	8006324 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	695a      	ldr	r2, [r3, #20]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001ae8:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f002 f880 	bl	8003bf4 <USB_ReadInterrupts>
 8001af4:	4603      	mov	r3, r0
 8001af6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001afa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001afe:	f040 80b7 	bne.w	8001c70 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	69fa      	ldr	r2, [r7, #28]
 8001b0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b10:	f023 0301 	bic.w	r3, r3, #1
 8001b14:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2110      	movs	r1, #16
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f001 f94d 	bl	8002dbc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b22:	2300      	movs	r3, #0
 8001b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b26:	e046      	b.n	8001bb6 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b2a:	015a      	lsls	r2, r3, #5
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	4413      	add	r3, r2
 8001b30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001b34:	461a      	mov	r2, r3
 8001b36:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001b3a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b3e:	015a      	lsls	r2, r3, #5
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	4413      	add	r3, r2
 8001b44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b4c:	0151      	lsls	r1, r2, #5
 8001b4e:	69fa      	ldr	r2, [r7, #28]
 8001b50:	440a      	add	r2, r1
 8001b52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001b56:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001b5a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b5e:	015a      	lsls	r2, r3, #5
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	4413      	add	r3, r2
 8001b64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b68:	461a      	mov	r2, r3
 8001b6a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001b6e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b72:	015a      	lsls	r2, r3, #5
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	4413      	add	r3, r2
 8001b78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b80:	0151      	lsls	r1, r2, #5
 8001b82:	69fa      	ldr	r2, [r7, #28]
 8001b84:	440a      	add	r2, r1
 8001b86:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001b8a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001b8e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b92:	015a      	lsls	r2, r3, #5
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	4413      	add	r3, r2
 8001b98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ba0:	0151      	lsls	r1, r2, #5
 8001ba2:	69fa      	ldr	r2, [r7, #28]
 8001ba4:	440a      	add	r2, r1
 8001ba6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001baa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001bae:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	791b      	ldrb	r3, [r3, #4]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d3b2      	bcc.n	8001b28 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	69fa      	ldr	r2, [r7, #28]
 8001bcc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001bd0:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001bd4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	7bdb      	ldrb	r3, [r3, #15]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d016      	beq.n	8001c0c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001be4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001be8:	69fa      	ldr	r2, [r7, #28]
 8001bea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001bee:	f043 030b 	orr.w	r3, r3, #11
 8001bf2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bfe:	69fa      	ldr	r2, [r7, #28]
 8001c00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001c04:	f043 030b 	orr.w	r3, r3, #11
 8001c08:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c0a:	e015      	b.n	8001c38 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c12:	695b      	ldr	r3, [r3, #20]
 8001c14:	69fa      	ldr	r2, [r7, #28]
 8001c16:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001c1a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001c1e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001c22:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c2a:	691b      	ldr	r3, [r3, #16]
 8001c2c:	69fa      	ldr	r2, [r7, #28]
 8001c2e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001c32:	f043 030b 	orr.w	r3, r3, #11
 8001c36:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	69fa      	ldr	r2, [r7, #28]
 8001c42:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001c46:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001c4a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6818      	ldr	r0, [r3, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	f002 f88e 	bl	8003d7c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	695a      	ldr	r2, [r3, #20]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001c6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f001 ffbd 	bl	8003bf4 <USB_ReadInterrupts>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c84:	d123      	bne.n	8001cce <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f002 f853 	bl	8003d36 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f001 f90a 	bl	8002eae <USB_GetDevSpeed>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681c      	ldr	r4, [r3, #0]
 8001ca6:	f000 fda5 	bl	80027f4 <HAL_RCC_GetHCLKFreq>
 8001caa:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	4620      	mov	r0, r4
 8001cb4:	f000 fe0e 	bl	80028d4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f004 fb0a 	bl	80062d2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	695a      	ldr	r2, [r3, #20]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001ccc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f001 ff8e 	bl	8003bf4 <USB_ReadInterrupts>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	f003 0308 	and.w	r3, r3, #8
 8001cde:	2b08      	cmp	r3, #8
 8001ce0:	d10a      	bne.n	8001cf8 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f004 fae7 	bl	80062b6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	695a      	ldr	r2, [r3, #20]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f002 0208 	and.w	r2, r2, #8
 8001cf6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f001 ff79 	bl	8003bf4 <USB_ReadInterrupts>
 8001d02:	4603      	mov	r3, r0
 8001d04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d08:	2b80      	cmp	r3, #128	@ 0x80
 8001d0a:	d123      	bne.n	8001d54 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001d0c:	6a3b      	ldr	r3, [r7, #32]
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001d14:	6a3b      	ldr	r3, [r7, #32]
 8001d16:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d18:	2301      	movs	r3, #1
 8001d1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d1c:	e014      	b.n	8001d48 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d22:	4613      	mov	r3, r2
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	4413      	add	r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	440b      	add	r3, r1
 8001d2c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d105      	bne.n	8001d42 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f000 fb0a 	bl	8002356 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d44:	3301      	adds	r3, #1
 8001d46:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	791b      	ldrb	r3, [r3, #4]
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d3e4      	bcc.n	8001d1e <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f001 ff4b 	bl	8003bf4 <USB_ReadInterrupts>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d64:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001d68:	d13c      	bne.n	8001de4 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d6e:	e02b      	b.n	8001dc8 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d72:	015a      	lsls	r2, r3, #5
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	4413      	add	r3, r2
 8001d78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d80:	6879      	ldr	r1, [r7, #4]
 8001d82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d84:	4613      	mov	r3, r2
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	4413      	add	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	440b      	add	r3, r1
 8001d8e:	3318      	adds	r3, #24
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d115      	bne.n	8001dc2 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001d96:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	da12      	bge.n	8001dc2 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001d9c:	6879      	ldr	r1, [r7, #4]
 8001d9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001da0:	4613      	mov	r3, r2
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	4413      	add	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	440b      	add	r3, r1
 8001daa:	3317      	adds	r3, #23
 8001dac:	2201      	movs	r2, #1
 8001dae:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	4619      	mov	r1, r3
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f000 faca 	bl	8002356 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	791b      	ldrb	r3, [r3, #4]
 8001dcc:	461a      	mov	r2, r3
 8001dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d3cd      	bcc.n	8001d70 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	695a      	ldr	r2, [r3, #20]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001de2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f001 ff03 	bl	8003bf4 <USB_ReadInterrupts>
 8001dee:	4603      	mov	r3, r0
 8001df0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001df4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001df8:	d156      	bne.n	8001ea8 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dfe:	e045      	b.n	8001e8c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e02:	015a      	lsls	r2, r3, #5
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	4413      	add	r3, r2
 8001e08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e10:	6879      	ldr	r1, [r7, #4]
 8001e12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e14:	4613      	mov	r3, r2
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	4413      	add	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d12e      	bne.n	8001e86 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001e28:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	da2b      	bge.n	8001e86 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001e3a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d121      	bne.n	8001e86 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001e42:	6879      	ldr	r1, [r7, #4]
 8001e44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e46:	4613      	mov	r3, r2
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	4413      	add	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	440b      	add	r3, r1
 8001e50:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001e54:	2201      	movs	r2, #1
 8001e56:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001e58:	6a3b      	ldr	r3, [r7, #32]
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001e60:	6a3b      	ldr	r3, [r7, #32]
 8001e62:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001e64:	6a3b      	ldr	r3, [r7, #32]
 8001e66:	695b      	ldr	r3, [r3, #20]
 8001e68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d10a      	bne.n	8001e86 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	69fa      	ldr	r2, [r7, #28]
 8001e7a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e82:	6053      	str	r3, [r2, #4]
            break;
 8001e84:	e008      	b.n	8001e98 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e88:	3301      	adds	r3, #1
 8001e8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	791b      	ldrb	r3, [r3, #4]
 8001e90:	461a      	mov	r2, r3
 8001e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d3b3      	bcc.n	8001e00 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	695a      	ldr	r2, [r3, #20]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001ea6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f001 fea1 	bl	8003bf4 <USB_ReadInterrupts>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ebc:	d10a      	bne.n	8001ed4 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f004 fa88 	bl	80063d4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	695a      	ldr	r2, [r3, #20]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001ed2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f001 fe8b 	bl	8003bf4 <USB_ReadInterrupts>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	f003 0304 	and.w	r3, r3, #4
 8001ee4:	2b04      	cmp	r3, #4
 8001ee6:	d115      	bne.n	8001f14 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	f003 0304 	and.w	r3, r3, #4
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d002      	beq.n	8001f00 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f004 fa78 	bl	80063f0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6859      	ldr	r1, [r3, #4]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	605a      	str	r2, [r3, #4]
 8001f10:	e000      	b.n	8001f14 <HAL_PCD_IRQHandler+0x93c>
      return;
 8001f12:	bf00      	nop
    }
  }
}
 8001f14:	3734      	adds	r7, #52	@ 0x34
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd90      	pop	{r4, r7, pc}

08001f1a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b082      	sub	sp, #8
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
 8001f22:	460b      	mov	r3, r1
 8001f24:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d101      	bne.n	8001f34 <HAL_PCD_SetAddress+0x1a>
 8001f30:	2302      	movs	r3, #2
 8001f32:	e012      	b.n	8001f5a <HAL_PCD_SetAddress+0x40>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	78fa      	ldrb	r2, [r7, #3]
 8001f40:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	78fa      	ldrb	r2, [r7, #3]
 8001f48:	4611      	mov	r1, r2
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f001 fdea 	bl	8003b24 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b084      	sub	sp, #16
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
 8001f6a:	4608      	mov	r0, r1
 8001f6c:	4611      	mov	r1, r2
 8001f6e:	461a      	mov	r2, r3
 8001f70:	4603      	mov	r3, r0
 8001f72:	70fb      	strb	r3, [r7, #3]
 8001f74:	460b      	mov	r3, r1
 8001f76:	803b      	strh	r3, [r7, #0]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	da0f      	bge.n	8001fa8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f88:	78fb      	ldrb	r3, [r7, #3]
 8001f8a:	f003 020f 	and.w	r2, r3, #15
 8001f8e:	4613      	mov	r3, r2
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	4413      	add	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	3310      	adds	r3, #16
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	705a      	strb	r2, [r3, #1]
 8001fa6:	e00f      	b.n	8001fc8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fa8:	78fb      	ldrb	r3, [r7, #3]
 8001faa:	f003 020f 	and.w	r2, r3, #15
 8001fae:	4613      	mov	r3, r2
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	4413      	add	r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	3304      	adds	r3, #4
 8001fc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001fc8:	78fb      	ldrb	r3, [r7, #3]
 8001fca:	f003 030f 	and.w	r3, r3, #15
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001fd4:	883b      	ldrh	r3, [r7, #0]
 8001fd6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	78ba      	ldrb	r2, [r7, #2]
 8001fe2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	785b      	ldrb	r3, [r3, #1]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d004      	beq.n	8001ff6 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001ff6:	78bb      	ldrb	r3, [r7, #2]
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d102      	bne.n	8002002 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2200      	movs	r2, #0
 8002000:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002008:	2b01      	cmp	r3, #1
 800200a:	d101      	bne.n	8002010 <HAL_PCD_EP_Open+0xae>
 800200c:	2302      	movs	r3, #2
 800200e:	e00e      	b.n	800202e <HAL_PCD_EP_Open+0xcc>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68f9      	ldr	r1, [r7, #12]
 800201e:	4618      	mov	r0, r3
 8002020:	f000 ff6a 	bl	8002ef8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800202c:	7afb      	ldrb	r3, [r7, #11]
}
 800202e:	4618      	mov	r0, r3
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b084      	sub	sp, #16
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
 800203e:	460b      	mov	r3, r1
 8002040:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002042:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002046:	2b00      	cmp	r3, #0
 8002048:	da0f      	bge.n	800206a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800204a:	78fb      	ldrb	r3, [r7, #3]
 800204c:	f003 020f 	and.w	r2, r3, #15
 8002050:	4613      	mov	r3, r2
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	4413      	add	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	3310      	adds	r3, #16
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	4413      	add	r3, r2
 800205e:	3304      	adds	r3, #4
 8002060:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2201      	movs	r2, #1
 8002066:	705a      	strb	r2, [r3, #1]
 8002068:	e00f      	b.n	800208a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800206a:	78fb      	ldrb	r3, [r7, #3]
 800206c:	f003 020f 	and.w	r2, r3, #15
 8002070:	4613      	mov	r3, r2
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	4413      	add	r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	4413      	add	r3, r2
 8002080:	3304      	adds	r3, #4
 8002082:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2200      	movs	r2, #0
 8002088:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800208a:	78fb      	ldrb	r3, [r7, #3]
 800208c:	f003 030f 	and.w	r3, r3, #15
 8002090:	b2da      	uxtb	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800209c:	2b01      	cmp	r3, #1
 800209e:	d101      	bne.n	80020a4 <HAL_PCD_EP_Close+0x6e>
 80020a0:	2302      	movs	r3, #2
 80020a2:	e00e      	b.n	80020c2 <HAL_PCD_EP_Close+0x8c>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68f9      	ldr	r1, [r7, #12]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f000 ffa8 	bl	8003008 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b086      	sub	sp, #24
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	60f8      	str	r0, [r7, #12]
 80020d2:	607a      	str	r2, [r7, #4]
 80020d4:	603b      	str	r3, [r7, #0]
 80020d6:	460b      	mov	r3, r1
 80020d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020da:	7afb      	ldrb	r3, [r7, #11]
 80020dc:	f003 020f 	and.w	r2, r3, #15
 80020e0:	4613      	mov	r3, r2
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	4413      	add	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	4413      	add	r3, r2
 80020f0:	3304      	adds	r3, #4
 80020f2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	2200      	movs	r2, #0
 8002104:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	2200      	movs	r2, #0
 800210a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800210c:	7afb      	ldrb	r3, [r7, #11]
 800210e:	f003 030f 	and.w	r3, r3, #15
 8002112:	b2da      	uxtb	r2, r3
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	799b      	ldrb	r3, [r3, #6]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d102      	bne.n	8002126 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6818      	ldr	r0, [r3, #0]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	799b      	ldrb	r3, [r3, #6]
 800212e:	461a      	mov	r2, r3
 8002130:	6979      	ldr	r1, [r7, #20]
 8002132:	f001 f845 	bl	80031c0 <USB_EPStartXfer>

  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3718      	adds	r7, #24
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	460b      	mov	r3, r1
 800214a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800214c:	78fb      	ldrb	r3, [r7, #3]
 800214e:	f003 020f 	and.w	r2, r3, #15
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	4613      	mov	r3, r2
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	4413      	add	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	440b      	add	r3, r1
 800215e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002162:	681b      	ldr	r3, [r3, #0]
}
 8002164:	4618      	mov	r0, r3
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	607a      	str	r2, [r7, #4]
 800217a:	603b      	str	r3, [r7, #0]
 800217c:	460b      	mov	r3, r1
 800217e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002180:	7afb      	ldrb	r3, [r7, #11]
 8002182:	f003 020f 	and.w	r2, r3, #15
 8002186:	4613      	mov	r3, r2
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	4413      	add	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	3310      	adds	r3, #16
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	4413      	add	r3, r2
 8002194:	3304      	adds	r3, #4
 8002196:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	2200      	movs	r2, #0
 80021a8:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	2201      	movs	r2, #1
 80021ae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021b0:	7afb      	ldrb	r3, [r7, #11]
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	b2da      	uxtb	r2, r3
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	799b      	ldrb	r3, [r3, #6]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d102      	bne.n	80021ca <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6818      	ldr	r0, [r3, #0]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	799b      	ldrb	r3, [r3, #6]
 80021d2:	461a      	mov	r2, r3
 80021d4:	6979      	ldr	r1, [r7, #20]
 80021d6:	f000 fff3 	bl	80031c0 <USB_EPStartXfer>

  return HAL_OK;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3718      	adds	r7, #24
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	460b      	mov	r3, r1
 80021ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80021f0:	78fb      	ldrb	r3, [r7, #3]
 80021f2:	f003 030f 	and.w	r3, r3, #15
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	7912      	ldrb	r2, [r2, #4]
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d901      	bls.n	8002202 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e04f      	b.n	80022a2 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002202:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002206:	2b00      	cmp	r3, #0
 8002208:	da0f      	bge.n	800222a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800220a:	78fb      	ldrb	r3, [r7, #3]
 800220c:	f003 020f 	and.w	r2, r3, #15
 8002210:	4613      	mov	r3, r2
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	4413      	add	r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	3310      	adds	r3, #16
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	4413      	add	r3, r2
 800221e:	3304      	adds	r3, #4
 8002220:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2201      	movs	r2, #1
 8002226:	705a      	strb	r2, [r3, #1]
 8002228:	e00d      	b.n	8002246 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800222a:	78fa      	ldrb	r2, [r7, #3]
 800222c:	4613      	mov	r3, r2
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	4413      	add	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	4413      	add	r3, r2
 800223c:	3304      	adds	r3, #4
 800223e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2200      	movs	r2, #0
 8002244:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2201      	movs	r2, #1
 800224a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800224c:	78fb      	ldrb	r3, [r7, #3]
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	b2da      	uxtb	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800225e:	2b01      	cmp	r3, #1
 8002260:	d101      	bne.n	8002266 <HAL_PCD_EP_SetStall+0x82>
 8002262:	2302      	movs	r3, #2
 8002264:	e01d      	b.n	80022a2 <HAL_PCD_EP_SetStall+0xbe>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2201      	movs	r2, #1
 800226a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68f9      	ldr	r1, [r7, #12]
 8002274:	4618      	mov	r0, r3
 8002276:	f001 fb81 	bl	800397c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800227a:	78fb      	ldrb	r3, [r7, #3]
 800227c:	f003 030f 	and.w	r3, r3, #15
 8002280:	2b00      	cmp	r3, #0
 8002282:	d109      	bne.n	8002298 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6818      	ldr	r0, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	7999      	ldrb	r1, [r3, #6]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002292:	461a      	mov	r2, r3
 8002294:	f001 fd72 	bl	8003d7c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b084      	sub	sp, #16
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
 80022b2:	460b      	mov	r3, r1
 80022b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80022b6:	78fb      	ldrb	r3, [r7, #3]
 80022b8:	f003 030f 	and.w	r3, r3, #15
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	7912      	ldrb	r2, [r2, #4]
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d901      	bls.n	80022c8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e042      	b.n	800234e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	da0f      	bge.n	80022f0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022d0:	78fb      	ldrb	r3, [r7, #3]
 80022d2:	f003 020f 	and.w	r2, r3, #15
 80022d6:	4613      	mov	r3, r2
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	4413      	add	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	3310      	adds	r3, #16
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	4413      	add	r3, r2
 80022e4:	3304      	adds	r3, #4
 80022e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2201      	movs	r2, #1
 80022ec:	705a      	strb	r2, [r3, #1]
 80022ee:	e00f      	b.n	8002310 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022f0:	78fb      	ldrb	r3, [r7, #3]
 80022f2:	f003 020f 	and.w	r2, r3, #15
 80022f6:	4613      	mov	r3, r2
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	4413      	add	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	4413      	add	r3, r2
 8002306:	3304      	adds	r3, #4
 8002308:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2200      	movs	r2, #0
 800230e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002316:	78fb      	ldrb	r3, [r7, #3]
 8002318:	f003 030f 	and.w	r3, r3, #15
 800231c:	b2da      	uxtb	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002328:	2b01      	cmp	r3, #1
 800232a:	d101      	bne.n	8002330 <HAL_PCD_EP_ClrStall+0x86>
 800232c:	2302      	movs	r3, #2
 800232e:	e00e      	b.n	800234e <HAL_PCD_EP_ClrStall+0xa4>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68f9      	ldr	r1, [r7, #12]
 800233e:	4618      	mov	r0, r3
 8002340:	f001 fb8a 	bl	8003a58 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b084      	sub	sp, #16
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
 800235e:	460b      	mov	r3, r1
 8002360:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002362:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002366:	2b00      	cmp	r3, #0
 8002368:	da0c      	bge.n	8002384 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800236a:	78fb      	ldrb	r3, [r7, #3]
 800236c:	f003 020f 	and.w	r2, r3, #15
 8002370:	4613      	mov	r3, r2
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	4413      	add	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	3310      	adds	r3, #16
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	4413      	add	r3, r2
 800237e:	3304      	adds	r3, #4
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	e00c      	b.n	800239e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002384:	78fb      	ldrb	r3, [r7, #3]
 8002386:	f003 020f 	and.w	r2, r3, #15
 800238a:	4613      	mov	r3, r2
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	4413      	add	r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	4413      	add	r3, r2
 800239a:	3304      	adds	r3, #4
 800239c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68f9      	ldr	r1, [r7, #12]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f001 f9a9 	bl	80036fc <USB_EPStopXfer>
 80023aa:	4603      	mov	r3, r0
 80023ac:	72fb      	strb	r3, [r7, #11]

  return ret;
 80023ae:	7afb      	ldrb	r3, [r7, #11]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b08a      	sub	sp, #40	@ 0x28
 80023bc:	af02      	add	r7, sp, #8
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	4613      	mov	r3, r2
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	4413      	add	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	3310      	adds	r3, #16
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	4413      	add	r3, r2
 80023dc:	3304      	adds	r3, #4
 80023de:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	695a      	ldr	r2, [r3, #20]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d901      	bls.n	80023f0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e06b      	b.n	80024c8 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	691a      	ldr	r2, [r3, #16]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	695b      	ldr	r3, [r3, #20]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	69fa      	ldr	r2, [r7, #28]
 8002402:	429a      	cmp	r2, r3
 8002404:	d902      	bls.n	800240c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	3303      	adds	r3, #3
 8002410:	089b      	lsrs	r3, r3, #2
 8002412:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002414:	e02a      	b.n	800246c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	691a      	ldr	r2, [r3, #16]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	69fa      	ldr	r2, [r7, #28]
 8002428:	429a      	cmp	r2, r3
 800242a:	d902      	bls.n	8002432 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	3303      	adds	r3, #3
 8002436:	089b      	lsrs	r3, r3, #2
 8002438:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	68d9      	ldr	r1, [r3, #12]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	b2da      	uxtb	r2, r3
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800244a:	9300      	str	r3, [sp, #0]
 800244c:	4603      	mov	r3, r0
 800244e:	6978      	ldr	r0, [r7, #20]
 8002450:	f001 f9fe 	bl	8003850 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	68da      	ldr	r2, [r3, #12]
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	441a      	add	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	695a      	ldr	r2, [r3, #20]
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	441a      	add	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	015a      	lsls	r2, r3, #5
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	4413      	add	r3, r2
 8002474:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	429a      	cmp	r2, r3
 8002480:	d809      	bhi.n	8002496 <PCD_WriteEmptyTxFifo+0xde>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	695a      	ldr	r2, [r3, #20]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800248a:	429a      	cmp	r2, r3
 800248c:	d203      	bcs.n	8002496 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1bf      	bne.n	8002416 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	691a      	ldr	r2, [r3, #16]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d811      	bhi.n	80024c6 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	f003 030f 	and.w	r3, r3, #15
 80024a8:	2201      	movs	r2, #1
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80024b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	43db      	mvns	r3, r3
 80024bc:	6939      	ldr	r1, [r7, #16]
 80024be:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80024c2:	4013      	ands	r3, r2
 80024c4:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3720      	adds	r7, #32
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b088      	sub	sp, #32
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	333c      	adds	r3, #60	@ 0x3c
 80024e8:	3304      	adds	r3, #4
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	015a      	lsls	r2, r3, #5
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	4413      	add	r3, r2
 80024f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	799b      	ldrb	r3, [r3, #6]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d17b      	bne.n	80025fe <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	f003 0308 	and.w	r3, r3, #8
 800250c:	2b00      	cmp	r3, #0
 800250e:	d015      	beq.n	800253c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	4a61      	ldr	r2, [pc, #388]	@ (8002698 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002514:	4293      	cmp	r3, r2
 8002516:	f240 80b9 	bls.w	800268c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002520:	2b00      	cmp	r3, #0
 8002522:	f000 80b3 	beq.w	800268c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	015a      	lsls	r2, r3, #5
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	4413      	add	r3, r2
 800252e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002532:	461a      	mov	r2, r3
 8002534:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002538:	6093      	str	r3, [r2, #8]
 800253a:	e0a7      	b.n	800268c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	f003 0320 	and.w	r3, r3, #32
 8002542:	2b00      	cmp	r3, #0
 8002544:	d009      	beq.n	800255a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	015a      	lsls	r2, r3, #5
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	4413      	add	r3, r2
 800254e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002552:	461a      	mov	r2, r3
 8002554:	2320      	movs	r3, #32
 8002556:	6093      	str	r3, [r2, #8]
 8002558:	e098      	b.n	800268c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002560:	2b00      	cmp	r3, #0
 8002562:	f040 8093 	bne.w	800268c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	4a4b      	ldr	r2, [pc, #300]	@ (8002698 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d90f      	bls.n	800258e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002574:	2b00      	cmp	r3, #0
 8002576:	d00a      	beq.n	800258e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	015a      	lsls	r2, r3, #5
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	4413      	add	r3, r2
 8002580:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002584:	461a      	mov	r2, r3
 8002586:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800258a:	6093      	str	r3, [r2, #8]
 800258c:	e07e      	b.n	800268c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	4613      	mov	r3, r2
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	4413      	add	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	4413      	add	r3, r2
 80025a0:	3304      	adds	r3, #4
 80025a2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6a1a      	ldr	r2, [r3, #32]
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	0159      	lsls	r1, r3, #5
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	440b      	add	r3, r1
 80025b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ba:	1ad2      	subs	r2, r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d114      	bne.n	80025f0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d109      	bne.n	80025e2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6818      	ldr	r0, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80025d8:	461a      	mov	r2, r3
 80025da:	2101      	movs	r1, #1
 80025dc:	f001 fbce 	bl	8003d7c <USB_EP0_OutStart>
 80025e0:	e006      	b.n	80025f0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	68da      	ldr	r2, [r3, #12]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	441a      	add	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	4619      	mov	r1, r3
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f003 fe28 	bl	800624c <HAL_PCD_DataOutStageCallback>
 80025fc:	e046      	b.n	800268c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	4a26      	ldr	r2, [pc, #152]	@ (800269c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d124      	bne.n	8002650 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00a      	beq.n	8002626 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	015a      	lsls	r2, r3, #5
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	4413      	add	r3, r2
 8002618:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800261c:	461a      	mov	r2, r3
 800261e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002622:	6093      	str	r3, [r2, #8]
 8002624:	e032      	b.n	800268c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	f003 0320 	and.w	r3, r3, #32
 800262c:	2b00      	cmp	r3, #0
 800262e:	d008      	beq.n	8002642 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	015a      	lsls	r2, r3, #5
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	4413      	add	r3, r2
 8002638:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800263c:	461a      	mov	r2, r3
 800263e:	2320      	movs	r3, #32
 8002640:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	b2db      	uxtb	r3, r3
 8002646:	4619      	mov	r1, r3
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f003 fdff 	bl	800624c <HAL_PCD_DataOutStageCallback>
 800264e:	e01d      	b.n	800268c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d114      	bne.n	8002680 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002656:	6879      	ldr	r1, [r7, #4]
 8002658:	683a      	ldr	r2, [r7, #0]
 800265a:	4613      	mov	r3, r2
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	4413      	add	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	440b      	add	r3, r1
 8002664:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d108      	bne.n	8002680 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6818      	ldr	r0, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002678:	461a      	mov	r2, r3
 800267a:	2100      	movs	r1, #0
 800267c:	f001 fb7e 	bl	8003d7c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	b2db      	uxtb	r3, r3
 8002684:	4619      	mov	r1, r3
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f003 fde0 	bl	800624c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3720      	adds	r7, #32
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	4f54300a 	.word	0x4f54300a
 800269c:	4f54310a 	.word	0x4f54310a

080026a0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	333c      	adds	r3, #60	@ 0x3c
 80026b8:	3304      	adds	r3, #4
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	015a      	lsls	r2, r3, #5
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	4413      	add	r3, r2
 80026c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	4a15      	ldr	r2, [pc, #84]	@ (8002728 <PCD_EP_OutSetupPacket_int+0x88>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d90e      	bls.n	80026f4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d009      	beq.n	80026f4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	015a      	lsls	r2, r3, #5
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	4413      	add	r3, r2
 80026e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026ec:	461a      	mov	r2, r3
 80026ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80026f2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f003 fd97 	bl	8006228 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	4a0a      	ldr	r2, [pc, #40]	@ (8002728 <PCD_EP_OutSetupPacket_int+0x88>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d90c      	bls.n	800271c <PCD_EP_OutSetupPacket_int+0x7c>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	799b      	ldrb	r3, [r3, #6]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d108      	bne.n	800271c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6818      	ldr	r0, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002714:	461a      	mov	r2, r3
 8002716:	2101      	movs	r1, #1
 8002718:	f001 fb30 	bl	8003d7c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3718      	adds	r7, #24
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	4f54300a 	.word	0x4f54300a

0800272c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	460b      	mov	r3, r1
 8002736:	70fb      	strb	r3, [r7, #3]
 8002738:	4613      	mov	r3, r2
 800273a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002742:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002744:	78fb      	ldrb	r3, [r7, #3]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d107      	bne.n	800275a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800274a:	883b      	ldrh	r3, [r7, #0]
 800274c:	0419      	lsls	r1, r3, #16
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68ba      	ldr	r2, [r7, #8]
 8002754:	430a      	orrs	r2, r1
 8002756:	629a      	str	r2, [r3, #40]	@ 0x28
 8002758:	e028      	b.n	80027ac <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002760:	0c1b      	lsrs	r3, r3, #16
 8002762:	68ba      	ldr	r2, [r7, #8]
 8002764:	4413      	add	r3, r2
 8002766:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002768:	2300      	movs	r3, #0
 800276a:	73fb      	strb	r3, [r7, #15]
 800276c:	e00d      	b.n	800278a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	7bfb      	ldrb	r3, [r7, #15]
 8002774:	3340      	adds	r3, #64	@ 0x40
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	4413      	add	r3, r2
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	0c1b      	lsrs	r3, r3, #16
 800277e:	68ba      	ldr	r2, [r7, #8]
 8002780:	4413      	add	r3, r2
 8002782:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002784:	7bfb      	ldrb	r3, [r7, #15]
 8002786:	3301      	adds	r3, #1
 8002788:	73fb      	strb	r3, [r7, #15]
 800278a:	7bfa      	ldrb	r2, [r7, #15]
 800278c:	78fb      	ldrb	r3, [r7, #3]
 800278e:	3b01      	subs	r3, #1
 8002790:	429a      	cmp	r2, r3
 8002792:	d3ec      	bcc.n	800276e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002794:	883b      	ldrh	r3, [r7, #0]
 8002796:	0418      	lsls	r0, r3, #16
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6819      	ldr	r1, [r3, #0]
 800279c:	78fb      	ldrb	r3, [r7, #3]
 800279e:	3b01      	subs	r3, #1
 80027a0:	68ba      	ldr	r2, [r7, #8]
 80027a2:	4302      	orrs	r2, r0
 80027a4:	3340      	adds	r3, #64	@ 0x40
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	440b      	add	r3, r1
 80027aa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3714      	adds	r7, #20
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr

080027ba <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80027ba:	b480      	push	{r7}
 80027bc:	b083      	sub	sp, #12
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
 80027c2:	460b      	mov	r3, r1
 80027c4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	887a      	ldrh	r2, [r7, #2]
 80027cc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	460b      	mov	r3, r1
 80027e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027f8:	4b03      	ldr	r3, [pc, #12]	@ (8002808 <HAL_RCC_GetHCLKFreq+0x14>)
 80027fa:	681b      	ldr	r3, [r3, #0]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	20000004 	.word	0x20000004

0800280c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800280c:	b084      	sub	sp, #16
 800280e:	b580      	push	{r7, lr}
 8002810:	b084      	sub	sp, #16
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
 8002816:	f107 001c 	add.w	r0, r7, #28
 800281a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800281e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002822:	2b01      	cmp	r3, #1
 8002824:	d123      	bne.n	800286e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800282a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800283a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800284e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002852:	2b01      	cmp	r3, #1
 8002854:	d105      	bne.n	8002862 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f001 fae8 	bl	8003e38 <USB_CoreReset>
 8002868:	4603      	mov	r3, r0
 800286a:	73fb      	strb	r3, [r7, #15]
 800286c:	e01b      	b.n	80028a6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f001 fadc 	bl	8003e38 <USB_CoreReset>
 8002880:	4603      	mov	r3, r0
 8002882:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002884:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002888:	2b00      	cmp	r3, #0
 800288a:	d106      	bne.n	800289a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002890:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	639a      	str	r2, [r3, #56]	@ 0x38
 8002898:	e005      	b.n	80028a6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800289e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80028a6:	7fbb      	ldrb	r3, [r7, #30]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d10b      	bne.n	80028c4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f043 0206 	orr.w	r2, r3, #6
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f043 0220 	orr.w	r2, r3, #32
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80028c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80028d0:	b004      	add	sp, #16
 80028d2:	4770      	bx	lr

080028d4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b087      	sub	sp, #28
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	4613      	mov	r3, r2
 80028e0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80028e2:	79fb      	ldrb	r3, [r7, #7]
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d165      	bne.n	80029b4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	4a41      	ldr	r2, [pc, #260]	@ (80029f0 <USB_SetTurnaroundTime+0x11c>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d906      	bls.n	80028fe <USB_SetTurnaroundTime+0x2a>
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	4a40      	ldr	r2, [pc, #256]	@ (80029f4 <USB_SetTurnaroundTime+0x120>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d202      	bcs.n	80028fe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80028f8:	230f      	movs	r3, #15
 80028fa:	617b      	str	r3, [r7, #20]
 80028fc:	e062      	b.n	80029c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	4a3c      	ldr	r2, [pc, #240]	@ (80029f4 <USB_SetTurnaroundTime+0x120>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d306      	bcc.n	8002914 <USB_SetTurnaroundTime+0x40>
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	4a3b      	ldr	r2, [pc, #236]	@ (80029f8 <USB_SetTurnaroundTime+0x124>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d202      	bcs.n	8002914 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800290e:	230e      	movs	r3, #14
 8002910:	617b      	str	r3, [r7, #20]
 8002912:	e057      	b.n	80029c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	4a38      	ldr	r2, [pc, #224]	@ (80029f8 <USB_SetTurnaroundTime+0x124>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d306      	bcc.n	800292a <USB_SetTurnaroundTime+0x56>
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	4a37      	ldr	r2, [pc, #220]	@ (80029fc <USB_SetTurnaroundTime+0x128>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d202      	bcs.n	800292a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002924:	230d      	movs	r3, #13
 8002926:	617b      	str	r3, [r7, #20]
 8002928:	e04c      	b.n	80029c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	4a33      	ldr	r2, [pc, #204]	@ (80029fc <USB_SetTurnaroundTime+0x128>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d306      	bcc.n	8002940 <USB_SetTurnaroundTime+0x6c>
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	4a32      	ldr	r2, [pc, #200]	@ (8002a00 <USB_SetTurnaroundTime+0x12c>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d802      	bhi.n	8002940 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800293a:	230c      	movs	r3, #12
 800293c:	617b      	str	r3, [r7, #20]
 800293e:	e041      	b.n	80029c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	4a2f      	ldr	r2, [pc, #188]	@ (8002a00 <USB_SetTurnaroundTime+0x12c>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d906      	bls.n	8002956 <USB_SetTurnaroundTime+0x82>
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	4a2e      	ldr	r2, [pc, #184]	@ (8002a04 <USB_SetTurnaroundTime+0x130>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d802      	bhi.n	8002956 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002950:	230b      	movs	r3, #11
 8002952:	617b      	str	r3, [r7, #20]
 8002954:	e036      	b.n	80029c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	4a2a      	ldr	r2, [pc, #168]	@ (8002a04 <USB_SetTurnaroundTime+0x130>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d906      	bls.n	800296c <USB_SetTurnaroundTime+0x98>
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	4a29      	ldr	r2, [pc, #164]	@ (8002a08 <USB_SetTurnaroundTime+0x134>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d802      	bhi.n	800296c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002966:	230a      	movs	r3, #10
 8002968:	617b      	str	r3, [r7, #20]
 800296a:	e02b      	b.n	80029c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	4a26      	ldr	r2, [pc, #152]	@ (8002a08 <USB_SetTurnaroundTime+0x134>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d906      	bls.n	8002982 <USB_SetTurnaroundTime+0xae>
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	4a25      	ldr	r2, [pc, #148]	@ (8002a0c <USB_SetTurnaroundTime+0x138>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d202      	bcs.n	8002982 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800297c:	2309      	movs	r3, #9
 800297e:	617b      	str	r3, [r7, #20]
 8002980:	e020      	b.n	80029c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	4a21      	ldr	r2, [pc, #132]	@ (8002a0c <USB_SetTurnaroundTime+0x138>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d306      	bcc.n	8002998 <USB_SetTurnaroundTime+0xc4>
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	4a20      	ldr	r2, [pc, #128]	@ (8002a10 <USB_SetTurnaroundTime+0x13c>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d802      	bhi.n	8002998 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002992:	2308      	movs	r3, #8
 8002994:	617b      	str	r3, [r7, #20]
 8002996:	e015      	b.n	80029c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	4a1d      	ldr	r2, [pc, #116]	@ (8002a10 <USB_SetTurnaroundTime+0x13c>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d906      	bls.n	80029ae <USB_SetTurnaroundTime+0xda>
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	4a1c      	ldr	r2, [pc, #112]	@ (8002a14 <USB_SetTurnaroundTime+0x140>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d202      	bcs.n	80029ae <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80029a8:	2307      	movs	r3, #7
 80029aa:	617b      	str	r3, [r7, #20]
 80029ac:	e00a      	b.n	80029c4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80029ae:	2306      	movs	r3, #6
 80029b0:	617b      	str	r3, [r7, #20]
 80029b2:	e007      	b.n	80029c4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80029b4:	79fb      	ldrb	r3, [r7, #7]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d102      	bne.n	80029c0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80029ba:	2309      	movs	r3, #9
 80029bc:	617b      	str	r3, [r7, #20]
 80029be:	e001      	b.n	80029c4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80029c0:	2309      	movs	r3, #9
 80029c2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	68da      	ldr	r2, [r3, #12]
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	029b      	lsls	r3, r3, #10
 80029d8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80029dc:	431a      	orrs	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	371c      	adds	r7, #28
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	00d8acbf 	.word	0x00d8acbf
 80029f4:	00e4e1c0 	.word	0x00e4e1c0
 80029f8:	00f42400 	.word	0x00f42400
 80029fc:	01067380 	.word	0x01067380
 8002a00:	011a499f 	.word	0x011a499f
 8002a04:	01312cff 	.word	0x01312cff
 8002a08:	014ca43f 	.word	0x014ca43f
 8002a0c:	016e3600 	.word	0x016e3600
 8002a10:	01a6ab1f 	.word	0x01a6ab1f
 8002a14:	01e84800 	.word	0x01e84800

08002a18 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f043 0201 	orr.w	r2, r3, #1
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr

08002a3a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b083      	sub	sp, #12
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f023 0201 	bic.w	r2, r3, #1
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	460b      	mov	r3, r1
 8002a66:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002a78:	78fb      	ldrb	r3, [r7, #3]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d115      	bne.n	8002aaa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002a8a:	200a      	movs	r0, #10
 8002a8c:	f7fe f98e 	bl	8000dac <HAL_Delay>
      ms += 10U;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	330a      	adds	r3, #10
 8002a94:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f001 f93f 	bl	8003d1a <USB_GetMode>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d01e      	beq.n	8002ae0 <USB_SetCurrentMode+0x84>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2bc7      	cmp	r3, #199	@ 0xc7
 8002aa6:	d9f0      	bls.n	8002a8a <USB_SetCurrentMode+0x2e>
 8002aa8:	e01a      	b.n	8002ae0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002aaa:	78fb      	ldrb	r3, [r7, #3]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d115      	bne.n	8002adc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002abc:	200a      	movs	r0, #10
 8002abe:	f7fe f975 	bl	8000dac <HAL_Delay>
      ms += 10U;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	330a      	adds	r3, #10
 8002ac6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f001 f926 	bl	8003d1a <USB_GetMode>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d005      	beq.n	8002ae0 <USB_SetCurrentMode+0x84>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2bc7      	cmp	r3, #199	@ 0xc7
 8002ad8:	d9f0      	bls.n	8002abc <USB_SetCurrentMode+0x60>
 8002ada:	e001      	b.n	8002ae0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e005      	b.n	8002aec <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2bc8      	cmp	r3, #200	@ 0xc8
 8002ae4:	d101      	bne.n	8002aea <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e000      	b.n	8002aec <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3710      	adds	r7, #16
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002af4:	b084      	sub	sp, #16
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b086      	sub	sp, #24
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
 8002afe:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002b02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002b06:	2300      	movs	r3, #0
 8002b08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002b0e:	2300      	movs	r3, #0
 8002b10:	613b      	str	r3, [r7, #16]
 8002b12:	e009      	b.n	8002b28 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	3340      	adds	r3, #64	@ 0x40
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	4413      	add	r3, r2
 8002b1e:	2200      	movs	r2, #0
 8002b20:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	3301      	adds	r3, #1
 8002b26:	613b      	str	r3, [r7, #16]
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	2b0e      	cmp	r3, #14
 8002b2c:	d9f2      	bls.n	8002b14 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002b2e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d11c      	bne.n	8002b70 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b44:	f043 0302 	orr.w	r3, r3, #2
 8002b48:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b4e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b5a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b66:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	639a      	str	r2, [r3, #56]	@ 0x38
 8002b6e:	e00b      	b.n	8002b88 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b74:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b80:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8002b8e:	461a      	mov	r2, r3
 8002b90:	2300      	movs	r3, #0
 8002b92:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002b94:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d10d      	bne.n	8002bb8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002b9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d104      	bne.n	8002bae <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 f968 	bl	8002e7c <USB_SetDevSpeed>
 8002bac:	e008      	b.n	8002bc0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002bae:	2101      	movs	r1, #1
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 f963 	bl	8002e7c <USB_SetDevSpeed>
 8002bb6:	e003      	b.n	8002bc0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002bb8:	2103      	movs	r1, #3
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 f95e 	bl	8002e7c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002bc0:	2110      	movs	r1, #16
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 f8fa 	bl	8002dbc <USB_FlushTxFifo>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 f924 	bl	8002e20 <USB_FlushRxFifo>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002be8:	461a      	mov	r2, r3
 8002bea:	2300      	movs	r3, #0
 8002bec:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c00:	461a      	mov	r2, r3
 8002c02:	2300      	movs	r3, #0
 8002c04:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002c06:	2300      	movs	r3, #0
 8002c08:	613b      	str	r3, [r7, #16]
 8002c0a:	e043      	b.n	8002c94 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	015a      	lsls	r2, r3, #5
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	4413      	add	r3, r2
 8002c14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002c1e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002c22:	d118      	bne.n	8002c56 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d10a      	bne.n	8002c40 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	015a      	lsls	r2, r3, #5
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	4413      	add	r3, r2
 8002c32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c36:	461a      	mov	r2, r3
 8002c38:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002c3c:	6013      	str	r3, [r2, #0]
 8002c3e:	e013      	b.n	8002c68 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	015a      	lsls	r2, r3, #5
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	4413      	add	r3, r2
 8002c48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002c52:	6013      	str	r3, [r2, #0]
 8002c54:	e008      	b.n	8002c68 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	015a      	lsls	r2, r3, #5
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c62:	461a      	mov	r2, r3
 8002c64:	2300      	movs	r3, #0
 8002c66:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	015a      	lsls	r2, r3, #5
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	4413      	add	r3, r2
 8002c70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c74:	461a      	mov	r2, r3
 8002c76:	2300      	movs	r3, #0
 8002c78:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	015a      	lsls	r2, r3, #5
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	4413      	add	r3, r2
 8002c82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c86:	461a      	mov	r2, r3
 8002c88:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002c8c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	3301      	adds	r3, #1
 8002c92:	613b      	str	r3, [r7, #16]
 8002c94:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002c98:	461a      	mov	r2, r3
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d3b5      	bcc.n	8002c0c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	613b      	str	r3, [r7, #16]
 8002ca4:	e043      	b.n	8002d2e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	015a      	lsls	r2, r3, #5
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	4413      	add	r3, r2
 8002cae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002cb8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002cbc:	d118      	bne.n	8002cf0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d10a      	bne.n	8002cda <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	015a      	lsls	r2, r3, #5
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	4413      	add	r3, r2
 8002ccc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002cd6:	6013      	str	r3, [r2, #0]
 8002cd8:	e013      	b.n	8002d02 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	015a      	lsls	r2, r3, #5
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002cec:	6013      	str	r3, [r2, #0]
 8002cee:	e008      	b.n	8002d02 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	015a      	lsls	r2, r3, #5
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	2300      	movs	r3, #0
 8002d00:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	015a      	lsls	r2, r3, #5
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	4413      	add	r3, r2
 8002d0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d0e:	461a      	mov	r2, r3
 8002d10:	2300      	movs	r3, #0
 8002d12:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	015a      	lsls	r2, r3, #5
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d20:	461a      	mov	r2, r3
 8002d22:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002d26:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	613b      	str	r3, [r7, #16]
 8002d2e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002d32:	461a      	mov	r2, r3
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d3b5      	bcc.n	8002ca6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d4c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8002d5a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002d5c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d105      	bne.n	8002d70 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	f043 0210 	orr.w	r2, r3, #16
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	699a      	ldr	r2, [r3, #24]
 8002d74:	4b10      	ldr	r3, [pc, #64]	@ (8002db8 <USB_DevInit+0x2c4>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002d7c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d005      	beq.n	8002d90 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	f043 0208 	orr.w	r2, r3, #8
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002d90:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d107      	bne.n	8002da8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002da0:	f043 0304 	orr.w	r3, r3, #4
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002da8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3718      	adds	r7, #24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002db4:	b004      	add	sp, #16
 8002db6:	4770      	bx	lr
 8002db8:	803c3800 	.word	0x803c3800

08002dbc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	3301      	adds	r3, #1
 8002dce:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002dd6:	d901      	bls.n	8002ddc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e01b      	b.n	8002e14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	daf2      	bge.n	8002dca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8002de4:	2300      	movs	r3, #0
 8002de6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	019b      	lsls	r3, r3, #6
 8002dec:	f043 0220 	orr.w	r2, r3, #32
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	3301      	adds	r3, #1
 8002df8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002e00:	d901      	bls.n	8002e06 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e006      	b.n	8002e14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	f003 0320 	and.w	r3, r3, #32
 8002e0e:	2b20      	cmp	r3, #32
 8002e10:	d0f0      	beq.n	8002df4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3714      	adds	r7, #20
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002e38:	d901      	bls.n	8002e3e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e018      	b.n	8002e70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	daf2      	bge.n	8002e2c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8002e46:	2300      	movs	r3, #0
 8002e48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2210      	movs	r2, #16
 8002e4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	3301      	adds	r3, #1
 8002e54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002e5c:	d901      	bls.n	8002e62 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e006      	b.n	8002e70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	f003 0310 	and.w	r3, r3, #16
 8002e6a:	2b10      	cmp	r3, #16
 8002e6c:	d0f0      	beq.n	8002e50 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3714      	adds	r7, #20
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	460b      	mov	r3, r1
 8002e86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	78fb      	ldrb	r3, [r7, #3]
 8002e96:	68f9      	ldr	r1, [r7, #12]
 8002e98:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3714      	adds	r7, #20
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr

08002eae <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b087      	sub	sp, #28
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f003 0306 	and.w	r3, r3, #6
 8002ec6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d102      	bne.n	8002ed4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	75fb      	strb	r3, [r7, #23]
 8002ed2:	e00a      	b.n	8002eea <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d002      	beq.n	8002ee0 <USB_GetDevSpeed+0x32>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2b06      	cmp	r3, #6
 8002ede:	d102      	bne.n	8002ee6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	75fb      	strb	r3, [r7, #23]
 8002ee4:	e001      	b.n	8002eea <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8002ee6:	230f      	movs	r3, #15
 8002ee8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8002eea:	7dfb      	ldrb	r3, [r7, #23]
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	371c      	adds	r7, #28
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	785b      	ldrb	r3, [r3, #1]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d13a      	bne.n	8002f8a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f1a:	69da      	ldr	r2, [r3, #28]
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	f003 030f 	and.w	r3, r3, #15
 8002f24:	2101      	movs	r1, #1
 8002f26:	fa01 f303 	lsl.w	r3, r1, r3
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	68f9      	ldr	r1, [r7, #12]
 8002f2e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002f32:	4313      	orrs	r3, r2
 8002f34:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	015a      	lsls	r2, r3, #5
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d155      	bne.n	8002ff8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	015a      	lsls	r2, r3, #5
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	4413      	add	r3, r2
 8002f54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	791b      	ldrb	r3, [r3, #4]
 8002f66:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002f68:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	059b      	lsls	r3, r3, #22
 8002f6e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002f70:	4313      	orrs	r3, r2
 8002f72:	68ba      	ldr	r2, [r7, #8]
 8002f74:	0151      	lsls	r1, r2, #5
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	440a      	add	r2, r1
 8002f7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002f7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f86:	6013      	str	r3, [r2, #0]
 8002f88:	e036      	b.n	8002ff8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f90:	69da      	ldr	r2, [r3, #28]
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa0:	041b      	lsls	r3, r3, #16
 8002fa2:	68f9      	ldr	r1, [r7, #12]
 8002fa4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	015a      	lsls	r2, r3, #5
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d11a      	bne.n	8002ff8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	015a      	lsls	r2, r3, #5
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	4413      	add	r3, r2
 8002fca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	791b      	ldrb	r3, [r3, #4]
 8002fdc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8002fde:	430b      	orrs	r3, r1
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	68ba      	ldr	r2, [r7, #8]
 8002fe4:	0151      	lsls	r1, r2, #5
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	440a      	add	r2, r1
 8002fea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002fee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ff2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ff6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3714      	adds	r7, #20
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
	...

08003008 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003008:	b480      	push	{r7}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	785b      	ldrb	r3, [r3, #1]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d161      	bne.n	80030e8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	015a      	lsls	r2, r3, #5
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	4413      	add	r3, r2
 800302c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003036:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800303a:	d11f      	bne.n	800307c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	015a      	lsls	r2, r3, #5
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	4413      	add	r3, r2
 8003044:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	0151      	lsls	r1, r2, #5
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	440a      	add	r2, r1
 8003052:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003056:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800305a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	015a      	lsls	r2, r3, #5
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	4413      	add	r3, r2
 8003064:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68ba      	ldr	r2, [r7, #8]
 800306c:	0151      	lsls	r1, r2, #5
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	440a      	add	r2, r1
 8003072:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003076:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800307a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003082:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	f003 030f 	and.w	r3, r3, #15
 800308c:	2101      	movs	r1, #1
 800308e:	fa01 f303 	lsl.w	r3, r1, r3
 8003092:	b29b      	uxth	r3, r3
 8003094:	43db      	mvns	r3, r3
 8003096:	68f9      	ldr	r1, [r7, #12]
 8003098:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800309c:	4013      	ands	r3, r2
 800309e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030a6:	69da      	ldr	r2, [r3, #28]
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	f003 030f 	and.w	r3, r3, #15
 80030b0:	2101      	movs	r1, #1
 80030b2:	fa01 f303 	lsl.w	r3, r1, r3
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	43db      	mvns	r3, r3
 80030ba:	68f9      	ldr	r1, [r7, #12]
 80030bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80030c0:	4013      	ands	r3, r2
 80030c2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	015a      	lsls	r2, r3, #5
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	4413      	add	r3, r2
 80030cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	0159      	lsls	r1, r3, #5
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	440b      	add	r3, r1
 80030da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030de:	4619      	mov	r1, r3
 80030e0:	4b35      	ldr	r3, [pc, #212]	@ (80031b8 <USB_DeactivateEndpoint+0x1b0>)
 80030e2:	4013      	ands	r3, r2
 80030e4:	600b      	str	r3, [r1, #0]
 80030e6:	e060      	b.n	80031aa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	015a      	lsls	r2, r3, #5
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	4413      	add	r3, r2
 80030f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80030fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80030fe:	d11f      	bne.n	8003140 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	015a      	lsls	r2, r3, #5
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	4413      	add	r3, r2
 8003108:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68ba      	ldr	r2, [r7, #8]
 8003110:	0151      	lsls	r1, r2, #5
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	440a      	add	r2, r1
 8003116:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800311a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800311e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	015a      	lsls	r2, r3, #5
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	4413      	add	r3, r2
 8003128:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68ba      	ldr	r2, [r7, #8]
 8003130:	0151      	lsls	r1, r2, #5
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	440a      	add	r2, r1
 8003136:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800313a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800313e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003146:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	f003 030f 	and.w	r3, r3, #15
 8003150:	2101      	movs	r1, #1
 8003152:	fa01 f303 	lsl.w	r3, r1, r3
 8003156:	041b      	lsls	r3, r3, #16
 8003158:	43db      	mvns	r3, r3
 800315a:	68f9      	ldr	r1, [r7, #12]
 800315c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003160:	4013      	ands	r3, r2
 8003162:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800316a:	69da      	ldr	r2, [r3, #28]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	f003 030f 	and.w	r3, r3, #15
 8003174:	2101      	movs	r1, #1
 8003176:	fa01 f303 	lsl.w	r3, r1, r3
 800317a:	041b      	lsls	r3, r3, #16
 800317c:	43db      	mvns	r3, r3
 800317e:	68f9      	ldr	r1, [r7, #12]
 8003180:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003184:	4013      	ands	r3, r2
 8003186:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	015a      	lsls	r2, r3, #5
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	4413      	add	r3, r2
 8003190:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	0159      	lsls	r1, r3, #5
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	440b      	add	r3, r1
 800319e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031a2:	4619      	mov	r1, r3
 80031a4:	4b05      	ldr	r3, [pc, #20]	@ (80031bc <USB_DeactivateEndpoint+0x1b4>)
 80031a6:	4013      	ands	r3, r2
 80031a8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3714      	adds	r7, #20
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr
 80031b8:	ec337800 	.word	0xec337800
 80031bc:	eff37800 	.word	0xeff37800

080031c0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b08a      	sub	sp, #40	@ 0x28
 80031c4:	af02      	add	r7, sp, #8
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	4613      	mov	r3, r2
 80031cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	785b      	ldrb	r3, [r3, #1]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	f040 817f 	bne.w	80034e0 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d132      	bne.n	8003250 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	015a      	lsls	r2, r3, #5
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	4413      	add	r3, r2
 80031f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	0151      	lsls	r1, r2, #5
 80031fc:	69fa      	ldr	r2, [r7, #28]
 80031fe:	440a      	add	r2, r1
 8003200:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003204:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003208:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800320c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	015a      	lsls	r2, r3, #5
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	4413      	add	r3, r2
 8003216:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	0151      	lsls	r1, r2, #5
 8003220:	69fa      	ldr	r2, [r7, #28]
 8003222:	440a      	add	r2, r1
 8003224:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003228:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800322c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	015a      	lsls	r2, r3, #5
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	4413      	add	r3, r2
 8003236:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	0151      	lsls	r1, r2, #5
 8003240:	69fa      	ldr	r2, [r7, #28]
 8003242:	440a      	add	r2, r1
 8003244:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003248:	0cdb      	lsrs	r3, r3, #19
 800324a:	04db      	lsls	r3, r3, #19
 800324c:	6113      	str	r3, [r2, #16]
 800324e:	e097      	b.n	8003380 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	015a      	lsls	r2, r3, #5
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	4413      	add	r3, r2
 8003258:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	0151      	lsls	r1, r2, #5
 8003262:	69fa      	ldr	r2, [r7, #28]
 8003264:	440a      	add	r2, r1
 8003266:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800326a:	0cdb      	lsrs	r3, r3, #19
 800326c:	04db      	lsls	r3, r3, #19
 800326e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	015a      	lsls	r2, r3, #5
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	4413      	add	r3, r2
 8003278:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	0151      	lsls	r1, r2, #5
 8003282:	69fa      	ldr	r2, [r7, #28]
 8003284:	440a      	add	r2, r1
 8003286:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800328a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800328e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003292:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d11a      	bne.n	80032d0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	691a      	ldr	r2, [r3, #16]
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d903      	bls.n	80032ae <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	689a      	ldr	r2, [r3, #8]
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	015a      	lsls	r2, r3, #5
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	4413      	add	r3, r2
 80032b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	0151      	lsls	r1, r2, #5
 80032c0:	69fa      	ldr	r2, [r7, #28]
 80032c2:	440a      	add	r2, r1
 80032c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80032c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80032cc:	6113      	str	r3, [r2, #16]
 80032ce:	e044      	b.n	800335a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	691a      	ldr	r2, [r3, #16]
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	4413      	add	r3, r2
 80032da:	1e5a      	subs	r2, r3, #1
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	015a      	lsls	r2, r3, #5
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	4413      	add	r3, r2
 80032ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032f2:	691a      	ldr	r2, [r3, #16]
 80032f4:	8afb      	ldrh	r3, [r7, #22]
 80032f6:	04d9      	lsls	r1, r3, #19
 80032f8:	4ba4      	ldr	r3, [pc, #656]	@ (800358c <USB_EPStartXfer+0x3cc>)
 80032fa:	400b      	ands	r3, r1
 80032fc:	69b9      	ldr	r1, [r7, #24]
 80032fe:	0148      	lsls	r0, r1, #5
 8003300:	69f9      	ldr	r1, [r7, #28]
 8003302:	4401      	add	r1, r0
 8003304:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003308:	4313      	orrs	r3, r2
 800330a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	791b      	ldrb	r3, [r3, #4]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d122      	bne.n	800335a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	015a      	lsls	r2, r3, #5
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	4413      	add	r3, r2
 800331c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	0151      	lsls	r1, r2, #5
 8003326:	69fa      	ldr	r2, [r7, #28]
 8003328:	440a      	add	r2, r1
 800332a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800332e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8003332:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	015a      	lsls	r2, r3, #5
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	4413      	add	r3, r2
 800333c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003340:	691a      	ldr	r2, [r3, #16]
 8003342:	8afb      	ldrh	r3, [r7, #22]
 8003344:	075b      	lsls	r3, r3, #29
 8003346:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800334a:	69b9      	ldr	r1, [r7, #24]
 800334c:	0148      	lsls	r0, r1, #5
 800334e:	69f9      	ldr	r1, [r7, #28]
 8003350:	4401      	add	r1, r0
 8003352:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003356:	4313      	orrs	r3, r2
 8003358:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	015a      	lsls	r2, r3, #5
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	4413      	add	r3, r2
 8003362:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003366:	691a      	ldr	r2, [r3, #16]
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003370:	69b9      	ldr	r1, [r7, #24]
 8003372:	0148      	lsls	r0, r1, #5
 8003374:	69f9      	ldr	r1, [r7, #28]
 8003376:	4401      	add	r1, r0
 8003378:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800337c:	4313      	orrs	r3, r2
 800337e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003380:	79fb      	ldrb	r3, [r7, #7]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d14b      	bne.n	800341e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d009      	beq.n	80033a2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	015a      	lsls	r2, r3, #5
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	4413      	add	r3, r2
 8003396:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800339a:	461a      	mov	r2, r3
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	69db      	ldr	r3, [r3, #28]
 80033a0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	791b      	ldrb	r3, [r3, #4]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d128      	bne.n	80033fc <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d110      	bne.n	80033dc <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	015a      	lsls	r2, r3, #5
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	4413      	add	r3, r2
 80033c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	0151      	lsls	r1, r2, #5
 80033cc:	69fa      	ldr	r2, [r7, #28]
 80033ce:	440a      	add	r2, r1
 80033d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80033d4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80033d8:	6013      	str	r3, [r2, #0]
 80033da:	e00f      	b.n	80033fc <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	015a      	lsls	r2, r3, #5
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	4413      	add	r3, r2
 80033e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	0151      	lsls	r1, r2, #5
 80033ee:	69fa      	ldr	r2, [r7, #28]
 80033f0:	440a      	add	r2, r1
 80033f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80033f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033fa:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	015a      	lsls	r2, r3, #5
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	4413      	add	r3, r2
 8003404:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	0151      	lsls	r1, r2, #5
 800340e:	69fa      	ldr	r2, [r7, #28]
 8003410:	440a      	add	r2, r1
 8003412:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003416:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800341a:	6013      	str	r3, [r2, #0]
 800341c:	e166      	b.n	80036ec <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	015a      	lsls	r2, r3, #5
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	4413      	add	r3, r2
 8003426:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	0151      	lsls	r1, r2, #5
 8003430:	69fa      	ldr	r2, [r7, #28]
 8003432:	440a      	add	r2, r1
 8003434:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003438:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800343c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	791b      	ldrb	r3, [r3, #4]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d015      	beq.n	8003472 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	2b00      	cmp	r3, #0
 800344c:	f000 814e 	beq.w	80036ec <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003456:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	f003 030f 	and.w	r3, r3, #15
 8003460:	2101      	movs	r1, #1
 8003462:	fa01 f303 	lsl.w	r3, r1, r3
 8003466:	69f9      	ldr	r1, [r7, #28]
 8003468:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800346c:	4313      	orrs	r3, r2
 800346e:	634b      	str	r3, [r1, #52]	@ 0x34
 8003470:	e13c      	b.n	80036ec <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800347e:	2b00      	cmp	r3, #0
 8003480:	d110      	bne.n	80034a4 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	015a      	lsls	r2, r3, #5
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	4413      	add	r3, r2
 800348a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	0151      	lsls	r1, r2, #5
 8003494:	69fa      	ldr	r2, [r7, #28]
 8003496:	440a      	add	r2, r1
 8003498:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800349c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80034a0:	6013      	str	r3, [r2, #0]
 80034a2:	e00f      	b.n	80034c4 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	015a      	lsls	r2, r3, #5
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	4413      	add	r3, r2
 80034ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	0151      	lsls	r1, r2, #5
 80034b6:	69fa      	ldr	r2, [r7, #28]
 80034b8:	440a      	add	r2, r1
 80034ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80034be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034c2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	68d9      	ldr	r1, [r3, #12]
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	781a      	ldrb	r2, [r3, #0]
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	b298      	uxth	r0, r3
 80034d2:	79fb      	ldrb	r3, [r7, #7]
 80034d4:	9300      	str	r3, [sp, #0]
 80034d6:	4603      	mov	r3, r0
 80034d8:	68f8      	ldr	r0, [r7, #12]
 80034da:	f000 f9b9 	bl	8003850 <USB_WritePacket>
 80034de:	e105      	b.n	80036ec <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	015a      	lsls	r2, r3, #5
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	4413      	add	r3, r2
 80034e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	69ba      	ldr	r2, [r7, #24]
 80034f0:	0151      	lsls	r1, r2, #5
 80034f2:	69fa      	ldr	r2, [r7, #28]
 80034f4:	440a      	add	r2, r1
 80034f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80034fa:	0cdb      	lsrs	r3, r3, #19
 80034fc:	04db      	lsls	r3, r3, #19
 80034fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	015a      	lsls	r2, r3, #5
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	4413      	add	r3, r2
 8003508:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	69ba      	ldr	r2, [r7, #24]
 8003510:	0151      	lsls	r1, r2, #5
 8003512:	69fa      	ldr	r2, [r7, #28]
 8003514:	440a      	add	r2, r1
 8003516:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800351a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800351e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003522:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d132      	bne.n	8003590 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d003      	beq.n	800353a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	689a      	ldr	r2, [r3, #8]
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	689a      	ldr	r2, [r3, #8]
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	015a      	lsls	r2, r3, #5
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	4413      	add	r3, r2
 800354a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800354e:	691a      	ldr	r2, [r3, #16]
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003558:	69b9      	ldr	r1, [r7, #24]
 800355a:	0148      	lsls	r0, r1, #5
 800355c:	69f9      	ldr	r1, [r7, #28]
 800355e:	4401      	add	r1, r0
 8003560:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003564:	4313      	orrs	r3, r2
 8003566:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	015a      	lsls	r2, r3, #5
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	4413      	add	r3, r2
 8003570:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	0151      	lsls	r1, r2, #5
 800357a:	69fa      	ldr	r2, [r7, #28]
 800357c:	440a      	add	r2, r1
 800357e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003582:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003586:	6113      	str	r3, [r2, #16]
 8003588:	e062      	b.n	8003650 <USB_EPStartXfer+0x490>
 800358a:	bf00      	nop
 800358c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d123      	bne.n	80035e0 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	015a      	lsls	r2, r3, #5
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	4413      	add	r3, r2
 80035a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035a4:	691a      	ldr	r2, [r3, #16]
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035ae:	69b9      	ldr	r1, [r7, #24]
 80035b0:	0148      	lsls	r0, r1, #5
 80035b2:	69f9      	ldr	r1, [r7, #28]
 80035b4:	4401      	add	r1, r0
 80035b6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80035ba:	4313      	orrs	r3, r2
 80035bc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	015a      	lsls	r2, r3, #5
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	4413      	add	r3, r2
 80035c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	0151      	lsls	r1, r2, #5
 80035d0:	69fa      	ldr	r2, [r7, #28]
 80035d2:	440a      	add	r2, r1
 80035d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80035d8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80035dc:	6113      	str	r3, [r2, #16]
 80035de:	e037      	b.n	8003650 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	691a      	ldr	r2, [r3, #16]
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	4413      	add	r3, r2
 80035ea:	1e5a      	subs	r2, r3, #1
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	8afa      	ldrh	r2, [r7, #22]
 80035fc:	fb03 f202 	mul.w	r2, r3, r2
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	015a      	lsls	r2, r3, #5
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	4413      	add	r3, r2
 800360c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003610:	691a      	ldr	r2, [r3, #16]
 8003612:	8afb      	ldrh	r3, [r7, #22]
 8003614:	04d9      	lsls	r1, r3, #19
 8003616:	4b38      	ldr	r3, [pc, #224]	@ (80036f8 <USB_EPStartXfer+0x538>)
 8003618:	400b      	ands	r3, r1
 800361a:	69b9      	ldr	r1, [r7, #24]
 800361c:	0148      	lsls	r0, r1, #5
 800361e:	69f9      	ldr	r1, [r7, #28]
 8003620:	4401      	add	r1, r0
 8003622:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003626:	4313      	orrs	r3, r2
 8003628:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	015a      	lsls	r2, r3, #5
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	4413      	add	r3, r2
 8003632:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003636:	691a      	ldr	r2, [r3, #16]
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003640:	69b9      	ldr	r1, [r7, #24]
 8003642:	0148      	lsls	r0, r1, #5
 8003644:	69f9      	ldr	r1, [r7, #28]
 8003646:	4401      	add	r1, r0
 8003648:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800364c:	4313      	orrs	r3, r2
 800364e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8003650:	79fb      	ldrb	r3, [r7, #7]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d10d      	bne.n	8003672 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d009      	beq.n	8003672 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	68d9      	ldr	r1, [r3, #12]
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	015a      	lsls	r2, r3, #5
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	4413      	add	r3, r2
 800366a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800366e:	460a      	mov	r2, r1
 8003670:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	791b      	ldrb	r3, [r3, #4]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d128      	bne.n	80036cc <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003686:	2b00      	cmp	r3, #0
 8003688:	d110      	bne.n	80036ac <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	015a      	lsls	r2, r3, #5
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	4413      	add	r3, r2
 8003692:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	0151      	lsls	r1, r2, #5
 800369c:	69fa      	ldr	r2, [r7, #28]
 800369e:	440a      	add	r2, r1
 80036a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80036a4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80036a8:	6013      	str	r3, [r2, #0]
 80036aa:	e00f      	b.n	80036cc <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	015a      	lsls	r2, r3, #5
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	4413      	add	r3, r2
 80036b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	0151      	lsls	r1, r2, #5
 80036be:	69fa      	ldr	r2, [r7, #28]
 80036c0:	440a      	add	r2, r1
 80036c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80036c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036ca:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	015a      	lsls	r2, r3, #5
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	4413      	add	r3, r2
 80036d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	0151      	lsls	r1, r2, #5
 80036de:	69fa      	ldr	r2, [r7, #28]
 80036e0:	440a      	add	r2, r1
 80036e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80036e6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80036ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3720      	adds	r7, #32
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	1ff80000 	.word	0x1ff80000

080036fc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b087      	sub	sp, #28
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003706:	2300      	movs	r3, #0
 8003708:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800370a:	2300      	movs	r3, #0
 800370c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	785b      	ldrb	r3, [r3, #1]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d14a      	bne.n	80037b0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	015a      	lsls	r2, r3, #5
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	4413      	add	r3, r2
 8003724:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800372e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003732:	f040 8086 	bne.w	8003842 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	015a      	lsls	r2, r3, #5
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	4413      	add	r3, r2
 8003740:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	7812      	ldrb	r2, [r2, #0]
 800374a:	0151      	lsls	r1, r2, #5
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	440a      	add	r2, r1
 8003750:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003754:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003758:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	015a      	lsls	r2, r3, #5
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	4413      	add	r3, r2
 8003764:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	7812      	ldrb	r2, [r2, #0]
 800376e:	0151      	lsls	r1, r2, #5
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	440a      	add	r2, r1
 8003774:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003778:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800377c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	3301      	adds	r3, #1
 8003782:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f242 7210 	movw	r2, #10000	@ 0x2710
 800378a:	4293      	cmp	r3, r2
 800378c:	d902      	bls.n	8003794 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	75fb      	strb	r3, [r7, #23]
          break;
 8003792:	e056      	b.n	8003842 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	015a      	lsls	r2, r3, #5
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	4413      	add	r3, r2
 800379e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80037a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80037ac:	d0e7      	beq.n	800377e <USB_EPStopXfer+0x82>
 80037ae:	e048      	b.n	8003842 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	015a      	lsls	r2, r3, #5
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	4413      	add	r3, r2
 80037ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80037c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80037c8:	d13b      	bne.n	8003842 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	015a      	lsls	r2, r3, #5
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	4413      	add	r3, r2
 80037d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	683a      	ldr	r2, [r7, #0]
 80037dc:	7812      	ldrb	r2, [r2, #0]
 80037de:	0151      	lsls	r1, r2, #5
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	440a      	add	r2, r1
 80037e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80037e8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80037ec:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	015a      	lsls	r2, r3, #5
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	4413      	add	r3, r2
 80037f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	683a      	ldr	r2, [r7, #0]
 8003800:	7812      	ldrb	r2, [r2, #0]
 8003802:	0151      	lsls	r1, r2, #5
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	440a      	add	r2, r1
 8003808:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800380c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003810:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	3301      	adds	r3, #1
 8003816:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800381e:	4293      	cmp	r3, r2
 8003820:	d902      	bls.n	8003828 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	75fb      	strb	r3, [r7, #23]
          break;
 8003826:	e00c      	b.n	8003842 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	015a      	lsls	r2, r3, #5
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	4413      	add	r3, r2
 8003832:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800383c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003840:	d0e7      	beq.n	8003812 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003842:	7dfb      	ldrb	r3, [r7, #23]
}
 8003844:	4618      	mov	r0, r3
 8003846:	371c      	adds	r7, #28
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003850:	b480      	push	{r7}
 8003852:	b089      	sub	sp, #36	@ 0x24
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	4611      	mov	r1, r2
 800385c:	461a      	mov	r2, r3
 800385e:	460b      	mov	r3, r1
 8003860:	71fb      	strb	r3, [r7, #7]
 8003862:	4613      	mov	r3, r2
 8003864:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800386e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003872:	2b00      	cmp	r3, #0
 8003874:	d123      	bne.n	80038be <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003876:	88bb      	ldrh	r3, [r7, #4]
 8003878:	3303      	adds	r3, #3
 800387a:	089b      	lsrs	r3, r3, #2
 800387c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800387e:	2300      	movs	r3, #0
 8003880:	61bb      	str	r3, [r7, #24]
 8003882:	e018      	b.n	80038b6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003884:	79fb      	ldrb	r3, [r7, #7]
 8003886:	031a      	lsls	r2, r3, #12
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	4413      	add	r3, r2
 800388c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003890:	461a      	mov	r2, r3
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	3301      	adds	r3, #1
 800389c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	3301      	adds	r3, #1
 80038a2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	3301      	adds	r3, #1
 80038a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	3301      	adds	r3, #1
 80038ae:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	3301      	adds	r3, #1
 80038b4:	61bb      	str	r3, [r7, #24]
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d3e2      	bcc.n	8003884 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3724      	adds	r7, #36	@ 0x24
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b08b      	sub	sp, #44	@ 0x2c
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	4613      	mov	r3, r2
 80038d8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80038e2:	88fb      	ldrh	r3, [r7, #6]
 80038e4:	089b      	lsrs	r3, r3, #2
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80038ea:	88fb      	ldrh	r3, [r7, #6]
 80038ec:	f003 0303 	and.w	r3, r3, #3
 80038f0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80038f2:	2300      	movs	r3, #0
 80038f4:	623b      	str	r3, [r7, #32]
 80038f6:	e014      	b.n	8003922 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003902:	601a      	str	r2, [r3, #0]
    pDest++;
 8003904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003906:	3301      	adds	r3, #1
 8003908:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800390a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800390c:	3301      	adds	r3, #1
 800390e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003912:	3301      	adds	r3, #1
 8003914:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003918:	3301      	adds	r3, #1
 800391a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800391c:	6a3b      	ldr	r3, [r7, #32]
 800391e:	3301      	adds	r3, #1
 8003920:	623b      	str	r3, [r7, #32]
 8003922:	6a3a      	ldr	r2, [r7, #32]
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	429a      	cmp	r2, r3
 8003928:	d3e6      	bcc.n	80038f8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800392a:	8bfb      	ldrh	r3, [r7, #30]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d01e      	beq.n	800396e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003930:	2300      	movs	r3, #0
 8003932:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800393a:	461a      	mov	r2, r3
 800393c:	f107 0310 	add.w	r3, r7, #16
 8003940:	6812      	ldr	r2, [r2, #0]
 8003942:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	6a3b      	ldr	r3, [r7, #32]
 8003948:	b2db      	uxtb	r3, r3
 800394a:	00db      	lsls	r3, r3, #3
 800394c:	fa22 f303 	lsr.w	r3, r2, r3
 8003950:	b2da      	uxtb	r2, r3
 8003952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003954:	701a      	strb	r2, [r3, #0]
      i++;
 8003956:	6a3b      	ldr	r3, [r7, #32]
 8003958:	3301      	adds	r3, #1
 800395a:	623b      	str	r3, [r7, #32]
      pDest++;
 800395c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800395e:	3301      	adds	r3, #1
 8003960:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8003962:	8bfb      	ldrh	r3, [r7, #30]
 8003964:	3b01      	subs	r3, #1
 8003966:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003968:	8bfb      	ldrh	r3, [r7, #30]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1ea      	bne.n	8003944 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800396e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003970:	4618      	mov	r0, r3
 8003972:	372c      	adds	r7, #44	@ 0x2c
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	785b      	ldrb	r3, [r3, #1]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d12c      	bne.n	80039f2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	015a      	lsls	r2, r3, #5
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	4413      	add	r3, r2
 80039a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	db12      	blt.n	80039d0 <USB_EPSetStall+0x54>
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00f      	beq.n	80039d0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	015a      	lsls	r2, r3, #5
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	4413      	add	r3, r2
 80039b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	0151      	lsls	r1, r2, #5
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	440a      	add	r2, r1
 80039c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80039ca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80039ce:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	015a      	lsls	r2, r3, #5
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	4413      	add	r3, r2
 80039d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68ba      	ldr	r2, [r7, #8]
 80039e0:	0151      	lsls	r1, r2, #5
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	440a      	add	r2, r1
 80039e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80039ea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80039ee:	6013      	str	r3, [r2, #0]
 80039f0:	e02b      	b.n	8003a4a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	015a      	lsls	r2, r3, #5
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	4413      	add	r3, r2
 80039fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	db12      	blt.n	8003a2a <USB_EPSetStall+0xae>
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00f      	beq.n	8003a2a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	015a      	lsls	r2, r3, #5
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	4413      	add	r3, r2
 8003a12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68ba      	ldr	r2, [r7, #8]
 8003a1a:	0151      	lsls	r1, r2, #5
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	440a      	add	r2, r1
 8003a20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003a24:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003a28:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	015a      	lsls	r2, r3, #5
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	4413      	add	r3, r2
 8003a32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68ba      	ldr	r2, [r7, #8]
 8003a3a:	0151      	lsls	r1, r2, #5
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	440a      	add	r2, r1
 8003a40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003a44:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003a48:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3714      	adds	r7, #20
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	785b      	ldrb	r3, [r3, #1]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d128      	bne.n	8003ac6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	015a      	lsls	r2, r3, #5
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68ba      	ldr	r2, [r7, #8]
 8003a84:	0151      	lsls	r1, r2, #5
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	440a      	add	r2, r1
 8003a8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003a8e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003a92:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	791b      	ldrb	r3, [r3, #4]
 8003a98:	2b03      	cmp	r3, #3
 8003a9a:	d003      	beq.n	8003aa4 <USB_EPClearStall+0x4c>
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	791b      	ldrb	r3, [r3, #4]
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d138      	bne.n	8003b16 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	015a      	lsls	r2, r3, #5
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	4413      	add	r3, r2
 8003aac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68ba      	ldr	r2, [r7, #8]
 8003ab4:	0151      	lsls	r1, r2, #5
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	440a      	add	r2, r1
 8003aba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003abe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ac2:	6013      	str	r3, [r2, #0]
 8003ac4:	e027      	b.n	8003b16 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	015a      	lsls	r2, r3, #5
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	4413      	add	r3, r2
 8003ace:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68ba      	ldr	r2, [r7, #8]
 8003ad6:	0151      	lsls	r1, r2, #5
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	440a      	add	r2, r1
 8003adc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003ae0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003ae4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	791b      	ldrb	r3, [r3, #4]
 8003aea:	2b03      	cmp	r3, #3
 8003aec:	d003      	beq.n	8003af6 <USB_EPClearStall+0x9e>
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	791b      	ldrb	r3, [r3, #4]
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d10f      	bne.n	8003b16 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	015a      	lsls	r2, r3, #5
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	4413      	add	r3, r2
 8003afe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68ba      	ldr	r2, [r7, #8]
 8003b06:	0151      	lsls	r1, r2, #5
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	440a      	add	r2, r1
 8003b0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003b10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b14:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3714      	adds	r7, #20
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b085      	sub	sp, #20
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b42:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003b46:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	78fb      	ldrb	r3, [r7, #3]
 8003b52:	011b      	lsls	r3, r3, #4
 8003b54:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8003b58:	68f9      	ldr	r1, [r7, #12]
 8003b5a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3714      	adds	r7, #20
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003b8a:	f023 0303 	bic.w	r3, r3, #3
 8003b8e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b9e:	f023 0302 	bic.w	r3, r3, #2
 8003ba2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3714      	adds	r7, #20
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr

08003bb2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b085      	sub	sp, #20
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003bcc:	f023 0303 	bic.w	r3, r3, #3
 8003bd0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003be0:	f043 0302 	orr.w	r3, r3, #2
 8003be4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3714      	adds	r7, #20
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	695b      	ldr	r3, [r3, #20]
 8003c00:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3714      	adds	r7, #20
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr

08003c1a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	b085      	sub	sp, #20
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c36:	69db      	ldr	r3, [r3, #28]
 8003c38:	68ba      	ldr	r2, [r7, #8]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	0c1b      	lsrs	r3, r3, #16
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3714      	adds	r7, #20
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b085      	sub	sp, #20
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c6a:	69db      	ldr	r3, [r3, #28]
 8003c6c:	68ba      	ldr	r2, [r7, #8]
 8003c6e:	4013      	ands	r3, r2
 8003c70:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	b29b      	uxth	r3, r3
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3714      	adds	r7, #20
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr

08003c82 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003c82:	b480      	push	{r7}
 8003c84:	b085      	sub	sp, #20
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003c92:	78fb      	ldrb	r3, [r7, #3]
 8003c94:	015a      	lsls	r2, r3, #5
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	4413      	add	r3, r2
 8003c9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	4013      	ands	r3, r2
 8003cae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003cb0:	68bb      	ldr	r3, [r7, #8]
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3714      	adds	r7, #20
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b087      	sub	sp, #28
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ce0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8003ce2:	78fb      	ldrb	r3, [r7, #3]
 8003ce4:	f003 030f 	and.w	r3, r3, #15
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	fa22 f303 	lsr.w	r3, r2, r3
 8003cee:	01db      	lsls	r3, r3, #7
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003cf8:	78fb      	ldrb	r3, [r7, #3]
 8003cfa:	015a      	lsls	r2, r3, #5
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	4413      	add	r3, r2
 8003d00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	4013      	ands	r3, r2
 8003d0a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003d0c:	68bb      	ldr	r3, [r7, #8]
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	371c      	adds	r7, #28
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b083      	sub	sp, #12
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	f003 0301 	and.w	r3, r3, #1
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr

08003d36 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8003d36:	b480      	push	{r7}
 8003d38:	b085      	sub	sp, #20
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d50:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003d54:	f023 0307 	bic.w	r3, r3, #7
 8003d58:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d6c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3714      	adds	r7, #20
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b087      	sub	sp, #28
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	460b      	mov	r3, r1
 8003d86:	607a      	str	r2, [r7, #4]
 8003d88:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	333c      	adds	r3, #60	@ 0x3c
 8003d92:	3304      	adds	r3, #4
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	4a26      	ldr	r2, [pc, #152]	@ (8003e34 <USB_EP0_OutStart+0xb8>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d90a      	bls.n	8003db6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003dac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003db0:	d101      	bne.n	8003db6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8003db2:	2300      	movs	r3, #0
 8003db4:	e037      	b.n	8003e26 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003dd0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003dd4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003de4:	f043 0318 	orr.w	r3, r3, #24
 8003de8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003df8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8003dfc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8003dfe:	7afb      	ldrb	r3, [r7, #11]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d10f      	bne.n	8003e24 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e1e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8003e22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	371c      	adds	r7, #28
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	4f54300a 	.word	0x4f54300a

08003e38 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b085      	sub	sp, #20
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003e40:	2300      	movs	r3, #0
 8003e42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	3301      	adds	r3, #1
 8003e48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003e50:	d901      	bls.n	8003e56 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e01b      	b.n	8003e8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	daf2      	bge.n	8003e44 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	f043 0201 	orr.w	r2, r3, #1
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	3301      	adds	r3, #1
 8003e72:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003e7a:	d901      	bls.n	8003e80 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e006      	b.n	8003e8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d0f0      	beq.n	8003e6e <USB_CoreReset+0x36>

  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3714      	adds	r7, #20
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
	...

08003e9c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8003ea8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8003eac:	f002 fc38 	bl	8006720 <USBD_static_malloc>
 8003eb0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d109      	bne.n	8003ecc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	32b0      	adds	r2, #176	@ 0xb0
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8003ec8:	2302      	movs	r3, #2
 8003eca:	e0d4      	b.n	8004076 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8003ecc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	f002 fe60 	bl	8006b98 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	32b0      	adds	r2, #176	@ 0xb0
 8003ee2:	68f9      	ldr	r1, [r7, #12]
 8003ee4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	32b0      	adds	r2, #176	@ 0xb0
 8003ef2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	7c1b      	ldrb	r3, [r3, #16]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d138      	bne.n	8003f76 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8003f04:	4b5e      	ldr	r3, [pc, #376]	@ (8004080 <USBD_CDC_Init+0x1e4>)
 8003f06:	7819      	ldrb	r1, [r3, #0]
 8003f08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003f0c:	2202      	movs	r2, #2
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f002 fae3 	bl	80064da <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8003f14:	4b5a      	ldr	r3, [pc, #360]	@ (8004080 <USBD_CDC_Init+0x1e4>)
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	f003 020f 	and.w	r2, r3, #15
 8003f1c:	6879      	ldr	r1, [r7, #4]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4413      	add	r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	440b      	add	r3, r1
 8003f28:	3324      	adds	r3, #36	@ 0x24
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8003f2e:	4b55      	ldr	r3, [pc, #340]	@ (8004084 <USBD_CDC_Init+0x1e8>)
 8003f30:	7819      	ldrb	r1, [r3, #0]
 8003f32:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003f36:	2202      	movs	r2, #2
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f002 face 	bl	80064da <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8003f3e:	4b51      	ldr	r3, [pc, #324]	@ (8004084 <USBD_CDC_Init+0x1e8>)
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	f003 020f 	and.w	r2, r3, #15
 8003f46:	6879      	ldr	r1, [r7, #4]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4413      	add	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	440b      	add	r3, r1
 8003f52:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003f56:	2201      	movs	r2, #1
 8003f58:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8003f5a:	4b4b      	ldr	r3, [pc, #300]	@ (8004088 <USBD_CDC_Init+0x1ec>)
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	f003 020f 	and.w	r2, r3, #15
 8003f62:	6879      	ldr	r1, [r7, #4]
 8003f64:	4613      	mov	r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	4413      	add	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	440b      	add	r3, r1
 8003f6e:	3326      	adds	r3, #38	@ 0x26
 8003f70:	2210      	movs	r2, #16
 8003f72:	801a      	strh	r2, [r3, #0]
 8003f74:	e035      	b.n	8003fe2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8003f76:	4b42      	ldr	r3, [pc, #264]	@ (8004080 <USBD_CDC_Init+0x1e4>)
 8003f78:	7819      	ldrb	r1, [r3, #0]
 8003f7a:	2340      	movs	r3, #64	@ 0x40
 8003f7c:	2202      	movs	r2, #2
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f002 faab 	bl	80064da <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8003f84:	4b3e      	ldr	r3, [pc, #248]	@ (8004080 <USBD_CDC_Init+0x1e4>)
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	f003 020f 	and.w	r2, r3, #15
 8003f8c:	6879      	ldr	r1, [r7, #4]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	4413      	add	r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	440b      	add	r3, r1
 8003f98:	3324      	adds	r3, #36	@ 0x24
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8003f9e:	4b39      	ldr	r3, [pc, #228]	@ (8004084 <USBD_CDC_Init+0x1e8>)
 8003fa0:	7819      	ldrb	r1, [r3, #0]
 8003fa2:	2340      	movs	r3, #64	@ 0x40
 8003fa4:	2202      	movs	r2, #2
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f002 fa97 	bl	80064da <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8003fac:	4b35      	ldr	r3, [pc, #212]	@ (8004084 <USBD_CDC_Init+0x1e8>)
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	f003 020f 	and.w	r2, r3, #15
 8003fb4:	6879      	ldr	r1, [r7, #4]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	4413      	add	r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	440b      	add	r3, r1
 8003fc0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8003fc8:	4b2f      	ldr	r3, [pc, #188]	@ (8004088 <USBD_CDC_Init+0x1ec>)
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	f003 020f 	and.w	r2, r3, #15
 8003fd0:	6879      	ldr	r1, [r7, #4]
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	4413      	add	r3, r2
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	440b      	add	r3, r1
 8003fdc:	3326      	adds	r3, #38	@ 0x26
 8003fde:	2210      	movs	r2, #16
 8003fe0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8003fe2:	4b29      	ldr	r3, [pc, #164]	@ (8004088 <USBD_CDC_Init+0x1ec>)
 8003fe4:	7819      	ldrb	r1, [r3, #0]
 8003fe6:	2308      	movs	r3, #8
 8003fe8:	2203      	movs	r2, #3
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f002 fa75 	bl	80064da <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8003ff0:	4b25      	ldr	r3, [pc, #148]	@ (8004088 <USBD_CDC_Init+0x1ec>)
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	f003 020f 	and.w	r2, r3, #15
 8003ff8:	6879      	ldr	r1, [r7, #4]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	4413      	add	r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	440b      	add	r3, r1
 8004004:	3324      	adds	r3, #36	@ 0x24
 8004006:	2201      	movs	r2, #1
 8004008:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	33b0      	adds	r3, #176	@ 0xb0
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	4413      	add	r3, r2
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800403c:	2b00      	cmp	r3, #0
 800403e:	d101      	bne.n	8004044 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004040:	2302      	movs	r3, #2
 8004042:	e018      	b.n	8004076 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	7c1b      	ldrb	r3, [r3, #16]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d10a      	bne.n	8004062 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800404c:	4b0d      	ldr	r3, [pc, #52]	@ (8004084 <USBD_CDC_Init+0x1e8>)
 800404e:	7819      	ldrb	r1, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004056:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f002 fb2c 	bl	80066b8 <USBD_LL_PrepareReceive>
 8004060:	e008      	b.n	8004074 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004062:	4b08      	ldr	r3, [pc, #32]	@ (8004084 <USBD_CDC_Init+0x1e8>)
 8004064:	7819      	ldrb	r1, [r3, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800406c:	2340      	movs	r3, #64	@ 0x40
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f002 fb22 	bl	80066b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3710      	adds	r7, #16
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	20000097 	.word	0x20000097
 8004084:	20000098 	.word	0x20000098
 8004088:	20000099 	.word	0x20000099

0800408c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	460b      	mov	r3, r1
 8004096:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004098:	4b3a      	ldr	r3, [pc, #232]	@ (8004184 <USBD_CDC_DeInit+0xf8>)
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	4619      	mov	r1, r3
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f002 fa41 	bl	8006526 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80040a4:	4b37      	ldr	r3, [pc, #220]	@ (8004184 <USBD_CDC_DeInit+0xf8>)
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	f003 020f 	and.w	r2, r3, #15
 80040ac:	6879      	ldr	r1, [r7, #4]
 80040ae:	4613      	mov	r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	4413      	add	r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	440b      	add	r3, r1
 80040b8:	3324      	adds	r3, #36	@ 0x24
 80040ba:	2200      	movs	r2, #0
 80040bc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80040be:	4b32      	ldr	r3, [pc, #200]	@ (8004188 <USBD_CDC_DeInit+0xfc>)
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	4619      	mov	r1, r3
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f002 fa2e 	bl	8006526 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80040ca:	4b2f      	ldr	r3, [pc, #188]	@ (8004188 <USBD_CDC_DeInit+0xfc>)
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	f003 020f 	and.w	r2, r3, #15
 80040d2:	6879      	ldr	r1, [r7, #4]
 80040d4:	4613      	mov	r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	4413      	add	r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	440b      	add	r3, r1
 80040de:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80040e2:	2200      	movs	r2, #0
 80040e4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80040e6:	4b29      	ldr	r3, [pc, #164]	@ (800418c <USBD_CDC_DeInit+0x100>)
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	4619      	mov	r1, r3
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f002 fa1a 	bl	8006526 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80040f2:	4b26      	ldr	r3, [pc, #152]	@ (800418c <USBD_CDC_DeInit+0x100>)
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	f003 020f 	and.w	r2, r3, #15
 80040fa:	6879      	ldr	r1, [r7, #4]
 80040fc:	4613      	mov	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	4413      	add	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	440b      	add	r3, r1
 8004106:	3324      	adds	r3, #36	@ 0x24
 8004108:	2200      	movs	r2, #0
 800410a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800410c:	4b1f      	ldr	r3, [pc, #124]	@ (800418c <USBD_CDC_DeInit+0x100>)
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	f003 020f 	and.w	r2, r3, #15
 8004114:	6879      	ldr	r1, [r7, #4]
 8004116:	4613      	mov	r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	4413      	add	r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	440b      	add	r3, r1
 8004120:	3326      	adds	r3, #38	@ 0x26
 8004122:	2200      	movs	r2, #0
 8004124:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	32b0      	adds	r2, #176	@ 0xb0
 8004130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d01f      	beq.n	8004178 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	33b0      	adds	r3, #176	@ 0xb0
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	4413      	add	r3, r2
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	32b0      	adds	r2, #176	@ 0xb0
 8004156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800415a:	4618      	mov	r0, r3
 800415c:	f002 faee 	bl	800673c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	32b0      	adds	r2, #176	@ 0xb0
 800416a:	2100      	movs	r1, #0
 800416c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3708      	adds	r7, #8
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	20000097 	.word	0x20000097
 8004188:	20000098 	.word	0x20000098
 800418c:	20000099 	.word	0x20000099

08004190 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	32b0      	adds	r2, #176	@ 0xb0
 80041a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041a8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80041aa:	2300      	movs	r3, #0
 80041ac:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80041ae:	2300      	movs	r3, #0
 80041b0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80041b2:	2300      	movs	r3, #0
 80041b4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d101      	bne.n	80041c0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80041bc:	2303      	movs	r3, #3
 80041be:	e0bf      	b.n	8004340 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d050      	beq.n	800426e <USBD_CDC_Setup+0xde>
 80041cc:	2b20      	cmp	r3, #32
 80041ce:	f040 80af 	bne.w	8004330 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	88db      	ldrh	r3, [r3, #6]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d03a      	beq.n	8004250 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	b25b      	sxtb	r3, r3
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	da1b      	bge.n	800421c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	33b0      	adds	r3, #176	@ 0xb0
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	4413      	add	r3, r2
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80041fa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80041fc:	683a      	ldr	r2, [r7, #0]
 80041fe:	88d2      	ldrh	r2, [r2, #6]
 8004200:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	88db      	ldrh	r3, [r3, #6]
 8004206:	2b07      	cmp	r3, #7
 8004208:	bf28      	it	cs
 800420a:	2307      	movcs	r3, #7
 800420c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	89fa      	ldrh	r2, [r7, #14]
 8004212:	4619      	mov	r1, r3
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f001 fd53 	bl	8005cc0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800421a:	e090      	b.n	800433e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	785a      	ldrb	r2, [r3, #1]
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	88db      	ldrh	r3, [r3, #6]
 800422a:	2b3f      	cmp	r3, #63	@ 0x3f
 800422c:	d803      	bhi.n	8004236 <USBD_CDC_Setup+0xa6>
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	88db      	ldrh	r3, [r3, #6]
 8004232:	b2da      	uxtb	r2, r3
 8004234:	e000      	b.n	8004238 <USBD_CDC_Setup+0xa8>
 8004236:	2240      	movs	r2, #64	@ 0x40
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800423e:	6939      	ldr	r1, [r7, #16]
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8004246:	461a      	mov	r2, r3
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f001 fd65 	bl	8005d18 <USBD_CtlPrepareRx>
      break;
 800424e:	e076      	b.n	800433e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	33b0      	adds	r3, #176	@ 0xb0
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	4413      	add	r3, r2
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	683a      	ldr	r2, [r7, #0]
 8004264:	7850      	ldrb	r0, [r2, #1]
 8004266:	2200      	movs	r2, #0
 8004268:	6839      	ldr	r1, [r7, #0]
 800426a:	4798      	blx	r3
      break;
 800426c:	e067      	b.n	800433e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	785b      	ldrb	r3, [r3, #1]
 8004272:	2b0b      	cmp	r3, #11
 8004274:	d851      	bhi.n	800431a <USBD_CDC_Setup+0x18a>
 8004276:	a201      	add	r2, pc, #4	@ (adr r2, 800427c <USBD_CDC_Setup+0xec>)
 8004278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800427c:	080042ad 	.word	0x080042ad
 8004280:	08004329 	.word	0x08004329
 8004284:	0800431b 	.word	0x0800431b
 8004288:	0800431b 	.word	0x0800431b
 800428c:	0800431b 	.word	0x0800431b
 8004290:	0800431b 	.word	0x0800431b
 8004294:	0800431b 	.word	0x0800431b
 8004298:	0800431b 	.word	0x0800431b
 800429c:	0800431b 	.word	0x0800431b
 80042a0:	0800431b 	.word	0x0800431b
 80042a4:	080042d7 	.word	0x080042d7
 80042a8:	08004301 	.word	0x08004301
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	2b03      	cmp	r3, #3
 80042b6:	d107      	bne.n	80042c8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80042b8:	f107 030a 	add.w	r3, r7, #10
 80042bc:	2202      	movs	r2, #2
 80042be:	4619      	mov	r1, r3
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f001 fcfd 	bl	8005cc0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80042c6:	e032      	b.n	800432e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80042c8:	6839      	ldr	r1, [r7, #0]
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f001 fc7b 	bl	8005bc6 <USBD_CtlError>
            ret = USBD_FAIL;
 80042d0:	2303      	movs	r3, #3
 80042d2:	75fb      	strb	r3, [r7, #23]
          break;
 80042d4:	e02b      	b.n	800432e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b03      	cmp	r3, #3
 80042e0:	d107      	bne.n	80042f2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80042e2:	f107 030d 	add.w	r3, r7, #13
 80042e6:	2201      	movs	r2, #1
 80042e8:	4619      	mov	r1, r3
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f001 fce8 	bl	8005cc0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80042f0:	e01d      	b.n	800432e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80042f2:	6839      	ldr	r1, [r7, #0]
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f001 fc66 	bl	8005bc6 <USBD_CtlError>
            ret = USBD_FAIL;
 80042fa:	2303      	movs	r3, #3
 80042fc:	75fb      	strb	r3, [r7, #23]
          break;
 80042fe:	e016      	b.n	800432e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004306:	b2db      	uxtb	r3, r3
 8004308:	2b03      	cmp	r3, #3
 800430a:	d00f      	beq.n	800432c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800430c:	6839      	ldr	r1, [r7, #0]
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f001 fc59 	bl	8005bc6 <USBD_CtlError>
            ret = USBD_FAIL;
 8004314:	2303      	movs	r3, #3
 8004316:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004318:	e008      	b.n	800432c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800431a:	6839      	ldr	r1, [r7, #0]
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f001 fc52 	bl	8005bc6 <USBD_CtlError>
          ret = USBD_FAIL;
 8004322:	2303      	movs	r3, #3
 8004324:	75fb      	strb	r3, [r7, #23]
          break;
 8004326:	e002      	b.n	800432e <USBD_CDC_Setup+0x19e>
          break;
 8004328:	bf00      	nop
 800432a:	e008      	b.n	800433e <USBD_CDC_Setup+0x1ae>
          break;
 800432c:	bf00      	nop
      }
      break;
 800432e:	e006      	b.n	800433e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8004330:	6839      	ldr	r1, [r7, #0]
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f001 fc47 	bl	8005bc6 <USBD_CtlError>
      ret = USBD_FAIL;
 8004338:	2303      	movs	r3, #3
 800433a:	75fb      	strb	r3, [r7, #23]
      break;
 800433c:	bf00      	nop
  }

  return (uint8_t)ret;
 800433e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004340:	4618      	mov	r0, r3
 8004342:	3718      	adds	r7, #24
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	460b      	mov	r3, r1
 8004352:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800435a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	32b0      	adds	r2, #176	@ 0xb0
 8004366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800436e:	2303      	movs	r3, #3
 8004370:	e065      	b.n	800443e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	32b0      	adds	r2, #176	@ 0xb0
 800437c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004380:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004382:	78fb      	ldrb	r3, [r7, #3]
 8004384:	f003 020f 	and.w	r2, r3, #15
 8004388:	6879      	ldr	r1, [r7, #4]
 800438a:	4613      	mov	r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	4413      	add	r3, r2
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	440b      	add	r3, r1
 8004394:	3318      	adds	r3, #24
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d02f      	beq.n	80043fc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800439c:	78fb      	ldrb	r3, [r7, #3]
 800439e:	f003 020f 	and.w	r2, r3, #15
 80043a2:	6879      	ldr	r1, [r7, #4]
 80043a4:	4613      	mov	r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	4413      	add	r3, r2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	440b      	add	r3, r1
 80043ae:	3318      	adds	r3, #24
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	78fb      	ldrb	r3, [r7, #3]
 80043b4:	f003 010f 	and.w	r1, r3, #15
 80043b8:	68f8      	ldr	r0, [r7, #12]
 80043ba:	460b      	mov	r3, r1
 80043bc:	00db      	lsls	r3, r3, #3
 80043be:	440b      	add	r3, r1
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	4403      	add	r3, r0
 80043c4:	331c      	adds	r3, #28
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	fbb2 f1f3 	udiv	r1, r2, r3
 80043cc:	fb01 f303 	mul.w	r3, r1, r3
 80043d0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d112      	bne.n	80043fc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80043d6:	78fb      	ldrb	r3, [r7, #3]
 80043d8:	f003 020f 	and.w	r2, r3, #15
 80043dc:	6879      	ldr	r1, [r7, #4]
 80043de:	4613      	mov	r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	4413      	add	r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	440b      	add	r3, r1
 80043e8:	3318      	adds	r3, #24
 80043ea:	2200      	movs	r2, #0
 80043ec:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80043ee:	78f9      	ldrb	r1, [r7, #3]
 80043f0:	2300      	movs	r3, #0
 80043f2:	2200      	movs	r2, #0
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f002 f93e 	bl	8006676 <USBD_LL_Transmit>
 80043fa:	e01f      	b.n	800443c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	2200      	movs	r2, #0
 8004400:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	33b0      	adds	r3, #176	@ 0xb0
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	4413      	add	r3, r2
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d010      	beq.n	800443c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	33b0      	adds	r3, #176	@ 0xb0
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	4413      	add	r3, r2
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	68ba      	ldr	r2, [r7, #8]
 800442e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8004438:	78fa      	ldrb	r2, [r7, #3]
 800443a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b084      	sub	sp, #16
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
 800444e:	460b      	mov	r3, r1
 8004450:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	32b0      	adds	r2, #176	@ 0xb0
 800445c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004460:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	32b0      	adds	r2, #176	@ 0xb0
 800446c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d101      	bne.n	8004478 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004474:	2303      	movs	r3, #3
 8004476:	e01a      	b.n	80044ae <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004478:	78fb      	ldrb	r3, [r7, #3]
 800447a:	4619      	mov	r1, r3
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f002 f93c 	bl	80066fa <USBD_LL_GetRxDataSize>
 8004482:	4602      	mov	r2, r0
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	33b0      	adds	r3, #176	@ 0xb0
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	4413      	add	r3, r2
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80044a8:	4611      	mov	r1, r2
 80044aa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b084      	sub	sp, #16
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	32b0      	adds	r2, #176	@ 0xb0
 80044c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044cc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d101      	bne.n	80044d8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e024      	b.n	8004522 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	33b0      	adds	r3, #176	@ 0xb0
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4413      	add	r3, r2
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d019      	beq.n	8004520 <USBD_CDC_EP0_RxReady+0x6a>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80044f2:	2bff      	cmp	r3, #255	@ 0xff
 80044f4:	d014      	beq.n	8004520 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	33b0      	adds	r3, #176	@ 0xb0
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	4413      	add	r3, r2
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800450e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004516:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	22ff      	movs	r2, #255	@ 0xff
 800451c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3710      	adds	r7, #16
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
	...

0800452c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b086      	sub	sp, #24
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004534:	2182      	movs	r1, #130	@ 0x82
 8004536:	4818      	ldr	r0, [pc, #96]	@ (8004598 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004538:	f000 fd0f 	bl	8004f5a <USBD_GetEpDesc>
 800453c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800453e:	2101      	movs	r1, #1
 8004540:	4815      	ldr	r0, [pc, #84]	@ (8004598 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004542:	f000 fd0a 	bl	8004f5a <USBD_GetEpDesc>
 8004546:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004548:	2181      	movs	r1, #129	@ 0x81
 800454a:	4813      	ldr	r0, [pc, #76]	@ (8004598 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800454c:	f000 fd05 	bl	8004f5a <USBD_GetEpDesc>
 8004550:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d002      	beq.n	800455e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	2210      	movs	r2, #16
 800455c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d006      	beq.n	8004572 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	2200      	movs	r2, #0
 8004568:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800456c:	711a      	strb	r2, [r3, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d006      	beq.n	8004586 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004580:	711a      	strb	r2, [r3, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2243      	movs	r2, #67	@ 0x43
 800458a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800458c:	4b02      	ldr	r3, [pc, #8]	@ (8004598 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800458e:	4618      	mov	r0, r3
 8004590:	3718      	adds	r7, #24
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	20000054 	.word	0x20000054

0800459c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b086      	sub	sp, #24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80045a4:	2182      	movs	r1, #130	@ 0x82
 80045a6:	4818      	ldr	r0, [pc, #96]	@ (8004608 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80045a8:	f000 fcd7 	bl	8004f5a <USBD_GetEpDesc>
 80045ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80045ae:	2101      	movs	r1, #1
 80045b0:	4815      	ldr	r0, [pc, #84]	@ (8004608 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80045b2:	f000 fcd2 	bl	8004f5a <USBD_GetEpDesc>
 80045b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80045b8:	2181      	movs	r1, #129	@ 0x81
 80045ba:	4813      	ldr	r0, [pc, #76]	@ (8004608 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80045bc:	f000 fccd 	bl	8004f5a <USBD_GetEpDesc>
 80045c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d002      	beq.n	80045ce <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	2210      	movs	r2, #16
 80045cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d006      	beq.n	80045e2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	2200      	movs	r2, #0
 80045d8:	711a      	strb	r2, [r3, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	f042 0202 	orr.w	r2, r2, #2
 80045e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d006      	beq.n	80045f6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	711a      	strb	r2, [r3, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f042 0202 	orr.w	r2, r2, #2
 80045f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2243      	movs	r2, #67	@ 0x43
 80045fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80045fc:	4b02      	ldr	r3, [pc, #8]	@ (8004608 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3718      	adds	r7, #24
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	20000054 	.word	0x20000054

0800460c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b086      	sub	sp, #24
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004614:	2182      	movs	r1, #130	@ 0x82
 8004616:	4818      	ldr	r0, [pc, #96]	@ (8004678 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004618:	f000 fc9f 	bl	8004f5a <USBD_GetEpDesc>
 800461c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800461e:	2101      	movs	r1, #1
 8004620:	4815      	ldr	r0, [pc, #84]	@ (8004678 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004622:	f000 fc9a 	bl	8004f5a <USBD_GetEpDesc>
 8004626:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004628:	2181      	movs	r1, #129	@ 0x81
 800462a:	4813      	ldr	r0, [pc, #76]	@ (8004678 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800462c:	f000 fc95 	bl	8004f5a <USBD_GetEpDesc>
 8004630:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d002      	beq.n	800463e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	2210      	movs	r2, #16
 800463c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d006      	beq.n	8004652 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	2200      	movs	r2, #0
 8004648:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800464c:	711a      	strb	r2, [r3, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d006      	beq.n	8004666 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004660:	711a      	strb	r2, [r3, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2243      	movs	r2, #67	@ 0x43
 800466a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800466c:	4b02      	ldr	r3, [pc, #8]	@ (8004678 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800466e:	4618      	mov	r0, r3
 8004670:	3718      	adds	r7, #24
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	20000054 	.word	0x20000054

0800467c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	220a      	movs	r2, #10
 8004688:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800468a:	4b03      	ldr	r3, [pc, #12]	@ (8004698 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800468c:	4618      	mov	r0, r3
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr
 8004698:	20000010 	.word	0x20000010

0800469c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d101      	bne.n	80046b0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e009      	b.n	80046c4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	33b0      	adds	r3, #176	@ 0xb0
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	4413      	add	r3, r2
 80046be:	683a      	ldr	r2, [r7, #0]
 80046c0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b087      	sub	sp, #28
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	32b0      	adds	r2, #176	@ 0xb0
 80046e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046ea:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d101      	bne.n	80046f6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e008      	b.n	8004708 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	68ba      	ldr	r2, [r7, #8]
 80046fa:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	371c      	adds	r7, #28
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	32b0      	adds	r2, #176	@ 0xb0
 8004728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800472c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d101      	bne.n	8004738 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004734:	2303      	movs	r3, #3
 8004736:	e004      	b.n	8004742 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	683a      	ldr	r2, [r7, #0]
 800473c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3714      	adds	r7, #20
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
	...

08004750 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	32b0      	adds	r2, #176	@ 0xb0
 8004762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004766:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	32b0      	adds	r2, #176	@ 0xb0
 8004772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800477a:	2303      	movs	r3, #3
 800477c:	e018      	b.n	80047b0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	7c1b      	ldrb	r3, [r3, #16]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10a      	bne.n	800479c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004786:	4b0c      	ldr	r3, [pc, #48]	@ (80047b8 <USBD_CDC_ReceivePacket+0x68>)
 8004788:	7819      	ldrb	r1, [r3, #0]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004790:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f001 ff8f 	bl	80066b8 <USBD_LL_PrepareReceive>
 800479a:	e008      	b.n	80047ae <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800479c:	4b06      	ldr	r3, [pc, #24]	@ (80047b8 <USBD_CDC_ReceivePacket+0x68>)
 800479e:	7819      	ldrb	r1, [r3, #0]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80047a6:	2340      	movs	r3, #64	@ 0x40
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f001 ff85 	bl	80066b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3710      	adds	r7, #16
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	20000098 	.word	0x20000098

080047bc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	4613      	mov	r3, r2
 80047c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d101      	bne.n	80047d4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80047d0:	2303      	movs	r3, #3
 80047d2:	e01f      	b.n	8004814 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d003      	beq.n	80047fa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	68ba      	ldr	r2, [r7, #8]
 80047f6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	79fa      	ldrb	r2, [r7, #7]
 8004806:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004808:	68f8      	ldr	r0, [r7, #12]
 800480a:	f001 fdff 	bl	800640c <USBD_LL_Init>
 800480e:	4603      	mov	r3, r0
 8004810:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004812:	7dfb      	ldrb	r3, [r7, #23]
}
 8004814:	4618      	mov	r0, r3
 8004816:	3718      	adds	r7, #24
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004826:	2300      	movs	r3, #0
 8004828:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d101      	bne.n	8004834 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004830:	2303      	movs	r3, #3
 8004832:	e025      	b.n	8004880 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	683a      	ldr	r2, [r7, #0]
 8004838:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	32ae      	adds	r2, #174	@ 0xae
 8004846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800484a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00f      	beq.n	8004870 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	32ae      	adds	r2, #174	@ 0xae
 800485a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800485e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004860:	f107 020e 	add.w	r2, r7, #14
 8004864:	4610      	mov	r0, r2
 8004866:	4798      	blx	r3
 8004868:	4602      	mov	r2, r0
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8004876:	1c5a      	adds	r2, r3, #1
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f001 fe07 	bl	80064a4 <USBD_LL_Start>
 8004896:	4603      	mov	r3, r0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3708      	adds	r7, #8
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80048a8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	370c      	adds	r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr

080048b6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80048b6:	b580      	push	{r7, lr}
 80048b8:	b084      	sub	sp, #16
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
 80048be:	460b      	mov	r3, r1
 80048c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80048c2:	2300      	movs	r3, #0
 80048c4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d009      	beq.n	80048e4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	78fa      	ldrb	r2, [r7, #3]
 80048da:	4611      	mov	r1, r2
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	4798      	blx	r3
 80048e0:	4603      	mov	r3, r0
 80048e2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80048e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}

080048ee <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80048ee:	b580      	push	{r7, lr}
 80048f0:	b084      	sub	sp, #16
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
 80048f6:	460b      	mov	r3, r1
 80048f8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80048fa:	2300      	movs	r3, #0
 80048fc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	78fa      	ldrb	r2, [r7, #3]
 8004908:	4611      	mov	r1, r2
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	4798      	blx	r3
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d001      	beq.n	8004918 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8004914:	2303      	movs	r3, #3
 8004916:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004918:	7bfb      	ldrb	r3, [r7, #15]
}
 800491a:	4618      	mov	r0, r3
 800491c:	3710      	adds	r7, #16
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004922:	b580      	push	{r7, lr}
 8004924:	b084      	sub	sp, #16
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
 800492a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004932:	6839      	ldr	r1, [r7, #0]
 8004934:	4618      	mov	r0, r3
 8004936:	f001 f90c 	bl	8005b52 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2201      	movs	r2, #1
 800493e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8004948:	461a      	mov	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004956:	f003 031f 	and.w	r3, r3, #31
 800495a:	2b02      	cmp	r3, #2
 800495c:	d01a      	beq.n	8004994 <USBD_LL_SetupStage+0x72>
 800495e:	2b02      	cmp	r3, #2
 8004960:	d822      	bhi.n	80049a8 <USBD_LL_SetupStage+0x86>
 8004962:	2b00      	cmp	r3, #0
 8004964:	d002      	beq.n	800496c <USBD_LL_SetupStage+0x4a>
 8004966:	2b01      	cmp	r3, #1
 8004968:	d00a      	beq.n	8004980 <USBD_LL_SetupStage+0x5e>
 800496a:	e01d      	b.n	80049a8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004972:	4619      	mov	r1, r3
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f000 fb63 	bl	8005040 <USBD_StdDevReq>
 800497a:	4603      	mov	r3, r0
 800497c:	73fb      	strb	r3, [r7, #15]
      break;
 800497e:	e020      	b.n	80049c2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004986:	4619      	mov	r1, r3
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 fbcb 	bl	8005124 <USBD_StdItfReq>
 800498e:	4603      	mov	r3, r0
 8004990:	73fb      	strb	r3, [r7, #15]
      break;
 8004992:	e016      	b.n	80049c2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800499a:	4619      	mov	r1, r3
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 fc2d 	bl	80051fc <USBD_StdEPReq>
 80049a2:	4603      	mov	r3, r0
 80049a4:	73fb      	strb	r3, [r7, #15]
      break;
 80049a6:	e00c      	b.n	80049c2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80049ae:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	4619      	mov	r1, r3
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f001 fdd4 	bl	8006564 <USBD_LL_StallEP>
 80049bc:	4603      	mov	r3, r0
 80049be:	73fb      	strb	r3, [r7, #15]
      break;
 80049c0:	bf00      	nop
  }

  return ret;
 80049c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b086      	sub	sp, #24
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	460b      	mov	r3, r1
 80049d6:	607a      	str	r2, [r7, #4]
 80049d8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80049da:	2300      	movs	r3, #0
 80049dc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80049de:	7afb      	ldrb	r3, [r7, #11]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d16e      	bne.n	8004ac2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80049ea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80049f2:	2b03      	cmp	r3, #3
 80049f4:	f040 8098 	bne.w	8004b28 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	689a      	ldr	r2, [r3, #8]
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d913      	bls.n	8004a2c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	689a      	ldr	r2, [r3, #8]
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	1ad2      	subs	r2, r2, r3
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	68da      	ldr	r2, [r3, #12]
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	bf28      	it	cs
 8004a1e:	4613      	movcs	r3, r2
 8004a20:	461a      	mov	r2, r3
 8004a22:	6879      	ldr	r1, [r7, #4]
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	f001 f994 	bl	8005d52 <USBD_CtlContinueRx>
 8004a2a:	e07d      	b.n	8004b28 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004a32:	f003 031f 	and.w	r3, r3, #31
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d014      	beq.n	8004a64 <USBD_LL_DataOutStage+0x98>
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d81d      	bhi.n	8004a7a <USBD_LL_DataOutStage+0xae>
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d002      	beq.n	8004a48 <USBD_LL_DataOutStage+0x7c>
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d003      	beq.n	8004a4e <USBD_LL_DataOutStage+0x82>
 8004a46:	e018      	b.n	8004a7a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	75bb      	strb	r3, [r7, #22]
            break;
 8004a4c:	e018      	b.n	8004a80 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	4619      	mov	r1, r3
 8004a58:	68f8      	ldr	r0, [r7, #12]
 8004a5a:	f000 fa64 	bl	8004f26 <USBD_CoreFindIF>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	75bb      	strb	r3, [r7, #22]
            break;
 8004a62:	e00d      	b.n	8004a80 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f000 fa66 	bl	8004f40 <USBD_CoreFindEP>
 8004a74:	4603      	mov	r3, r0
 8004a76:	75bb      	strb	r3, [r7, #22]
            break;
 8004a78:	e002      	b.n	8004a80 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	75bb      	strb	r3, [r7, #22]
            break;
 8004a7e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8004a80:	7dbb      	ldrb	r3, [r7, #22]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d119      	bne.n	8004aba <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	2b03      	cmp	r3, #3
 8004a90:	d113      	bne.n	8004aba <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8004a92:	7dba      	ldrb	r2, [r7, #22]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	32ae      	adds	r2, #174	@ 0xae
 8004a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00b      	beq.n	8004aba <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8004aa2:	7dba      	ldrb	r2, [r7, #22]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8004aaa:	7dba      	ldrb	r2, [r7, #22]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	32ae      	adds	r2, #174	@ 0xae
 8004ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	68f8      	ldr	r0, [r7, #12]
 8004ab8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	f001 f95a 	bl	8005d74 <USBD_CtlSendStatus>
 8004ac0:	e032      	b.n	8004b28 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8004ac2:	7afb      	ldrb	r3, [r7, #11]
 8004ac4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	4619      	mov	r1, r3
 8004acc:	68f8      	ldr	r0, [r7, #12]
 8004ace:	f000 fa37 	bl	8004f40 <USBD_CoreFindEP>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004ad6:	7dbb      	ldrb	r3, [r7, #22]
 8004ad8:	2bff      	cmp	r3, #255	@ 0xff
 8004ada:	d025      	beq.n	8004b28 <USBD_LL_DataOutStage+0x15c>
 8004adc:	7dbb      	ldrb	r3, [r7, #22]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d122      	bne.n	8004b28 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	2b03      	cmp	r3, #3
 8004aec:	d117      	bne.n	8004b1e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8004aee:	7dba      	ldrb	r2, [r7, #22]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	32ae      	adds	r2, #174	@ 0xae
 8004af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004af8:	699b      	ldr	r3, [r3, #24]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00f      	beq.n	8004b1e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8004afe:	7dba      	ldrb	r2, [r7, #22]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8004b06:	7dba      	ldrb	r2, [r7, #22]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	32ae      	adds	r2, #174	@ 0xae
 8004b0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	7afa      	ldrb	r2, [r7, #11]
 8004b14:	4611      	mov	r1, r2
 8004b16:	68f8      	ldr	r0, [r7, #12]
 8004b18:	4798      	blx	r3
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8004b1e:	7dfb      	ldrb	r3, [r7, #23]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d001      	beq.n	8004b28 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8004b24:	7dfb      	ldrb	r3, [r7, #23]
 8004b26:	e000      	b.n	8004b2a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3718      	adds	r7, #24
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}

08004b32 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b086      	sub	sp, #24
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	60f8      	str	r0, [r7, #12]
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	607a      	str	r2, [r7, #4]
 8004b3e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8004b40:	7afb      	ldrb	r3, [r7, #11]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d16f      	bne.n	8004c26 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	3314      	adds	r3, #20
 8004b4a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d15a      	bne.n	8004c0c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	689a      	ldr	r2, [r3, #8]
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d914      	bls.n	8004b8c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	689a      	ldr	r2, [r3, #8]
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	1ad2      	subs	r2, r2, r3
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	461a      	mov	r2, r3
 8004b76:	6879      	ldr	r1, [r7, #4]
 8004b78:	68f8      	ldr	r0, [r7, #12]
 8004b7a:	f001 f8bc 	bl	8005cf6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004b7e:	2300      	movs	r3, #0
 8004b80:	2200      	movs	r2, #0
 8004b82:	2100      	movs	r1, #0
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	f001 fd97 	bl	80066b8 <USBD_LL_PrepareReceive>
 8004b8a:	e03f      	b.n	8004c0c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	68da      	ldr	r2, [r3, #12]
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d11c      	bne.n	8004bd2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	685a      	ldr	r2, [r3, #4]
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d316      	bcc.n	8004bd2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	685a      	ldr	r2, [r3, #4]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d20f      	bcs.n	8004bd2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	2100      	movs	r1, #0
 8004bb6:	68f8      	ldr	r0, [r7, #12]
 8004bb8:	f001 f89d 	bl	8005cf6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	2100      	movs	r1, #0
 8004bca:	68f8      	ldr	r0, [r7, #12]
 8004bcc:	f001 fd74 	bl	80066b8 <USBD_LL_PrepareReceive>
 8004bd0:	e01c      	b.n	8004c0c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	2b03      	cmp	r3, #3
 8004bdc:	d10f      	bne.n	8004bfe <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d009      	beq.n	8004bfe <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004bfe:	2180      	movs	r1, #128	@ 0x80
 8004c00:	68f8      	ldr	r0, [r7, #12]
 8004c02:	f001 fcaf 	bl	8006564 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f001 f8c7 	bl	8005d9a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d03a      	beq.n	8004c8c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	f7ff fe42 	bl	80048a0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8004c24:	e032      	b.n	8004c8c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8004c26:	7afb      	ldrb	r3, [r7, #11]
 8004c28:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	4619      	mov	r1, r3
 8004c30:	68f8      	ldr	r0, [r7, #12]
 8004c32:	f000 f985 	bl	8004f40 <USBD_CoreFindEP>
 8004c36:	4603      	mov	r3, r0
 8004c38:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004c3a:	7dfb      	ldrb	r3, [r7, #23]
 8004c3c:	2bff      	cmp	r3, #255	@ 0xff
 8004c3e:	d025      	beq.n	8004c8c <USBD_LL_DataInStage+0x15a>
 8004c40:	7dfb      	ldrb	r3, [r7, #23]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d122      	bne.n	8004c8c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b03      	cmp	r3, #3
 8004c50:	d11c      	bne.n	8004c8c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8004c52:	7dfa      	ldrb	r2, [r7, #23]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	32ae      	adds	r2, #174	@ 0xae
 8004c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d014      	beq.n	8004c8c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8004c62:	7dfa      	ldrb	r2, [r7, #23]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8004c6a:	7dfa      	ldrb	r2, [r7, #23]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	32ae      	adds	r2, #174	@ 0xae
 8004c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	7afa      	ldrb	r2, [r7, #11]
 8004c78:	4611      	mov	r1, r2
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	4798      	blx	r3
 8004c7e:	4603      	mov	r3, r0
 8004c80:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8004c82:	7dbb      	ldrb	r3, [r7, #22]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d001      	beq.n	8004c8c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8004c88:	7dbb      	ldrb	r3, [r7, #22]
 8004c8a:	e000      	b.n	8004c8e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3718      	adds	r7, #24
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b084      	sub	sp, #16
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d014      	beq.n	8004cfc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00e      	beq.n	8004cfc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	6852      	ldr	r2, [r2, #4]
 8004cea:	b2d2      	uxtb	r2, r2
 8004cec:	4611      	mov	r1, r2
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	4798      	blx	r3
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d001      	beq.n	8004cfc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004cfc:	2340      	movs	r3, #64	@ 0x40
 8004cfe:	2200      	movs	r2, #0
 8004d00:	2100      	movs	r1, #0
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f001 fbe9 	bl	80064da <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2240      	movs	r2, #64	@ 0x40
 8004d14:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004d18:	2340      	movs	r3, #64	@ 0x40
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	2180      	movs	r1, #128	@ 0x80
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f001 fbdb 	bl	80064da <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2240      	movs	r2, #64	@ 0x40
 8004d2e:	621a      	str	r2, [r3, #32]

  return ret;
 8004d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004d3a:	b480      	push	{r7}
 8004d3c:	b083      	sub	sp, #12
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
 8004d42:	460b      	mov	r3, r1
 8004d44:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	78fa      	ldrb	r2, [r7, #3]
 8004d4a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	370c      	adds	r7, #12
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr

08004d5a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	b083      	sub	sp, #12
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	2b04      	cmp	r3, #4
 8004d6c:	d006      	beq.n	8004d7c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004d74:	b2da      	uxtb	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2204      	movs	r2, #4
 8004d80:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	370c      	adds	r7, #12
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr

08004d92 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004d92:	b480      	push	{r7}
 8004d94:	b083      	sub	sp, #12
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b04      	cmp	r3, #4
 8004da4:	d106      	bne.n	8004db4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8004dac:	b2da      	uxtb	r2, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	370c      	adds	r7, #12
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr

08004dc2 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b082      	sub	sp, #8
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b03      	cmp	r3, #3
 8004dd4:	d110      	bne.n	8004df8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00b      	beq.n	8004df8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004de6:	69db      	ldr	r3, [r3, #28]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d005      	beq.n	8004df8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004df2:	69db      	ldr	r3, [r3, #28]
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3708      	adds	r7, #8
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b082      	sub	sp, #8
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	32ae      	adds	r2, #174	@ 0xae
 8004e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d101      	bne.n	8004e24 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e01c      	b.n	8004e5e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	2b03      	cmp	r3, #3
 8004e2e:	d115      	bne.n	8004e5c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	32ae      	adds	r2, #174	@ 0xae
 8004e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e3e:	6a1b      	ldr	r3, [r3, #32]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d00b      	beq.n	8004e5c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	32ae      	adds	r2, #174	@ 0xae
 8004e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e52:	6a1b      	ldr	r3, [r3, #32]
 8004e54:	78fa      	ldrb	r2, [r7, #3]
 8004e56:	4611      	mov	r1, r2
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3708      	adds	r7, #8
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b082      	sub	sp, #8
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
 8004e6e:	460b      	mov	r3, r1
 8004e70:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	32ae      	adds	r2, #174	@ 0xae
 8004e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d101      	bne.n	8004e88 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e01c      	b.n	8004ec2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	2b03      	cmp	r3, #3
 8004e92:	d115      	bne.n	8004ec0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	32ae      	adds	r2, #174	@ 0xae
 8004e9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d00b      	beq.n	8004ec0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	32ae      	adds	r2, #174	@ 0xae
 8004eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb8:	78fa      	ldrb	r2, [r7, #3]
 8004eba:	4611      	mov	r1, r2
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3708      	adds	r7, #8
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004eca:	b480      	push	{r7}
 8004ecc:	b083      	sub	sp, #12
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00e      	beq.n	8004f1c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	6852      	ldr	r2, [r2, #4]
 8004f0a:	b2d2      	uxtb	r2, r2
 8004f0c:	4611      	mov	r1, r2
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	4798      	blx	r3
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d001      	beq.n	8004f1c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3710      	adds	r7, #16
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}

08004f26 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8004f26:	b480      	push	{r7}
 8004f28:	b083      	sub	sp, #12
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
 8004f2e:	460b      	mov	r3, r1
 8004f30:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8004f32:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	460b      	mov	r3, r1
 8004f4a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8004f4c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	370c      	adds	r7, #12
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr

08004f5a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	b086      	sub	sp, #24
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
 8004f62:	460b      	mov	r3, r1
 8004f64:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	885b      	ldrh	r3, [r3, #2]
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	68fa      	ldr	r2, [r7, #12]
 8004f7a:	7812      	ldrb	r2, [r2, #0]
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d91f      	bls.n	8004fc0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8004f86:	e013      	b.n	8004fb0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8004f88:	f107 030a 	add.w	r3, r7, #10
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	6978      	ldr	r0, [r7, #20]
 8004f90:	f000 f81b 	bl	8004fca <USBD_GetNextDesc>
 8004f94:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	785b      	ldrb	r3, [r3, #1]
 8004f9a:	2b05      	cmp	r3, #5
 8004f9c:	d108      	bne.n	8004fb0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	789b      	ldrb	r3, [r3, #2]
 8004fa6:	78fa      	ldrb	r2, [r7, #3]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d008      	beq.n	8004fbe <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8004fac:	2300      	movs	r3, #0
 8004fae:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	885b      	ldrh	r3, [r3, #2]
 8004fb4:	b29a      	uxth	r2, r3
 8004fb6:	897b      	ldrh	r3, [r7, #10]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d8e5      	bhi.n	8004f88 <USBD_GetEpDesc+0x2e>
 8004fbc:	e000      	b.n	8004fc0 <USBD_GetEpDesc+0x66>
          break;
 8004fbe:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8004fc0:	693b      	ldr	r3, [r7, #16]
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3718      	adds	r7, #24
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b085      	sub	sp, #20
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
 8004fd2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	881b      	ldrh	r3, [r3, #0]
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	7812      	ldrb	r2, [r2, #0]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	b29a      	uxth	r2, r3
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	461a      	mov	r2, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3714      	adds	r7, #20
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005002:	b480      	push	{r7}
 8005004:	b087      	sub	sp, #28
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	3301      	adds	r3, #1
 8005018:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005020:	8a3b      	ldrh	r3, [r7, #16]
 8005022:	021b      	lsls	r3, r3, #8
 8005024:	b21a      	sxth	r2, r3
 8005026:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800502a:	4313      	orrs	r3, r2
 800502c:	b21b      	sxth	r3, r3
 800502e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005030:	89fb      	ldrh	r3, [r7, #14]
}
 8005032:	4618      	mov	r0, r3
 8005034:	371c      	adds	r7, #28
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
	...

08005040 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800504a:	2300      	movs	r3, #0
 800504c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005056:	2b40      	cmp	r3, #64	@ 0x40
 8005058:	d005      	beq.n	8005066 <USBD_StdDevReq+0x26>
 800505a:	2b40      	cmp	r3, #64	@ 0x40
 800505c:	d857      	bhi.n	800510e <USBD_StdDevReq+0xce>
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00f      	beq.n	8005082 <USBD_StdDevReq+0x42>
 8005062:	2b20      	cmp	r3, #32
 8005064:	d153      	bne.n	800510e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	32ae      	adds	r2, #174	@ 0xae
 8005070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	6839      	ldr	r1, [r7, #0]
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	4798      	blx	r3
 800507c:	4603      	mov	r3, r0
 800507e:	73fb      	strb	r3, [r7, #15]
      break;
 8005080:	e04a      	b.n	8005118 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	785b      	ldrb	r3, [r3, #1]
 8005086:	2b09      	cmp	r3, #9
 8005088:	d83b      	bhi.n	8005102 <USBD_StdDevReq+0xc2>
 800508a:	a201      	add	r2, pc, #4	@ (adr r2, 8005090 <USBD_StdDevReq+0x50>)
 800508c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005090:	080050e5 	.word	0x080050e5
 8005094:	080050f9 	.word	0x080050f9
 8005098:	08005103 	.word	0x08005103
 800509c:	080050ef 	.word	0x080050ef
 80050a0:	08005103 	.word	0x08005103
 80050a4:	080050c3 	.word	0x080050c3
 80050a8:	080050b9 	.word	0x080050b9
 80050ac:	08005103 	.word	0x08005103
 80050b0:	080050db 	.word	0x080050db
 80050b4:	080050cd 	.word	0x080050cd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80050b8:	6839      	ldr	r1, [r7, #0]
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 fa3c 	bl	8005538 <USBD_GetDescriptor>
          break;
 80050c0:	e024      	b.n	800510c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80050c2:	6839      	ldr	r1, [r7, #0]
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 fba1 	bl	800580c <USBD_SetAddress>
          break;
 80050ca:	e01f      	b.n	800510c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80050cc:	6839      	ldr	r1, [r7, #0]
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 fbe0 	bl	8005894 <USBD_SetConfig>
 80050d4:	4603      	mov	r3, r0
 80050d6:	73fb      	strb	r3, [r7, #15]
          break;
 80050d8:	e018      	b.n	800510c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80050da:	6839      	ldr	r1, [r7, #0]
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 fc83 	bl	80059e8 <USBD_GetConfig>
          break;
 80050e2:	e013      	b.n	800510c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80050e4:	6839      	ldr	r1, [r7, #0]
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 fcb4 	bl	8005a54 <USBD_GetStatus>
          break;
 80050ec:	e00e      	b.n	800510c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80050ee:	6839      	ldr	r1, [r7, #0]
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f000 fce3 	bl	8005abc <USBD_SetFeature>
          break;
 80050f6:	e009      	b.n	800510c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80050f8:	6839      	ldr	r1, [r7, #0]
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 fd07 	bl	8005b0e <USBD_ClrFeature>
          break;
 8005100:	e004      	b.n	800510c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005102:	6839      	ldr	r1, [r7, #0]
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 fd5e 	bl	8005bc6 <USBD_CtlError>
          break;
 800510a:	bf00      	nop
      }
      break;
 800510c:	e004      	b.n	8005118 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800510e:	6839      	ldr	r1, [r7, #0]
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 fd58 	bl	8005bc6 <USBD_CtlError>
      break;
 8005116:	bf00      	nop
  }

  return ret;
 8005118:	7bfb      	ldrb	r3, [r7, #15]
}
 800511a:	4618      	mov	r0, r3
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop

08005124 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800512e:	2300      	movs	r3, #0
 8005130:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800513a:	2b40      	cmp	r3, #64	@ 0x40
 800513c:	d005      	beq.n	800514a <USBD_StdItfReq+0x26>
 800513e:	2b40      	cmp	r3, #64	@ 0x40
 8005140:	d852      	bhi.n	80051e8 <USBD_StdItfReq+0xc4>
 8005142:	2b00      	cmp	r3, #0
 8005144:	d001      	beq.n	800514a <USBD_StdItfReq+0x26>
 8005146:	2b20      	cmp	r3, #32
 8005148:	d14e      	bne.n	80051e8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005150:	b2db      	uxtb	r3, r3
 8005152:	3b01      	subs	r3, #1
 8005154:	2b02      	cmp	r3, #2
 8005156:	d840      	bhi.n	80051da <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	889b      	ldrh	r3, [r3, #4]
 800515c:	b2db      	uxtb	r3, r3
 800515e:	2b01      	cmp	r3, #1
 8005160:	d836      	bhi.n	80051d0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	889b      	ldrh	r3, [r3, #4]
 8005166:	b2db      	uxtb	r3, r3
 8005168:	4619      	mov	r1, r3
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f7ff fedb 	bl	8004f26 <USBD_CoreFindIF>
 8005170:	4603      	mov	r3, r0
 8005172:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005174:	7bbb      	ldrb	r3, [r7, #14]
 8005176:	2bff      	cmp	r3, #255	@ 0xff
 8005178:	d01d      	beq.n	80051b6 <USBD_StdItfReq+0x92>
 800517a:	7bbb      	ldrb	r3, [r7, #14]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d11a      	bne.n	80051b6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005180:	7bba      	ldrb	r2, [r7, #14]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	32ae      	adds	r2, #174	@ 0xae
 8005186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00f      	beq.n	80051b0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005190:	7bba      	ldrb	r2, [r7, #14]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005198:	7bba      	ldrb	r2, [r7, #14]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	32ae      	adds	r2, #174	@ 0xae
 800519e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	6839      	ldr	r1, [r7, #0]
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	4798      	blx	r3
 80051aa:	4603      	mov	r3, r0
 80051ac:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80051ae:	e004      	b.n	80051ba <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80051b0:	2303      	movs	r3, #3
 80051b2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80051b4:	e001      	b.n	80051ba <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80051b6:	2303      	movs	r3, #3
 80051b8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	88db      	ldrh	r3, [r3, #6]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d110      	bne.n	80051e4 <USBD_StdItfReq+0xc0>
 80051c2:	7bfb      	ldrb	r3, [r7, #15]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d10d      	bne.n	80051e4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 fdd3 	bl	8005d74 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80051ce:	e009      	b.n	80051e4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80051d0:	6839      	ldr	r1, [r7, #0]
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 fcf7 	bl	8005bc6 <USBD_CtlError>
          break;
 80051d8:	e004      	b.n	80051e4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80051da:	6839      	ldr	r1, [r7, #0]
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 fcf2 	bl	8005bc6 <USBD_CtlError>
          break;
 80051e2:	e000      	b.n	80051e6 <USBD_StdItfReq+0xc2>
          break;
 80051e4:	bf00      	nop
      }
      break;
 80051e6:	e004      	b.n	80051f2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80051e8:	6839      	ldr	r1, [r7, #0]
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 fceb 	bl	8005bc6 <USBD_CtlError>
      break;
 80051f0:	bf00      	nop
  }

  return ret;
 80051f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3710      	adds	r7, #16
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005206:	2300      	movs	r3, #0
 8005208:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	889b      	ldrh	r3, [r3, #4]
 800520e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005218:	2b40      	cmp	r3, #64	@ 0x40
 800521a:	d007      	beq.n	800522c <USBD_StdEPReq+0x30>
 800521c:	2b40      	cmp	r3, #64	@ 0x40
 800521e:	f200 817f 	bhi.w	8005520 <USBD_StdEPReq+0x324>
 8005222:	2b00      	cmp	r3, #0
 8005224:	d02a      	beq.n	800527c <USBD_StdEPReq+0x80>
 8005226:	2b20      	cmp	r3, #32
 8005228:	f040 817a 	bne.w	8005520 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800522c:	7bbb      	ldrb	r3, [r7, #14]
 800522e:	4619      	mov	r1, r3
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f7ff fe85 	bl	8004f40 <USBD_CoreFindEP>
 8005236:	4603      	mov	r3, r0
 8005238:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800523a:	7b7b      	ldrb	r3, [r7, #13]
 800523c:	2bff      	cmp	r3, #255	@ 0xff
 800523e:	f000 8174 	beq.w	800552a <USBD_StdEPReq+0x32e>
 8005242:	7b7b      	ldrb	r3, [r7, #13]
 8005244:	2b00      	cmp	r3, #0
 8005246:	f040 8170 	bne.w	800552a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800524a:	7b7a      	ldrb	r2, [r7, #13]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005252:	7b7a      	ldrb	r2, [r7, #13]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	32ae      	adds	r2, #174	@ 0xae
 8005258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	2b00      	cmp	r3, #0
 8005260:	f000 8163 	beq.w	800552a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005264:	7b7a      	ldrb	r2, [r7, #13]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	32ae      	adds	r2, #174	@ 0xae
 800526a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	6839      	ldr	r1, [r7, #0]
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	4798      	blx	r3
 8005276:	4603      	mov	r3, r0
 8005278:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800527a:	e156      	b.n	800552a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	785b      	ldrb	r3, [r3, #1]
 8005280:	2b03      	cmp	r3, #3
 8005282:	d008      	beq.n	8005296 <USBD_StdEPReq+0x9a>
 8005284:	2b03      	cmp	r3, #3
 8005286:	f300 8145 	bgt.w	8005514 <USBD_StdEPReq+0x318>
 800528a:	2b00      	cmp	r3, #0
 800528c:	f000 809b 	beq.w	80053c6 <USBD_StdEPReq+0x1ca>
 8005290:	2b01      	cmp	r3, #1
 8005292:	d03c      	beq.n	800530e <USBD_StdEPReq+0x112>
 8005294:	e13e      	b.n	8005514 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d002      	beq.n	80052a8 <USBD_StdEPReq+0xac>
 80052a2:	2b03      	cmp	r3, #3
 80052a4:	d016      	beq.n	80052d4 <USBD_StdEPReq+0xd8>
 80052a6:	e02c      	b.n	8005302 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80052a8:	7bbb      	ldrb	r3, [r7, #14]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00d      	beq.n	80052ca <USBD_StdEPReq+0xce>
 80052ae:	7bbb      	ldrb	r3, [r7, #14]
 80052b0:	2b80      	cmp	r3, #128	@ 0x80
 80052b2:	d00a      	beq.n	80052ca <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80052b4:	7bbb      	ldrb	r3, [r7, #14]
 80052b6:	4619      	mov	r1, r3
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f001 f953 	bl	8006564 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80052be:	2180      	movs	r1, #128	@ 0x80
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f001 f94f 	bl	8006564 <USBD_LL_StallEP>
 80052c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80052c8:	e020      	b.n	800530c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80052ca:	6839      	ldr	r1, [r7, #0]
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 fc7a 	bl	8005bc6 <USBD_CtlError>
              break;
 80052d2:	e01b      	b.n	800530c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	885b      	ldrh	r3, [r3, #2]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d10e      	bne.n	80052fa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80052dc:	7bbb      	ldrb	r3, [r7, #14]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00b      	beq.n	80052fa <USBD_StdEPReq+0xfe>
 80052e2:	7bbb      	ldrb	r3, [r7, #14]
 80052e4:	2b80      	cmp	r3, #128	@ 0x80
 80052e6:	d008      	beq.n	80052fa <USBD_StdEPReq+0xfe>
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	88db      	ldrh	r3, [r3, #6]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d104      	bne.n	80052fa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80052f0:	7bbb      	ldrb	r3, [r7, #14]
 80052f2:	4619      	mov	r1, r3
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f001 f935 	bl	8006564 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 fd3a 	bl	8005d74 <USBD_CtlSendStatus>

              break;
 8005300:	e004      	b.n	800530c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005302:	6839      	ldr	r1, [r7, #0]
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f000 fc5e 	bl	8005bc6 <USBD_CtlError>
              break;
 800530a:	bf00      	nop
          }
          break;
 800530c:	e107      	b.n	800551e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005314:	b2db      	uxtb	r3, r3
 8005316:	2b02      	cmp	r3, #2
 8005318:	d002      	beq.n	8005320 <USBD_StdEPReq+0x124>
 800531a:	2b03      	cmp	r3, #3
 800531c:	d016      	beq.n	800534c <USBD_StdEPReq+0x150>
 800531e:	e04b      	b.n	80053b8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005320:	7bbb      	ldrb	r3, [r7, #14]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00d      	beq.n	8005342 <USBD_StdEPReq+0x146>
 8005326:	7bbb      	ldrb	r3, [r7, #14]
 8005328:	2b80      	cmp	r3, #128	@ 0x80
 800532a:	d00a      	beq.n	8005342 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800532c:	7bbb      	ldrb	r3, [r7, #14]
 800532e:	4619      	mov	r1, r3
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f001 f917 	bl	8006564 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005336:	2180      	movs	r1, #128	@ 0x80
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f001 f913 	bl	8006564 <USBD_LL_StallEP>
 800533e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005340:	e040      	b.n	80053c4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005342:	6839      	ldr	r1, [r7, #0]
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f000 fc3e 	bl	8005bc6 <USBD_CtlError>
              break;
 800534a:	e03b      	b.n	80053c4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	885b      	ldrh	r3, [r3, #2]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d136      	bne.n	80053c2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005354:	7bbb      	ldrb	r3, [r7, #14]
 8005356:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800535a:	2b00      	cmp	r3, #0
 800535c:	d004      	beq.n	8005368 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800535e:	7bbb      	ldrb	r3, [r7, #14]
 8005360:	4619      	mov	r1, r3
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f001 f91d 	bl	80065a2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 fd03 	bl	8005d74 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800536e:	7bbb      	ldrb	r3, [r7, #14]
 8005370:	4619      	mov	r1, r3
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f7ff fde4 	bl	8004f40 <USBD_CoreFindEP>
 8005378:	4603      	mov	r3, r0
 800537a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800537c:	7b7b      	ldrb	r3, [r7, #13]
 800537e:	2bff      	cmp	r3, #255	@ 0xff
 8005380:	d01f      	beq.n	80053c2 <USBD_StdEPReq+0x1c6>
 8005382:	7b7b      	ldrb	r3, [r7, #13]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d11c      	bne.n	80053c2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005388:	7b7a      	ldrb	r2, [r7, #13]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005390:	7b7a      	ldrb	r2, [r7, #13]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	32ae      	adds	r2, #174	@ 0xae
 8005396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d010      	beq.n	80053c2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80053a0:	7b7a      	ldrb	r2, [r7, #13]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	32ae      	adds	r2, #174	@ 0xae
 80053a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	6839      	ldr	r1, [r7, #0]
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	4798      	blx	r3
 80053b2:	4603      	mov	r3, r0
 80053b4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80053b6:	e004      	b.n	80053c2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80053b8:	6839      	ldr	r1, [r7, #0]
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 fc03 	bl	8005bc6 <USBD_CtlError>
              break;
 80053c0:	e000      	b.n	80053c4 <USBD_StdEPReq+0x1c8>
              break;
 80053c2:	bf00      	nop
          }
          break;
 80053c4:	e0ab      	b.n	800551e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d002      	beq.n	80053d8 <USBD_StdEPReq+0x1dc>
 80053d2:	2b03      	cmp	r3, #3
 80053d4:	d032      	beq.n	800543c <USBD_StdEPReq+0x240>
 80053d6:	e097      	b.n	8005508 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80053d8:	7bbb      	ldrb	r3, [r7, #14]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d007      	beq.n	80053ee <USBD_StdEPReq+0x1f2>
 80053de:	7bbb      	ldrb	r3, [r7, #14]
 80053e0:	2b80      	cmp	r3, #128	@ 0x80
 80053e2:	d004      	beq.n	80053ee <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80053e4:	6839      	ldr	r1, [r7, #0]
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 fbed 	bl	8005bc6 <USBD_CtlError>
                break;
 80053ec:	e091      	b.n	8005512 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80053ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	da0b      	bge.n	800540e <USBD_StdEPReq+0x212>
 80053f6:	7bbb      	ldrb	r3, [r7, #14]
 80053f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80053fc:	4613      	mov	r3, r2
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	4413      	add	r3, r2
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	3310      	adds	r3, #16
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	4413      	add	r3, r2
 800540a:	3304      	adds	r3, #4
 800540c:	e00b      	b.n	8005426 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800540e:	7bbb      	ldrb	r3, [r7, #14]
 8005410:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005414:	4613      	mov	r3, r2
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	4413      	add	r3, r2
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	4413      	add	r3, r2
 8005424:	3304      	adds	r3, #4
 8005426:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	2200      	movs	r2, #0
 800542c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	2202      	movs	r2, #2
 8005432:	4619      	mov	r1, r3
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 fc43 	bl	8005cc0 <USBD_CtlSendData>
              break;
 800543a:	e06a      	b.n	8005512 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800543c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005440:	2b00      	cmp	r3, #0
 8005442:	da11      	bge.n	8005468 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005444:	7bbb      	ldrb	r3, [r7, #14]
 8005446:	f003 020f 	and.w	r2, r3, #15
 800544a:	6879      	ldr	r1, [r7, #4]
 800544c:	4613      	mov	r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	4413      	add	r3, r2
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	440b      	add	r3, r1
 8005456:	3324      	adds	r3, #36	@ 0x24
 8005458:	881b      	ldrh	r3, [r3, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d117      	bne.n	800548e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800545e:	6839      	ldr	r1, [r7, #0]
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 fbb0 	bl	8005bc6 <USBD_CtlError>
                  break;
 8005466:	e054      	b.n	8005512 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005468:	7bbb      	ldrb	r3, [r7, #14]
 800546a:	f003 020f 	and.w	r2, r3, #15
 800546e:	6879      	ldr	r1, [r7, #4]
 8005470:	4613      	mov	r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	4413      	add	r3, r2
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	440b      	add	r3, r1
 800547a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800547e:	881b      	ldrh	r3, [r3, #0]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d104      	bne.n	800548e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005484:	6839      	ldr	r1, [r7, #0]
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 fb9d 	bl	8005bc6 <USBD_CtlError>
                  break;
 800548c:	e041      	b.n	8005512 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800548e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005492:	2b00      	cmp	r3, #0
 8005494:	da0b      	bge.n	80054ae <USBD_StdEPReq+0x2b2>
 8005496:	7bbb      	ldrb	r3, [r7, #14]
 8005498:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800549c:	4613      	mov	r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	4413      	add	r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	3310      	adds	r3, #16
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	4413      	add	r3, r2
 80054aa:	3304      	adds	r3, #4
 80054ac:	e00b      	b.n	80054c6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80054ae:	7bbb      	ldrb	r3, [r7, #14]
 80054b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80054b4:	4613      	mov	r3, r2
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	4413      	add	r3, r2
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	4413      	add	r3, r2
 80054c4:	3304      	adds	r3, #4
 80054c6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80054c8:	7bbb      	ldrb	r3, [r7, #14]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d002      	beq.n	80054d4 <USBD_StdEPReq+0x2d8>
 80054ce:	7bbb      	ldrb	r3, [r7, #14]
 80054d0:	2b80      	cmp	r3, #128	@ 0x80
 80054d2:	d103      	bne.n	80054dc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	2200      	movs	r2, #0
 80054d8:	601a      	str	r2, [r3, #0]
 80054da:	e00e      	b.n	80054fa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80054dc:	7bbb      	ldrb	r3, [r7, #14]
 80054de:	4619      	mov	r1, r3
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f001 f87d 	bl	80065e0 <USBD_LL_IsStallEP>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d003      	beq.n	80054f4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	2201      	movs	r2, #1
 80054f0:	601a      	str	r2, [r3, #0]
 80054f2:	e002      	b.n	80054fa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	2200      	movs	r2, #0
 80054f8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	2202      	movs	r2, #2
 80054fe:	4619      	mov	r1, r3
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 fbdd 	bl	8005cc0 <USBD_CtlSendData>
              break;
 8005506:	e004      	b.n	8005512 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8005508:	6839      	ldr	r1, [r7, #0]
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 fb5b 	bl	8005bc6 <USBD_CtlError>
              break;
 8005510:	bf00      	nop
          }
          break;
 8005512:	e004      	b.n	800551e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005514:	6839      	ldr	r1, [r7, #0]
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 fb55 	bl	8005bc6 <USBD_CtlError>
          break;
 800551c:	bf00      	nop
      }
      break;
 800551e:	e005      	b.n	800552c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005520:	6839      	ldr	r1, [r7, #0]
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 fb4f 	bl	8005bc6 <USBD_CtlError>
      break;
 8005528:	e000      	b.n	800552c <USBD_StdEPReq+0x330>
      break;
 800552a:	bf00      	nop
  }

  return ret;
 800552c:	7bfb      	ldrb	r3, [r7, #15]
}
 800552e:	4618      	mov	r0, r3
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
	...

08005538 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005542:	2300      	movs	r3, #0
 8005544:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005546:	2300      	movs	r3, #0
 8005548:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800554a:	2300      	movs	r3, #0
 800554c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	885b      	ldrh	r3, [r3, #2]
 8005552:	0a1b      	lsrs	r3, r3, #8
 8005554:	b29b      	uxth	r3, r3
 8005556:	3b01      	subs	r3, #1
 8005558:	2b06      	cmp	r3, #6
 800555a:	f200 8128 	bhi.w	80057ae <USBD_GetDescriptor+0x276>
 800555e:	a201      	add	r2, pc, #4	@ (adr r2, 8005564 <USBD_GetDescriptor+0x2c>)
 8005560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005564:	08005581 	.word	0x08005581
 8005568:	08005599 	.word	0x08005599
 800556c:	080055d9 	.word	0x080055d9
 8005570:	080057af 	.word	0x080057af
 8005574:	080057af 	.word	0x080057af
 8005578:	0800574f 	.word	0x0800574f
 800557c:	0800577b 	.word	0x0800577b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	7c12      	ldrb	r2, [r2, #16]
 800558c:	f107 0108 	add.w	r1, r7, #8
 8005590:	4610      	mov	r0, r2
 8005592:	4798      	blx	r3
 8005594:	60f8      	str	r0, [r7, #12]
      break;
 8005596:	e112      	b.n	80057be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	7c1b      	ldrb	r3, [r3, #16]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d10d      	bne.n	80055bc <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80055a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055a8:	f107 0208 	add.w	r2, r7, #8
 80055ac:	4610      	mov	r0, r2
 80055ae:	4798      	blx	r3
 80055b0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	3301      	adds	r3, #1
 80055b6:	2202      	movs	r2, #2
 80055b8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80055ba:	e100      	b.n	80057be <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80055c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055c4:	f107 0208 	add.w	r2, r7, #8
 80055c8:	4610      	mov	r0, r2
 80055ca:	4798      	blx	r3
 80055cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	3301      	adds	r3, #1
 80055d2:	2202      	movs	r2, #2
 80055d4:	701a      	strb	r2, [r3, #0]
      break;
 80055d6:	e0f2      	b.n	80057be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	885b      	ldrh	r3, [r3, #2]
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	2b05      	cmp	r3, #5
 80055e0:	f200 80ac 	bhi.w	800573c <USBD_GetDescriptor+0x204>
 80055e4:	a201      	add	r2, pc, #4	@ (adr r2, 80055ec <USBD_GetDescriptor+0xb4>)
 80055e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ea:	bf00      	nop
 80055ec:	08005605 	.word	0x08005605
 80055f0:	08005639 	.word	0x08005639
 80055f4:	0800566d 	.word	0x0800566d
 80055f8:	080056a1 	.word	0x080056a1
 80055fc:	080056d5 	.word	0x080056d5
 8005600:	08005709 	.word	0x08005709
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d00b      	beq.n	8005628 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	7c12      	ldrb	r2, [r2, #16]
 800561c:	f107 0108 	add.w	r1, r7, #8
 8005620:	4610      	mov	r0, r2
 8005622:	4798      	blx	r3
 8005624:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005626:	e091      	b.n	800574c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005628:	6839      	ldr	r1, [r7, #0]
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 facb 	bl	8005bc6 <USBD_CtlError>
            err++;
 8005630:	7afb      	ldrb	r3, [r7, #11]
 8005632:	3301      	adds	r3, #1
 8005634:	72fb      	strb	r3, [r7, #11]
          break;
 8005636:	e089      	b.n	800574c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d00b      	beq.n	800565c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	7c12      	ldrb	r2, [r2, #16]
 8005650:	f107 0108 	add.w	r1, r7, #8
 8005654:	4610      	mov	r0, r2
 8005656:	4798      	blx	r3
 8005658:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800565a:	e077      	b.n	800574c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800565c:	6839      	ldr	r1, [r7, #0]
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 fab1 	bl	8005bc6 <USBD_CtlError>
            err++;
 8005664:	7afb      	ldrb	r3, [r7, #11]
 8005666:	3301      	adds	r3, #1
 8005668:	72fb      	strb	r3, [r7, #11]
          break;
 800566a:	e06f      	b.n	800574c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00b      	beq.n	8005690 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	7c12      	ldrb	r2, [r2, #16]
 8005684:	f107 0108 	add.w	r1, r7, #8
 8005688:	4610      	mov	r0, r2
 800568a:	4798      	blx	r3
 800568c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800568e:	e05d      	b.n	800574c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005690:	6839      	ldr	r1, [r7, #0]
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 fa97 	bl	8005bc6 <USBD_CtlError>
            err++;
 8005698:	7afb      	ldrb	r3, [r7, #11]
 800569a:	3301      	adds	r3, #1
 800569c:	72fb      	strb	r3, [r7, #11]
          break;
 800569e:	e055      	b.n	800574c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80056a6:	691b      	ldr	r3, [r3, #16]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d00b      	beq.n	80056c4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	7c12      	ldrb	r2, [r2, #16]
 80056b8:	f107 0108 	add.w	r1, r7, #8
 80056bc:	4610      	mov	r0, r2
 80056be:	4798      	blx	r3
 80056c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80056c2:	e043      	b.n	800574c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80056c4:	6839      	ldr	r1, [r7, #0]
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 fa7d 	bl	8005bc6 <USBD_CtlError>
            err++;
 80056cc:	7afb      	ldrb	r3, [r7, #11]
 80056ce:	3301      	adds	r3, #1
 80056d0:	72fb      	strb	r3, [r7, #11]
          break;
 80056d2:	e03b      	b.n	800574c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80056da:	695b      	ldr	r3, [r3, #20]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d00b      	beq.n	80056f8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80056e6:	695b      	ldr	r3, [r3, #20]
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	7c12      	ldrb	r2, [r2, #16]
 80056ec:	f107 0108 	add.w	r1, r7, #8
 80056f0:	4610      	mov	r0, r2
 80056f2:	4798      	blx	r3
 80056f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80056f6:	e029      	b.n	800574c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80056f8:	6839      	ldr	r1, [r7, #0]
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 fa63 	bl	8005bc6 <USBD_CtlError>
            err++;
 8005700:	7afb      	ldrb	r3, [r7, #11]
 8005702:	3301      	adds	r3, #1
 8005704:	72fb      	strb	r3, [r7, #11]
          break;
 8005706:	e021      	b.n	800574c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800570e:	699b      	ldr	r3, [r3, #24]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00b      	beq.n	800572c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	7c12      	ldrb	r2, [r2, #16]
 8005720:	f107 0108 	add.w	r1, r7, #8
 8005724:	4610      	mov	r0, r2
 8005726:	4798      	blx	r3
 8005728:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800572a:	e00f      	b.n	800574c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800572c:	6839      	ldr	r1, [r7, #0]
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 fa49 	bl	8005bc6 <USBD_CtlError>
            err++;
 8005734:	7afb      	ldrb	r3, [r7, #11]
 8005736:	3301      	adds	r3, #1
 8005738:	72fb      	strb	r3, [r7, #11]
          break;
 800573a:	e007      	b.n	800574c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800573c:	6839      	ldr	r1, [r7, #0]
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 fa41 	bl	8005bc6 <USBD_CtlError>
          err++;
 8005744:	7afb      	ldrb	r3, [r7, #11]
 8005746:	3301      	adds	r3, #1
 8005748:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800574a:	bf00      	nop
      }
      break;
 800574c:	e037      	b.n	80057be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	7c1b      	ldrb	r3, [r3, #16]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d109      	bne.n	800576a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800575c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800575e:	f107 0208 	add.w	r2, r7, #8
 8005762:	4610      	mov	r0, r2
 8005764:	4798      	blx	r3
 8005766:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005768:	e029      	b.n	80057be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800576a:	6839      	ldr	r1, [r7, #0]
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 fa2a 	bl	8005bc6 <USBD_CtlError>
        err++;
 8005772:	7afb      	ldrb	r3, [r7, #11]
 8005774:	3301      	adds	r3, #1
 8005776:	72fb      	strb	r3, [r7, #11]
      break;
 8005778:	e021      	b.n	80057be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	7c1b      	ldrb	r3, [r3, #16]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d10d      	bne.n	800579e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800578a:	f107 0208 	add.w	r2, r7, #8
 800578e:	4610      	mov	r0, r2
 8005790:	4798      	blx	r3
 8005792:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	3301      	adds	r3, #1
 8005798:	2207      	movs	r2, #7
 800579a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800579c:	e00f      	b.n	80057be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800579e:	6839      	ldr	r1, [r7, #0]
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 fa10 	bl	8005bc6 <USBD_CtlError>
        err++;
 80057a6:	7afb      	ldrb	r3, [r7, #11]
 80057a8:	3301      	adds	r3, #1
 80057aa:	72fb      	strb	r3, [r7, #11]
      break;
 80057ac:	e007      	b.n	80057be <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80057ae:	6839      	ldr	r1, [r7, #0]
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 fa08 	bl	8005bc6 <USBD_CtlError>
      err++;
 80057b6:	7afb      	ldrb	r3, [r7, #11]
 80057b8:	3301      	adds	r3, #1
 80057ba:	72fb      	strb	r3, [r7, #11]
      break;
 80057bc:	bf00      	nop
  }

  if (err != 0U)
 80057be:	7afb      	ldrb	r3, [r7, #11]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d11e      	bne.n	8005802 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	88db      	ldrh	r3, [r3, #6]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d016      	beq.n	80057fa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80057cc:	893b      	ldrh	r3, [r7, #8]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00e      	beq.n	80057f0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	88da      	ldrh	r2, [r3, #6]
 80057d6:	893b      	ldrh	r3, [r7, #8]
 80057d8:	4293      	cmp	r3, r2
 80057da:	bf28      	it	cs
 80057dc:	4613      	movcs	r3, r2
 80057de:	b29b      	uxth	r3, r3
 80057e0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80057e2:	893b      	ldrh	r3, [r7, #8]
 80057e4:	461a      	mov	r2, r3
 80057e6:	68f9      	ldr	r1, [r7, #12]
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 fa69 	bl	8005cc0 <USBD_CtlSendData>
 80057ee:	e009      	b.n	8005804 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80057f0:	6839      	ldr	r1, [r7, #0]
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 f9e7 	bl	8005bc6 <USBD_CtlError>
 80057f8:	e004      	b.n	8005804 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 faba 	bl	8005d74 <USBD_CtlSendStatus>
 8005800:	e000      	b.n	8005804 <USBD_GetDescriptor+0x2cc>
    return;
 8005802:	bf00      	nop
  }
}
 8005804:	3710      	adds	r7, #16
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop

0800580c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	889b      	ldrh	r3, [r3, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d131      	bne.n	8005882 <USBD_SetAddress+0x76>
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	88db      	ldrh	r3, [r3, #6]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d12d      	bne.n	8005882 <USBD_SetAddress+0x76>
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	885b      	ldrh	r3, [r3, #2]
 800582a:	2b7f      	cmp	r3, #127	@ 0x7f
 800582c:	d829      	bhi.n	8005882 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	885b      	ldrh	r3, [r3, #2]
 8005832:	b2db      	uxtb	r3, r3
 8005834:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005838:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2b03      	cmp	r3, #3
 8005844:	d104      	bne.n	8005850 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005846:	6839      	ldr	r1, [r7, #0]
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 f9bc 	bl	8005bc6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800584e:	e01d      	b.n	800588c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	7bfa      	ldrb	r2, [r7, #15]
 8005854:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005858:	7bfb      	ldrb	r3, [r7, #15]
 800585a:	4619      	mov	r1, r3
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f000 feeb 	bl	8006638 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 fa86 	bl	8005d74 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005868:	7bfb      	ldrb	r3, [r7, #15]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d004      	beq.n	8005878 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2202      	movs	r2, #2
 8005872:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005876:	e009      	b.n	800588c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005880:	e004      	b.n	800588c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005882:	6839      	ldr	r1, [r7, #0]
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 f99e 	bl	8005bc6 <USBD_CtlError>
  }
}
 800588a:	bf00      	nop
 800588c:	bf00      	nop
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800589e:	2300      	movs	r3, #0
 80058a0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	885b      	ldrh	r3, [r3, #2]
 80058a6:	b2da      	uxtb	r2, r3
 80058a8:	4b4e      	ldr	r3, [pc, #312]	@ (80059e4 <USBD_SetConfig+0x150>)
 80058aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80058ac:	4b4d      	ldr	r3, [pc, #308]	@ (80059e4 <USBD_SetConfig+0x150>)
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d905      	bls.n	80058c0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80058b4:	6839      	ldr	r1, [r7, #0]
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 f985 	bl	8005bc6 <USBD_CtlError>
    return USBD_FAIL;
 80058bc:	2303      	movs	r3, #3
 80058be:	e08c      	b.n	80059da <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d002      	beq.n	80058d2 <USBD_SetConfig+0x3e>
 80058cc:	2b03      	cmp	r3, #3
 80058ce:	d029      	beq.n	8005924 <USBD_SetConfig+0x90>
 80058d0:	e075      	b.n	80059be <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80058d2:	4b44      	ldr	r3, [pc, #272]	@ (80059e4 <USBD_SetConfig+0x150>)
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d020      	beq.n	800591c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80058da:	4b42      	ldr	r3, [pc, #264]	@ (80059e4 <USBD_SetConfig+0x150>)
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	461a      	mov	r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80058e4:	4b3f      	ldr	r3, [pc, #252]	@ (80059e4 <USBD_SetConfig+0x150>)
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	4619      	mov	r1, r3
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f7fe ffe3 	bl	80048b6 <USBD_SetClassConfig>
 80058f0:	4603      	mov	r3, r0
 80058f2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80058f4:	7bfb      	ldrb	r3, [r7, #15]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d008      	beq.n	800590c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80058fa:	6839      	ldr	r1, [r7, #0]
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 f962 	bl	8005bc6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2202      	movs	r2, #2
 8005906:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800590a:	e065      	b.n	80059d8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 fa31 	bl	8005d74 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2203      	movs	r2, #3
 8005916:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800591a:	e05d      	b.n	80059d8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f000 fa29 	bl	8005d74 <USBD_CtlSendStatus>
      break;
 8005922:	e059      	b.n	80059d8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005924:	4b2f      	ldr	r3, [pc, #188]	@ (80059e4 <USBD_SetConfig+0x150>)
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d112      	bne.n	8005952 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2202      	movs	r2, #2
 8005930:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8005934:	4b2b      	ldr	r3, [pc, #172]	@ (80059e4 <USBD_SetConfig+0x150>)
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	461a      	mov	r2, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800593e:	4b29      	ldr	r3, [pc, #164]	@ (80059e4 <USBD_SetConfig+0x150>)
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	4619      	mov	r1, r3
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f7fe ffd2 	bl	80048ee <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 fa12 	bl	8005d74 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005950:	e042      	b.n	80059d8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8005952:	4b24      	ldr	r3, [pc, #144]	@ (80059e4 <USBD_SetConfig+0x150>)
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	461a      	mov	r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	429a      	cmp	r2, r3
 800595e:	d02a      	beq.n	80059b6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	b2db      	uxtb	r3, r3
 8005966:	4619      	mov	r1, r3
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f7fe ffc0 	bl	80048ee <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800596e:	4b1d      	ldr	r3, [pc, #116]	@ (80059e4 <USBD_SetConfig+0x150>)
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	461a      	mov	r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005978:	4b1a      	ldr	r3, [pc, #104]	@ (80059e4 <USBD_SetConfig+0x150>)
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	4619      	mov	r1, r3
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f7fe ff99 	bl	80048b6 <USBD_SetClassConfig>
 8005984:	4603      	mov	r3, r0
 8005986:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005988:	7bfb      	ldrb	r3, [r7, #15]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00f      	beq.n	80059ae <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800598e:	6839      	ldr	r1, [r7, #0]
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 f918 	bl	8005bc6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	b2db      	uxtb	r3, r3
 800599c:	4619      	mov	r1, r3
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f7fe ffa5 	bl	80048ee <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2202      	movs	r2, #2
 80059a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80059ac:	e014      	b.n	80059d8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 f9e0 	bl	8005d74 <USBD_CtlSendStatus>
      break;
 80059b4:	e010      	b.n	80059d8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 f9dc 	bl	8005d74 <USBD_CtlSendStatus>
      break;
 80059bc:	e00c      	b.n	80059d8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80059be:	6839      	ldr	r1, [r7, #0]
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 f900 	bl	8005bc6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80059c6:	4b07      	ldr	r3, [pc, #28]	@ (80059e4 <USBD_SetConfig+0x150>)
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	4619      	mov	r1, r3
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f7fe ff8e 	bl	80048ee <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80059d2:	2303      	movs	r3, #3
 80059d4:	73fb      	strb	r3, [r7, #15]
      break;
 80059d6:	bf00      	nop
  }

  return ret;
 80059d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3710      	adds	r7, #16
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	20000188 	.word	0x20000188

080059e8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	88db      	ldrh	r3, [r3, #6]
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d004      	beq.n	8005a04 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80059fa:	6839      	ldr	r1, [r7, #0]
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 f8e2 	bl	8005bc6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005a02:	e023      	b.n	8005a4c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	2b02      	cmp	r3, #2
 8005a0e:	dc02      	bgt.n	8005a16 <USBD_GetConfig+0x2e>
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	dc03      	bgt.n	8005a1c <USBD_GetConfig+0x34>
 8005a14:	e015      	b.n	8005a42 <USBD_GetConfig+0x5a>
 8005a16:	2b03      	cmp	r3, #3
 8005a18:	d00b      	beq.n	8005a32 <USBD_GetConfig+0x4a>
 8005a1a:	e012      	b.n	8005a42 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	3308      	adds	r3, #8
 8005a26:	2201      	movs	r2, #1
 8005a28:	4619      	mov	r1, r3
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 f948 	bl	8005cc0 <USBD_CtlSendData>
        break;
 8005a30:	e00c      	b.n	8005a4c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	3304      	adds	r3, #4
 8005a36:	2201      	movs	r2, #1
 8005a38:	4619      	mov	r1, r3
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 f940 	bl	8005cc0 <USBD_CtlSendData>
        break;
 8005a40:	e004      	b.n	8005a4c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005a42:	6839      	ldr	r1, [r7, #0]
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f000 f8be 	bl	8005bc6 <USBD_CtlError>
        break;
 8005a4a:	bf00      	nop
}
 8005a4c:	bf00      	nop
 8005a4e:	3708      	adds	r7, #8
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b082      	sub	sp, #8
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	3b01      	subs	r3, #1
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	d81e      	bhi.n	8005aaa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	88db      	ldrh	r3, [r3, #6]
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d004      	beq.n	8005a7e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005a74:	6839      	ldr	r1, [r7, #0]
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 f8a5 	bl	8005bc6 <USBD_CtlError>
        break;
 8005a7c:	e01a      	b.n	8005ab4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2201      	movs	r2, #1
 8005a82:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d005      	beq.n	8005a9a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	f043 0202 	orr.w	r2, r3, #2
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	330c      	adds	r3, #12
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 f90c 	bl	8005cc0 <USBD_CtlSendData>
      break;
 8005aa8:	e004      	b.n	8005ab4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005aaa:	6839      	ldr	r1, [r7, #0]
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f000 f88a 	bl	8005bc6 <USBD_CtlError>
      break;
 8005ab2:	bf00      	nop
  }
}
 8005ab4:	bf00      	nop
 8005ab6:	3708      	adds	r7, #8
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	885b      	ldrh	r3, [r3, #2]
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d107      	bne.n	8005ade <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 f94c 	bl	8005d74 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8005adc:	e013      	b.n	8005b06 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	885b      	ldrh	r3, [r3, #2]
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d10b      	bne.n	8005afe <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	889b      	ldrh	r3, [r3, #4]
 8005aea:	0a1b      	lsrs	r3, r3, #8
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	b2da      	uxtb	r2, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 f93c 	bl	8005d74 <USBD_CtlSendStatus>
}
 8005afc:	e003      	b.n	8005b06 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8005afe:	6839      	ldr	r1, [r7, #0]
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f000 f860 	bl	8005bc6 <USBD_CtlError>
}
 8005b06:	bf00      	nop
 8005b08:	3708      	adds	r7, #8
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}

08005b0e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b0e:	b580      	push	{r7, lr}
 8005b10:	b082      	sub	sp, #8
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
 8005b16:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	3b01      	subs	r3, #1
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d80b      	bhi.n	8005b3e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	885b      	ldrh	r3, [r3, #2]
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d10c      	bne.n	8005b48 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 f91c 	bl	8005d74 <USBD_CtlSendStatus>
      }
      break;
 8005b3c:	e004      	b.n	8005b48 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005b3e:	6839      	ldr	r1, [r7, #0]
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f000 f840 	bl	8005bc6 <USBD_CtlError>
      break;
 8005b46:	e000      	b.n	8005b4a <USBD_ClrFeature+0x3c>
      break;
 8005b48:	bf00      	nop
  }
}
 8005b4a:	bf00      	nop
 8005b4c:	3708      	adds	r7, #8
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}

08005b52 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005b52:	b580      	push	{r7, lr}
 8005b54:	b084      	sub	sp, #16
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
 8005b5a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	781a      	ldrb	r2, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	781a      	ldrb	r2, [r3, #0]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	3301      	adds	r3, #1
 8005b7a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005b7c:	68f8      	ldr	r0, [r7, #12]
 8005b7e:	f7ff fa40 	bl	8005002 <SWAPBYTE>
 8005b82:	4603      	mov	r3, r0
 8005b84:	461a      	mov	r2, r3
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	3301      	adds	r3, #1
 8005b94:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	f7ff fa33 	bl	8005002 <SWAPBYTE>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	3301      	adds	r3, #1
 8005bae:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f7ff fa26 	bl	8005002 <SWAPBYTE>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	461a      	mov	r2, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	80da      	strh	r2, [r3, #6]
}
 8005bbe:	bf00      	nop
 8005bc0:	3710      	adds	r7, #16
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b082      	sub	sp, #8
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
 8005bce:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005bd0:	2180      	movs	r1, #128	@ 0x80
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 fcc6 	bl	8006564 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005bd8:	2100      	movs	r1, #0
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 fcc2 	bl	8006564 <USBD_LL_StallEP>
}
 8005be0:	bf00      	nop
 8005be2:	3708      	adds	r7, #8
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b086      	sub	sp, #24
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d042      	beq.n	8005c84 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8005c02:	6938      	ldr	r0, [r7, #16]
 8005c04:	f000 f842 	bl	8005c8c <USBD_GetLen>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	005b      	lsls	r3, r3, #1
 8005c0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c12:	d808      	bhi.n	8005c26 <USBD_GetString+0x3e>
 8005c14:	6938      	ldr	r0, [r7, #16]
 8005c16:	f000 f839 	bl	8005c8c <USBD_GetLen>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	005b      	lsls	r3, r3, #1
 8005c22:	b29a      	uxth	r2, r3
 8005c24:	e001      	b.n	8005c2a <USBD_GetString+0x42>
 8005c26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005c2e:	7dfb      	ldrb	r3, [r7, #23]
 8005c30:	68ba      	ldr	r2, [r7, #8]
 8005c32:	4413      	add	r3, r2
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	7812      	ldrb	r2, [r2, #0]
 8005c38:	701a      	strb	r2, [r3, #0]
  idx++;
 8005c3a:	7dfb      	ldrb	r3, [r7, #23]
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005c40:	7dfb      	ldrb	r3, [r7, #23]
 8005c42:	68ba      	ldr	r2, [r7, #8]
 8005c44:	4413      	add	r3, r2
 8005c46:	2203      	movs	r2, #3
 8005c48:	701a      	strb	r2, [r3, #0]
  idx++;
 8005c4a:	7dfb      	ldrb	r3, [r7, #23]
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005c50:	e013      	b.n	8005c7a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8005c52:	7dfb      	ldrb	r3, [r7, #23]
 8005c54:	68ba      	ldr	r2, [r7, #8]
 8005c56:	4413      	add	r3, r2
 8005c58:	693a      	ldr	r2, [r7, #16]
 8005c5a:	7812      	ldrb	r2, [r2, #0]
 8005c5c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	3301      	adds	r3, #1
 8005c62:	613b      	str	r3, [r7, #16]
    idx++;
 8005c64:	7dfb      	ldrb	r3, [r7, #23]
 8005c66:	3301      	adds	r3, #1
 8005c68:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005c6a:	7dfb      	ldrb	r3, [r7, #23]
 8005c6c:	68ba      	ldr	r2, [r7, #8]
 8005c6e:	4413      	add	r3, r2
 8005c70:	2200      	movs	r2, #0
 8005c72:	701a      	strb	r2, [r3, #0]
    idx++;
 8005c74:	7dfb      	ldrb	r3, [r7, #23]
 8005c76:	3301      	adds	r3, #1
 8005c78:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d1e7      	bne.n	8005c52 <USBD_GetString+0x6a>
 8005c82:	e000      	b.n	8005c86 <USBD_GetString+0x9e>
    return;
 8005c84:	bf00      	nop
  }
}
 8005c86:	3718      	adds	r7, #24
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b085      	sub	sp, #20
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005c94:	2300      	movs	r3, #0
 8005c96:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005c9c:	e005      	b.n	8005caa <USBD_GetLen+0x1e>
  {
    len++;
 8005c9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d1f5      	bne.n	8005c9e <USBD_GetLen+0x12>
  }

  return len;
 8005cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3714      	adds	r7, #20
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2202      	movs	r2, #2
 8005cd0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	68ba      	ldr	r2, [r7, #8]
 8005ce4:	2100      	movs	r1, #0
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	f000 fcc5 	bl	8006676 <USBD_LL_Transmit>

  return USBD_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3710      	adds	r7, #16
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}

08005cf6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005cf6:	b580      	push	{r7, lr}
 8005cf8:	b084      	sub	sp, #16
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	60f8      	str	r0, [r7, #12]
 8005cfe:	60b9      	str	r1, [r7, #8]
 8005d00:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	68ba      	ldr	r2, [r7, #8]
 8005d06:	2100      	movs	r1, #0
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	f000 fcb4 	bl	8006676 <USBD_LL_Transmit>

  return USBD_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3710      	adds	r7, #16
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	60b9      	str	r1, [r7, #8]
 8005d22:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2203      	movs	r2, #3
 8005d28:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	68ba      	ldr	r2, [r7, #8]
 8005d40:	2100      	movs	r1, #0
 8005d42:	68f8      	ldr	r0, [r7, #12]
 8005d44:	f000 fcb8 	bl	80066b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3710      	adds	r7, #16
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b084      	sub	sp, #16
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	60f8      	str	r0, [r7, #12]
 8005d5a:	60b9      	str	r1, [r7, #8]
 8005d5c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	2100      	movs	r1, #0
 8005d64:	68f8      	ldr	r0, [r7, #12]
 8005d66:	f000 fca7 	bl	80066b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3710      	adds	r7, #16
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b082      	sub	sp, #8
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2204      	movs	r2, #4
 8005d80:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005d84:	2300      	movs	r3, #0
 8005d86:	2200      	movs	r2, #0
 8005d88:	2100      	movs	r1, #0
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 fc73 	bl	8006676 <USBD_LL_Transmit>

  return USBD_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3708      	adds	r7, #8
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}

08005d9a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	b082      	sub	sp, #8
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2205      	movs	r2, #5
 8005da6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005daa:	2300      	movs	r3, #0
 8005dac:	2200      	movs	r2, #0
 8005dae:	2100      	movs	r1, #0
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f000 fc81 	bl	80066b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005db6:	2300      	movs	r3, #0
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3708      	adds	r7, #8
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	4912      	ldr	r1, [pc, #72]	@ (8005e10 <MX_USB_DEVICE_Init+0x50>)
 8005dc8:	4812      	ldr	r0, [pc, #72]	@ (8005e14 <MX_USB_DEVICE_Init+0x54>)
 8005dca:	f7fe fcf7 	bl	80047bc <USBD_Init>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d001      	beq.n	8005dd8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005dd4:	f7fa fe56 	bl	8000a84 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005dd8:	490f      	ldr	r1, [pc, #60]	@ (8005e18 <MX_USB_DEVICE_Init+0x58>)
 8005dda:	480e      	ldr	r0, [pc, #56]	@ (8005e14 <MX_USB_DEVICE_Init+0x54>)
 8005ddc:	f7fe fd1e 	bl	800481c <USBD_RegisterClass>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d001      	beq.n	8005dea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005de6:	f7fa fe4d 	bl	8000a84 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005dea:	490c      	ldr	r1, [pc, #48]	@ (8005e1c <MX_USB_DEVICE_Init+0x5c>)
 8005dec:	4809      	ldr	r0, [pc, #36]	@ (8005e14 <MX_USB_DEVICE_Init+0x54>)
 8005dee:	f7fe fc55 	bl	800469c <USBD_CDC_RegisterInterface>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d001      	beq.n	8005dfc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005df8:	f7fa fe44 	bl	8000a84 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005dfc:	4805      	ldr	r0, [pc, #20]	@ (8005e14 <MX_USB_DEVICE_Init+0x54>)
 8005dfe:	f7fe fd43 	bl	8004888 <USBD_Start>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d001      	beq.n	8005e0c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005e08:	f7fa fe3c 	bl	8000a84 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005e0c:	bf00      	nop
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	200000b0 	.word	0x200000b0
 8005e14:	2000018c 	.word	0x2000018c
 8005e18:	2000001c 	.word	0x2000001c
 8005e1c:	2000009c 	.word	0x2000009c

08005e20 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005e24:	2200      	movs	r2, #0
 8005e26:	4905      	ldr	r1, [pc, #20]	@ (8005e3c <CDC_Init_FS+0x1c>)
 8005e28:	4805      	ldr	r0, [pc, #20]	@ (8005e40 <CDC_Init_FS+0x20>)
 8005e2a:	f7fe fc51 	bl	80046d0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005e2e:	4905      	ldr	r1, [pc, #20]	@ (8005e44 <CDC_Init_FS+0x24>)
 8005e30:	4803      	ldr	r0, [pc, #12]	@ (8005e40 <CDC_Init_FS+0x20>)
 8005e32:	f7fe fc6f 	bl	8004714 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8005e36:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	20000c68 	.word	0x20000c68
 8005e40:	2000018c 	.word	0x2000018c
 8005e44:	20000468 	.word	0x20000468

08005e48 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005e4c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	4603      	mov	r3, r0
 8005e60:	6039      	str	r1, [r7, #0]
 8005e62:	71fb      	strb	r3, [r7, #7]
 8005e64:	4613      	mov	r3, r2
 8005e66:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005e68:	79fb      	ldrb	r3, [r7, #7]
 8005e6a:	2b23      	cmp	r3, #35	@ 0x23
 8005e6c:	d84a      	bhi.n	8005f04 <CDC_Control_FS+0xac>
 8005e6e:	a201      	add	r2, pc, #4	@ (adr r2, 8005e74 <CDC_Control_FS+0x1c>)
 8005e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e74:	08005f05 	.word	0x08005f05
 8005e78:	08005f05 	.word	0x08005f05
 8005e7c:	08005f05 	.word	0x08005f05
 8005e80:	08005f05 	.word	0x08005f05
 8005e84:	08005f05 	.word	0x08005f05
 8005e88:	08005f05 	.word	0x08005f05
 8005e8c:	08005f05 	.word	0x08005f05
 8005e90:	08005f05 	.word	0x08005f05
 8005e94:	08005f05 	.word	0x08005f05
 8005e98:	08005f05 	.word	0x08005f05
 8005e9c:	08005f05 	.word	0x08005f05
 8005ea0:	08005f05 	.word	0x08005f05
 8005ea4:	08005f05 	.word	0x08005f05
 8005ea8:	08005f05 	.word	0x08005f05
 8005eac:	08005f05 	.word	0x08005f05
 8005eb0:	08005f05 	.word	0x08005f05
 8005eb4:	08005f05 	.word	0x08005f05
 8005eb8:	08005f05 	.word	0x08005f05
 8005ebc:	08005f05 	.word	0x08005f05
 8005ec0:	08005f05 	.word	0x08005f05
 8005ec4:	08005f05 	.word	0x08005f05
 8005ec8:	08005f05 	.word	0x08005f05
 8005ecc:	08005f05 	.word	0x08005f05
 8005ed0:	08005f05 	.word	0x08005f05
 8005ed4:	08005f05 	.word	0x08005f05
 8005ed8:	08005f05 	.word	0x08005f05
 8005edc:	08005f05 	.word	0x08005f05
 8005ee0:	08005f05 	.word	0x08005f05
 8005ee4:	08005f05 	.word	0x08005f05
 8005ee8:	08005f05 	.word	0x08005f05
 8005eec:	08005f05 	.word	0x08005f05
 8005ef0:	08005f05 	.word	0x08005f05
 8005ef4:	08005f05 	.word	0x08005f05
 8005ef8:	08005f05 	.word	0x08005f05
 8005efc:	08005f05 	.word	0x08005f05
 8005f00:	08005f05 	.word	0x08005f05
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8005f04:	bf00      	nop
  }

  return (USBD_OK);
 8005f06:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005f1e:	6879      	ldr	r1, [r7, #4]
 8005f20:	4805      	ldr	r0, [pc, #20]	@ (8005f38 <CDC_Receive_FS+0x24>)
 8005f22:	f7fe fbf7 	bl	8004714 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005f26:	4804      	ldr	r0, [pc, #16]	@ (8005f38 <CDC_Receive_FS+0x24>)
 8005f28:	f7fe fc12 	bl	8004750 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8005f2c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3708      	adds	r7, #8
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	2000018c 	.word	0x2000018c

08005f3c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b087      	sub	sp, #28
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	4613      	mov	r3, r2
 8005f48:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8005f4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	371c      	adds	r7, #28
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr
	...

08005f60 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	4603      	mov	r3, r0
 8005f68:	6039      	str	r1, [r7, #0]
 8005f6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	2212      	movs	r2, #18
 8005f70:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005f72:	4b03      	ldr	r3, [pc, #12]	@ (8005f80 <USBD_FS_DeviceDescriptor+0x20>)
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr
 8005f80:	200000cc 	.word	0x200000cc

08005f84 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	6039      	str	r1, [r7, #0]
 8005f8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	2204      	movs	r2, #4
 8005f94:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005f96:	4b03      	ldr	r3, [pc, #12]	@ (8005fa4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr
 8005fa4:	200000e0 	.word	0x200000e0

08005fa8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	4603      	mov	r3, r0
 8005fb0:	6039      	str	r1, [r7, #0]
 8005fb2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005fb4:	79fb      	ldrb	r3, [r7, #7]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d105      	bne.n	8005fc6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005fba:	683a      	ldr	r2, [r7, #0]
 8005fbc:	4907      	ldr	r1, [pc, #28]	@ (8005fdc <USBD_FS_ProductStrDescriptor+0x34>)
 8005fbe:	4808      	ldr	r0, [pc, #32]	@ (8005fe0 <USBD_FS_ProductStrDescriptor+0x38>)
 8005fc0:	f7ff fe12 	bl	8005be8 <USBD_GetString>
 8005fc4:	e004      	b.n	8005fd0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005fc6:	683a      	ldr	r2, [r7, #0]
 8005fc8:	4904      	ldr	r1, [pc, #16]	@ (8005fdc <USBD_FS_ProductStrDescriptor+0x34>)
 8005fca:	4805      	ldr	r0, [pc, #20]	@ (8005fe0 <USBD_FS_ProductStrDescriptor+0x38>)
 8005fcc:	f7ff fe0c 	bl	8005be8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005fd0:	4b02      	ldr	r3, [pc, #8]	@ (8005fdc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3708      	adds	r7, #8
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	20001468 	.word	0x20001468
 8005fe0:	08007130 	.word	0x08007130

08005fe4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	4603      	mov	r3, r0
 8005fec:	6039      	str	r1, [r7, #0]
 8005fee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005ff0:	683a      	ldr	r2, [r7, #0]
 8005ff2:	4904      	ldr	r1, [pc, #16]	@ (8006004 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005ff4:	4804      	ldr	r0, [pc, #16]	@ (8006008 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005ff6:	f7ff fdf7 	bl	8005be8 <USBD_GetString>
  return USBD_StrDesc;
 8005ffa:	4b02      	ldr	r3, [pc, #8]	@ (8006004 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3708      	adds	r7, #8
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	20001468 	.word	0x20001468
 8006008:	08007148 	.word	0x08007148

0800600c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b082      	sub	sp, #8
 8006010:	af00      	add	r7, sp, #0
 8006012:	4603      	mov	r3, r0
 8006014:	6039      	str	r1, [r7, #0]
 8006016:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	221a      	movs	r2, #26
 800601c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800601e:	f000 f843 	bl	80060a8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006022:	4b02      	ldr	r3, [pc, #8]	@ (800602c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006024:	4618      	mov	r0, r3
 8006026:	3708      	adds	r7, #8
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}
 800602c:	200000e4 	.word	0x200000e4

08006030 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b082      	sub	sp, #8
 8006034:	af00      	add	r7, sp, #0
 8006036:	4603      	mov	r3, r0
 8006038:	6039      	str	r1, [r7, #0]
 800603a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800603c:	79fb      	ldrb	r3, [r7, #7]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d105      	bne.n	800604e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006042:	683a      	ldr	r2, [r7, #0]
 8006044:	4907      	ldr	r1, [pc, #28]	@ (8006064 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006046:	4808      	ldr	r0, [pc, #32]	@ (8006068 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006048:	f7ff fdce 	bl	8005be8 <USBD_GetString>
 800604c:	e004      	b.n	8006058 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800604e:	683a      	ldr	r2, [r7, #0]
 8006050:	4904      	ldr	r1, [pc, #16]	@ (8006064 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006052:	4805      	ldr	r0, [pc, #20]	@ (8006068 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006054:	f7ff fdc8 	bl	8005be8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006058:	4b02      	ldr	r3, [pc, #8]	@ (8006064 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800605a:	4618      	mov	r0, r3
 800605c:	3708      	adds	r7, #8
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop
 8006064:	20001468 	.word	0x20001468
 8006068:	0800715c 	.word	0x0800715c

0800606c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b082      	sub	sp, #8
 8006070:	af00      	add	r7, sp, #0
 8006072:	4603      	mov	r3, r0
 8006074:	6039      	str	r1, [r7, #0]
 8006076:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006078:	79fb      	ldrb	r3, [r7, #7]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d105      	bne.n	800608a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800607e:	683a      	ldr	r2, [r7, #0]
 8006080:	4907      	ldr	r1, [pc, #28]	@ (80060a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006082:	4808      	ldr	r0, [pc, #32]	@ (80060a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006084:	f7ff fdb0 	bl	8005be8 <USBD_GetString>
 8006088:	e004      	b.n	8006094 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800608a:	683a      	ldr	r2, [r7, #0]
 800608c:	4904      	ldr	r1, [pc, #16]	@ (80060a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800608e:	4805      	ldr	r0, [pc, #20]	@ (80060a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006090:	f7ff fdaa 	bl	8005be8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006094:	4b02      	ldr	r3, [pc, #8]	@ (80060a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006096:	4618      	mov	r0, r3
 8006098:	3708      	adds	r7, #8
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	20001468 	.word	0x20001468
 80060a4:	08007168 	.word	0x08007168

080060a8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80060ae:	4b0f      	ldr	r3, [pc, #60]	@ (80060ec <Get_SerialNum+0x44>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80060b4:	4b0e      	ldr	r3, [pc, #56]	@ (80060f0 <Get_SerialNum+0x48>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80060ba:	4b0e      	ldr	r3, [pc, #56]	@ (80060f4 <Get_SerialNum+0x4c>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80060c0:	68fa      	ldr	r2, [r7, #12]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4413      	add	r3, r2
 80060c6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d009      	beq.n	80060e2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80060ce:	2208      	movs	r2, #8
 80060d0:	4909      	ldr	r1, [pc, #36]	@ (80060f8 <Get_SerialNum+0x50>)
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	f000 f814 	bl	8006100 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80060d8:	2204      	movs	r2, #4
 80060da:	4908      	ldr	r1, [pc, #32]	@ (80060fc <Get_SerialNum+0x54>)
 80060dc:	68b8      	ldr	r0, [r7, #8]
 80060de:	f000 f80f 	bl	8006100 <IntToUnicode>
  }
}
 80060e2:	bf00      	nop
 80060e4:	3710      	adds	r7, #16
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	1fff7a10 	.word	0x1fff7a10
 80060f0:	1fff7a14 	.word	0x1fff7a14
 80060f4:	1fff7a18 	.word	0x1fff7a18
 80060f8:	200000e6 	.word	0x200000e6
 80060fc:	200000f6 	.word	0x200000f6

08006100 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006100:	b480      	push	{r7}
 8006102:	b087      	sub	sp, #28
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	4613      	mov	r3, r2
 800610c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800610e:	2300      	movs	r3, #0
 8006110:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006112:	2300      	movs	r3, #0
 8006114:	75fb      	strb	r3, [r7, #23]
 8006116:	e027      	b.n	8006168 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	0f1b      	lsrs	r3, r3, #28
 800611c:	2b09      	cmp	r3, #9
 800611e:	d80b      	bhi.n	8006138 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	0f1b      	lsrs	r3, r3, #28
 8006124:	b2da      	uxtb	r2, r3
 8006126:	7dfb      	ldrb	r3, [r7, #23]
 8006128:	005b      	lsls	r3, r3, #1
 800612a:	4619      	mov	r1, r3
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	440b      	add	r3, r1
 8006130:	3230      	adds	r2, #48	@ 0x30
 8006132:	b2d2      	uxtb	r2, r2
 8006134:	701a      	strb	r2, [r3, #0]
 8006136:	e00a      	b.n	800614e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	0f1b      	lsrs	r3, r3, #28
 800613c:	b2da      	uxtb	r2, r3
 800613e:	7dfb      	ldrb	r3, [r7, #23]
 8006140:	005b      	lsls	r3, r3, #1
 8006142:	4619      	mov	r1, r3
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	440b      	add	r3, r1
 8006148:	3237      	adds	r2, #55	@ 0x37
 800614a:	b2d2      	uxtb	r2, r2
 800614c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	011b      	lsls	r3, r3, #4
 8006152:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006154:	7dfb      	ldrb	r3, [r7, #23]
 8006156:	005b      	lsls	r3, r3, #1
 8006158:	3301      	adds	r3, #1
 800615a:	68ba      	ldr	r2, [r7, #8]
 800615c:	4413      	add	r3, r2
 800615e:	2200      	movs	r2, #0
 8006160:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006162:	7dfb      	ldrb	r3, [r7, #23]
 8006164:	3301      	adds	r3, #1
 8006166:	75fb      	strb	r3, [r7, #23]
 8006168:	7dfa      	ldrb	r2, [r7, #23]
 800616a:	79fb      	ldrb	r3, [r7, #7]
 800616c:	429a      	cmp	r2, r3
 800616e:	d3d3      	bcc.n	8006118 <IntToUnicode+0x18>
  }
}
 8006170:	bf00      	nop
 8006172:	bf00      	nop
 8006174:	371c      	adds	r7, #28
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr
	...

08006180 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b08a      	sub	sp, #40	@ 0x28
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006188:	f107 0314 	add.w	r3, r7, #20
 800618c:	2200      	movs	r2, #0
 800618e:	601a      	str	r2, [r3, #0]
 8006190:	605a      	str	r2, [r3, #4]
 8006192:	609a      	str	r2, [r3, #8]
 8006194:	60da      	str	r2, [r3, #12]
 8006196:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80061a0:	d13a      	bne.n	8006218 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061a2:	2300      	movs	r3, #0
 80061a4:	613b      	str	r3, [r7, #16]
 80061a6:	4b1e      	ldr	r3, [pc, #120]	@ (8006220 <HAL_PCD_MspInit+0xa0>)
 80061a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061aa:	4a1d      	ldr	r2, [pc, #116]	@ (8006220 <HAL_PCD_MspInit+0xa0>)
 80061ac:	f043 0301 	orr.w	r3, r3, #1
 80061b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80061b2:	4b1b      	ldr	r3, [pc, #108]	@ (8006220 <HAL_PCD_MspInit+0xa0>)
 80061b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061b6:	f003 0301 	and.w	r3, r3, #1
 80061ba:	613b      	str	r3, [r7, #16]
 80061bc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80061be:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80061c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061c4:	2302      	movs	r3, #2
 80061c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061c8:	2300      	movs	r3, #0
 80061ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80061cc:	2303      	movs	r3, #3
 80061ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80061d0:	230a      	movs	r3, #10
 80061d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061d4:	f107 0314 	add.w	r3, r7, #20
 80061d8:	4619      	mov	r1, r3
 80061da:	4812      	ldr	r0, [pc, #72]	@ (8006224 <HAL_PCD_MspInit+0xa4>)
 80061dc:	f7fa ff1c 	bl	8001018 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80061e0:	4b0f      	ldr	r3, [pc, #60]	@ (8006220 <HAL_PCD_MspInit+0xa0>)
 80061e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061e4:	4a0e      	ldr	r2, [pc, #56]	@ (8006220 <HAL_PCD_MspInit+0xa0>)
 80061e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061ea:	6353      	str	r3, [r2, #52]	@ 0x34
 80061ec:	2300      	movs	r3, #0
 80061ee:	60fb      	str	r3, [r7, #12]
 80061f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006220 <HAL_PCD_MspInit+0xa0>)
 80061f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061f4:	4a0a      	ldr	r2, [pc, #40]	@ (8006220 <HAL_PCD_MspInit+0xa0>)
 80061f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80061fa:	6453      	str	r3, [r2, #68]	@ 0x44
 80061fc:	4b08      	ldr	r3, [pc, #32]	@ (8006220 <HAL_PCD_MspInit+0xa0>)
 80061fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006200:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006204:	60fb      	str	r3, [r7, #12]
 8006206:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006208:	2200      	movs	r2, #0
 800620a:	2100      	movs	r1, #0
 800620c:	2043      	movs	r0, #67	@ 0x43
 800620e:	f7fa fecc 	bl	8000faa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006212:	2043      	movs	r0, #67	@ 0x43
 8006214:	f7fa fee5 	bl	8000fe2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006218:	bf00      	nop
 800621a:	3728      	adds	r7, #40	@ 0x28
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}
 8006220:	40023800 	.word	0x40023800
 8006224:	40020000 	.word	0x40020000

08006228 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800623c:	4619      	mov	r1, r3
 800623e:	4610      	mov	r0, r2
 8006240:	f7fe fb6f 	bl	8004922 <USBD_LL_SetupStage>
}
 8006244:	bf00      	nop
 8006246:	3708      	adds	r7, #8
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b082      	sub	sp, #8
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	460b      	mov	r3, r1
 8006256:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800625e:	78fa      	ldrb	r2, [r7, #3]
 8006260:	6879      	ldr	r1, [r7, #4]
 8006262:	4613      	mov	r3, r2
 8006264:	00db      	lsls	r3, r3, #3
 8006266:	4413      	add	r3, r2
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	440b      	add	r3, r1
 800626c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	78fb      	ldrb	r3, [r7, #3]
 8006274:	4619      	mov	r1, r3
 8006276:	f7fe fba9 	bl	80049cc <USBD_LL_DataOutStage>
}
 800627a:	bf00      	nop
 800627c:	3708      	adds	r7, #8
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}

08006282 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006282:	b580      	push	{r7, lr}
 8006284:	b082      	sub	sp, #8
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
 800628a:	460b      	mov	r3, r1
 800628c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8006294:	78fa      	ldrb	r2, [r7, #3]
 8006296:	6879      	ldr	r1, [r7, #4]
 8006298:	4613      	mov	r3, r2
 800629a:	00db      	lsls	r3, r3, #3
 800629c:	4413      	add	r3, r2
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	440b      	add	r3, r1
 80062a2:	3320      	adds	r3, #32
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	78fb      	ldrb	r3, [r7, #3]
 80062a8:	4619      	mov	r1, r3
 80062aa:	f7fe fc42 	bl	8004b32 <USBD_LL_DataInStage>
}
 80062ae:	bf00      	nop
 80062b0:	3708      	adds	r7, #8
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}

080062b6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062b6:	b580      	push	{r7, lr}
 80062b8:	b082      	sub	sp, #8
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80062c4:	4618      	mov	r0, r3
 80062c6:	f7fe fd7c 	bl	8004dc2 <USBD_LL_SOF>
}
 80062ca:	bf00      	nop
 80062cc:	3708      	adds	r7, #8
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}

080062d2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b084      	sub	sp, #16
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80062da:	2301      	movs	r3, #1
 80062dc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	79db      	ldrb	r3, [r3, #7]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d102      	bne.n	80062ec <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80062e6:	2300      	movs	r3, #0
 80062e8:	73fb      	strb	r3, [r7, #15]
 80062ea:	e008      	b.n	80062fe <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	79db      	ldrb	r3, [r3, #7]
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	d102      	bne.n	80062fa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80062f4:	2301      	movs	r3, #1
 80062f6:	73fb      	strb	r3, [r7, #15]
 80062f8:	e001      	b.n	80062fe <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80062fa:	f7fa fbc3 	bl	8000a84 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006304:	7bfa      	ldrb	r2, [r7, #15]
 8006306:	4611      	mov	r1, r2
 8006308:	4618      	mov	r0, r3
 800630a:	f7fe fd16 	bl	8004d3a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006314:	4618      	mov	r0, r3
 8006316:	f7fe fcbe 	bl	8004c96 <USBD_LL_Reset>
}
 800631a:	bf00      	nop
 800631c:	3710      	adds	r7, #16
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
	...

08006324 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b082      	sub	sp, #8
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006332:	4618      	mov	r0, r3
 8006334:	f7fe fd11 	bl	8004d5a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	6812      	ldr	r2, [r2, #0]
 8006346:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800634a:	f043 0301 	orr.w	r3, r3, #1
 800634e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	7adb      	ldrb	r3, [r3, #11]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d005      	beq.n	8006364 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006358:	4b04      	ldr	r3, [pc, #16]	@ (800636c <HAL_PCD_SuspendCallback+0x48>)
 800635a:	691b      	ldr	r3, [r3, #16]
 800635c:	4a03      	ldr	r2, [pc, #12]	@ (800636c <HAL_PCD_SuspendCallback+0x48>)
 800635e:	f043 0306 	orr.w	r3, r3, #6
 8006362:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006364:	bf00      	nop
 8006366:	3708      	adds	r7, #8
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}
 800636c:	e000ed00 	.word	0xe000ed00

08006370 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b082      	sub	sp, #8
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800637e:	4618      	mov	r0, r3
 8006380:	f7fe fd07 	bl	8004d92 <USBD_LL_Resume>
}
 8006384:	bf00      	nop
 8006386:	3708      	adds	r7, #8
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b082      	sub	sp, #8
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	460b      	mov	r3, r1
 8006396:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800639e:	78fa      	ldrb	r2, [r7, #3]
 80063a0:	4611      	mov	r1, r2
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7fe fd5f 	bl	8004e66 <USBD_LL_IsoOUTIncomplete>
}
 80063a8:	bf00      	nop
 80063aa:	3708      	adds	r7, #8
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	460b      	mov	r3, r1
 80063ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80063c2:	78fa      	ldrb	r2, [r7, #3]
 80063c4:	4611      	mov	r1, r2
 80063c6:	4618      	mov	r0, r3
 80063c8:	f7fe fd1b 	bl	8004e02 <USBD_LL_IsoINIncomplete>
}
 80063cc:	bf00      	nop
 80063ce:	3708      	adds	r7, #8
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80063e2:	4618      	mov	r0, r3
 80063e4:	f7fe fd71 	bl	8004eca <USBD_LL_DevConnected>
}
 80063e8:	bf00      	nop
 80063ea:	3708      	adds	r7, #8
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b082      	sub	sp, #8
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80063fe:	4618      	mov	r0, r3
 8006400:	f7fe fd6e 	bl	8004ee0 <USBD_LL_DevDisconnected>
}
 8006404:	bf00      	nop
 8006406:	3708      	adds	r7, #8
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b082      	sub	sp, #8
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d13c      	bne.n	8006496 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800641c:	4a20      	ldr	r2, [pc, #128]	@ (80064a0 <USBD_LL_Init+0x94>)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a1e      	ldr	r2, [pc, #120]	@ (80064a0 <USBD_LL_Init+0x94>)
 8006428:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800642c:	4b1c      	ldr	r3, [pc, #112]	@ (80064a0 <USBD_LL_Init+0x94>)
 800642e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8006432:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006434:	4b1a      	ldr	r3, [pc, #104]	@ (80064a0 <USBD_LL_Init+0x94>)
 8006436:	2204      	movs	r2, #4
 8006438:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800643a:	4b19      	ldr	r3, [pc, #100]	@ (80064a0 <USBD_LL_Init+0x94>)
 800643c:	2202      	movs	r2, #2
 800643e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006440:	4b17      	ldr	r3, [pc, #92]	@ (80064a0 <USBD_LL_Init+0x94>)
 8006442:	2200      	movs	r2, #0
 8006444:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006446:	4b16      	ldr	r3, [pc, #88]	@ (80064a0 <USBD_LL_Init+0x94>)
 8006448:	2202      	movs	r2, #2
 800644a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800644c:	4b14      	ldr	r3, [pc, #80]	@ (80064a0 <USBD_LL_Init+0x94>)
 800644e:	2200      	movs	r2, #0
 8006450:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006452:	4b13      	ldr	r3, [pc, #76]	@ (80064a0 <USBD_LL_Init+0x94>)
 8006454:	2200      	movs	r2, #0
 8006456:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006458:	4b11      	ldr	r3, [pc, #68]	@ (80064a0 <USBD_LL_Init+0x94>)
 800645a:	2200      	movs	r2, #0
 800645c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800645e:	4b10      	ldr	r3, [pc, #64]	@ (80064a0 <USBD_LL_Init+0x94>)
 8006460:	2200      	movs	r2, #0
 8006462:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006464:	4b0e      	ldr	r3, [pc, #56]	@ (80064a0 <USBD_LL_Init+0x94>)
 8006466:	2200      	movs	r2, #0
 8006468:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800646a:	480d      	ldr	r0, [pc, #52]	@ (80064a0 <USBD_LL_Init+0x94>)
 800646c:	f7fa ff70 	bl	8001350 <HAL_PCD_Init>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d001      	beq.n	800647a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006476:	f7fa fb05 	bl	8000a84 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800647a:	2180      	movs	r1, #128	@ 0x80
 800647c:	4808      	ldr	r0, [pc, #32]	@ (80064a0 <USBD_LL_Init+0x94>)
 800647e:	f7fc f99c 	bl	80027ba <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006482:	2240      	movs	r2, #64	@ 0x40
 8006484:	2100      	movs	r1, #0
 8006486:	4806      	ldr	r0, [pc, #24]	@ (80064a0 <USBD_LL_Init+0x94>)
 8006488:	f7fc f950 	bl	800272c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800648c:	2280      	movs	r2, #128	@ 0x80
 800648e:	2101      	movs	r1, #1
 8006490:	4803      	ldr	r0, [pc, #12]	@ (80064a0 <USBD_LL_Init+0x94>)
 8006492:	f7fc f94b 	bl	800272c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	3708      	adds	r7, #8
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	20001668 	.word	0x20001668

080064a4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b084      	sub	sp, #16
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80064ac:	2300      	movs	r3, #0
 80064ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80064b0:	2300      	movs	r3, #0
 80064b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80064ba:	4618      	mov	r0, r3
 80064bc:	f7fb f857 	bl	800156e <HAL_PCD_Start>
 80064c0:	4603      	mov	r3, r0
 80064c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80064c4:	7bfb      	ldrb	r3, [r7, #15]
 80064c6:	4618      	mov	r0, r3
 80064c8:	f000 f942 	bl	8006750 <USBD_Get_USB_Status>
 80064cc:	4603      	mov	r3, r0
 80064ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80064d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3710      	adds	r7, #16
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}

080064da <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80064da:	b580      	push	{r7, lr}
 80064dc:	b084      	sub	sp, #16
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
 80064e2:	4608      	mov	r0, r1
 80064e4:	4611      	mov	r1, r2
 80064e6:	461a      	mov	r2, r3
 80064e8:	4603      	mov	r3, r0
 80064ea:	70fb      	strb	r3, [r7, #3]
 80064ec:	460b      	mov	r3, r1
 80064ee:	70bb      	strb	r3, [r7, #2]
 80064f0:	4613      	mov	r3, r2
 80064f2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80064f4:	2300      	movs	r3, #0
 80064f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80064f8:	2300      	movs	r3, #0
 80064fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006502:	78bb      	ldrb	r3, [r7, #2]
 8006504:	883a      	ldrh	r2, [r7, #0]
 8006506:	78f9      	ldrb	r1, [r7, #3]
 8006508:	f7fb fd2b 	bl	8001f62 <HAL_PCD_EP_Open>
 800650c:	4603      	mov	r3, r0
 800650e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006510:	7bfb      	ldrb	r3, [r7, #15]
 8006512:	4618      	mov	r0, r3
 8006514:	f000 f91c 	bl	8006750 <USBD_Get_USB_Status>
 8006518:	4603      	mov	r3, r0
 800651a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800651c:	7bbb      	ldrb	r3, [r7, #14]
}
 800651e:	4618      	mov	r0, r3
 8006520:	3710      	adds	r7, #16
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}

08006526 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006526:	b580      	push	{r7, lr}
 8006528:	b084      	sub	sp, #16
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
 800652e:	460b      	mov	r3, r1
 8006530:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006532:	2300      	movs	r3, #0
 8006534:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006536:	2300      	movs	r3, #0
 8006538:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006540:	78fa      	ldrb	r2, [r7, #3]
 8006542:	4611      	mov	r1, r2
 8006544:	4618      	mov	r0, r3
 8006546:	f7fb fd76 	bl	8002036 <HAL_PCD_EP_Close>
 800654a:	4603      	mov	r3, r0
 800654c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800654e:	7bfb      	ldrb	r3, [r7, #15]
 8006550:	4618      	mov	r0, r3
 8006552:	f000 f8fd 	bl	8006750 <USBD_Get_USB_Status>
 8006556:	4603      	mov	r3, r0
 8006558:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800655a:	7bbb      	ldrb	r3, [r7, #14]
}
 800655c:	4618      	mov	r0, r3
 800655e:	3710      	adds	r7, #16
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	460b      	mov	r3, r1
 800656e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006570:	2300      	movs	r3, #0
 8006572:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006574:	2300      	movs	r3, #0
 8006576:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800657e:	78fa      	ldrb	r2, [r7, #3]
 8006580:	4611      	mov	r1, r2
 8006582:	4618      	mov	r0, r3
 8006584:	f7fb fe2e 	bl	80021e4 <HAL_PCD_EP_SetStall>
 8006588:	4603      	mov	r3, r0
 800658a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800658c:	7bfb      	ldrb	r3, [r7, #15]
 800658e:	4618      	mov	r0, r3
 8006590:	f000 f8de 	bl	8006750 <USBD_Get_USB_Status>
 8006594:	4603      	mov	r3, r0
 8006596:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006598:	7bbb      	ldrb	r3, [r7, #14]
}
 800659a:	4618      	mov	r0, r3
 800659c:	3710      	adds	r7, #16
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}

080065a2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80065a2:	b580      	push	{r7, lr}
 80065a4:	b084      	sub	sp, #16
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
 80065aa:	460b      	mov	r3, r1
 80065ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80065ae:	2300      	movs	r3, #0
 80065b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80065b2:	2300      	movs	r3, #0
 80065b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80065bc:	78fa      	ldrb	r2, [r7, #3]
 80065be:	4611      	mov	r1, r2
 80065c0:	4618      	mov	r0, r3
 80065c2:	f7fb fe72 	bl	80022aa <HAL_PCD_EP_ClrStall>
 80065c6:	4603      	mov	r3, r0
 80065c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80065ca:	7bfb      	ldrb	r3, [r7, #15]
 80065cc:	4618      	mov	r0, r3
 80065ce:	f000 f8bf 	bl	8006750 <USBD_Get_USB_Status>
 80065d2:	4603      	mov	r3, r0
 80065d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80065d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3710      	adds	r7, #16
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b085      	sub	sp, #20
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	460b      	mov	r3, r1
 80065ea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80065f2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80065f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	da0b      	bge.n	8006614 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80065fc:	78fb      	ldrb	r3, [r7, #3]
 80065fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006602:	68f9      	ldr	r1, [r7, #12]
 8006604:	4613      	mov	r3, r2
 8006606:	00db      	lsls	r3, r3, #3
 8006608:	4413      	add	r3, r2
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	440b      	add	r3, r1
 800660e:	3316      	adds	r3, #22
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	e00b      	b.n	800662c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006614:	78fb      	ldrb	r3, [r7, #3]
 8006616:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800661a:	68f9      	ldr	r1, [r7, #12]
 800661c:	4613      	mov	r3, r2
 800661e:	00db      	lsls	r3, r3, #3
 8006620:	4413      	add	r3, r2
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	440b      	add	r3, r1
 8006626:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800662a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800662c:	4618      	mov	r0, r3
 800662e:	3714      	adds	r7, #20
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	460b      	mov	r3, r1
 8006642:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006644:	2300      	movs	r3, #0
 8006646:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006648:	2300      	movs	r3, #0
 800664a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006652:	78fa      	ldrb	r2, [r7, #3]
 8006654:	4611      	mov	r1, r2
 8006656:	4618      	mov	r0, r3
 8006658:	f7fb fc5f 	bl	8001f1a <HAL_PCD_SetAddress>
 800665c:	4603      	mov	r3, r0
 800665e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006660:	7bfb      	ldrb	r3, [r7, #15]
 8006662:	4618      	mov	r0, r3
 8006664:	f000 f874 	bl	8006750 <USBD_Get_USB_Status>
 8006668:	4603      	mov	r3, r0
 800666a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800666c:	7bbb      	ldrb	r3, [r7, #14]
}
 800666e:	4618      	mov	r0, r3
 8006670:	3710      	adds	r7, #16
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}

08006676 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006676:	b580      	push	{r7, lr}
 8006678:	b086      	sub	sp, #24
 800667a:	af00      	add	r7, sp, #0
 800667c:	60f8      	str	r0, [r7, #12]
 800667e:	607a      	str	r2, [r7, #4]
 8006680:	603b      	str	r3, [r7, #0]
 8006682:	460b      	mov	r3, r1
 8006684:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006686:	2300      	movs	r3, #0
 8006688:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800668a:	2300      	movs	r3, #0
 800668c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006694:	7af9      	ldrb	r1, [r7, #11]
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	f7fb fd69 	bl	8002170 <HAL_PCD_EP_Transmit>
 800669e:	4603      	mov	r3, r0
 80066a0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80066a2:	7dfb      	ldrb	r3, [r7, #23]
 80066a4:	4618      	mov	r0, r3
 80066a6:	f000 f853 	bl	8006750 <USBD_Get_USB_Status>
 80066aa:	4603      	mov	r3, r0
 80066ac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80066ae:	7dbb      	ldrb	r3, [r7, #22]
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3718      	adds	r7, #24
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b086      	sub	sp, #24
 80066bc:	af00      	add	r7, sp, #0
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	607a      	str	r2, [r7, #4]
 80066c2:	603b      	str	r3, [r7, #0]
 80066c4:	460b      	mov	r3, r1
 80066c6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80066c8:	2300      	movs	r3, #0
 80066ca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80066cc:	2300      	movs	r3, #0
 80066ce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80066d6:	7af9      	ldrb	r1, [r7, #11]
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	f7fb fcf5 	bl	80020ca <HAL_PCD_EP_Receive>
 80066e0:	4603      	mov	r3, r0
 80066e2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80066e4:	7dfb      	ldrb	r3, [r7, #23]
 80066e6:	4618      	mov	r0, r3
 80066e8:	f000 f832 	bl	8006750 <USBD_Get_USB_Status>
 80066ec:	4603      	mov	r3, r0
 80066ee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80066f0:	7dbb      	ldrb	r3, [r7, #22]
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3718      	adds	r7, #24
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}

080066fa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b082      	sub	sp, #8
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
 8006702:	460b      	mov	r3, r1
 8006704:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800670c:	78fa      	ldrb	r2, [r7, #3]
 800670e:	4611      	mov	r1, r2
 8006710:	4618      	mov	r0, r3
 8006712:	f7fb fd15 	bl	8002140 <HAL_PCD_EP_GetRxCount>
 8006716:	4603      	mov	r3, r0
}
 8006718:	4618      	mov	r0, r3
 800671a:	3708      	adds	r7, #8
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006728:	4b03      	ldr	r3, [pc, #12]	@ (8006738 <USBD_static_malloc+0x18>)
}
 800672a:	4618      	mov	r0, r3
 800672c:	370c      	adds	r7, #12
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop
 8006738:	20001b4c 	.word	0x20001b4c

0800673c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]

}
 8006744:	bf00      	nop
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006750:	b480      	push	{r7}
 8006752:	b085      	sub	sp, #20
 8006754:	af00      	add	r7, sp, #0
 8006756:	4603      	mov	r3, r0
 8006758:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800675a:	2300      	movs	r3, #0
 800675c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800675e:	79fb      	ldrb	r3, [r7, #7]
 8006760:	2b03      	cmp	r3, #3
 8006762:	d817      	bhi.n	8006794 <USBD_Get_USB_Status+0x44>
 8006764:	a201      	add	r2, pc, #4	@ (adr r2, 800676c <USBD_Get_USB_Status+0x1c>)
 8006766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800676a:	bf00      	nop
 800676c:	0800677d 	.word	0x0800677d
 8006770:	08006783 	.word	0x08006783
 8006774:	08006789 	.word	0x08006789
 8006778:	0800678f 	.word	0x0800678f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800677c:	2300      	movs	r3, #0
 800677e:	73fb      	strb	r3, [r7, #15]
    break;
 8006780:	e00b      	b.n	800679a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006782:	2303      	movs	r3, #3
 8006784:	73fb      	strb	r3, [r7, #15]
    break;
 8006786:	e008      	b.n	800679a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006788:	2301      	movs	r3, #1
 800678a:	73fb      	strb	r3, [r7, #15]
    break;
 800678c:	e005      	b.n	800679a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800678e:	2303      	movs	r3, #3
 8006790:	73fb      	strb	r3, [r7, #15]
    break;
 8006792:	e002      	b.n	800679a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006794:	2303      	movs	r3, #3
 8006796:	73fb      	strb	r3, [r7, #15]
    break;
 8006798:	bf00      	nop
  }
  return usb_status;
 800679a:	7bfb      	ldrb	r3, [r7, #15]
}
 800679c:	4618      	mov	r0, r3
 800679e:	3714      	adds	r7, #20
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <std>:
 80067a8:	2300      	movs	r3, #0
 80067aa:	b510      	push	{r4, lr}
 80067ac:	4604      	mov	r4, r0
 80067ae:	e9c0 3300 	strd	r3, r3, [r0]
 80067b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80067b6:	6083      	str	r3, [r0, #8]
 80067b8:	8181      	strh	r1, [r0, #12]
 80067ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80067bc:	81c2      	strh	r2, [r0, #14]
 80067be:	6183      	str	r3, [r0, #24]
 80067c0:	4619      	mov	r1, r3
 80067c2:	2208      	movs	r2, #8
 80067c4:	305c      	adds	r0, #92	@ 0x5c
 80067c6:	f000 f9e7 	bl	8006b98 <memset>
 80067ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006800 <std+0x58>)
 80067cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80067ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006804 <std+0x5c>)
 80067d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80067d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006808 <std+0x60>)
 80067d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80067d6:	4b0d      	ldr	r3, [pc, #52]	@ (800680c <std+0x64>)
 80067d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80067da:	4b0d      	ldr	r3, [pc, #52]	@ (8006810 <std+0x68>)
 80067dc:	6224      	str	r4, [r4, #32]
 80067de:	429c      	cmp	r4, r3
 80067e0:	d006      	beq.n	80067f0 <std+0x48>
 80067e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80067e6:	4294      	cmp	r4, r2
 80067e8:	d002      	beq.n	80067f0 <std+0x48>
 80067ea:	33d0      	adds	r3, #208	@ 0xd0
 80067ec:	429c      	cmp	r4, r3
 80067ee:	d105      	bne.n	80067fc <std+0x54>
 80067f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80067f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067f8:	f000 ba46 	b.w	8006c88 <__retarget_lock_init_recursive>
 80067fc:	bd10      	pop	{r4, pc}
 80067fe:	bf00      	nop
 8006800:	080069e9 	.word	0x080069e9
 8006804:	08006a0b 	.word	0x08006a0b
 8006808:	08006a43 	.word	0x08006a43
 800680c:	08006a67 	.word	0x08006a67
 8006810:	20001d6c 	.word	0x20001d6c

08006814 <stdio_exit_handler>:
 8006814:	4a02      	ldr	r2, [pc, #8]	@ (8006820 <stdio_exit_handler+0xc>)
 8006816:	4903      	ldr	r1, [pc, #12]	@ (8006824 <stdio_exit_handler+0x10>)
 8006818:	4803      	ldr	r0, [pc, #12]	@ (8006828 <stdio_exit_handler+0x14>)
 800681a:	f000 b869 	b.w	80068f0 <_fwalk_sglue>
 800681e:	bf00      	nop
 8006820:	20000100 	.word	0x20000100
 8006824:	08006f89 	.word	0x08006f89
 8006828:	20000110 	.word	0x20000110

0800682c <cleanup_stdio>:
 800682c:	6841      	ldr	r1, [r0, #4]
 800682e:	4b0c      	ldr	r3, [pc, #48]	@ (8006860 <cleanup_stdio+0x34>)
 8006830:	4299      	cmp	r1, r3
 8006832:	b510      	push	{r4, lr}
 8006834:	4604      	mov	r4, r0
 8006836:	d001      	beq.n	800683c <cleanup_stdio+0x10>
 8006838:	f000 fba6 	bl	8006f88 <_fflush_r>
 800683c:	68a1      	ldr	r1, [r4, #8]
 800683e:	4b09      	ldr	r3, [pc, #36]	@ (8006864 <cleanup_stdio+0x38>)
 8006840:	4299      	cmp	r1, r3
 8006842:	d002      	beq.n	800684a <cleanup_stdio+0x1e>
 8006844:	4620      	mov	r0, r4
 8006846:	f000 fb9f 	bl	8006f88 <_fflush_r>
 800684a:	68e1      	ldr	r1, [r4, #12]
 800684c:	4b06      	ldr	r3, [pc, #24]	@ (8006868 <cleanup_stdio+0x3c>)
 800684e:	4299      	cmp	r1, r3
 8006850:	d004      	beq.n	800685c <cleanup_stdio+0x30>
 8006852:	4620      	mov	r0, r4
 8006854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006858:	f000 bb96 	b.w	8006f88 <_fflush_r>
 800685c:	bd10      	pop	{r4, pc}
 800685e:	bf00      	nop
 8006860:	20001d6c 	.word	0x20001d6c
 8006864:	20001dd4 	.word	0x20001dd4
 8006868:	20001e3c 	.word	0x20001e3c

0800686c <global_stdio_init.part.0>:
 800686c:	b510      	push	{r4, lr}
 800686e:	4b0b      	ldr	r3, [pc, #44]	@ (800689c <global_stdio_init.part.0+0x30>)
 8006870:	4c0b      	ldr	r4, [pc, #44]	@ (80068a0 <global_stdio_init.part.0+0x34>)
 8006872:	4a0c      	ldr	r2, [pc, #48]	@ (80068a4 <global_stdio_init.part.0+0x38>)
 8006874:	601a      	str	r2, [r3, #0]
 8006876:	4620      	mov	r0, r4
 8006878:	2200      	movs	r2, #0
 800687a:	2104      	movs	r1, #4
 800687c:	f7ff ff94 	bl	80067a8 <std>
 8006880:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006884:	2201      	movs	r2, #1
 8006886:	2109      	movs	r1, #9
 8006888:	f7ff ff8e 	bl	80067a8 <std>
 800688c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006890:	2202      	movs	r2, #2
 8006892:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006896:	2112      	movs	r1, #18
 8006898:	f7ff bf86 	b.w	80067a8 <std>
 800689c:	20001ea4 	.word	0x20001ea4
 80068a0:	20001d6c 	.word	0x20001d6c
 80068a4:	08006815 	.word	0x08006815

080068a8 <__sfp_lock_acquire>:
 80068a8:	4801      	ldr	r0, [pc, #4]	@ (80068b0 <__sfp_lock_acquire+0x8>)
 80068aa:	f000 b9ee 	b.w	8006c8a <__retarget_lock_acquire_recursive>
 80068ae:	bf00      	nop
 80068b0:	20001ead 	.word	0x20001ead

080068b4 <__sfp_lock_release>:
 80068b4:	4801      	ldr	r0, [pc, #4]	@ (80068bc <__sfp_lock_release+0x8>)
 80068b6:	f000 b9e9 	b.w	8006c8c <__retarget_lock_release_recursive>
 80068ba:	bf00      	nop
 80068bc:	20001ead 	.word	0x20001ead

080068c0 <__sinit>:
 80068c0:	b510      	push	{r4, lr}
 80068c2:	4604      	mov	r4, r0
 80068c4:	f7ff fff0 	bl	80068a8 <__sfp_lock_acquire>
 80068c8:	6a23      	ldr	r3, [r4, #32]
 80068ca:	b11b      	cbz	r3, 80068d4 <__sinit+0x14>
 80068cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068d0:	f7ff bff0 	b.w	80068b4 <__sfp_lock_release>
 80068d4:	4b04      	ldr	r3, [pc, #16]	@ (80068e8 <__sinit+0x28>)
 80068d6:	6223      	str	r3, [r4, #32]
 80068d8:	4b04      	ldr	r3, [pc, #16]	@ (80068ec <__sinit+0x2c>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1f5      	bne.n	80068cc <__sinit+0xc>
 80068e0:	f7ff ffc4 	bl	800686c <global_stdio_init.part.0>
 80068e4:	e7f2      	b.n	80068cc <__sinit+0xc>
 80068e6:	bf00      	nop
 80068e8:	0800682d 	.word	0x0800682d
 80068ec:	20001ea4 	.word	0x20001ea4

080068f0 <_fwalk_sglue>:
 80068f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068f4:	4607      	mov	r7, r0
 80068f6:	4688      	mov	r8, r1
 80068f8:	4614      	mov	r4, r2
 80068fa:	2600      	movs	r6, #0
 80068fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006900:	f1b9 0901 	subs.w	r9, r9, #1
 8006904:	d505      	bpl.n	8006912 <_fwalk_sglue+0x22>
 8006906:	6824      	ldr	r4, [r4, #0]
 8006908:	2c00      	cmp	r4, #0
 800690a:	d1f7      	bne.n	80068fc <_fwalk_sglue+0xc>
 800690c:	4630      	mov	r0, r6
 800690e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006912:	89ab      	ldrh	r3, [r5, #12]
 8006914:	2b01      	cmp	r3, #1
 8006916:	d907      	bls.n	8006928 <_fwalk_sglue+0x38>
 8006918:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800691c:	3301      	adds	r3, #1
 800691e:	d003      	beq.n	8006928 <_fwalk_sglue+0x38>
 8006920:	4629      	mov	r1, r5
 8006922:	4638      	mov	r0, r7
 8006924:	47c0      	blx	r8
 8006926:	4306      	orrs	r6, r0
 8006928:	3568      	adds	r5, #104	@ 0x68
 800692a:	e7e9      	b.n	8006900 <_fwalk_sglue+0x10>

0800692c <_puts_r>:
 800692c:	6a03      	ldr	r3, [r0, #32]
 800692e:	b570      	push	{r4, r5, r6, lr}
 8006930:	6884      	ldr	r4, [r0, #8]
 8006932:	4605      	mov	r5, r0
 8006934:	460e      	mov	r6, r1
 8006936:	b90b      	cbnz	r3, 800693c <_puts_r+0x10>
 8006938:	f7ff ffc2 	bl	80068c0 <__sinit>
 800693c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800693e:	07db      	lsls	r3, r3, #31
 8006940:	d405      	bmi.n	800694e <_puts_r+0x22>
 8006942:	89a3      	ldrh	r3, [r4, #12]
 8006944:	0598      	lsls	r0, r3, #22
 8006946:	d402      	bmi.n	800694e <_puts_r+0x22>
 8006948:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800694a:	f000 f99e 	bl	8006c8a <__retarget_lock_acquire_recursive>
 800694e:	89a3      	ldrh	r3, [r4, #12]
 8006950:	0719      	lsls	r1, r3, #28
 8006952:	d502      	bpl.n	800695a <_puts_r+0x2e>
 8006954:	6923      	ldr	r3, [r4, #16]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d135      	bne.n	80069c6 <_puts_r+0x9a>
 800695a:	4621      	mov	r1, r4
 800695c:	4628      	mov	r0, r5
 800695e:	f000 f8c5 	bl	8006aec <__swsetup_r>
 8006962:	b380      	cbz	r0, 80069c6 <_puts_r+0x9a>
 8006964:	f04f 35ff 	mov.w	r5, #4294967295
 8006968:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800696a:	07da      	lsls	r2, r3, #31
 800696c:	d405      	bmi.n	800697a <_puts_r+0x4e>
 800696e:	89a3      	ldrh	r3, [r4, #12]
 8006970:	059b      	lsls	r3, r3, #22
 8006972:	d402      	bmi.n	800697a <_puts_r+0x4e>
 8006974:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006976:	f000 f989 	bl	8006c8c <__retarget_lock_release_recursive>
 800697a:	4628      	mov	r0, r5
 800697c:	bd70      	pop	{r4, r5, r6, pc}
 800697e:	2b00      	cmp	r3, #0
 8006980:	da04      	bge.n	800698c <_puts_r+0x60>
 8006982:	69a2      	ldr	r2, [r4, #24]
 8006984:	429a      	cmp	r2, r3
 8006986:	dc17      	bgt.n	80069b8 <_puts_r+0x8c>
 8006988:	290a      	cmp	r1, #10
 800698a:	d015      	beq.n	80069b8 <_puts_r+0x8c>
 800698c:	6823      	ldr	r3, [r4, #0]
 800698e:	1c5a      	adds	r2, r3, #1
 8006990:	6022      	str	r2, [r4, #0]
 8006992:	7019      	strb	r1, [r3, #0]
 8006994:	68a3      	ldr	r3, [r4, #8]
 8006996:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800699a:	3b01      	subs	r3, #1
 800699c:	60a3      	str	r3, [r4, #8]
 800699e:	2900      	cmp	r1, #0
 80069a0:	d1ed      	bne.n	800697e <_puts_r+0x52>
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	da11      	bge.n	80069ca <_puts_r+0x9e>
 80069a6:	4622      	mov	r2, r4
 80069a8:	210a      	movs	r1, #10
 80069aa:	4628      	mov	r0, r5
 80069ac:	f000 f85f 	bl	8006a6e <__swbuf_r>
 80069b0:	3001      	adds	r0, #1
 80069b2:	d0d7      	beq.n	8006964 <_puts_r+0x38>
 80069b4:	250a      	movs	r5, #10
 80069b6:	e7d7      	b.n	8006968 <_puts_r+0x3c>
 80069b8:	4622      	mov	r2, r4
 80069ba:	4628      	mov	r0, r5
 80069bc:	f000 f857 	bl	8006a6e <__swbuf_r>
 80069c0:	3001      	adds	r0, #1
 80069c2:	d1e7      	bne.n	8006994 <_puts_r+0x68>
 80069c4:	e7ce      	b.n	8006964 <_puts_r+0x38>
 80069c6:	3e01      	subs	r6, #1
 80069c8:	e7e4      	b.n	8006994 <_puts_r+0x68>
 80069ca:	6823      	ldr	r3, [r4, #0]
 80069cc:	1c5a      	adds	r2, r3, #1
 80069ce:	6022      	str	r2, [r4, #0]
 80069d0:	220a      	movs	r2, #10
 80069d2:	701a      	strb	r2, [r3, #0]
 80069d4:	e7ee      	b.n	80069b4 <_puts_r+0x88>
	...

080069d8 <puts>:
 80069d8:	4b02      	ldr	r3, [pc, #8]	@ (80069e4 <puts+0xc>)
 80069da:	4601      	mov	r1, r0
 80069dc:	6818      	ldr	r0, [r3, #0]
 80069de:	f7ff bfa5 	b.w	800692c <_puts_r>
 80069e2:	bf00      	nop
 80069e4:	2000010c 	.word	0x2000010c

080069e8 <__sread>:
 80069e8:	b510      	push	{r4, lr}
 80069ea:	460c      	mov	r4, r1
 80069ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069f0:	f000 f8fc 	bl	8006bec <_read_r>
 80069f4:	2800      	cmp	r0, #0
 80069f6:	bfab      	itete	ge
 80069f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80069fa:	89a3      	ldrhlt	r3, [r4, #12]
 80069fc:	181b      	addge	r3, r3, r0
 80069fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006a02:	bfac      	ite	ge
 8006a04:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006a06:	81a3      	strhlt	r3, [r4, #12]
 8006a08:	bd10      	pop	{r4, pc}

08006a0a <__swrite>:
 8006a0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a0e:	461f      	mov	r7, r3
 8006a10:	898b      	ldrh	r3, [r1, #12]
 8006a12:	05db      	lsls	r3, r3, #23
 8006a14:	4605      	mov	r5, r0
 8006a16:	460c      	mov	r4, r1
 8006a18:	4616      	mov	r6, r2
 8006a1a:	d505      	bpl.n	8006a28 <__swrite+0x1e>
 8006a1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a20:	2302      	movs	r3, #2
 8006a22:	2200      	movs	r2, #0
 8006a24:	f000 f8d0 	bl	8006bc8 <_lseek_r>
 8006a28:	89a3      	ldrh	r3, [r4, #12]
 8006a2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a2e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a32:	81a3      	strh	r3, [r4, #12]
 8006a34:	4632      	mov	r2, r6
 8006a36:	463b      	mov	r3, r7
 8006a38:	4628      	mov	r0, r5
 8006a3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a3e:	f000 b8e7 	b.w	8006c10 <_write_r>

08006a42 <__sseek>:
 8006a42:	b510      	push	{r4, lr}
 8006a44:	460c      	mov	r4, r1
 8006a46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a4a:	f000 f8bd 	bl	8006bc8 <_lseek_r>
 8006a4e:	1c43      	adds	r3, r0, #1
 8006a50:	89a3      	ldrh	r3, [r4, #12]
 8006a52:	bf15      	itete	ne
 8006a54:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006a56:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006a5a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006a5e:	81a3      	strheq	r3, [r4, #12]
 8006a60:	bf18      	it	ne
 8006a62:	81a3      	strhne	r3, [r4, #12]
 8006a64:	bd10      	pop	{r4, pc}

08006a66 <__sclose>:
 8006a66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a6a:	f000 b89d 	b.w	8006ba8 <_close_r>

08006a6e <__swbuf_r>:
 8006a6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a70:	460e      	mov	r6, r1
 8006a72:	4614      	mov	r4, r2
 8006a74:	4605      	mov	r5, r0
 8006a76:	b118      	cbz	r0, 8006a80 <__swbuf_r+0x12>
 8006a78:	6a03      	ldr	r3, [r0, #32]
 8006a7a:	b90b      	cbnz	r3, 8006a80 <__swbuf_r+0x12>
 8006a7c:	f7ff ff20 	bl	80068c0 <__sinit>
 8006a80:	69a3      	ldr	r3, [r4, #24]
 8006a82:	60a3      	str	r3, [r4, #8]
 8006a84:	89a3      	ldrh	r3, [r4, #12]
 8006a86:	071a      	lsls	r2, r3, #28
 8006a88:	d501      	bpl.n	8006a8e <__swbuf_r+0x20>
 8006a8a:	6923      	ldr	r3, [r4, #16]
 8006a8c:	b943      	cbnz	r3, 8006aa0 <__swbuf_r+0x32>
 8006a8e:	4621      	mov	r1, r4
 8006a90:	4628      	mov	r0, r5
 8006a92:	f000 f82b 	bl	8006aec <__swsetup_r>
 8006a96:	b118      	cbz	r0, 8006aa0 <__swbuf_r+0x32>
 8006a98:	f04f 37ff 	mov.w	r7, #4294967295
 8006a9c:	4638      	mov	r0, r7
 8006a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006aa0:	6823      	ldr	r3, [r4, #0]
 8006aa2:	6922      	ldr	r2, [r4, #16]
 8006aa4:	1a98      	subs	r0, r3, r2
 8006aa6:	6963      	ldr	r3, [r4, #20]
 8006aa8:	b2f6      	uxtb	r6, r6
 8006aaa:	4283      	cmp	r3, r0
 8006aac:	4637      	mov	r7, r6
 8006aae:	dc05      	bgt.n	8006abc <__swbuf_r+0x4e>
 8006ab0:	4621      	mov	r1, r4
 8006ab2:	4628      	mov	r0, r5
 8006ab4:	f000 fa68 	bl	8006f88 <_fflush_r>
 8006ab8:	2800      	cmp	r0, #0
 8006aba:	d1ed      	bne.n	8006a98 <__swbuf_r+0x2a>
 8006abc:	68a3      	ldr	r3, [r4, #8]
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	60a3      	str	r3, [r4, #8]
 8006ac2:	6823      	ldr	r3, [r4, #0]
 8006ac4:	1c5a      	adds	r2, r3, #1
 8006ac6:	6022      	str	r2, [r4, #0]
 8006ac8:	701e      	strb	r6, [r3, #0]
 8006aca:	6962      	ldr	r2, [r4, #20]
 8006acc:	1c43      	adds	r3, r0, #1
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d004      	beq.n	8006adc <__swbuf_r+0x6e>
 8006ad2:	89a3      	ldrh	r3, [r4, #12]
 8006ad4:	07db      	lsls	r3, r3, #31
 8006ad6:	d5e1      	bpl.n	8006a9c <__swbuf_r+0x2e>
 8006ad8:	2e0a      	cmp	r6, #10
 8006ada:	d1df      	bne.n	8006a9c <__swbuf_r+0x2e>
 8006adc:	4621      	mov	r1, r4
 8006ade:	4628      	mov	r0, r5
 8006ae0:	f000 fa52 	bl	8006f88 <_fflush_r>
 8006ae4:	2800      	cmp	r0, #0
 8006ae6:	d0d9      	beq.n	8006a9c <__swbuf_r+0x2e>
 8006ae8:	e7d6      	b.n	8006a98 <__swbuf_r+0x2a>
	...

08006aec <__swsetup_r>:
 8006aec:	b538      	push	{r3, r4, r5, lr}
 8006aee:	4b29      	ldr	r3, [pc, #164]	@ (8006b94 <__swsetup_r+0xa8>)
 8006af0:	4605      	mov	r5, r0
 8006af2:	6818      	ldr	r0, [r3, #0]
 8006af4:	460c      	mov	r4, r1
 8006af6:	b118      	cbz	r0, 8006b00 <__swsetup_r+0x14>
 8006af8:	6a03      	ldr	r3, [r0, #32]
 8006afa:	b90b      	cbnz	r3, 8006b00 <__swsetup_r+0x14>
 8006afc:	f7ff fee0 	bl	80068c0 <__sinit>
 8006b00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b04:	0719      	lsls	r1, r3, #28
 8006b06:	d422      	bmi.n	8006b4e <__swsetup_r+0x62>
 8006b08:	06da      	lsls	r2, r3, #27
 8006b0a:	d407      	bmi.n	8006b1c <__swsetup_r+0x30>
 8006b0c:	2209      	movs	r2, #9
 8006b0e:	602a      	str	r2, [r5, #0]
 8006b10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b14:	81a3      	strh	r3, [r4, #12]
 8006b16:	f04f 30ff 	mov.w	r0, #4294967295
 8006b1a:	e033      	b.n	8006b84 <__swsetup_r+0x98>
 8006b1c:	0758      	lsls	r0, r3, #29
 8006b1e:	d512      	bpl.n	8006b46 <__swsetup_r+0x5a>
 8006b20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006b22:	b141      	cbz	r1, 8006b36 <__swsetup_r+0x4a>
 8006b24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006b28:	4299      	cmp	r1, r3
 8006b2a:	d002      	beq.n	8006b32 <__swsetup_r+0x46>
 8006b2c:	4628      	mov	r0, r5
 8006b2e:	f000 f8af 	bl	8006c90 <_free_r>
 8006b32:	2300      	movs	r3, #0
 8006b34:	6363      	str	r3, [r4, #52]	@ 0x34
 8006b36:	89a3      	ldrh	r3, [r4, #12]
 8006b38:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006b3c:	81a3      	strh	r3, [r4, #12]
 8006b3e:	2300      	movs	r3, #0
 8006b40:	6063      	str	r3, [r4, #4]
 8006b42:	6923      	ldr	r3, [r4, #16]
 8006b44:	6023      	str	r3, [r4, #0]
 8006b46:	89a3      	ldrh	r3, [r4, #12]
 8006b48:	f043 0308 	orr.w	r3, r3, #8
 8006b4c:	81a3      	strh	r3, [r4, #12]
 8006b4e:	6923      	ldr	r3, [r4, #16]
 8006b50:	b94b      	cbnz	r3, 8006b66 <__swsetup_r+0x7a>
 8006b52:	89a3      	ldrh	r3, [r4, #12]
 8006b54:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006b58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b5c:	d003      	beq.n	8006b66 <__swsetup_r+0x7a>
 8006b5e:	4621      	mov	r1, r4
 8006b60:	4628      	mov	r0, r5
 8006b62:	f000 fa5f 	bl	8007024 <__smakebuf_r>
 8006b66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b6a:	f013 0201 	ands.w	r2, r3, #1
 8006b6e:	d00a      	beq.n	8006b86 <__swsetup_r+0x9a>
 8006b70:	2200      	movs	r2, #0
 8006b72:	60a2      	str	r2, [r4, #8]
 8006b74:	6962      	ldr	r2, [r4, #20]
 8006b76:	4252      	negs	r2, r2
 8006b78:	61a2      	str	r2, [r4, #24]
 8006b7a:	6922      	ldr	r2, [r4, #16]
 8006b7c:	b942      	cbnz	r2, 8006b90 <__swsetup_r+0xa4>
 8006b7e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006b82:	d1c5      	bne.n	8006b10 <__swsetup_r+0x24>
 8006b84:	bd38      	pop	{r3, r4, r5, pc}
 8006b86:	0799      	lsls	r1, r3, #30
 8006b88:	bf58      	it	pl
 8006b8a:	6962      	ldrpl	r2, [r4, #20]
 8006b8c:	60a2      	str	r2, [r4, #8]
 8006b8e:	e7f4      	b.n	8006b7a <__swsetup_r+0x8e>
 8006b90:	2000      	movs	r0, #0
 8006b92:	e7f7      	b.n	8006b84 <__swsetup_r+0x98>
 8006b94:	2000010c 	.word	0x2000010c

08006b98 <memset>:
 8006b98:	4402      	add	r2, r0
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d100      	bne.n	8006ba2 <memset+0xa>
 8006ba0:	4770      	bx	lr
 8006ba2:	f803 1b01 	strb.w	r1, [r3], #1
 8006ba6:	e7f9      	b.n	8006b9c <memset+0x4>

08006ba8 <_close_r>:
 8006ba8:	b538      	push	{r3, r4, r5, lr}
 8006baa:	4d06      	ldr	r5, [pc, #24]	@ (8006bc4 <_close_r+0x1c>)
 8006bac:	2300      	movs	r3, #0
 8006bae:	4604      	mov	r4, r0
 8006bb0:	4608      	mov	r0, r1
 8006bb2:	602b      	str	r3, [r5, #0]
 8006bb4:	f7f9 ffe1 	bl	8000b7a <_close>
 8006bb8:	1c43      	adds	r3, r0, #1
 8006bba:	d102      	bne.n	8006bc2 <_close_r+0x1a>
 8006bbc:	682b      	ldr	r3, [r5, #0]
 8006bbe:	b103      	cbz	r3, 8006bc2 <_close_r+0x1a>
 8006bc0:	6023      	str	r3, [r4, #0]
 8006bc2:	bd38      	pop	{r3, r4, r5, pc}
 8006bc4:	20001ea8 	.word	0x20001ea8

08006bc8 <_lseek_r>:
 8006bc8:	b538      	push	{r3, r4, r5, lr}
 8006bca:	4d07      	ldr	r5, [pc, #28]	@ (8006be8 <_lseek_r+0x20>)
 8006bcc:	4604      	mov	r4, r0
 8006bce:	4608      	mov	r0, r1
 8006bd0:	4611      	mov	r1, r2
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	602a      	str	r2, [r5, #0]
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	f7f9 fff6 	bl	8000bc8 <_lseek>
 8006bdc:	1c43      	adds	r3, r0, #1
 8006bde:	d102      	bne.n	8006be6 <_lseek_r+0x1e>
 8006be0:	682b      	ldr	r3, [r5, #0]
 8006be2:	b103      	cbz	r3, 8006be6 <_lseek_r+0x1e>
 8006be4:	6023      	str	r3, [r4, #0]
 8006be6:	bd38      	pop	{r3, r4, r5, pc}
 8006be8:	20001ea8 	.word	0x20001ea8

08006bec <_read_r>:
 8006bec:	b538      	push	{r3, r4, r5, lr}
 8006bee:	4d07      	ldr	r5, [pc, #28]	@ (8006c0c <_read_r+0x20>)
 8006bf0:	4604      	mov	r4, r0
 8006bf2:	4608      	mov	r0, r1
 8006bf4:	4611      	mov	r1, r2
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	602a      	str	r2, [r5, #0]
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	f7f9 ff84 	bl	8000b08 <_read>
 8006c00:	1c43      	adds	r3, r0, #1
 8006c02:	d102      	bne.n	8006c0a <_read_r+0x1e>
 8006c04:	682b      	ldr	r3, [r5, #0]
 8006c06:	b103      	cbz	r3, 8006c0a <_read_r+0x1e>
 8006c08:	6023      	str	r3, [r4, #0]
 8006c0a:	bd38      	pop	{r3, r4, r5, pc}
 8006c0c:	20001ea8 	.word	0x20001ea8

08006c10 <_write_r>:
 8006c10:	b538      	push	{r3, r4, r5, lr}
 8006c12:	4d07      	ldr	r5, [pc, #28]	@ (8006c30 <_write_r+0x20>)
 8006c14:	4604      	mov	r4, r0
 8006c16:	4608      	mov	r0, r1
 8006c18:	4611      	mov	r1, r2
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	602a      	str	r2, [r5, #0]
 8006c1e:	461a      	mov	r2, r3
 8006c20:	f7f9 ff8f 	bl	8000b42 <_write>
 8006c24:	1c43      	adds	r3, r0, #1
 8006c26:	d102      	bne.n	8006c2e <_write_r+0x1e>
 8006c28:	682b      	ldr	r3, [r5, #0]
 8006c2a:	b103      	cbz	r3, 8006c2e <_write_r+0x1e>
 8006c2c:	6023      	str	r3, [r4, #0]
 8006c2e:	bd38      	pop	{r3, r4, r5, pc}
 8006c30:	20001ea8 	.word	0x20001ea8

08006c34 <__errno>:
 8006c34:	4b01      	ldr	r3, [pc, #4]	@ (8006c3c <__errno+0x8>)
 8006c36:	6818      	ldr	r0, [r3, #0]
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	2000010c 	.word	0x2000010c

08006c40 <__libc_init_array>:
 8006c40:	b570      	push	{r4, r5, r6, lr}
 8006c42:	4d0d      	ldr	r5, [pc, #52]	@ (8006c78 <__libc_init_array+0x38>)
 8006c44:	4c0d      	ldr	r4, [pc, #52]	@ (8006c7c <__libc_init_array+0x3c>)
 8006c46:	1b64      	subs	r4, r4, r5
 8006c48:	10a4      	asrs	r4, r4, #2
 8006c4a:	2600      	movs	r6, #0
 8006c4c:	42a6      	cmp	r6, r4
 8006c4e:	d109      	bne.n	8006c64 <__libc_init_array+0x24>
 8006c50:	4d0b      	ldr	r5, [pc, #44]	@ (8006c80 <__libc_init_array+0x40>)
 8006c52:	4c0c      	ldr	r4, [pc, #48]	@ (8006c84 <__libc_init_array+0x44>)
 8006c54:	f000 fa54 	bl	8007100 <_init>
 8006c58:	1b64      	subs	r4, r4, r5
 8006c5a:	10a4      	asrs	r4, r4, #2
 8006c5c:	2600      	movs	r6, #0
 8006c5e:	42a6      	cmp	r6, r4
 8006c60:	d105      	bne.n	8006c6e <__libc_init_array+0x2e>
 8006c62:	bd70      	pop	{r4, r5, r6, pc}
 8006c64:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c68:	4798      	blx	r3
 8006c6a:	3601      	adds	r6, #1
 8006c6c:	e7ee      	b.n	8006c4c <__libc_init_array+0xc>
 8006c6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c72:	4798      	blx	r3
 8006c74:	3601      	adds	r6, #1
 8006c76:	e7f2      	b.n	8006c5e <__libc_init_array+0x1e>
 8006c78:	08007180 	.word	0x08007180
 8006c7c:	08007180 	.word	0x08007180
 8006c80:	08007180 	.word	0x08007180
 8006c84:	08007184 	.word	0x08007184

08006c88 <__retarget_lock_init_recursive>:
 8006c88:	4770      	bx	lr

08006c8a <__retarget_lock_acquire_recursive>:
 8006c8a:	4770      	bx	lr

08006c8c <__retarget_lock_release_recursive>:
 8006c8c:	4770      	bx	lr
	...

08006c90 <_free_r>:
 8006c90:	b538      	push	{r3, r4, r5, lr}
 8006c92:	4605      	mov	r5, r0
 8006c94:	2900      	cmp	r1, #0
 8006c96:	d041      	beq.n	8006d1c <_free_r+0x8c>
 8006c98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c9c:	1f0c      	subs	r4, r1, #4
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	bfb8      	it	lt
 8006ca2:	18e4      	addlt	r4, r4, r3
 8006ca4:	f000 f8e0 	bl	8006e68 <__malloc_lock>
 8006ca8:	4a1d      	ldr	r2, [pc, #116]	@ (8006d20 <_free_r+0x90>)
 8006caa:	6813      	ldr	r3, [r2, #0]
 8006cac:	b933      	cbnz	r3, 8006cbc <_free_r+0x2c>
 8006cae:	6063      	str	r3, [r4, #4]
 8006cb0:	6014      	str	r4, [r2, #0]
 8006cb2:	4628      	mov	r0, r5
 8006cb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006cb8:	f000 b8dc 	b.w	8006e74 <__malloc_unlock>
 8006cbc:	42a3      	cmp	r3, r4
 8006cbe:	d908      	bls.n	8006cd2 <_free_r+0x42>
 8006cc0:	6820      	ldr	r0, [r4, #0]
 8006cc2:	1821      	adds	r1, r4, r0
 8006cc4:	428b      	cmp	r3, r1
 8006cc6:	bf01      	itttt	eq
 8006cc8:	6819      	ldreq	r1, [r3, #0]
 8006cca:	685b      	ldreq	r3, [r3, #4]
 8006ccc:	1809      	addeq	r1, r1, r0
 8006cce:	6021      	streq	r1, [r4, #0]
 8006cd0:	e7ed      	b.n	8006cae <_free_r+0x1e>
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	b10b      	cbz	r3, 8006cdc <_free_r+0x4c>
 8006cd8:	42a3      	cmp	r3, r4
 8006cda:	d9fa      	bls.n	8006cd2 <_free_r+0x42>
 8006cdc:	6811      	ldr	r1, [r2, #0]
 8006cde:	1850      	adds	r0, r2, r1
 8006ce0:	42a0      	cmp	r0, r4
 8006ce2:	d10b      	bne.n	8006cfc <_free_r+0x6c>
 8006ce4:	6820      	ldr	r0, [r4, #0]
 8006ce6:	4401      	add	r1, r0
 8006ce8:	1850      	adds	r0, r2, r1
 8006cea:	4283      	cmp	r3, r0
 8006cec:	6011      	str	r1, [r2, #0]
 8006cee:	d1e0      	bne.n	8006cb2 <_free_r+0x22>
 8006cf0:	6818      	ldr	r0, [r3, #0]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	6053      	str	r3, [r2, #4]
 8006cf6:	4408      	add	r0, r1
 8006cf8:	6010      	str	r0, [r2, #0]
 8006cfa:	e7da      	b.n	8006cb2 <_free_r+0x22>
 8006cfc:	d902      	bls.n	8006d04 <_free_r+0x74>
 8006cfe:	230c      	movs	r3, #12
 8006d00:	602b      	str	r3, [r5, #0]
 8006d02:	e7d6      	b.n	8006cb2 <_free_r+0x22>
 8006d04:	6820      	ldr	r0, [r4, #0]
 8006d06:	1821      	adds	r1, r4, r0
 8006d08:	428b      	cmp	r3, r1
 8006d0a:	bf04      	itt	eq
 8006d0c:	6819      	ldreq	r1, [r3, #0]
 8006d0e:	685b      	ldreq	r3, [r3, #4]
 8006d10:	6063      	str	r3, [r4, #4]
 8006d12:	bf04      	itt	eq
 8006d14:	1809      	addeq	r1, r1, r0
 8006d16:	6021      	streq	r1, [r4, #0]
 8006d18:	6054      	str	r4, [r2, #4]
 8006d1a:	e7ca      	b.n	8006cb2 <_free_r+0x22>
 8006d1c:	bd38      	pop	{r3, r4, r5, pc}
 8006d1e:	bf00      	nop
 8006d20:	20001eb4 	.word	0x20001eb4

08006d24 <sbrk_aligned>:
 8006d24:	b570      	push	{r4, r5, r6, lr}
 8006d26:	4e0f      	ldr	r6, [pc, #60]	@ (8006d64 <sbrk_aligned+0x40>)
 8006d28:	460c      	mov	r4, r1
 8006d2a:	6831      	ldr	r1, [r6, #0]
 8006d2c:	4605      	mov	r5, r0
 8006d2e:	b911      	cbnz	r1, 8006d36 <sbrk_aligned+0x12>
 8006d30:	f000 f9d6 	bl	80070e0 <_sbrk_r>
 8006d34:	6030      	str	r0, [r6, #0]
 8006d36:	4621      	mov	r1, r4
 8006d38:	4628      	mov	r0, r5
 8006d3a:	f000 f9d1 	bl	80070e0 <_sbrk_r>
 8006d3e:	1c43      	adds	r3, r0, #1
 8006d40:	d103      	bne.n	8006d4a <sbrk_aligned+0x26>
 8006d42:	f04f 34ff 	mov.w	r4, #4294967295
 8006d46:	4620      	mov	r0, r4
 8006d48:	bd70      	pop	{r4, r5, r6, pc}
 8006d4a:	1cc4      	adds	r4, r0, #3
 8006d4c:	f024 0403 	bic.w	r4, r4, #3
 8006d50:	42a0      	cmp	r0, r4
 8006d52:	d0f8      	beq.n	8006d46 <sbrk_aligned+0x22>
 8006d54:	1a21      	subs	r1, r4, r0
 8006d56:	4628      	mov	r0, r5
 8006d58:	f000 f9c2 	bl	80070e0 <_sbrk_r>
 8006d5c:	3001      	adds	r0, #1
 8006d5e:	d1f2      	bne.n	8006d46 <sbrk_aligned+0x22>
 8006d60:	e7ef      	b.n	8006d42 <sbrk_aligned+0x1e>
 8006d62:	bf00      	nop
 8006d64:	20001eb0 	.word	0x20001eb0

08006d68 <_malloc_r>:
 8006d68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d6c:	1ccd      	adds	r5, r1, #3
 8006d6e:	f025 0503 	bic.w	r5, r5, #3
 8006d72:	3508      	adds	r5, #8
 8006d74:	2d0c      	cmp	r5, #12
 8006d76:	bf38      	it	cc
 8006d78:	250c      	movcc	r5, #12
 8006d7a:	2d00      	cmp	r5, #0
 8006d7c:	4606      	mov	r6, r0
 8006d7e:	db01      	blt.n	8006d84 <_malloc_r+0x1c>
 8006d80:	42a9      	cmp	r1, r5
 8006d82:	d904      	bls.n	8006d8e <_malloc_r+0x26>
 8006d84:	230c      	movs	r3, #12
 8006d86:	6033      	str	r3, [r6, #0]
 8006d88:	2000      	movs	r0, #0
 8006d8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006e64 <_malloc_r+0xfc>
 8006d92:	f000 f869 	bl	8006e68 <__malloc_lock>
 8006d96:	f8d8 3000 	ldr.w	r3, [r8]
 8006d9a:	461c      	mov	r4, r3
 8006d9c:	bb44      	cbnz	r4, 8006df0 <_malloc_r+0x88>
 8006d9e:	4629      	mov	r1, r5
 8006da0:	4630      	mov	r0, r6
 8006da2:	f7ff ffbf 	bl	8006d24 <sbrk_aligned>
 8006da6:	1c43      	adds	r3, r0, #1
 8006da8:	4604      	mov	r4, r0
 8006daa:	d158      	bne.n	8006e5e <_malloc_r+0xf6>
 8006dac:	f8d8 4000 	ldr.w	r4, [r8]
 8006db0:	4627      	mov	r7, r4
 8006db2:	2f00      	cmp	r7, #0
 8006db4:	d143      	bne.n	8006e3e <_malloc_r+0xd6>
 8006db6:	2c00      	cmp	r4, #0
 8006db8:	d04b      	beq.n	8006e52 <_malloc_r+0xea>
 8006dba:	6823      	ldr	r3, [r4, #0]
 8006dbc:	4639      	mov	r1, r7
 8006dbe:	4630      	mov	r0, r6
 8006dc0:	eb04 0903 	add.w	r9, r4, r3
 8006dc4:	f000 f98c 	bl	80070e0 <_sbrk_r>
 8006dc8:	4581      	cmp	r9, r0
 8006dca:	d142      	bne.n	8006e52 <_malloc_r+0xea>
 8006dcc:	6821      	ldr	r1, [r4, #0]
 8006dce:	1a6d      	subs	r5, r5, r1
 8006dd0:	4629      	mov	r1, r5
 8006dd2:	4630      	mov	r0, r6
 8006dd4:	f7ff ffa6 	bl	8006d24 <sbrk_aligned>
 8006dd8:	3001      	adds	r0, #1
 8006dda:	d03a      	beq.n	8006e52 <_malloc_r+0xea>
 8006ddc:	6823      	ldr	r3, [r4, #0]
 8006dde:	442b      	add	r3, r5
 8006de0:	6023      	str	r3, [r4, #0]
 8006de2:	f8d8 3000 	ldr.w	r3, [r8]
 8006de6:	685a      	ldr	r2, [r3, #4]
 8006de8:	bb62      	cbnz	r2, 8006e44 <_malloc_r+0xdc>
 8006dea:	f8c8 7000 	str.w	r7, [r8]
 8006dee:	e00f      	b.n	8006e10 <_malloc_r+0xa8>
 8006df0:	6822      	ldr	r2, [r4, #0]
 8006df2:	1b52      	subs	r2, r2, r5
 8006df4:	d420      	bmi.n	8006e38 <_malloc_r+0xd0>
 8006df6:	2a0b      	cmp	r2, #11
 8006df8:	d917      	bls.n	8006e2a <_malloc_r+0xc2>
 8006dfa:	1961      	adds	r1, r4, r5
 8006dfc:	42a3      	cmp	r3, r4
 8006dfe:	6025      	str	r5, [r4, #0]
 8006e00:	bf18      	it	ne
 8006e02:	6059      	strne	r1, [r3, #4]
 8006e04:	6863      	ldr	r3, [r4, #4]
 8006e06:	bf08      	it	eq
 8006e08:	f8c8 1000 	streq.w	r1, [r8]
 8006e0c:	5162      	str	r2, [r4, r5]
 8006e0e:	604b      	str	r3, [r1, #4]
 8006e10:	4630      	mov	r0, r6
 8006e12:	f000 f82f 	bl	8006e74 <__malloc_unlock>
 8006e16:	f104 000b 	add.w	r0, r4, #11
 8006e1a:	1d23      	adds	r3, r4, #4
 8006e1c:	f020 0007 	bic.w	r0, r0, #7
 8006e20:	1ac2      	subs	r2, r0, r3
 8006e22:	bf1c      	itt	ne
 8006e24:	1a1b      	subne	r3, r3, r0
 8006e26:	50a3      	strne	r3, [r4, r2]
 8006e28:	e7af      	b.n	8006d8a <_malloc_r+0x22>
 8006e2a:	6862      	ldr	r2, [r4, #4]
 8006e2c:	42a3      	cmp	r3, r4
 8006e2e:	bf0c      	ite	eq
 8006e30:	f8c8 2000 	streq.w	r2, [r8]
 8006e34:	605a      	strne	r2, [r3, #4]
 8006e36:	e7eb      	b.n	8006e10 <_malloc_r+0xa8>
 8006e38:	4623      	mov	r3, r4
 8006e3a:	6864      	ldr	r4, [r4, #4]
 8006e3c:	e7ae      	b.n	8006d9c <_malloc_r+0x34>
 8006e3e:	463c      	mov	r4, r7
 8006e40:	687f      	ldr	r7, [r7, #4]
 8006e42:	e7b6      	b.n	8006db2 <_malloc_r+0x4a>
 8006e44:	461a      	mov	r2, r3
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	42a3      	cmp	r3, r4
 8006e4a:	d1fb      	bne.n	8006e44 <_malloc_r+0xdc>
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	6053      	str	r3, [r2, #4]
 8006e50:	e7de      	b.n	8006e10 <_malloc_r+0xa8>
 8006e52:	230c      	movs	r3, #12
 8006e54:	6033      	str	r3, [r6, #0]
 8006e56:	4630      	mov	r0, r6
 8006e58:	f000 f80c 	bl	8006e74 <__malloc_unlock>
 8006e5c:	e794      	b.n	8006d88 <_malloc_r+0x20>
 8006e5e:	6005      	str	r5, [r0, #0]
 8006e60:	e7d6      	b.n	8006e10 <_malloc_r+0xa8>
 8006e62:	bf00      	nop
 8006e64:	20001eb4 	.word	0x20001eb4

08006e68 <__malloc_lock>:
 8006e68:	4801      	ldr	r0, [pc, #4]	@ (8006e70 <__malloc_lock+0x8>)
 8006e6a:	f7ff bf0e 	b.w	8006c8a <__retarget_lock_acquire_recursive>
 8006e6e:	bf00      	nop
 8006e70:	20001eac 	.word	0x20001eac

08006e74 <__malloc_unlock>:
 8006e74:	4801      	ldr	r0, [pc, #4]	@ (8006e7c <__malloc_unlock+0x8>)
 8006e76:	f7ff bf09 	b.w	8006c8c <__retarget_lock_release_recursive>
 8006e7a:	bf00      	nop
 8006e7c:	20001eac 	.word	0x20001eac

08006e80 <__sflush_r>:
 8006e80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e88:	0716      	lsls	r6, r2, #28
 8006e8a:	4605      	mov	r5, r0
 8006e8c:	460c      	mov	r4, r1
 8006e8e:	d454      	bmi.n	8006f3a <__sflush_r+0xba>
 8006e90:	684b      	ldr	r3, [r1, #4]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	dc02      	bgt.n	8006e9c <__sflush_r+0x1c>
 8006e96:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	dd48      	ble.n	8006f2e <__sflush_r+0xae>
 8006e9c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006e9e:	2e00      	cmp	r6, #0
 8006ea0:	d045      	beq.n	8006f2e <__sflush_r+0xae>
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006ea8:	682f      	ldr	r7, [r5, #0]
 8006eaa:	6a21      	ldr	r1, [r4, #32]
 8006eac:	602b      	str	r3, [r5, #0]
 8006eae:	d030      	beq.n	8006f12 <__sflush_r+0x92>
 8006eb0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006eb2:	89a3      	ldrh	r3, [r4, #12]
 8006eb4:	0759      	lsls	r1, r3, #29
 8006eb6:	d505      	bpl.n	8006ec4 <__sflush_r+0x44>
 8006eb8:	6863      	ldr	r3, [r4, #4]
 8006eba:	1ad2      	subs	r2, r2, r3
 8006ebc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006ebe:	b10b      	cbz	r3, 8006ec4 <__sflush_r+0x44>
 8006ec0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006ec2:	1ad2      	subs	r2, r2, r3
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006ec8:	6a21      	ldr	r1, [r4, #32]
 8006eca:	4628      	mov	r0, r5
 8006ecc:	47b0      	blx	r6
 8006ece:	1c43      	adds	r3, r0, #1
 8006ed0:	89a3      	ldrh	r3, [r4, #12]
 8006ed2:	d106      	bne.n	8006ee2 <__sflush_r+0x62>
 8006ed4:	6829      	ldr	r1, [r5, #0]
 8006ed6:	291d      	cmp	r1, #29
 8006ed8:	d82b      	bhi.n	8006f32 <__sflush_r+0xb2>
 8006eda:	4a2a      	ldr	r2, [pc, #168]	@ (8006f84 <__sflush_r+0x104>)
 8006edc:	410a      	asrs	r2, r1
 8006ede:	07d6      	lsls	r6, r2, #31
 8006ee0:	d427      	bmi.n	8006f32 <__sflush_r+0xb2>
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	6062      	str	r2, [r4, #4]
 8006ee6:	04d9      	lsls	r1, r3, #19
 8006ee8:	6922      	ldr	r2, [r4, #16]
 8006eea:	6022      	str	r2, [r4, #0]
 8006eec:	d504      	bpl.n	8006ef8 <__sflush_r+0x78>
 8006eee:	1c42      	adds	r2, r0, #1
 8006ef0:	d101      	bne.n	8006ef6 <__sflush_r+0x76>
 8006ef2:	682b      	ldr	r3, [r5, #0]
 8006ef4:	b903      	cbnz	r3, 8006ef8 <__sflush_r+0x78>
 8006ef6:	6560      	str	r0, [r4, #84]	@ 0x54
 8006ef8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006efa:	602f      	str	r7, [r5, #0]
 8006efc:	b1b9      	cbz	r1, 8006f2e <__sflush_r+0xae>
 8006efe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006f02:	4299      	cmp	r1, r3
 8006f04:	d002      	beq.n	8006f0c <__sflush_r+0x8c>
 8006f06:	4628      	mov	r0, r5
 8006f08:	f7ff fec2 	bl	8006c90 <_free_r>
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006f10:	e00d      	b.n	8006f2e <__sflush_r+0xae>
 8006f12:	2301      	movs	r3, #1
 8006f14:	4628      	mov	r0, r5
 8006f16:	47b0      	blx	r6
 8006f18:	4602      	mov	r2, r0
 8006f1a:	1c50      	adds	r0, r2, #1
 8006f1c:	d1c9      	bne.n	8006eb2 <__sflush_r+0x32>
 8006f1e:	682b      	ldr	r3, [r5, #0]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d0c6      	beq.n	8006eb2 <__sflush_r+0x32>
 8006f24:	2b1d      	cmp	r3, #29
 8006f26:	d001      	beq.n	8006f2c <__sflush_r+0xac>
 8006f28:	2b16      	cmp	r3, #22
 8006f2a:	d11e      	bne.n	8006f6a <__sflush_r+0xea>
 8006f2c:	602f      	str	r7, [r5, #0]
 8006f2e:	2000      	movs	r0, #0
 8006f30:	e022      	b.n	8006f78 <__sflush_r+0xf8>
 8006f32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f36:	b21b      	sxth	r3, r3
 8006f38:	e01b      	b.n	8006f72 <__sflush_r+0xf2>
 8006f3a:	690f      	ldr	r7, [r1, #16]
 8006f3c:	2f00      	cmp	r7, #0
 8006f3e:	d0f6      	beq.n	8006f2e <__sflush_r+0xae>
 8006f40:	0793      	lsls	r3, r2, #30
 8006f42:	680e      	ldr	r6, [r1, #0]
 8006f44:	bf08      	it	eq
 8006f46:	694b      	ldreq	r3, [r1, #20]
 8006f48:	600f      	str	r7, [r1, #0]
 8006f4a:	bf18      	it	ne
 8006f4c:	2300      	movne	r3, #0
 8006f4e:	eba6 0807 	sub.w	r8, r6, r7
 8006f52:	608b      	str	r3, [r1, #8]
 8006f54:	f1b8 0f00 	cmp.w	r8, #0
 8006f58:	dde9      	ble.n	8006f2e <__sflush_r+0xae>
 8006f5a:	6a21      	ldr	r1, [r4, #32]
 8006f5c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006f5e:	4643      	mov	r3, r8
 8006f60:	463a      	mov	r2, r7
 8006f62:	4628      	mov	r0, r5
 8006f64:	47b0      	blx	r6
 8006f66:	2800      	cmp	r0, #0
 8006f68:	dc08      	bgt.n	8006f7c <__sflush_r+0xfc>
 8006f6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f72:	81a3      	strh	r3, [r4, #12]
 8006f74:	f04f 30ff 	mov.w	r0, #4294967295
 8006f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f7c:	4407      	add	r7, r0
 8006f7e:	eba8 0800 	sub.w	r8, r8, r0
 8006f82:	e7e7      	b.n	8006f54 <__sflush_r+0xd4>
 8006f84:	dfbffffe 	.word	0xdfbffffe

08006f88 <_fflush_r>:
 8006f88:	b538      	push	{r3, r4, r5, lr}
 8006f8a:	690b      	ldr	r3, [r1, #16]
 8006f8c:	4605      	mov	r5, r0
 8006f8e:	460c      	mov	r4, r1
 8006f90:	b913      	cbnz	r3, 8006f98 <_fflush_r+0x10>
 8006f92:	2500      	movs	r5, #0
 8006f94:	4628      	mov	r0, r5
 8006f96:	bd38      	pop	{r3, r4, r5, pc}
 8006f98:	b118      	cbz	r0, 8006fa2 <_fflush_r+0x1a>
 8006f9a:	6a03      	ldr	r3, [r0, #32]
 8006f9c:	b90b      	cbnz	r3, 8006fa2 <_fflush_r+0x1a>
 8006f9e:	f7ff fc8f 	bl	80068c0 <__sinit>
 8006fa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d0f3      	beq.n	8006f92 <_fflush_r+0xa>
 8006faa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006fac:	07d0      	lsls	r0, r2, #31
 8006fae:	d404      	bmi.n	8006fba <_fflush_r+0x32>
 8006fb0:	0599      	lsls	r1, r3, #22
 8006fb2:	d402      	bmi.n	8006fba <_fflush_r+0x32>
 8006fb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006fb6:	f7ff fe68 	bl	8006c8a <__retarget_lock_acquire_recursive>
 8006fba:	4628      	mov	r0, r5
 8006fbc:	4621      	mov	r1, r4
 8006fbe:	f7ff ff5f 	bl	8006e80 <__sflush_r>
 8006fc2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006fc4:	07da      	lsls	r2, r3, #31
 8006fc6:	4605      	mov	r5, r0
 8006fc8:	d4e4      	bmi.n	8006f94 <_fflush_r+0xc>
 8006fca:	89a3      	ldrh	r3, [r4, #12]
 8006fcc:	059b      	lsls	r3, r3, #22
 8006fce:	d4e1      	bmi.n	8006f94 <_fflush_r+0xc>
 8006fd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006fd2:	f7ff fe5b 	bl	8006c8c <__retarget_lock_release_recursive>
 8006fd6:	e7dd      	b.n	8006f94 <_fflush_r+0xc>

08006fd8 <__swhatbuf_r>:
 8006fd8:	b570      	push	{r4, r5, r6, lr}
 8006fda:	460c      	mov	r4, r1
 8006fdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fe0:	2900      	cmp	r1, #0
 8006fe2:	b096      	sub	sp, #88	@ 0x58
 8006fe4:	4615      	mov	r5, r2
 8006fe6:	461e      	mov	r6, r3
 8006fe8:	da0d      	bge.n	8007006 <__swhatbuf_r+0x2e>
 8006fea:	89a3      	ldrh	r3, [r4, #12]
 8006fec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006ff0:	f04f 0100 	mov.w	r1, #0
 8006ff4:	bf14      	ite	ne
 8006ff6:	2340      	movne	r3, #64	@ 0x40
 8006ff8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006ffc:	2000      	movs	r0, #0
 8006ffe:	6031      	str	r1, [r6, #0]
 8007000:	602b      	str	r3, [r5, #0]
 8007002:	b016      	add	sp, #88	@ 0x58
 8007004:	bd70      	pop	{r4, r5, r6, pc}
 8007006:	466a      	mov	r2, sp
 8007008:	f000 f848 	bl	800709c <_fstat_r>
 800700c:	2800      	cmp	r0, #0
 800700e:	dbec      	blt.n	8006fea <__swhatbuf_r+0x12>
 8007010:	9901      	ldr	r1, [sp, #4]
 8007012:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007016:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800701a:	4259      	negs	r1, r3
 800701c:	4159      	adcs	r1, r3
 800701e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007022:	e7eb      	b.n	8006ffc <__swhatbuf_r+0x24>

08007024 <__smakebuf_r>:
 8007024:	898b      	ldrh	r3, [r1, #12]
 8007026:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007028:	079d      	lsls	r5, r3, #30
 800702a:	4606      	mov	r6, r0
 800702c:	460c      	mov	r4, r1
 800702e:	d507      	bpl.n	8007040 <__smakebuf_r+0x1c>
 8007030:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007034:	6023      	str	r3, [r4, #0]
 8007036:	6123      	str	r3, [r4, #16]
 8007038:	2301      	movs	r3, #1
 800703a:	6163      	str	r3, [r4, #20]
 800703c:	b003      	add	sp, #12
 800703e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007040:	ab01      	add	r3, sp, #4
 8007042:	466a      	mov	r2, sp
 8007044:	f7ff ffc8 	bl	8006fd8 <__swhatbuf_r>
 8007048:	9f00      	ldr	r7, [sp, #0]
 800704a:	4605      	mov	r5, r0
 800704c:	4639      	mov	r1, r7
 800704e:	4630      	mov	r0, r6
 8007050:	f7ff fe8a 	bl	8006d68 <_malloc_r>
 8007054:	b948      	cbnz	r0, 800706a <__smakebuf_r+0x46>
 8007056:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800705a:	059a      	lsls	r2, r3, #22
 800705c:	d4ee      	bmi.n	800703c <__smakebuf_r+0x18>
 800705e:	f023 0303 	bic.w	r3, r3, #3
 8007062:	f043 0302 	orr.w	r3, r3, #2
 8007066:	81a3      	strh	r3, [r4, #12]
 8007068:	e7e2      	b.n	8007030 <__smakebuf_r+0xc>
 800706a:	89a3      	ldrh	r3, [r4, #12]
 800706c:	6020      	str	r0, [r4, #0]
 800706e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007072:	81a3      	strh	r3, [r4, #12]
 8007074:	9b01      	ldr	r3, [sp, #4]
 8007076:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800707a:	b15b      	cbz	r3, 8007094 <__smakebuf_r+0x70>
 800707c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007080:	4630      	mov	r0, r6
 8007082:	f000 f81d 	bl	80070c0 <_isatty_r>
 8007086:	b128      	cbz	r0, 8007094 <__smakebuf_r+0x70>
 8007088:	89a3      	ldrh	r3, [r4, #12]
 800708a:	f023 0303 	bic.w	r3, r3, #3
 800708e:	f043 0301 	orr.w	r3, r3, #1
 8007092:	81a3      	strh	r3, [r4, #12]
 8007094:	89a3      	ldrh	r3, [r4, #12]
 8007096:	431d      	orrs	r5, r3
 8007098:	81a5      	strh	r5, [r4, #12]
 800709a:	e7cf      	b.n	800703c <__smakebuf_r+0x18>

0800709c <_fstat_r>:
 800709c:	b538      	push	{r3, r4, r5, lr}
 800709e:	4d07      	ldr	r5, [pc, #28]	@ (80070bc <_fstat_r+0x20>)
 80070a0:	2300      	movs	r3, #0
 80070a2:	4604      	mov	r4, r0
 80070a4:	4608      	mov	r0, r1
 80070a6:	4611      	mov	r1, r2
 80070a8:	602b      	str	r3, [r5, #0]
 80070aa:	f7f9 fd72 	bl	8000b92 <_fstat>
 80070ae:	1c43      	adds	r3, r0, #1
 80070b0:	d102      	bne.n	80070b8 <_fstat_r+0x1c>
 80070b2:	682b      	ldr	r3, [r5, #0]
 80070b4:	b103      	cbz	r3, 80070b8 <_fstat_r+0x1c>
 80070b6:	6023      	str	r3, [r4, #0]
 80070b8:	bd38      	pop	{r3, r4, r5, pc}
 80070ba:	bf00      	nop
 80070bc:	20001ea8 	.word	0x20001ea8

080070c0 <_isatty_r>:
 80070c0:	b538      	push	{r3, r4, r5, lr}
 80070c2:	4d06      	ldr	r5, [pc, #24]	@ (80070dc <_isatty_r+0x1c>)
 80070c4:	2300      	movs	r3, #0
 80070c6:	4604      	mov	r4, r0
 80070c8:	4608      	mov	r0, r1
 80070ca:	602b      	str	r3, [r5, #0]
 80070cc:	f7f9 fd71 	bl	8000bb2 <_isatty>
 80070d0:	1c43      	adds	r3, r0, #1
 80070d2:	d102      	bne.n	80070da <_isatty_r+0x1a>
 80070d4:	682b      	ldr	r3, [r5, #0]
 80070d6:	b103      	cbz	r3, 80070da <_isatty_r+0x1a>
 80070d8:	6023      	str	r3, [r4, #0]
 80070da:	bd38      	pop	{r3, r4, r5, pc}
 80070dc:	20001ea8 	.word	0x20001ea8

080070e0 <_sbrk_r>:
 80070e0:	b538      	push	{r3, r4, r5, lr}
 80070e2:	4d06      	ldr	r5, [pc, #24]	@ (80070fc <_sbrk_r+0x1c>)
 80070e4:	2300      	movs	r3, #0
 80070e6:	4604      	mov	r4, r0
 80070e8:	4608      	mov	r0, r1
 80070ea:	602b      	str	r3, [r5, #0]
 80070ec:	f7f9 fd7a 	bl	8000be4 <_sbrk>
 80070f0:	1c43      	adds	r3, r0, #1
 80070f2:	d102      	bne.n	80070fa <_sbrk_r+0x1a>
 80070f4:	682b      	ldr	r3, [r5, #0]
 80070f6:	b103      	cbz	r3, 80070fa <_sbrk_r+0x1a>
 80070f8:	6023      	str	r3, [r4, #0]
 80070fa:	bd38      	pop	{r3, r4, r5, pc}
 80070fc:	20001ea8 	.word	0x20001ea8

08007100 <_init>:
 8007100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007102:	bf00      	nop
 8007104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007106:	bc08      	pop	{r3}
 8007108:	469e      	mov	lr, r3
 800710a:	4770      	bx	lr

0800710c <_fini>:
 800710c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800710e:	bf00      	nop
 8007110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007112:	bc08      	pop	{r3}
 8007114:	469e      	mov	lr, r3
 8007116:	4770      	bx	lr
