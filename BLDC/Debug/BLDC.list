
BLDC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ee8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08007070  08007070  00008070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070d8  080070d8  0000915c  2**0
                  CONTENTS
  4 .ARM          00000000  080070d8  080070d8  0000915c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080070d8  080070d8  0000915c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070d8  080070d8  000080d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080070dc  080070dc  000080dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000015c  20000000  080070e0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000915c  2**0
                  CONTENTS
 10 .bss          00001d5c  2000015c  2000015c  0000915c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001eb8  20001eb8  0000915c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000915c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e63e  00000000  00000000  0000918c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f31  00000000  00000000  000177ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c88  00000000  00000000  0001a700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000092a  00000000  00000000  0001b388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024cdb  00000000  00000000  0001bcb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012608  00000000  00000000  0004098d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf10a  00000000  00000000  00052f95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012209f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000036a8  00000000  00000000  001220e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000046  00000000  00000000  0012578c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000015c 	.word	0x2000015c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007058 	.word	0x08007058

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000160 	.word	0x20000160
 80001c4:	08007058 	.word	0x08007058

080001c8 <bufferAdd>:

uint8_t bufferHead = 0;
uint8_t bufferTail = 0;
uint8_t arrayBuffer[BUFFER_SIZE];

void bufferAdd(uint8_t buffer) {
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
    uint8_t nextHead = (bufferHead + 1) % BUFFER_SIZE;
 80001d2:	4b0e      	ldr	r3, [pc, #56]	@ (800020c <bufferAdd+0x44>)
 80001d4:	781b      	ldrb	r3, [r3, #0]
 80001d6:	3301      	adds	r3, #1
 80001d8:	2b00      	cmp	r3, #0
 80001da:	f003 0301 	and.w	r3, r3, #1
 80001de:	bfb8      	it	lt
 80001e0:	425b      	neglt	r3, r3
 80001e2:	73fb      	strb	r3, [r7, #15]
    if (nextHead != bufferTail) {
 80001e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000210 <bufferAdd+0x48>)
 80001e6:	781b      	ldrb	r3, [r3, #0]
 80001e8:	7bfa      	ldrb	r2, [r7, #15]
 80001ea:	429a      	cmp	r2, r3
 80001ec:	d008      	beq.n	8000200 <bufferAdd+0x38>
        arrayBuffer[bufferHead] = buffer;
 80001ee:	4b07      	ldr	r3, [pc, #28]	@ (800020c <bufferAdd+0x44>)
 80001f0:	781b      	ldrb	r3, [r3, #0]
 80001f2:	4619      	mov	r1, r3
 80001f4:	4a07      	ldr	r2, [pc, #28]	@ (8000214 <bufferAdd+0x4c>)
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	5453      	strb	r3, [r2, r1]
        bufferHead = nextHead;
 80001fa:	4a04      	ldr	r2, [pc, #16]	@ (800020c <bufferAdd+0x44>)
 80001fc:	7bfb      	ldrb	r3, [r7, #15]
 80001fe:	7013      	strb	r3, [r2, #0]
    }
}
 8000200:	bf00      	nop
 8000202:	3714      	adds	r7, #20
 8000204:	46bd      	mov	sp, r7
 8000206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020a:	4770      	bx	lr
 800020c:	20000178 	.word	0x20000178
 8000210:	20000179 	.word	0x20000179
 8000214:	2000017c 	.word	0x2000017c

08000218 <isBufferReady>:

int isBufferReady() {
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0
	return (bufferTail != bufferHead);
 800021c:	4b06      	ldr	r3, [pc, #24]	@ (8000238 <isBufferReady+0x20>)
 800021e:	781a      	ldrb	r2, [r3, #0]
 8000220:	4b06      	ldr	r3, [pc, #24]	@ (800023c <isBufferReady+0x24>)
 8000222:	781b      	ldrb	r3, [r3, #0]
 8000224:	429a      	cmp	r2, r3
 8000226:	bf14      	ite	ne
 8000228:	2301      	movne	r3, #1
 800022a:	2300      	moveq	r3, #0
 800022c:	b2db      	uxtb	r3, r3
}
 800022e:	4618      	mov	r0, r3
 8000230:	46bd      	mov	sp, r7
 8000232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000236:	4770      	bx	lr
 8000238:	20000179 	.word	0x20000179
 800023c:	20000178 	.word	0x20000178

08000240 <bufferGet>:

int bufferGet() {
 8000240:	b480      	push	{r7}
 8000242:	b083      	sub	sp, #12
 8000244:	af00      	add	r7, sp, #0
	if (bufferTail != bufferHead) {
 8000246:	4b10      	ldr	r3, [pc, #64]	@ (8000288 <bufferGet+0x48>)
 8000248:	781a      	ldrb	r2, [r3, #0]
 800024a:	4b10      	ldr	r3, [pc, #64]	@ (800028c <bufferGet+0x4c>)
 800024c:	781b      	ldrb	r3, [r3, #0]
 800024e:	429a      	cmp	r2, r3
 8000250:	d012      	beq.n	8000278 <bufferGet+0x38>
	  uint8_t buffer = arrayBuffer[bufferTail];
 8000252:	4b0d      	ldr	r3, [pc, #52]	@ (8000288 <bufferGet+0x48>)
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	461a      	mov	r2, r3
 8000258:	4b0d      	ldr	r3, [pc, #52]	@ (8000290 <bufferGet+0x50>)
 800025a:	5c9b      	ldrb	r3, [r3, r2]
 800025c:	71fb      	strb	r3, [r7, #7]
	  bufferTail = (bufferTail + 1) % BUFFER_SIZE;
 800025e:	4b0a      	ldr	r3, [pc, #40]	@ (8000288 <bufferGet+0x48>)
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	3301      	adds	r3, #1
 8000264:	2b00      	cmp	r3, #0
 8000266:	f003 0301 	and.w	r3, r3, #1
 800026a:	bfb8      	it	lt
 800026c:	425b      	neglt	r3, r3
 800026e:	b2da      	uxtb	r2, r3
 8000270:	4b05      	ldr	r3, [pc, #20]	@ (8000288 <bufferGet+0x48>)
 8000272:	701a      	strb	r2, [r3, #0]
	  return buffer;
 8000274:	79fb      	ldrb	r3, [r7, #7]
 8000276:	e001      	b.n	800027c <bufferGet+0x3c>
	}
	return -1; // buffer rá»—ng
 8000278:	f04f 33ff 	mov.w	r3, #4294967295
}
 800027c:	4618      	mov	r0, r3
 800027e:	370c      	adds	r7, #12
 8000280:	46bd      	mov	sp, r7
 8000282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000286:	4770      	bx	lr
 8000288:	20000179 	.word	0x20000179
 800028c:	20000178 	.word	0x20000178
 8000290:	2000017c 	.word	0x2000017c

08000294 <handleCommutation>:
};

uint8_t hallState = 0;
uint8_t currentCommStep = 0;

void handleCommutation(uint8_t step, uint8_t pwmVal) {
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0
 800029a:	4603      	mov	r3, r0
 800029c:	460a      	mov	r2, r1
 800029e:	71fb      	strb	r3, [r7, #7]
 80002a0:	4613      	mov	r3, r2
 80002a2:	71bb      	strb	r3, [r7, #6]
    switch (step) {
 80002a4:	79fb      	ldrb	r3, [r7, #7]
 80002a6:	2b05      	cmp	r3, #5
 80002a8:	f200 809a 	bhi.w	80003e0 <handleCommutation+0x14c>
 80002ac:	a201      	add	r2, pc, #4	@ (adr r2, 80002b4 <handleCommutation+0x20>)
 80002ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002b2:	bf00      	nop
 80002b4:	080002cd 	.word	0x080002cd
 80002b8:	080002fb 	.word	0x080002fb
 80002bc:	08000329 	.word	0x08000329
 80002c0:	08000357 	.word	0x08000357
 80002c4:	08000385 	.word	0x08000385
 80002c8:	080003b3 	.word	0x080003b3
        case 0:
            SET_PWM_1_H3(pwmVal);
 80002cc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002d0:	79bb      	ldrb	r3, [r7, #6]
 80002d2:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SET_PWM_1_L2(lowMax);
 80002d4:	4b46      	ldr	r3, [pc, #280]	@ (80003f0 <handleCommutation+0x15c>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	635a      	str	r2, [r3, #52]	@ 0x34
            SET_PWM_1_H1(highMin);
 80002da:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002de:	2200      	movs	r2, #0
 80002e0:	635a      	str	r2, [r3, #52]	@ 0x34
            SET_PWM_1_H2(highMin);
 80002e2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002e6:	2200      	movs	r2, #0
 80002e8:	639a      	str	r2, [r3, #56]	@ 0x38
            SET_PWM_1_L1(lowMin);
 80002ea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002ee:	22ff      	movs	r2, #255	@ 0xff
 80002f0:	641a      	str	r2, [r3, #64]	@ 0x40
            SET_PWM_1_L3(lowMin);
 80002f2:	4b3f      	ldr	r3, [pc, #252]	@ (80003f0 <handleCommutation+0x15c>)
 80002f4:	22ff      	movs	r2, #255	@ 0xff
 80002f6:	639a      	str	r2, [r3, #56]	@ 0x38
            break;
 80002f8:	e073      	b.n	80003e2 <handleCommutation+0x14e>
        case 1:
			SET_PWM_1_H2(pwmVal);
 80002fa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002fe:	79bb      	ldrb	r3, [r7, #6]
 8000300:	6393      	str	r3, [r2, #56]	@ 0x38
			SET_PWM_1_L1(lowMax);
 8000302:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000306:	2200      	movs	r2, #0
 8000308:	641a      	str	r2, [r3, #64]	@ 0x40
			SET_PWM_1_H1(highMin);
 800030a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800030e:	2200      	movs	r2, #0
 8000310:	635a      	str	r2, [r3, #52]	@ 0x34
			SET_PWM_1_H3(highMin);
 8000312:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000316:	2200      	movs	r2, #0
 8000318:	63da      	str	r2, [r3, #60]	@ 0x3c
			SET_PWM_1_L2(lowMin);
 800031a:	4b35      	ldr	r3, [pc, #212]	@ (80003f0 <handleCommutation+0x15c>)
 800031c:	22ff      	movs	r2, #255	@ 0xff
 800031e:	635a      	str	r2, [r3, #52]	@ 0x34
			SET_PWM_1_L3(lowMin);
 8000320:	4b33      	ldr	r3, [pc, #204]	@ (80003f0 <handleCommutation+0x15c>)
 8000322:	22ff      	movs	r2, #255	@ 0xff
 8000324:	639a      	str	r2, [r3, #56]	@ 0x38
            break;
 8000326:	e05c      	b.n	80003e2 <handleCommutation+0x14e>
        case 2:
            SET_PWM_1_H3(pwmVal);
 8000328:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800032c:	79bb      	ldrb	r3, [r7, #6]
 800032e:	63d3      	str	r3, [r2, #60]	@ 0x3c
			SET_PWM_1_L1(lowMax);
 8000330:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000334:	2200      	movs	r2, #0
 8000336:	641a      	str	r2, [r3, #64]	@ 0x40
			SET_PWM_1_H1(highMin);
 8000338:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800033c:	2200      	movs	r2, #0
 800033e:	635a      	str	r2, [r3, #52]	@ 0x34
			SET_PWM_1_H2(highMin);
 8000340:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000344:	2200      	movs	r2, #0
 8000346:	639a      	str	r2, [r3, #56]	@ 0x38
			SET_PWM_1_L2(lowMin);
 8000348:	4b29      	ldr	r3, [pc, #164]	@ (80003f0 <handleCommutation+0x15c>)
 800034a:	22ff      	movs	r2, #255	@ 0xff
 800034c:	635a      	str	r2, [r3, #52]	@ 0x34
			SET_PWM_1_L3(lowMin);
 800034e:	4b28      	ldr	r3, [pc, #160]	@ (80003f0 <handleCommutation+0x15c>)
 8000350:	22ff      	movs	r2, #255	@ 0xff
 8000352:	639a      	str	r2, [r3, #56]	@ 0x38
            break;
 8000354:	e045      	b.n	80003e2 <handleCommutation+0x14e>
        case 3:
            SET_PWM_1_H1(pwmVal);
 8000356:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800035a:	79bb      	ldrb	r3, [r7, #6]
 800035c:	6353      	str	r3, [r2, #52]	@ 0x34
			SET_PWM_1_L3(lowMax);
 800035e:	4b24      	ldr	r3, [pc, #144]	@ (80003f0 <handleCommutation+0x15c>)
 8000360:	2200      	movs	r2, #0
 8000362:	639a      	str	r2, [r3, #56]	@ 0x38
			SET_PWM_1_H2(highMin);
 8000364:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000368:	2200      	movs	r2, #0
 800036a:	639a      	str	r2, [r3, #56]	@ 0x38
			SET_PWM_1_H3(highMin);
 800036c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000370:	2200      	movs	r2, #0
 8000372:	63da      	str	r2, [r3, #60]	@ 0x3c
			SET_PWM_1_L1(lowMin);
 8000374:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000378:	22ff      	movs	r2, #255	@ 0xff
 800037a:	641a      	str	r2, [r3, #64]	@ 0x40
			SET_PWM_1_L2(lowMin);
 800037c:	4b1c      	ldr	r3, [pc, #112]	@ (80003f0 <handleCommutation+0x15c>)
 800037e:	22ff      	movs	r2, #255	@ 0xff
 8000380:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 8000382:	e02e      	b.n	80003e2 <handleCommutation+0x14e>
        case 4:
            SET_PWM_1_H1(pwmVal);
 8000384:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000388:	79bb      	ldrb	r3, [r7, #6]
 800038a:	6353      	str	r3, [r2, #52]	@ 0x34
			SET_PWM_1_L2(lowMax);
 800038c:	4b18      	ldr	r3, [pc, #96]	@ (80003f0 <handleCommutation+0x15c>)
 800038e:	2200      	movs	r2, #0
 8000390:	635a      	str	r2, [r3, #52]	@ 0x34
			SET_PWM_1_H2(highMin);
 8000392:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000396:	2200      	movs	r2, #0
 8000398:	639a      	str	r2, [r3, #56]	@ 0x38
			SET_PWM_1_H3(highMin);
 800039a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800039e:	2200      	movs	r2, #0
 80003a0:	63da      	str	r2, [r3, #60]	@ 0x3c
			SET_PWM_1_L1(lowMin);
 80003a2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003a6:	22ff      	movs	r2, #255	@ 0xff
 80003a8:	641a      	str	r2, [r3, #64]	@ 0x40
			SET_PWM_1_L3(lowMin);
 80003aa:	4b11      	ldr	r3, [pc, #68]	@ (80003f0 <handleCommutation+0x15c>)
 80003ac:	22ff      	movs	r2, #255	@ 0xff
 80003ae:	639a      	str	r2, [r3, #56]	@ 0x38
            break;
 80003b0:	e017      	b.n	80003e2 <handleCommutation+0x14e>
        case 5:
            SET_PWM_1_H2(pwmVal);
 80003b2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003b6:	79bb      	ldrb	r3, [r7, #6]
 80003b8:	6393      	str	r3, [r2, #56]	@ 0x38
			SET_PWM_1_L3(lowMax);
 80003ba:	4b0d      	ldr	r3, [pc, #52]	@ (80003f0 <handleCommutation+0x15c>)
 80003bc:	2200      	movs	r2, #0
 80003be:	639a      	str	r2, [r3, #56]	@ 0x38
			SET_PWM_1_H1(highMin);
 80003c0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003c4:	2200      	movs	r2, #0
 80003c6:	635a      	str	r2, [r3, #52]	@ 0x34
			SET_PWM_1_H3(highMin);
 80003c8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003cc:	2200      	movs	r2, #0
 80003ce:	63da      	str	r2, [r3, #60]	@ 0x3c
			SET_PWM_1_L1(lowMin);
 80003d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003d4:	22ff      	movs	r2, #255	@ 0xff
 80003d6:	641a      	str	r2, [r3, #64]	@ 0x40
			SET_PWM_1_L2(lowMin);
 80003d8:	4b05      	ldr	r3, [pc, #20]	@ (80003f0 <handleCommutation+0x15c>)
 80003da:	22ff      	movs	r2, #255	@ 0xff
 80003dc:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 80003de:	e000      	b.n	80003e2 <handleCommutation+0x14e>
        default: break;
 80003e0:	bf00      	nop
    }
}
 80003e2:	bf00      	nop
 80003e4:	370c      	adds	r7, #12
 80003e6:	46bd      	mov	sp, r7
 80003e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	40000400 	.word	0x40000400

080003f4 <readHallSensor>:

int readHallSensor(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
    uint32_t idr = GPIOA->IDR;
 80003fa:	4b1c      	ldr	r3, [pc, #112]	@ (800046c <readHallSensor+0x78>)
 80003fc:	691b      	ldr	r3, [r3, #16]
 80003fe:	607b      	str	r3, [r7, #4]
    uint8_t hallA = (idr >> 5) & 0x01;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	095b      	lsrs	r3, r3, #5
 8000404:	b2db      	uxtb	r3, r3
 8000406:	f003 0301 	and.w	r3, r3, #1
 800040a:	70fb      	strb	r3, [r7, #3]
    uint8_t hallB = (idr >> 6) & 0x01;
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	099b      	lsrs	r3, r3, #6
 8000410:	b2db      	uxtb	r3, r3
 8000412:	f003 0301 	and.w	r3, r3, #1
 8000416:	70bb      	strb	r3, [r7, #2]
    uint8_t hallC = (idr >> 7) & 0x01;
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	09db      	lsrs	r3, r3, #7
 800041c:	b2db      	uxtb	r3, r3
 800041e:	f003 0301 	and.w	r3, r3, #1
 8000422:	707b      	strb	r3, [r7, #1]

    hallState = (hallA << 2) | (hallB << 1) | hallC;
 8000424:	78fb      	ldrb	r3, [r7, #3]
 8000426:	009b      	lsls	r3, r3, #2
 8000428:	b25a      	sxtb	r2, r3
 800042a:	78bb      	ldrb	r3, [r7, #2]
 800042c:	005b      	lsls	r3, r3, #1
 800042e:	b25b      	sxtb	r3, r3
 8000430:	4313      	orrs	r3, r2
 8000432:	b25a      	sxtb	r2, r3
 8000434:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8000438:	4313      	orrs	r3, r2
 800043a:	b25b      	sxtb	r3, r3
 800043c:	b2da      	uxtb	r2, r3
 800043e:	4b0c      	ldr	r3, [pc, #48]	@ (8000470 <readHallSensor+0x7c>)
 8000440:	701a      	strb	r2, [r3, #0]

    int8_t step = hallCWLookup[hallState];
 8000442:	4b0b      	ldr	r3, [pc, #44]	@ (8000470 <readHallSensor+0x7c>)
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	461a      	mov	r2, r3
 8000448:	4b0a      	ldr	r3, [pc, #40]	@ (8000474 <readHallSensor+0x80>)
 800044a:	5c9b      	ldrb	r3, [r3, r2]
 800044c:	703b      	strb	r3, [r7, #0]
    if (step >= 0) return step;
 800044e:	f997 3000 	ldrsb.w	r3, [r7]
 8000452:	2b00      	cmp	r3, #0
 8000454:	db02      	blt.n	800045c <readHallSensor+0x68>
 8000456:	f997 3000 	ldrsb.w	r3, [r7]
 800045a:	e000      	b.n	800045e <readHallSensor+0x6a>
    return 0;
 800045c:	2300      	movs	r3, #0
}
 800045e:	4618      	mov	r0, r3
 8000460:	370c      	adds	r7, #12
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	40020000 	.word	0x40020000
 8000470:	2000017e 	.word	0x2000017e
 8000474:	080070d0 	.word	0x080070d0

08000478 <STM32_Init>:

//======================================================
//STM32 FULL INITIALIZATION
//======================================================
void STM32_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
	//HALL
	HAL_Init();
 800047c:	f000 fbd0 	bl	8000c20 <HAL_Init>

	//SYSTEMCLOCK
	SystemClock_Config();
 8000480:	f000 f80e 	bl	80004a0 <SystemClock_Config>

	//USB_DEVICE (USB_CDC)
	MX_USB_DEVICE_Init();
 8000484:	f005 fc48 	bl	8005d18 <MX_USB_DEVICE_Init>

	//GPIO
	GPIO_Init();
 8000488:	f000 f96a 	bl	8000760 <GPIO_Init>

	//TIMER
	TIM2_Init();
 800048c:	f000 f866 	bl	800055c <TIM2_Init>
	TIM3_Init();
 8000490:	f000 f8c6 	bl	8000620 <TIM3_Init>
	TIM4_Init();
 8000494:	f000 f914 	bl	80006c0 <TIM4_Init>

	//COMMUNICATION UART
	USART1_UART_Init();
 8000498:	f000 fa38 	bl	800090c <USART1_UART_Init>
}
 800049c:	bf00      	nop
 800049e:	bd80      	pop	{r7, pc}

080004a0 <SystemClock_Config>:

//======================================================
//SYSTEMCLOCK CONFIG
//======================================================
void SystemClock_Config(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
    // 1. Enable HSI (High-Speed Internal Clock)
    RCC->CR |= RCC_CR_HSION;
 80004a4:	4b2a      	ldr	r3, [pc, #168]	@ (8000550 <SystemClock_Config+0xb0>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4a29      	ldr	r2, [pc, #164]	@ (8000550 <SystemClock_Config+0xb0>)
 80004aa:	f043 0301 	orr.w	r3, r3, #1
 80004ae:	6013      	str	r3, [r2, #0]
    while ((RCC->CR & RCC_CR_HSIRDY) == 0); // Wait till HSI is ready
 80004b0:	bf00      	nop
 80004b2:	4b27      	ldr	r3, [pc, #156]	@ (8000550 <SystemClock_Config+0xb0>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	f003 0302 	and.w	r3, r3, #2
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d0f9      	beq.n	80004b2 <SystemClock_Config+0x12>

    // 2. Reset PLL
    RCC->CR &= ~RCC_CR_PLLON; // Turn off PLL
 80004be:	4b24      	ldr	r3, [pc, #144]	@ (8000550 <SystemClock_Config+0xb0>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	4a23      	ldr	r2, [pc, #140]	@ (8000550 <SystemClock_Config+0xb0>)
 80004c4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80004c8:	6013      	str	r3, [r2, #0]
    while (RCC->CR & RCC_CR_PLLRDY); // Wait PLL disabled
 80004ca:	bf00      	nop
 80004cc:	4b20      	ldr	r3, [pc, #128]	@ (8000550 <SystemClock_Config+0xb0>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d1f9      	bne.n	80004cc <SystemClock_Config+0x2c>
     * PLL_P = 4 (00: /2, 01: /4, ...)
     * PLL_Q = 7
     *
     * SYSCLK = ((16 MHz / 16) * 336) / 4 = 84 MHz
     */
    RCC->PLLCFGR = (16 << RCC_PLLCFGR_PLLM_Pos) |
 80004d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000550 <SystemClock_Config+0xb0>)
 80004da:	4a1e      	ldr	r2, [pc, #120]	@ (8000554 <SystemClock_Config+0xb4>)
 80004dc:	605a      	str	r2, [r3, #4]
                   (1 << RCC_PLLCFGR_PLLP_Pos) |  // PLLP = 4 -> 01b
                   (7 << RCC_PLLCFGR_PLLQ_Pos) |
                   (RCC_PLLCFGR_PLLSRC_HSI);      // PLL source = HSI

    // 4. Enable PLL
    RCC->CR |= RCC_CR_PLLON;
 80004de:	4b1c      	ldr	r3, [pc, #112]	@ (8000550 <SystemClock_Config+0xb0>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a1b      	ldr	r2, [pc, #108]	@ (8000550 <SystemClock_Config+0xb0>)
 80004e4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80004e8:	6013      	str	r3, [r2, #0]
    while ((RCC->CR & RCC_CR_PLLRDY) == 0); // Wait till PLL is ready
 80004ea:	bf00      	nop
 80004ec:	4b18      	ldr	r3, [pc, #96]	@ (8000550 <SystemClock_Config+0xb0>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d0f9      	beq.n	80004ec <SystemClock_Config+0x4c>

    // 5. Configure Flash Latency
    FLASH->ACR = FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_PRFTEN | FLASH_ACR_LATENCY_2WS;
 80004f8:	4b17      	ldr	r3, [pc, #92]	@ (8000558 <SystemClock_Config+0xb8>)
 80004fa:	f240 7202 	movw	r2, #1794	@ 0x702
 80004fe:	601a      	str	r2, [r3, #0]

    // 6. Set AHB, APB1, APB2 prescaler
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;   // AHB prescaler = /1 -> 84 MHz
 8000500:	4b13      	ldr	r3, [pc, #76]	@ (8000550 <SystemClock_Config+0xb0>)
 8000502:	4a13      	ldr	r2, [pc, #76]	@ (8000550 <SystemClock_Config+0xb0>)
 8000504:	689b      	ldr	r3, [r3, #8]
 8000506:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;  // APB1 prescaler = /2 -> 42 MHz
 8000508:	4b11      	ldr	r3, [pc, #68]	@ (8000550 <SystemClock_Config+0xb0>)
 800050a:	689b      	ldr	r3, [r3, #8]
 800050c:	4a10      	ldr	r2, [pc, #64]	@ (8000550 <SystemClock_Config+0xb0>)
 800050e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000512:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;  // APB2 prescaler = /1 -> 84 MHz
 8000514:	4b0e      	ldr	r3, [pc, #56]	@ (8000550 <SystemClock_Config+0xb0>)
 8000516:	4a0e      	ldr	r2, [pc, #56]	@ (8000550 <SystemClock_Config+0xb0>)
 8000518:	689b      	ldr	r3, [r3, #8]
 800051a:	6093      	str	r3, [r2, #8]

    // 7. Select PLL as system clock
    RCC->CFGR &= ~RCC_CFGR_SW;         // Clear SW bits
 800051c:	4b0c      	ldr	r3, [pc, #48]	@ (8000550 <SystemClock_Config+0xb0>)
 800051e:	689b      	ldr	r3, [r3, #8]
 8000520:	4a0b      	ldr	r2, [pc, #44]	@ (8000550 <SystemClock_Config+0xb0>)
 8000522:	f023 0303 	bic.w	r3, r3, #3
 8000526:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;      // Select PLL as system clock
 8000528:	4b09      	ldr	r3, [pc, #36]	@ (8000550 <SystemClock_Config+0xb0>)
 800052a:	689b      	ldr	r3, [r3, #8]
 800052c:	4a08      	ldr	r2, [pc, #32]	@ (8000550 <SystemClock_Config+0xb0>)
 800052e:	f043 0302 	orr.w	r3, r3, #2
 8000532:	6093      	str	r3, [r2, #8]
    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL); // Wait till PLL is system clock
 8000534:	bf00      	nop
 8000536:	4b06      	ldr	r3, [pc, #24]	@ (8000550 <SystemClock_Config+0xb0>)
 8000538:	689b      	ldr	r3, [r3, #8]
 800053a:	f003 030c 	and.w	r3, r3, #12
 800053e:	2b08      	cmp	r3, #8
 8000540:	d1f9      	bne.n	8000536 <SystemClock_Config+0x96>
}
 8000542:	bf00      	nop
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	40023800 	.word	0x40023800
 8000554:	07015410 	.word	0x07015410
 8000558:	40023c00 	.word	0x40023c00

0800055c <TIM2_Init>:

//======================================================
//TIMER INITIALIZE
//======================================================
void TIM2_Init(void) {
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
    // Enable TIM2 clock
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000560:	4b2e      	ldr	r3, [pc, #184]	@ (800061c <TIM2_Init+0xc0>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000564:	4a2d      	ldr	r2, [pc, #180]	@ (800061c <TIM2_Init+0xc0>)
 8000566:	f043 0301 	orr.w	r3, r3, #1
 800056a:	6413      	str	r3, [r2, #64]	@ 0x40

    // Set prescaler and auto-reload for 1kHz PWM
    TIM2->PSC = 3;     // 84MHz / (3+1) = 21MHz
 800056c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000570:	2203      	movs	r2, #3
 8000572:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 1000;   // PWM frequency ~ 20.9Khz
 8000574:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000578:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800057c:	62da      	str	r2, [r3, #44]	@ 0x2c

    // PWM mode 1, preload enable for CH1-CH4
    TIM2->CCMR1 |= (6 << 4) | TIM_CCMR1_OC1PE;  // CH1
 800057e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000582:	699b      	ldr	r3, [r3, #24]
 8000584:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000588:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 800058c:	6193      	str	r3, [r2, #24]
    TIM2->CCMR1 |= (6 << 12) | TIM_CCMR1_OC2PE; // CH2
 800058e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000598:	f443 43d0 	orr.w	r3, r3, #26624	@ 0x6800
 800059c:	6193      	str	r3, [r2, #24]
    TIM2->CCMR2 |= (6 << 4) | TIM_CCMR2_OC3PE;  // CH3
 800059e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005a2:	69db      	ldr	r3, [r3, #28]
 80005a4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80005a8:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 80005ac:	61d3      	str	r3, [r2, #28]
    TIM2->CCMR2 |= (6 << 12) | TIM_CCMR2_OC4PE; // CH4
 80005ae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005b2:	69db      	ldr	r3, [r3, #28]
 80005b4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80005b8:	f443 43d0 	orr.w	r3, r3, #26624	@ 0x6800
 80005bc:	61d3      	str	r3, [r2, #28]

    // Enable outputs
    TIM2->CCER |= TIM_CCER_CC1E | TIM_CCER_CC2E |
 80005be:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005c2:	6a1b      	ldr	r3, [r3, #32]
 80005c4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80005c8:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 80005cc:	f043 0311 	orr.w	r3, r3, #17
 80005d0:	6213      	str	r3, [r2, #32]
                  TIM_CCER_CC3E | TIM_CCER_CC4E;

    // Force update
    TIM2->EGR |= TIM_EGR_UG;
 80005d2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005d6:	695b      	ldr	r3, [r3, #20]
 80005d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	6153      	str	r3, [r2, #20]

    // Set duty cycle = 0
    TIM2->CCR1 = 0;
 80005e2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005e6:	2200      	movs	r2, #0
 80005e8:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2->CCR2 = 0;
 80005ea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005ee:	2200      	movs	r2, #0
 80005f0:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM2->CCR3 = 0;
 80005f2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005f6:	2200      	movs	r2, #0
 80005f8:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2->CCR4 = 0;
 80005fa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005fe:	2200      	movs	r2, #0
 8000600:	641a      	str	r2, [r3, #64]	@ 0x40

    // Enable counter
    TIM2->CR1 |= TIM_CR1_CEN;
 8000602:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	6013      	str	r3, [r2, #0]
}
 8000612:	bf00      	nop
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	40023800 	.word	0x40023800

08000620 <TIM3_Init>:

void TIM3_Init(void) {
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000624:	4b24      	ldr	r3, [pc, #144]	@ (80006b8 <TIM3_Init+0x98>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000628:	4a23      	ldr	r2, [pc, #140]	@ (80006b8 <TIM3_Init+0x98>)
 800062a:	f043 0302 	orr.w	r3, r3, #2
 800062e:	6413      	str	r3, [r2, #64]	@ 0x40
    TIM3->PSC = 3;
 8000630:	4b22      	ldr	r3, [pc, #136]	@ (80006bc <TIM3_Init+0x9c>)
 8000632:	2203      	movs	r2, #3
 8000634:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM3->ARR = 1000;
 8000636:	4b21      	ldr	r3, [pc, #132]	@ (80006bc <TIM3_Init+0x9c>)
 8000638:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800063c:	62da      	str	r2, [r3, #44]	@ 0x2c

    TIM3->CCMR1 |= (6 << 4) | TIM_CCMR1_OC1PE;
 800063e:	4b1f      	ldr	r3, [pc, #124]	@ (80006bc <TIM3_Init+0x9c>)
 8000640:	699b      	ldr	r3, [r3, #24]
 8000642:	4a1e      	ldr	r2, [pc, #120]	@ (80006bc <TIM3_Init+0x9c>)
 8000644:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 8000648:	6193      	str	r3, [r2, #24]
    TIM3->CCMR1 |= (6 << 12) | TIM_CCMR1_OC2PE;
 800064a:	4b1c      	ldr	r3, [pc, #112]	@ (80006bc <TIM3_Init+0x9c>)
 800064c:	699b      	ldr	r3, [r3, #24]
 800064e:	4a1b      	ldr	r2, [pc, #108]	@ (80006bc <TIM3_Init+0x9c>)
 8000650:	f443 43d0 	orr.w	r3, r3, #26624	@ 0x6800
 8000654:	6193      	str	r3, [r2, #24]
    TIM3->CCMR2 |= (6 << 4) | TIM_CCMR2_OC3PE;
 8000656:	4b19      	ldr	r3, [pc, #100]	@ (80006bc <TIM3_Init+0x9c>)
 8000658:	69db      	ldr	r3, [r3, #28]
 800065a:	4a18      	ldr	r2, [pc, #96]	@ (80006bc <TIM3_Init+0x9c>)
 800065c:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 8000660:	61d3      	str	r3, [r2, #28]
    TIM3->CCMR2 |= (6 << 12) | TIM_CCMR2_OC4PE;
 8000662:	4b16      	ldr	r3, [pc, #88]	@ (80006bc <TIM3_Init+0x9c>)
 8000664:	69db      	ldr	r3, [r3, #28]
 8000666:	4a15      	ldr	r2, [pc, #84]	@ (80006bc <TIM3_Init+0x9c>)
 8000668:	f443 43d0 	orr.w	r3, r3, #26624	@ 0x6800
 800066c:	61d3      	str	r3, [r2, #28]

    TIM3->CCER |= TIM_CCER_CC1E | TIM_CCER_CC2E |
 800066e:	4b13      	ldr	r3, [pc, #76]	@ (80006bc <TIM3_Init+0x9c>)
 8000670:	6a1b      	ldr	r3, [r3, #32]
 8000672:	4a12      	ldr	r2, [pc, #72]	@ (80006bc <TIM3_Init+0x9c>)
 8000674:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 8000678:	f043 0311 	orr.w	r3, r3, #17
 800067c:	6213      	str	r3, [r2, #32]
                  TIM_CCER_CC3E | TIM_CCER_CC4E;

    TIM3->EGR |= TIM_EGR_UG;
 800067e:	4b0f      	ldr	r3, [pc, #60]	@ (80006bc <TIM3_Init+0x9c>)
 8000680:	695b      	ldr	r3, [r3, #20]
 8000682:	4a0e      	ldr	r2, [pc, #56]	@ (80006bc <TIM3_Init+0x9c>)
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	6153      	str	r3, [r2, #20]

    TIM3->CCR1 = 0;
 800068a:	4b0c      	ldr	r3, [pc, #48]	@ (80006bc <TIM3_Init+0x9c>)
 800068c:	2200      	movs	r2, #0
 800068e:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3->CCR2 = 0;
 8000690:	4b0a      	ldr	r3, [pc, #40]	@ (80006bc <TIM3_Init+0x9c>)
 8000692:	2200      	movs	r2, #0
 8000694:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3->CCR3 = 0;
 8000696:	4b09      	ldr	r3, [pc, #36]	@ (80006bc <TIM3_Init+0x9c>)
 8000698:	2200      	movs	r2, #0
 800069a:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM3->CCR4 = 0;
 800069c:	4b07      	ldr	r3, [pc, #28]	@ (80006bc <TIM3_Init+0x9c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	641a      	str	r2, [r3, #64]	@ 0x40

    TIM3->CR1 |= TIM_CR1_CEN;
 80006a2:	4b06      	ldr	r3, [pc, #24]	@ (80006bc <TIM3_Init+0x9c>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4a05      	ldr	r2, [pc, #20]	@ (80006bc <TIM3_Init+0x9c>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	6013      	str	r3, [r2, #0]
}
 80006ae:	bf00      	nop
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40000400 	.word	0x40000400

080006c0 <TIM4_Init>:

void TIM4_Init(void) {
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 80006c4:	4b24      	ldr	r3, [pc, #144]	@ (8000758 <TIM4_Init+0x98>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c8:	4a23      	ldr	r2, [pc, #140]	@ (8000758 <TIM4_Init+0x98>)
 80006ca:	f043 0304 	orr.w	r3, r3, #4
 80006ce:	6413      	str	r3, [r2, #64]	@ 0x40
    TIM4->PSC = 3;
 80006d0:	4b22      	ldr	r3, [pc, #136]	@ (800075c <TIM4_Init+0x9c>)
 80006d2:	2203      	movs	r2, #3
 80006d4:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM4->ARR = 1000;
 80006d6:	4b21      	ldr	r3, [pc, #132]	@ (800075c <TIM4_Init+0x9c>)
 80006d8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80006dc:	62da      	str	r2, [r3, #44]	@ 0x2c

    TIM4->CCMR1 |= (6 << 4) | TIM_CCMR1_OC1PE;
 80006de:	4b1f      	ldr	r3, [pc, #124]	@ (800075c <TIM4_Init+0x9c>)
 80006e0:	699b      	ldr	r3, [r3, #24]
 80006e2:	4a1e      	ldr	r2, [pc, #120]	@ (800075c <TIM4_Init+0x9c>)
 80006e4:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 80006e8:	6193      	str	r3, [r2, #24]
    TIM4->CCMR1 |= (6 << 12) | TIM_CCMR1_OC2PE;
 80006ea:	4b1c      	ldr	r3, [pc, #112]	@ (800075c <TIM4_Init+0x9c>)
 80006ec:	699b      	ldr	r3, [r3, #24]
 80006ee:	4a1b      	ldr	r2, [pc, #108]	@ (800075c <TIM4_Init+0x9c>)
 80006f0:	f443 43d0 	orr.w	r3, r3, #26624	@ 0x6800
 80006f4:	6193      	str	r3, [r2, #24]
    TIM4->CCMR2 |= (6 << 4) | TIM_CCMR2_OC3PE;
 80006f6:	4b19      	ldr	r3, [pc, #100]	@ (800075c <TIM4_Init+0x9c>)
 80006f8:	69db      	ldr	r3, [r3, #28]
 80006fa:	4a18      	ldr	r2, [pc, #96]	@ (800075c <TIM4_Init+0x9c>)
 80006fc:	f043 0368 	orr.w	r3, r3, #104	@ 0x68
 8000700:	61d3      	str	r3, [r2, #28]
    TIM4->CCMR2 |= (6 << 12) | TIM_CCMR2_OC4PE;
 8000702:	4b16      	ldr	r3, [pc, #88]	@ (800075c <TIM4_Init+0x9c>)
 8000704:	69db      	ldr	r3, [r3, #28]
 8000706:	4a15      	ldr	r2, [pc, #84]	@ (800075c <TIM4_Init+0x9c>)
 8000708:	f443 43d0 	orr.w	r3, r3, #26624	@ 0x6800
 800070c:	61d3      	str	r3, [r2, #28]

    TIM4->CCER |= TIM_CCER_CC1E | TIM_CCER_CC2E |
 800070e:	4b13      	ldr	r3, [pc, #76]	@ (800075c <TIM4_Init+0x9c>)
 8000710:	6a1b      	ldr	r3, [r3, #32]
 8000712:	4a12      	ldr	r2, [pc, #72]	@ (800075c <TIM4_Init+0x9c>)
 8000714:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 8000718:	f043 0311 	orr.w	r3, r3, #17
 800071c:	6213      	str	r3, [r2, #32]
                  TIM_CCER_CC3E | TIM_CCER_CC4E;

    TIM4->EGR |= TIM_EGR_UG;
 800071e:	4b0f      	ldr	r3, [pc, #60]	@ (800075c <TIM4_Init+0x9c>)
 8000720:	695b      	ldr	r3, [r3, #20]
 8000722:	4a0e      	ldr	r2, [pc, #56]	@ (800075c <TIM4_Init+0x9c>)
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	6153      	str	r3, [r2, #20]

    TIM4->CCR1 = 0;
 800072a:	4b0c      	ldr	r3, [pc, #48]	@ (800075c <TIM4_Init+0x9c>)
 800072c:	2200      	movs	r2, #0
 800072e:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM4->CCR2 = 0;
 8000730:	4b0a      	ldr	r3, [pc, #40]	@ (800075c <TIM4_Init+0x9c>)
 8000732:	2200      	movs	r2, #0
 8000734:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM4->CCR3 = 0;
 8000736:	4b09      	ldr	r3, [pc, #36]	@ (800075c <TIM4_Init+0x9c>)
 8000738:	2200      	movs	r2, #0
 800073a:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM4->CCR4 = 0;
 800073c:	4b07      	ldr	r3, [pc, #28]	@ (800075c <TIM4_Init+0x9c>)
 800073e:	2200      	movs	r2, #0
 8000740:	641a      	str	r2, [r3, #64]	@ 0x40

    TIM4->CR1 |= TIM_CR1_CEN;
 8000742:	4b06      	ldr	r3, [pc, #24]	@ (800075c <TIM4_Init+0x9c>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a05      	ldr	r2, [pc, #20]	@ (800075c <TIM4_Init+0x9c>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	6013      	str	r3, [r2, #0]
}
 800074e:	bf00      	nop
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr
 8000758:	40023800 	.word	0x40023800
 800075c:	40000800 	.word	0x40000800

08000760 <GPIO_Init>:

//======================================================
//GPIO INITIALIZE
//======================================================
void GPIO_Init(void) {
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
    // Enable GPIOA and GPIOB clock
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000764:	4b66      	ldr	r3, [pc, #408]	@ (8000900 <GPIO_Init+0x1a0>)
 8000766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000768:	4a65      	ldr	r2, [pc, #404]	@ (8000900 <GPIO_Init+0x1a0>)
 800076a:	f043 0301 	orr.w	r3, r3, #1
 800076e:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000770:	4b63      	ldr	r3, [pc, #396]	@ (8000900 <GPIO_Init+0x1a0>)
 8000772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000774:	4a62      	ldr	r2, [pc, #392]	@ (8000900 <GPIO_Init+0x1a0>)
 8000776:	f043 0302 	orr.w	r3, r3, #2
 800077a:	6313      	str	r3, [r2, #48]	@ 0x30


    // SET TIMER PIN FOR Alternate Function
    // PA0â€“PA3 (TIM2_CH1â€“CH4)
    GPIOA->MODER &= ~(0xFF << (0 * 2));          // Clear mode bits for PA0â€“PA3
 800077c:	4b61      	ldr	r3, [pc, #388]	@ (8000904 <GPIO_Init+0x1a4>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a60      	ldr	r2, [pc, #384]	@ (8000904 <GPIO_Init+0x1a4>)
 8000782:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000786:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (0xAA << (0 * 2));          // Set mode = AF (10)
 8000788:	4b5e      	ldr	r3, [pc, #376]	@ (8000904 <GPIO_Init+0x1a4>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a5d      	ldr	r2, [pc, #372]	@ (8000904 <GPIO_Init+0x1a4>)
 800078e:	f043 03aa 	orr.w	r3, r3, #170	@ 0xaa
 8000792:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= ~0xFFFF;                    // Clear AFRL[15:0]
 8000794:	4b5b      	ldr	r3, [pc, #364]	@ (8000904 <GPIO_Init+0x1a4>)
 8000796:	6a1b      	ldr	r3, [r3, #32]
 8000798:	4a5a      	ldr	r2, [pc, #360]	@ (8000904 <GPIO_Init+0x1a4>)
 800079a:	0c1b      	lsrs	r3, r3, #16
 800079c:	041b      	lsls	r3, r3, #16
 800079e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (0x1111 << 0);              // AF1 for PA0â€“PA3
 80007a0:	4b58      	ldr	r3, [pc, #352]	@ (8000904 <GPIO_Init+0x1a4>)
 80007a2:	6a1b      	ldr	r3, [r3, #32]
 80007a4:	4a57      	ldr	r2, [pc, #348]	@ (8000904 <GPIO_Init+0x1a4>)
 80007a6:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 80007aa:	f043 0311 	orr.w	r3, r3, #17
 80007ae:	6213      	str	r3, [r2, #32]

    // PA6â€“PA7 (TIM3_CH1â€“CH2), AF2
    GPIOA->MODER &= ~(0xF << (6 * 2));
 80007b0:	4b54      	ldr	r3, [pc, #336]	@ (8000904 <GPIO_Init+0x1a4>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a53      	ldr	r2, [pc, #332]	@ (8000904 <GPIO_Init+0x1a4>)
 80007b6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80007ba:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (0xA << (6 * 2));
 80007bc:	4b51      	ldr	r3, [pc, #324]	@ (8000904 <GPIO_Init+0x1a4>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a50      	ldr	r2, [pc, #320]	@ (8000904 <GPIO_Init+0x1a4>)
 80007c2:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 80007c6:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= ~(0xFF << (6 * 4));
 80007c8:	4b4e      	ldr	r3, [pc, #312]	@ (8000904 <GPIO_Init+0x1a4>)
 80007ca:	6a1b      	ldr	r3, [r3, #32]
 80007cc:	4a4d      	ldr	r2, [pc, #308]	@ (8000904 <GPIO_Init+0x1a4>)
 80007ce:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80007d2:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |=  (0x22 << (6 * 4));
 80007d4:	4b4b      	ldr	r3, [pc, #300]	@ (8000904 <GPIO_Init+0x1a4>)
 80007d6:	6a1b      	ldr	r3, [r3, #32]
 80007d8:	4a4a      	ldr	r2, [pc, #296]	@ (8000904 <GPIO_Init+0x1a4>)
 80007da:	f043 5308 	orr.w	r3, r3, #570425344	@ 0x22000000
 80007de:	6213      	str	r3, [r2, #32]

    // PB0â€“PB1 (TIM3_CH3â€“CH4), AF2
    GPIOB->MODER &= ~(0xF << (0 * 2));
 80007e0:	4b49      	ldr	r3, [pc, #292]	@ (8000908 <GPIO_Init+0x1a8>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a48      	ldr	r2, [pc, #288]	@ (8000908 <GPIO_Init+0x1a8>)
 80007e6:	f023 030f 	bic.w	r3, r3, #15
 80007ea:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (0xA << (0 * 2));
 80007ec:	4b46      	ldr	r3, [pc, #280]	@ (8000908 <GPIO_Init+0x1a8>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a45      	ldr	r2, [pc, #276]	@ (8000908 <GPIO_Init+0x1a8>)
 80007f2:	f043 030a 	orr.w	r3, r3, #10
 80007f6:	6013      	str	r3, [r2, #0]
    GPIOB->AFR[0] &= ~(0xFF << (0 * 4));
 80007f8:	4b43      	ldr	r3, [pc, #268]	@ (8000908 <GPIO_Init+0x1a8>)
 80007fa:	6a1b      	ldr	r3, [r3, #32]
 80007fc:	4a42      	ldr	r2, [pc, #264]	@ (8000908 <GPIO_Init+0x1a8>)
 80007fe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000802:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[0] |=  (0x22 << (0 * 4));
 8000804:	4b40      	ldr	r3, [pc, #256]	@ (8000908 <GPIO_Init+0x1a8>)
 8000806:	6a1b      	ldr	r3, [r3, #32]
 8000808:	4a3f      	ldr	r2, [pc, #252]	@ (8000908 <GPIO_Init+0x1a8>)
 800080a:	f043 0322 	orr.w	r3, r3, #34	@ 0x22
 800080e:	6213      	str	r3, [r2, #32]

    // PB6â€“PB9 (TIM4_CH1â€“CH4), AF2
    GPIOB->MODER &= ~(0xFF << (6 * 2));
 8000810:	4b3d      	ldr	r3, [pc, #244]	@ (8000908 <GPIO_Init+0x1a8>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a3c      	ldr	r2, [pc, #240]	@ (8000908 <GPIO_Init+0x1a8>)
 8000816:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 800081a:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (0xAA << (6 * 2));
 800081c:	4b3a      	ldr	r3, [pc, #232]	@ (8000908 <GPIO_Init+0x1a8>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a39      	ldr	r2, [pc, #228]	@ (8000908 <GPIO_Init+0x1a8>)
 8000822:	f443 232a 	orr.w	r3, r3, #696320	@ 0xaa000
 8000826:	6013      	str	r3, [r2, #0]

    GPIOB->AFR[0] &= ~((0xF << (6 * 4)) | (0xF << (7 * 4)));
 8000828:	4b37      	ldr	r3, [pc, #220]	@ (8000908 <GPIO_Init+0x1a8>)
 800082a:	6a1b      	ldr	r3, [r3, #32]
 800082c:	4a36      	ldr	r2, [pc, #216]	@ (8000908 <GPIO_Init+0x1a8>)
 800082e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8000832:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[0] |=  ((0x2 << (6 * 4)) | (0x2 << (7 * 4)));
 8000834:	4b34      	ldr	r3, [pc, #208]	@ (8000908 <GPIO_Init+0x1a8>)
 8000836:	6a1b      	ldr	r3, [r3, #32]
 8000838:	4a33      	ldr	r2, [pc, #204]	@ (8000908 <GPIO_Init+0x1a8>)
 800083a:	f043 5308 	orr.w	r3, r3, #570425344	@ 0x22000000
 800083e:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[1] &= ~((0xF << (0 * 4)) | (0xF << (1 * 4)));
 8000840:	4b31      	ldr	r3, [pc, #196]	@ (8000908 <GPIO_Init+0x1a8>)
 8000842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000844:	4a30      	ldr	r2, [pc, #192]	@ (8000908 <GPIO_Init+0x1a8>)
 8000846:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800084a:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->AFR[1] |=  ((0x2 << (0 * 4)) | (0x2 << (1 * 4)));
 800084c:	4b2e      	ldr	r3, [pc, #184]	@ (8000908 <GPIO_Init+0x1a8>)
 800084e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000850:	4a2d      	ldr	r2, [pc, #180]	@ (8000908 <GPIO_Init+0x1a8>)
 8000852:	f043 0322 	orr.w	r3, r3, #34	@ 0x22
 8000856:	6253      	str	r3, [r2, #36]	@ 0x24


    // SET INPUT PIN FOR HALL SENSOR ( PA5 6 7)
    GPIOA->MODER &= ~(0b11 << (5 * 2));  // Clear PA5
 8000858:	4b2a      	ldr	r3, [pc, #168]	@ (8000904 <GPIO_Init+0x1a4>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a29      	ldr	r2, [pc, #164]	@ (8000904 <GPIO_Init+0x1a4>)
 800085e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000862:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~(0b11 << (6 * 2));  // Clear PA6
 8000864:	4b27      	ldr	r3, [pc, #156]	@ (8000904 <GPIO_Init+0x1a4>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a26      	ldr	r2, [pc, #152]	@ (8000904 <GPIO_Init+0x1a4>)
 800086a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800086e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~(0b11 << (7 * 2));  // Clear PA7
 8000870:	4b24      	ldr	r3, [pc, #144]	@ (8000904 <GPIO_Init+0x1a4>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a23      	ldr	r2, [pc, #140]	@ (8000904 <GPIO_Init+0x1a4>)
 8000876:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800087a:	6013      	str	r3, [r2, #0]

    GPIOA->PUPDR &= ~(0b11 << (5 * 2));
 800087c:	4b21      	ldr	r3, [pc, #132]	@ (8000904 <GPIO_Init+0x1a4>)
 800087e:	68db      	ldr	r3, [r3, #12]
 8000880:	4a20      	ldr	r2, [pc, #128]	@ (8000904 <GPIO_Init+0x1a4>)
 8000882:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000886:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR |=  (0b01 << (5 * 2));  // Pull-up cho PA5
 8000888:	4b1e      	ldr	r3, [pc, #120]	@ (8000904 <GPIO_Init+0x1a4>)
 800088a:	68db      	ldr	r3, [r3, #12]
 800088c:	4a1d      	ldr	r2, [pc, #116]	@ (8000904 <GPIO_Init+0x1a4>)
 800088e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000892:	60d3      	str	r3, [r2, #12]

    GPIOA->PUPDR &= ~(0b11 << (6 * 2));
 8000894:	4b1b      	ldr	r3, [pc, #108]	@ (8000904 <GPIO_Init+0x1a4>)
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	4a1a      	ldr	r2, [pc, #104]	@ (8000904 <GPIO_Init+0x1a4>)
 800089a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800089e:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR |=  (0b01 << (6 * 2));  // Pull-up cho PA6
 80008a0:	4b18      	ldr	r3, [pc, #96]	@ (8000904 <GPIO_Init+0x1a4>)
 80008a2:	68db      	ldr	r3, [r3, #12]
 80008a4:	4a17      	ldr	r2, [pc, #92]	@ (8000904 <GPIO_Init+0x1a4>)
 80008a6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80008aa:	60d3      	str	r3, [r2, #12]

    GPIOA->PUPDR &= ~(0b11 << (7 * 2));
 80008ac:	4b15      	ldr	r3, [pc, #84]	@ (8000904 <GPIO_Init+0x1a4>)
 80008ae:	68db      	ldr	r3, [r3, #12]
 80008b0:	4a14      	ldr	r2, [pc, #80]	@ (8000904 <GPIO_Init+0x1a4>)
 80008b2:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008b6:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR |=  (0b01 << (7 * 2));  // Pull-up cho PA7
 80008b8:	4b12      	ldr	r3, [pc, #72]	@ (8000904 <GPIO_Init+0x1a4>)
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	4a11      	ldr	r2, [pc, #68]	@ (8000904 <GPIO_Init+0x1a4>)
 80008be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008c2:	60d3      	str	r3, [r2, #12]

    //SET PA9 (TX) vÃ  PA10 (RX) á»Ÿ AF7 FOR USART1
    GPIOA->MODER &= ~((0b11 << (9 * 2)) | (0b11 << (10 * 2))); // Clear
 80008c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000904 <GPIO_Init+0x1a4>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a0e      	ldr	r2, [pc, #56]	@ (8000904 <GPIO_Init+0x1a4>)
 80008ca:	f423 1370 	bic.w	r3, r3, #3932160	@ 0x3c0000
 80008ce:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  ((0b10 << (9 * 2)) | (0b10 << (10 * 2))); // AF mode
 80008d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000904 <GPIO_Init+0x1a4>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a0b      	ldr	r2, [pc, #44]	@ (8000904 <GPIO_Init+0x1a4>)
 80008d6:	f443 1320 	orr.w	r3, r3, #2621440	@ 0x280000
 80008da:	6013      	str	r3, [r2, #0]

    GPIOA->AFR[1] &= ~((0xF << (1 * 4)) | (0xF << (2 * 4)));   // Clear AFRH9/10
 80008dc:	4b09      	ldr	r3, [pc, #36]	@ (8000904 <GPIO_Init+0x1a4>)
 80008de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008e0:	4a08      	ldr	r2, [pc, #32]	@ (8000904 <GPIO_Init+0x1a4>)
 80008e2:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80008e6:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOA->AFR[1] |=  ((0x7 << (1 * 4)) | (0x7 << (2 * 4)));   // AF7 = USART1
 80008e8:	4b06      	ldr	r3, [pc, #24]	@ (8000904 <GPIO_Init+0x1a4>)
 80008ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008ec:	4a05      	ldr	r2, [pc, #20]	@ (8000904 <GPIO_Init+0x1a4>)
 80008ee:	f443 63ee 	orr.w	r3, r3, #1904	@ 0x770
 80008f2:	6253      	str	r3, [r2, #36]	@ 0x24

}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	40023800 	.word	0x40023800
 8000904:	40020000 	.word	0x40020000
 8000908:	40020400 	.word	0x40020400

0800090c <USART1_UART_Init>:

//======================================================
//UART INITIALIZE
//======================================================
void USART1_UART_Init(void) {
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN;  // Enable USART1 (náº±m trÃªn APB2)
 8000910:	4b0e      	ldr	r3, [pc, #56]	@ (800094c <USART1_UART_Init+0x40>)
 8000912:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000914:	4a0d      	ldr	r2, [pc, #52]	@ (800094c <USART1_UART_Init+0x40>)
 8000916:	f043 0310 	orr.w	r3, r3, #16
 800091a:	6453      	str	r3, [r2, #68]	@ 0x44

    USART1->CR1 = 0;  // Táº¯t USART trÆ°á»›c khi cáº¥u hÃ¬nh
 800091c:	4b0c      	ldr	r3, [pc, #48]	@ (8000950 <USART1_UART_Init+0x44>)
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]

    // Baudrate: vÃ­ dá»¥ 115200 vá»›i PCLK2 = 84MHz
    // USARTDIV = 84MHz / (16 * 115200) â‰ˆ 45.5625
    // Mantissa = 45, Fraction = 0.5625 * 16 â‰ˆ 9 â†’ BRR = 0x2D9
    USART1->BRR = (45 << 4) | 9;
 8000922:	4b0b      	ldr	r3, [pc, #44]	@ (8000950 <USART1_UART_Init+0x44>)
 8000924:	f240 22d9 	movw	r2, #729	@ 0x2d9
 8000928:	609a      	str	r2, [r3, #8]

    // 8-bit data, 1 stop bit, no parity, no flow control
    USART1->CR1 |= USART_CR1_TE | USART_CR1_RE;  // Enable TX + RX
 800092a:	4b09      	ldr	r3, [pc, #36]	@ (8000950 <USART1_UART_Init+0x44>)
 800092c:	68db      	ldr	r3, [r3, #12]
 800092e:	4a08      	ldr	r2, [pc, #32]	@ (8000950 <USART1_UART_Init+0x44>)
 8000930:	f043 030c 	orr.w	r3, r3, #12
 8000934:	60d3      	str	r3, [r2, #12]
    USART1->CR1 |= USART_CR1_UE;                 // Báº­t USART
 8000936:	4b06      	ldr	r3, [pc, #24]	@ (8000950 <USART1_UART_Init+0x44>)
 8000938:	68db      	ldr	r3, [r3, #12]
 800093a:	4a05      	ldr	r2, [pc, #20]	@ (8000950 <USART1_UART_Init+0x44>)
 800093c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000940:	60d3      	str	r3, [r2, #12]
}
 8000942:	bf00      	nop
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	40023800 	.word	0x40023800
 8000950:	40011000 	.word	0x40011000

08000954 <EXTI9_5_IRQHandler>:


//Interupted is called when HALL SENSOR got a change of data
//used to find the right hall sequence, and provide the next step for handleCommutation
void EXTI9_5_IRQHandler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
    bufferAdd(readHallSensor());
 8000958:	f7ff fd4c 	bl	80003f4 <readHallSensor>
 800095c:	4603      	mov	r3, r0
 800095e:	b2db      	uxtb	r3, r3
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff fc31 	bl	80001c8 <bufferAdd>

    EXTI->PR |= (1 << 5);
 8000966:	4b0a      	ldr	r3, [pc, #40]	@ (8000990 <EXTI9_5_IRQHandler+0x3c>)
 8000968:	695b      	ldr	r3, [r3, #20]
 800096a:	4a09      	ldr	r2, [pc, #36]	@ (8000990 <EXTI9_5_IRQHandler+0x3c>)
 800096c:	f043 0320 	orr.w	r3, r3, #32
 8000970:	6153      	str	r3, [r2, #20]
    EXTI->PR |= (1 << 6);
 8000972:	4b07      	ldr	r3, [pc, #28]	@ (8000990 <EXTI9_5_IRQHandler+0x3c>)
 8000974:	695b      	ldr	r3, [r3, #20]
 8000976:	4a06      	ldr	r2, [pc, #24]	@ (8000990 <EXTI9_5_IRQHandler+0x3c>)
 8000978:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800097c:	6153      	str	r3, [r2, #20]
    EXTI->PR |= (1 << 7);
 800097e:	4b04      	ldr	r3, [pc, #16]	@ (8000990 <EXTI9_5_IRQHandler+0x3c>)
 8000980:	695b      	ldr	r3, [r3, #20]
 8000982:	4a03      	ldr	r2, [pc, #12]	@ (8000990 <EXTI9_5_IRQHandler+0x3c>)
 8000984:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000988:	6153      	str	r3, [r2, #20]
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40013c00 	.word	0x40013c00

08000994 <BLDC_Start>:

//Function initialize the BLDC, by picking the first HALL sequence,
//or create 1 if its undefined
void BLDC_Start() {
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
    bufferAdd(readHallSensor());
 8000998:	f7ff fd2c 	bl	80003f4 <readHallSensor>
 800099c:	4603      	mov	r3, r0
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff fc11 	bl	80001c8 <bufferAdd>
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
	...

080009ac <main>:
//======================================================
//MAIN
//======================================================

int main(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  STM32_Init();
 80009b0:	f7ff fd62 	bl	8000478 <STM32_Init>
  BLDC_Start();
 80009b4:	f7ff ffee 	bl	8000994 <BLDC_Start>

  //Program loop
  while (1)
  {
	//Handling Buffers
	if(isBufferReady()) {
 80009b8:	f7ff fc2e 	bl	8000218 <isBufferReady>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d0fa      	beq.n	80009b8 <main+0xc>
		handleCommutation(bufferGet(), pwmVal);
 80009c2:	f7ff fc3d 	bl	8000240 <bufferGet>
 80009c6:	4603      	mov	r3, r0
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	4a03      	ldr	r2, [pc, #12]	@ (80009d8 <main+0x2c>)
 80009cc:	7812      	ldrb	r2, [r2, #0]
 80009ce:	4611      	mov	r1, r2
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff fc5f 	bl	8000294 <handleCommutation>
	if(isBufferReady()) {
 80009d6:	e7ef      	b.n	80009b8 <main+0xc>
 80009d8:	20000000 	.word	0x20000000

080009dc <Error_Handler>:

//======================================================
//ERROR HANDLER
//======================================================
void Error_Handler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
    printf("Error Handler invoked!\n");
 80009e0:	4802      	ldr	r0, [pc, #8]	@ (80009ec <Error_Handler+0x10>)
 80009e2:	f005 ffa5 	bl	8006930 <puts>
    while(1);
 80009e6:	bf00      	nop
 80009e8:	e7fd      	b.n	80009e6 <Error_Handler+0xa>
 80009ea:	bf00      	nop
 80009ec:	08007070 	.word	0x08007070

080009f0 <HAL_MspInit>:
#include "main.h"

void HAL_MspInit(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	4b10      	ldr	r3, [pc, #64]	@ (8000a3c <HAL_MspInit+0x4c>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009fe:	4a0f      	ldr	r2, [pc, #60]	@ (8000a3c <HAL_MspInit+0x4c>)
 8000a00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a04:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a06:	4b0d      	ldr	r3, [pc, #52]	@ (8000a3c <HAL_MspInit+0x4c>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	603b      	str	r3, [r7, #0]
 8000a16:	4b09      	ldr	r3, [pc, #36]	@ (8000a3c <HAL_MspInit+0x4c>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1a:	4a08      	ldr	r2, [pc, #32]	@ (8000a3c <HAL_MspInit+0x4c>)
 8000a1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a20:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a22:	4b06      	ldr	r3, [pc, #24]	@ (8000a3c <HAL_MspInit+0x4c>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a2a:	603b      	str	r3, [r7, #0]
 8000a2c:	683b      	ldr	r3, [r7, #0]
}
 8000a2e:	bf00      	nop
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	40023800 	.word	0x40023800

08000a40 <SysTick_Handler>:
#include "stm32f4xx_it.h"

extern PCD_HandleTypeDef hpcd_USB_OTG_FS;

void SysTick_Handler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8000a44:	f000 f93e 	bl	8000cc4 <HAL_IncTick>
}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <OTG_FS_IRQHandler>:

void OTG_FS_IRQHandler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a50:	4802      	ldr	r0, [pc, #8]	@ (8000a5c <OTG_FS_IRQHandler+0x10>)
 8000a52:	f000 fd6d 	bl	8001530 <HAL_PCD_IRQHandler>
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20001668 	.word	0x20001668

08000a60 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	60f8      	str	r0, [r7, #12]
 8000a68:	60b9      	str	r1, [r7, #8]
 8000a6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]
 8000a70:	e00a      	b.n	8000a88 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a72:	f3af 8000 	nop.w
 8000a76:	4601      	mov	r1, r0
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	1c5a      	adds	r2, r3, #1
 8000a7c:	60ba      	str	r2, [r7, #8]
 8000a7e:	b2ca      	uxtb	r2, r1
 8000a80:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	3301      	adds	r3, #1
 8000a86:	617b      	str	r3, [r7, #20]
 8000a88:	697a      	ldr	r2, [r7, #20]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	dbf0      	blt.n	8000a72 <_read+0x12>
  }

  return len;
 8000a90:	687b      	ldr	r3, [r7, #4]
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3718      	adds	r7, #24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b086      	sub	sp, #24
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	60f8      	str	r0, [r7, #12]
 8000aa2:	60b9      	str	r1, [r7, #8]
 8000aa4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	617b      	str	r3, [r7, #20]
 8000aaa:	e009      	b.n	8000ac0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	1c5a      	adds	r2, r3, #1
 8000ab0:	60ba      	str	r2, [r7, #8]
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	3301      	adds	r3, #1
 8000abe:	617b      	str	r3, [r7, #20]
 8000ac0:	697a      	ldr	r2, [r7, #20]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	dbf1      	blt.n	8000aac <_write+0x12>
  }
  return len;
 8000ac8:	687b      	ldr	r3, [r7, #4]
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3718      	adds	r7, #24
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <_close>:

int _close(int file)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	b083      	sub	sp, #12
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ada:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr

08000aea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000aea:	b480      	push	{r7}
 8000aec:	b083      	sub	sp, #12
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
 8000af2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000afa:	605a      	str	r2, [r3, #4]
  return 0;
 8000afc:	2300      	movs	r3, #0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr

08000b0a <_isatty>:

int _isatty(int file)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	b083      	sub	sp, #12
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b12:	2301      	movs	r3, #1
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3714      	adds	r7, #20
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
	...

08000b3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b44:	4a14      	ldr	r2, [pc, #80]	@ (8000b98 <_sbrk+0x5c>)
 8000b46:	4b15      	ldr	r3, [pc, #84]	@ (8000b9c <_sbrk+0x60>)
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b50:	4b13      	ldr	r3, [pc, #76]	@ (8000ba0 <_sbrk+0x64>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d102      	bne.n	8000b5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b58:	4b11      	ldr	r3, [pc, #68]	@ (8000ba0 <_sbrk+0x64>)
 8000b5a:	4a12      	ldr	r2, [pc, #72]	@ (8000ba4 <_sbrk+0x68>)
 8000b5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b5e:	4b10      	ldr	r3, [pc, #64]	@ (8000ba0 <_sbrk+0x64>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4413      	add	r3, r2
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d207      	bcs.n	8000b7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b6c:	f006 f80e 	bl	8006b8c <__errno>
 8000b70:	4603      	mov	r3, r0
 8000b72:	220c      	movs	r2, #12
 8000b74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b76:	f04f 33ff 	mov.w	r3, #4294967295
 8000b7a:	e009      	b.n	8000b90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b7c:	4b08      	ldr	r3, [pc, #32]	@ (8000ba0 <_sbrk+0x64>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b82:	4b07      	ldr	r3, [pc, #28]	@ (8000ba0 <_sbrk+0x64>)
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4413      	add	r3, r2
 8000b8a:	4a05      	ldr	r2, [pc, #20]	@ (8000ba0 <_sbrk+0x64>)
 8000b8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3718      	adds	r7, #24
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20020000 	.word	0x20020000
 8000b9c:	00000400 	.word	0x00000400
 8000ba0:	20000180 	.word	0x20000180
 8000ba4:	20001eb8 	.word	0x20001eb8

08000ba8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bac:	4b06      	ldr	r3, [pc, #24]	@ (8000bc8 <SystemInit+0x20>)
 8000bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bb2:	4a05      	ldr	r2, [pc, #20]	@ (8000bc8 <SystemInit+0x20>)
 8000bb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bcc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c04 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000bd0:	f7ff ffea 	bl	8000ba8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bd4:	480c      	ldr	r0, [pc, #48]	@ (8000c08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bd6:	490d      	ldr	r1, [pc, #52]	@ (8000c0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bd8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bdc:	e002      	b.n	8000be4 <LoopCopyDataInit>

08000bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be2:	3304      	adds	r3, #4

08000be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be8:	d3f9      	bcc.n	8000bde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bea:	4a0a      	ldr	r2, [pc, #40]	@ (8000c14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bec:	4c0a      	ldr	r4, [pc, #40]	@ (8000c18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf0:	e001      	b.n	8000bf6 <LoopFillZerobss>

08000bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf4:	3204      	adds	r2, #4

08000bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf8:	d3fb      	bcc.n	8000bf2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bfa:	f005 ffcd 	bl	8006b98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bfe:	f7ff fed5 	bl	80009ac <main>
  bx  lr    
 8000c02:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c0c:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 8000c10:	080070e0 	.word	0x080070e0
  ldr r2, =_sbss
 8000c14:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 8000c18:	20001eb8 	.word	0x20001eb8

08000c1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c1c:	e7fe      	b.n	8000c1c <ADC_IRQHandler>
	...

08000c20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c24:	4b0e      	ldr	r3, [pc, #56]	@ (8000c60 <HAL_Init+0x40>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a0d      	ldr	r2, [pc, #52]	@ (8000c60 <HAL_Init+0x40>)
 8000c2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c30:	4b0b      	ldr	r3, [pc, #44]	@ (8000c60 <HAL_Init+0x40>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a0a      	ldr	r2, [pc, #40]	@ (8000c60 <HAL_Init+0x40>)
 8000c36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c3c:	4b08      	ldr	r3, [pc, #32]	@ (8000c60 <HAL_Init+0x40>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a07      	ldr	r2, [pc, #28]	@ (8000c60 <HAL_Init+0x40>)
 8000c42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c48:	2003      	movs	r0, #3
 8000c4a:	f000 f94f 	bl	8000eec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c4e:	200f      	movs	r0, #15
 8000c50:	f000 f808 	bl	8000c64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c54:	f7ff fecc 	bl	80009f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40023c00 	.word	0x40023c00

08000c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c6c:	4b12      	ldr	r3, [pc, #72]	@ (8000cb8 <HAL_InitTick+0x54>)
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	4b12      	ldr	r3, [pc, #72]	@ (8000cbc <HAL_InitTick+0x58>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	4619      	mov	r1, r3
 8000c76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c82:	4618      	mov	r0, r3
 8000c84:	f000 f967 	bl	8000f56 <HAL_SYSTICK_Config>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e00e      	b.n	8000cb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2b0f      	cmp	r3, #15
 8000c96:	d80a      	bhi.n	8000cae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	6879      	ldr	r1, [r7, #4]
 8000c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca0:	f000 f92f 	bl	8000f02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ca4:	4a06      	ldr	r2, [pc, #24]	@ (8000cc0 <HAL_InitTick+0x5c>)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000caa:	2300      	movs	r3, #0
 8000cac:	e000      	b.n	8000cb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000004 	.word	0x20000004
 8000cbc:	2000000c 	.word	0x2000000c
 8000cc0:	20000008 	.word	0x20000008

08000cc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc8:	4b06      	ldr	r3, [pc, #24]	@ (8000ce4 <HAL_IncTick+0x20>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <HAL_IncTick+0x24>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	4a04      	ldr	r2, [pc, #16]	@ (8000ce8 <HAL_IncTick+0x24>)
 8000cd6:	6013      	str	r3, [r2, #0]
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	2000000c 	.word	0x2000000c
 8000ce8:	20000184 	.word	0x20000184

08000cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf0:	4b03      	ldr	r3, [pc, #12]	@ (8000d00 <HAL_GetTick+0x14>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	20000184 	.word	0x20000184

08000d04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d0c:	f7ff ffee 	bl	8000cec <HAL_GetTick>
 8000d10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d1c:	d005      	beq.n	8000d2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d48 <HAL_Delay+0x44>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	461a      	mov	r2, r3
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	4413      	add	r3, r2
 8000d28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d2a:	bf00      	nop
 8000d2c:	f7ff ffde 	bl	8000cec <HAL_GetTick>
 8000d30:	4602      	mov	r2, r0
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	68fa      	ldr	r2, [r7, #12]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d8f7      	bhi.n	8000d2c <HAL_Delay+0x28>
  {
  }
}
 8000d3c:	bf00      	nop
 8000d3e:	bf00      	nop
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	2000000c 	.word	0x2000000c

08000d4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d90 <__NVIC_SetPriorityGrouping+0x44>)
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d62:	68ba      	ldr	r2, [r7, #8]
 8000d64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d68:	4013      	ands	r3, r2
 8000d6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d7e:	4a04      	ldr	r2, [pc, #16]	@ (8000d90 <__NVIC_SetPriorityGrouping+0x44>)
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	60d3      	str	r3, [r2, #12]
}
 8000d84:	bf00      	nop
 8000d86:	3714      	adds	r7, #20
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d98:	4b04      	ldr	r3, [pc, #16]	@ (8000dac <__NVIC_GetPriorityGrouping+0x18>)
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	0a1b      	lsrs	r3, r3, #8
 8000d9e:	f003 0307 	and.w	r3, r3, #7
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	db0b      	blt.n	8000dda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	f003 021f 	and.w	r2, r3, #31
 8000dc8:	4907      	ldr	r1, [pc, #28]	@ (8000de8 <__NVIC_EnableIRQ+0x38>)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	095b      	lsrs	r3, r3, #5
 8000dd0:	2001      	movs	r0, #1
 8000dd2:	fa00 f202 	lsl.w	r2, r0, r2
 8000dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dda:	bf00      	nop
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	e000e100 	.word	0xe000e100

08000dec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	6039      	str	r1, [r7, #0]
 8000df6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	db0a      	blt.n	8000e16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	490c      	ldr	r1, [pc, #48]	@ (8000e38 <__NVIC_SetPriority+0x4c>)
 8000e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0a:	0112      	lsls	r2, r2, #4
 8000e0c:	b2d2      	uxtb	r2, r2
 8000e0e:	440b      	add	r3, r1
 8000e10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e14:	e00a      	b.n	8000e2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	4908      	ldr	r1, [pc, #32]	@ (8000e3c <__NVIC_SetPriority+0x50>)
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	f003 030f 	and.w	r3, r3, #15
 8000e22:	3b04      	subs	r3, #4
 8000e24:	0112      	lsls	r2, r2, #4
 8000e26:	b2d2      	uxtb	r2, r2
 8000e28:	440b      	add	r3, r1
 8000e2a:	761a      	strb	r2, [r3, #24]
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	e000e100 	.word	0xe000e100
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b089      	sub	sp, #36	@ 0x24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	f1c3 0307 	rsb	r3, r3, #7
 8000e5a:	2b04      	cmp	r3, #4
 8000e5c:	bf28      	it	cs
 8000e5e:	2304      	movcs	r3, #4
 8000e60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	3304      	adds	r3, #4
 8000e66:	2b06      	cmp	r3, #6
 8000e68:	d902      	bls.n	8000e70 <NVIC_EncodePriority+0x30>
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	3b03      	subs	r3, #3
 8000e6e:	e000      	b.n	8000e72 <NVIC_EncodePriority+0x32>
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e74:	f04f 32ff 	mov.w	r2, #4294967295
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43da      	mvns	r2, r3
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	401a      	ands	r2, r3
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e88:	f04f 31ff 	mov.w	r1, #4294967295
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e92:	43d9      	mvns	r1, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e98:	4313      	orrs	r3, r2
         );
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3724      	adds	r7, #36	@ 0x24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
	...

08000ea8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000eb8:	d301      	bcc.n	8000ebe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e00f      	b.n	8000ede <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ebe:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee8 <SysTick_Config+0x40>)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ec6:	210f      	movs	r1, #15
 8000ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ecc:	f7ff ff8e 	bl	8000dec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed0:	4b05      	ldr	r3, [pc, #20]	@ (8000ee8 <SysTick_Config+0x40>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ed6:	4b04      	ldr	r3, [pc, #16]	@ (8000ee8 <SysTick_Config+0x40>)
 8000ed8:	2207      	movs	r2, #7
 8000eda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	e000e010 	.word	0xe000e010

08000eec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f7ff ff29 	bl	8000d4c <__NVIC_SetPriorityGrouping>
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b086      	sub	sp, #24
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	4603      	mov	r3, r0
 8000f0a:	60b9      	str	r1, [r7, #8]
 8000f0c:	607a      	str	r2, [r7, #4]
 8000f0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f14:	f7ff ff3e 	bl	8000d94 <__NVIC_GetPriorityGrouping>
 8000f18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	68b9      	ldr	r1, [r7, #8]
 8000f1e:	6978      	ldr	r0, [r7, #20]
 8000f20:	f7ff ff8e 	bl	8000e40 <NVIC_EncodePriority>
 8000f24:	4602      	mov	r2, r0
 8000f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f2a:	4611      	mov	r1, r2
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff ff5d 	bl	8000dec <__NVIC_SetPriority>
}
 8000f32:	bf00      	nop
 8000f34:	3718      	adds	r7, #24
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b082      	sub	sp, #8
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	4603      	mov	r3, r0
 8000f42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff ff31 	bl	8000db0 <__NVIC_EnableIRQ>
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b082      	sub	sp, #8
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f7ff ffa2 	bl	8000ea8 <SysTick_Config>
 8000f64:	4603      	mov	r3, r0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
	...

08000f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b089      	sub	sp, #36	@ 0x24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f86:	2300      	movs	r3, #0
 8000f88:	61fb      	str	r3, [r7, #28]
 8000f8a:	e16b      	b.n	8001264 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	697a      	ldr	r2, [r7, #20]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	f040 815a 	bne.w	800125e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f003 0303 	and.w	r3, r3, #3
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d005      	beq.n	8000fc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d130      	bne.n	8001024 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	2203      	movs	r2, #3
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	68da      	ldr	r2, [r3, #12]
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4013      	ands	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	091b      	lsrs	r3, r3, #4
 800100e:	f003 0201 	and.w	r2, r3, #1
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4313      	orrs	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f003 0303 	and.w	r3, r3, #3
 800102c:	2b03      	cmp	r3, #3
 800102e:	d017      	beq.n	8001060 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	2203      	movs	r2, #3
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	43db      	mvns	r3, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4013      	ands	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	689a      	ldr	r2, [r3, #8]
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f003 0303 	and.w	r3, r3, #3
 8001068:	2b02      	cmp	r3, #2
 800106a:	d123      	bne.n	80010b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	08da      	lsrs	r2, r3, #3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3208      	adds	r2, #8
 8001074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001078:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	f003 0307 	and.w	r3, r3, #7
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	220f      	movs	r2, #15
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	43db      	mvns	r3, r3
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4013      	ands	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	691a      	ldr	r2, [r3, #16]
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	08da      	lsrs	r2, r3, #3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	3208      	adds	r2, #8
 80010ae:	69b9      	ldr	r1, [r7, #24]
 80010b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	2203      	movs	r2, #3
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4013      	ands	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f003 0203 	and.w	r2, r3, #3
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4313      	orrs	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	f000 80b4 	beq.w	800125e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	4b60      	ldr	r3, [pc, #384]	@ (800127c <HAL_GPIO_Init+0x30c>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010fe:	4a5f      	ldr	r2, [pc, #380]	@ (800127c <HAL_GPIO_Init+0x30c>)
 8001100:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001104:	6453      	str	r3, [r2, #68]	@ 0x44
 8001106:	4b5d      	ldr	r3, [pc, #372]	@ (800127c <HAL_GPIO_Init+0x30c>)
 8001108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800110a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001112:	4a5b      	ldr	r2, [pc, #364]	@ (8001280 <HAL_GPIO_Init+0x310>)
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	089b      	lsrs	r3, r3, #2
 8001118:	3302      	adds	r3, #2
 800111a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800111e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	f003 0303 	and.w	r3, r3, #3
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	220f      	movs	r2, #15
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43db      	mvns	r3, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4013      	ands	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a52      	ldr	r2, [pc, #328]	@ (8001284 <HAL_GPIO_Init+0x314>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d02b      	beq.n	8001196 <HAL_GPIO_Init+0x226>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a51      	ldr	r2, [pc, #324]	@ (8001288 <HAL_GPIO_Init+0x318>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d025      	beq.n	8001192 <HAL_GPIO_Init+0x222>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a50      	ldr	r2, [pc, #320]	@ (800128c <HAL_GPIO_Init+0x31c>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d01f      	beq.n	800118e <HAL_GPIO_Init+0x21e>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a4f      	ldr	r2, [pc, #316]	@ (8001290 <HAL_GPIO_Init+0x320>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d019      	beq.n	800118a <HAL_GPIO_Init+0x21a>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a4e      	ldr	r2, [pc, #312]	@ (8001294 <HAL_GPIO_Init+0x324>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d013      	beq.n	8001186 <HAL_GPIO_Init+0x216>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a4d      	ldr	r2, [pc, #308]	@ (8001298 <HAL_GPIO_Init+0x328>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d00d      	beq.n	8001182 <HAL_GPIO_Init+0x212>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a4c      	ldr	r2, [pc, #304]	@ (800129c <HAL_GPIO_Init+0x32c>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d007      	beq.n	800117e <HAL_GPIO_Init+0x20e>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a4b      	ldr	r2, [pc, #300]	@ (80012a0 <HAL_GPIO_Init+0x330>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d101      	bne.n	800117a <HAL_GPIO_Init+0x20a>
 8001176:	2307      	movs	r3, #7
 8001178:	e00e      	b.n	8001198 <HAL_GPIO_Init+0x228>
 800117a:	2308      	movs	r3, #8
 800117c:	e00c      	b.n	8001198 <HAL_GPIO_Init+0x228>
 800117e:	2306      	movs	r3, #6
 8001180:	e00a      	b.n	8001198 <HAL_GPIO_Init+0x228>
 8001182:	2305      	movs	r3, #5
 8001184:	e008      	b.n	8001198 <HAL_GPIO_Init+0x228>
 8001186:	2304      	movs	r3, #4
 8001188:	e006      	b.n	8001198 <HAL_GPIO_Init+0x228>
 800118a:	2303      	movs	r3, #3
 800118c:	e004      	b.n	8001198 <HAL_GPIO_Init+0x228>
 800118e:	2302      	movs	r3, #2
 8001190:	e002      	b.n	8001198 <HAL_GPIO_Init+0x228>
 8001192:	2301      	movs	r3, #1
 8001194:	e000      	b.n	8001198 <HAL_GPIO_Init+0x228>
 8001196:	2300      	movs	r3, #0
 8001198:	69fa      	ldr	r2, [r7, #28]
 800119a:	f002 0203 	and.w	r2, r2, #3
 800119e:	0092      	lsls	r2, r2, #2
 80011a0:	4093      	lsls	r3, r2
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011a8:	4935      	ldr	r1, [pc, #212]	@ (8001280 <HAL_GPIO_Init+0x310>)
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	089b      	lsrs	r3, r3, #2
 80011ae:	3302      	adds	r3, #2
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011b6:	4b3b      	ldr	r3, [pc, #236]	@ (80012a4 <HAL_GPIO_Init+0x334>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	43db      	mvns	r3, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4013      	ands	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d003      	beq.n	80011da <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011da:	4a32      	ldr	r2, [pc, #200]	@ (80012a4 <HAL_GPIO_Init+0x334>)
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011e0:	4b30      	ldr	r3, [pc, #192]	@ (80012a4 <HAL_GPIO_Init+0x334>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d003      	beq.n	8001204 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	4313      	orrs	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001204:	4a27      	ldr	r2, [pc, #156]	@ (80012a4 <HAL_GPIO_Init+0x334>)
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800120a:	4b26      	ldr	r3, [pc, #152]	@ (80012a4 <HAL_GPIO_Init+0x334>)
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	43db      	mvns	r3, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4013      	ands	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d003      	beq.n	800122e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800122e:	4a1d      	ldr	r2, [pc, #116]	@ (80012a4 <HAL_GPIO_Init+0x334>)
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001234:	4b1b      	ldr	r3, [pc, #108]	@ (80012a4 <HAL_GPIO_Init+0x334>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d003      	beq.n	8001258 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	4313      	orrs	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001258:	4a12      	ldr	r2, [pc, #72]	@ (80012a4 <HAL_GPIO_Init+0x334>)
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	3301      	adds	r3, #1
 8001262:	61fb      	str	r3, [r7, #28]
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	2b0f      	cmp	r3, #15
 8001268:	f67f ae90 	bls.w	8000f8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800126c:	bf00      	nop
 800126e:	bf00      	nop
 8001270:	3724      	adds	r7, #36	@ 0x24
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	40023800 	.word	0x40023800
 8001280:	40013800 	.word	0x40013800
 8001284:	40020000 	.word	0x40020000
 8001288:	40020400 	.word	0x40020400
 800128c:	40020800 	.word	0x40020800
 8001290:	40020c00 	.word	0x40020c00
 8001294:	40021000 	.word	0x40021000
 8001298:	40021400 	.word	0x40021400
 800129c:	40021800 	.word	0x40021800
 80012a0:	40021c00 	.word	0x40021c00
 80012a4:	40013c00 	.word	0x40013c00

080012a8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af02      	add	r7, sp, #8
 80012ae:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d101      	bne.n	80012ba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e101      	b.n	80014be <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d106      	bne.n	80012da <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f004 feff 	bl	80060d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2203      	movs	r2, #3
 80012de:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80012e8:	d102      	bne.n	80012f0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f001 fb4c 	bl	8002992 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6818      	ldr	r0, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	7c1a      	ldrb	r2, [r3, #16]
 8001302:	f88d 2000 	strb.w	r2, [sp]
 8001306:	3304      	adds	r3, #4
 8001308:	cb0e      	ldmia	r3, {r1, r2, r3}
 800130a:	f001 fa2b 	bl	8002764 <USB_CoreInit>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d005      	beq.n	8001320 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2202      	movs	r2, #2
 8001318:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e0ce      	b.n	80014be <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2100      	movs	r1, #0
 8001326:	4618      	mov	r0, r3
 8001328:	f001 fb44 	bl	80029b4 <USB_SetCurrentMode>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d005      	beq.n	800133e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2202      	movs	r2, #2
 8001336:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e0bf      	b.n	80014be <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800133e:	2300      	movs	r3, #0
 8001340:	73fb      	strb	r3, [r7, #15]
 8001342:	e04a      	b.n	80013da <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001344:	7bfa      	ldrb	r2, [r7, #15]
 8001346:	6879      	ldr	r1, [r7, #4]
 8001348:	4613      	mov	r3, r2
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	4413      	add	r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	440b      	add	r3, r1
 8001352:	3315      	adds	r3, #21
 8001354:	2201      	movs	r2, #1
 8001356:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001358:	7bfa      	ldrb	r2, [r7, #15]
 800135a:	6879      	ldr	r1, [r7, #4]
 800135c:	4613      	mov	r3, r2
 800135e:	00db      	lsls	r3, r3, #3
 8001360:	4413      	add	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	440b      	add	r3, r1
 8001366:	3314      	adds	r3, #20
 8001368:	7bfa      	ldrb	r2, [r7, #15]
 800136a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800136c:	7bfa      	ldrb	r2, [r7, #15]
 800136e:	7bfb      	ldrb	r3, [r7, #15]
 8001370:	b298      	uxth	r0, r3
 8001372:	6879      	ldr	r1, [r7, #4]
 8001374:	4613      	mov	r3, r2
 8001376:	00db      	lsls	r3, r3, #3
 8001378:	4413      	add	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	440b      	add	r3, r1
 800137e:	332e      	adds	r3, #46	@ 0x2e
 8001380:	4602      	mov	r2, r0
 8001382:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001384:	7bfa      	ldrb	r2, [r7, #15]
 8001386:	6879      	ldr	r1, [r7, #4]
 8001388:	4613      	mov	r3, r2
 800138a:	00db      	lsls	r3, r3, #3
 800138c:	4413      	add	r3, r2
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	440b      	add	r3, r1
 8001392:	3318      	adds	r3, #24
 8001394:	2200      	movs	r2, #0
 8001396:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001398:	7bfa      	ldrb	r2, [r7, #15]
 800139a:	6879      	ldr	r1, [r7, #4]
 800139c:	4613      	mov	r3, r2
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	4413      	add	r3, r2
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	440b      	add	r3, r1
 80013a6:	331c      	adds	r3, #28
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80013ac:	7bfa      	ldrb	r2, [r7, #15]
 80013ae:	6879      	ldr	r1, [r7, #4]
 80013b0:	4613      	mov	r3, r2
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	4413      	add	r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	440b      	add	r3, r1
 80013ba:	3320      	adds	r3, #32
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80013c0:	7bfa      	ldrb	r2, [r7, #15]
 80013c2:	6879      	ldr	r1, [r7, #4]
 80013c4:	4613      	mov	r3, r2
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	4413      	add	r3, r2
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	440b      	add	r3, r1
 80013ce:	3324      	adds	r3, #36	@ 0x24
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013d4:	7bfb      	ldrb	r3, [r7, #15]
 80013d6:	3301      	adds	r3, #1
 80013d8:	73fb      	strb	r3, [r7, #15]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	791b      	ldrb	r3, [r3, #4]
 80013de:	7bfa      	ldrb	r2, [r7, #15]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d3af      	bcc.n	8001344 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013e4:	2300      	movs	r3, #0
 80013e6:	73fb      	strb	r3, [r7, #15]
 80013e8:	e044      	b.n	8001474 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80013ea:	7bfa      	ldrb	r2, [r7, #15]
 80013ec:	6879      	ldr	r1, [r7, #4]
 80013ee:	4613      	mov	r3, r2
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	4413      	add	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	440b      	add	r3, r1
 80013f8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80013fc:	2200      	movs	r2, #0
 80013fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001400:	7bfa      	ldrb	r2, [r7, #15]
 8001402:	6879      	ldr	r1, [r7, #4]
 8001404:	4613      	mov	r3, r2
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	4413      	add	r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	440b      	add	r3, r1
 800140e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001412:	7bfa      	ldrb	r2, [r7, #15]
 8001414:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001416:	7bfa      	ldrb	r2, [r7, #15]
 8001418:	6879      	ldr	r1, [r7, #4]
 800141a:	4613      	mov	r3, r2
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	4413      	add	r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	440b      	add	r3, r1
 8001424:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001428:	2200      	movs	r2, #0
 800142a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800142c:	7bfa      	ldrb	r2, [r7, #15]
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	4613      	mov	r3, r2
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	4413      	add	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	440b      	add	r3, r1
 800143a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001442:	7bfa      	ldrb	r2, [r7, #15]
 8001444:	6879      	ldr	r1, [r7, #4]
 8001446:	4613      	mov	r3, r2
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	4413      	add	r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	440b      	add	r3, r1
 8001450:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001458:	7bfa      	ldrb	r2, [r7, #15]
 800145a:	6879      	ldr	r1, [r7, #4]
 800145c:	4613      	mov	r3, r2
 800145e:	00db      	lsls	r3, r3, #3
 8001460:	4413      	add	r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	440b      	add	r3, r1
 8001466:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800146e:	7bfb      	ldrb	r3, [r7, #15]
 8001470:	3301      	adds	r3, #1
 8001472:	73fb      	strb	r3, [r7, #15]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	791b      	ldrb	r3, [r3, #4]
 8001478:	7bfa      	ldrb	r2, [r7, #15]
 800147a:	429a      	cmp	r2, r3
 800147c:	d3b5      	bcc.n	80013ea <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6818      	ldr	r0, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	7c1a      	ldrb	r2, [r3, #16]
 8001486:	f88d 2000 	strb.w	r2, [sp]
 800148a:	3304      	adds	r3, #4
 800148c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800148e:	f001 fadd 	bl	8002a4c <USB_DevInit>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d005      	beq.n	80014a4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2202      	movs	r2, #2
 800149c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e00c      	b.n	80014be <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2201      	movs	r2, #1
 80014ae:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f002 fb27 	bl	8003b0a <USB_DevDisconnect>

  return HAL_OK;
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b084      	sub	sp, #16
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d101      	bne.n	80014e2 <HAL_PCD_Start+0x1c>
 80014de:	2302      	movs	r3, #2
 80014e0:	e022      	b.n	8001528 <HAL_PCD_Start+0x62>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2201      	movs	r2, #1
 80014e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d009      	beq.n	800150a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d105      	bne.n	800150a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001502:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	f001 fa2e 	bl	8002970 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4618      	mov	r0, r3
 800151a:	f002 fad5 	bl	8003ac8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001526:	2300      	movs	r3, #0
}
 8001528:	4618      	mov	r0, r3
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001530:	b590      	push	{r4, r7, lr}
 8001532:	b08d      	sub	sp, #52	@ 0x34
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800153e:	6a3b      	ldr	r3, [r7, #32]
 8001540:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4618      	mov	r0, r3
 8001548:	f002 fb93 	bl	8003c72 <USB_GetMode>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	f040 848c 	bne.w	8001e6c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4618      	mov	r0, r3
 800155a:	f002 faf7 	bl	8003b4c <USB_ReadInterrupts>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	f000 8482 	beq.w	8001e6a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	0a1b      	lsrs	r3, r3, #8
 8001570:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4618      	mov	r0, r3
 8001580:	f002 fae4 	bl	8003b4c <USB_ReadInterrupts>
 8001584:	4603      	mov	r3, r0
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b02      	cmp	r3, #2
 800158c:	d107      	bne.n	800159e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	695a      	ldr	r2, [r3, #20]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f002 0202 	and.w	r2, r2, #2
 800159c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f002 fad2 	bl	8003b4c <USB_ReadInterrupts>
 80015a8:	4603      	mov	r3, r0
 80015aa:	f003 0310 	and.w	r3, r3, #16
 80015ae:	2b10      	cmp	r3, #16
 80015b0:	d161      	bne.n	8001676 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	699a      	ldr	r2, [r3, #24]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f022 0210 	bic.w	r2, r2, #16
 80015c0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80015c2:	6a3b      	ldr	r3, [r7, #32]
 80015c4:	6a1b      	ldr	r3, [r3, #32]
 80015c6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	f003 020f 	and.w	r2, r3, #15
 80015ce:	4613      	mov	r3, r2
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	4413      	add	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	4413      	add	r3, r2
 80015de:	3304      	adds	r3, #4
 80015e0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	0c5b      	lsrs	r3, r3, #17
 80015e6:	f003 030f 	and.w	r3, r3, #15
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d124      	bne.n	8001638 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80015f4:	4013      	ands	r3, r2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d035      	beq.n	8001666 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	091b      	lsrs	r3, r3, #4
 8001602:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001604:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001608:	b29b      	uxth	r3, r3
 800160a:	461a      	mov	r2, r3
 800160c:	6a38      	ldr	r0, [r7, #32]
 800160e:	f002 f909 	bl	8003824 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	68da      	ldr	r2, [r3, #12]
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	091b      	lsrs	r3, r3, #4
 800161a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800161e:	441a      	add	r2, r3
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	695a      	ldr	r2, [r3, #20]
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	091b      	lsrs	r3, r3, #4
 800162c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001630:	441a      	add	r2, r3
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	615a      	str	r2, [r3, #20]
 8001636:	e016      	b.n	8001666 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	0c5b      	lsrs	r3, r3, #17
 800163c:	f003 030f 	and.w	r3, r3, #15
 8001640:	2b06      	cmp	r3, #6
 8001642:	d110      	bne.n	8001666 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800164a:	2208      	movs	r2, #8
 800164c:	4619      	mov	r1, r3
 800164e:	6a38      	ldr	r0, [r7, #32]
 8001650:	f002 f8e8 	bl	8003824 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	695a      	ldr	r2, [r3, #20]
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	091b      	lsrs	r3, r3, #4
 800165c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001660:	441a      	add	r2, r3
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	699a      	ldr	r2, [r3, #24]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f042 0210 	orr.w	r2, r2, #16
 8001674:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4618      	mov	r0, r3
 800167c:	f002 fa66 	bl	8003b4c <USB_ReadInterrupts>
 8001680:	4603      	mov	r3, r0
 8001682:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001686:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800168a:	f040 80a7 	bne.w	80017dc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800168e:	2300      	movs	r3, #0
 8001690:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f002 fa6b 	bl	8003b72 <USB_ReadDevAllOutEpInterrupt>
 800169c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800169e:	e099      	b.n	80017d4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80016a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f000 808e 	beq.w	80017c8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016b2:	b2d2      	uxtb	r2, r2
 80016b4:	4611      	mov	r1, r2
 80016b6:	4618      	mov	r0, r3
 80016b8:	f002 fa8f 	bl	8003bda <USB_ReadDevOutEPInterrupt>
 80016bc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	f003 0301 	and.w	r3, r3, #1
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d00c      	beq.n	80016e2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80016c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ca:	015a      	lsls	r2, r3, #5
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	4413      	add	r3, r2
 80016d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80016d4:	461a      	mov	r2, r3
 80016d6:	2301      	movs	r3, #1
 80016d8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80016da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f000 fea3 	bl	8002428 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	f003 0308 	and.w	r3, r3, #8
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d00c      	beq.n	8001706 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80016ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ee:	015a      	lsls	r2, r3, #5
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	4413      	add	r3, r2
 80016f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80016f8:	461a      	mov	r2, r3
 80016fa:	2308      	movs	r3, #8
 80016fc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80016fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f000 ff79 	bl	80025f8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	f003 0310 	and.w	r3, r3, #16
 800170c:	2b00      	cmp	r3, #0
 800170e:	d008      	beq.n	8001722 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001712:	015a      	lsls	r2, r3, #5
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	4413      	add	r3, r2
 8001718:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800171c:	461a      	mov	r2, r3
 800171e:	2310      	movs	r3, #16
 8001720:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d030      	beq.n	800178e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800172c:	6a3b      	ldr	r3, [r7, #32]
 800172e:	695b      	ldr	r3, [r3, #20]
 8001730:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001734:	2b80      	cmp	r3, #128	@ 0x80
 8001736:	d109      	bne.n	800174c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	69fa      	ldr	r2, [r7, #28]
 8001742:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001746:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800174a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800174c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800174e:	4613      	mov	r3, r2
 8001750:	00db      	lsls	r3, r3, #3
 8001752:	4413      	add	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	4413      	add	r3, r2
 800175e:	3304      	adds	r3, #4
 8001760:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	78db      	ldrb	r3, [r3, #3]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d108      	bne.n	800177c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	2200      	movs	r2, #0
 800176e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001772:	b2db      	uxtb	r3, r3
 8001774:	4619      	mov	r1, r3
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f004 fdb4 	bl	80062e4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800177c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800177e:	015a      	lsls	r2, r3, #5
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	4413      	add	r3, r2
 8001784:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001788:	461a      	mov	r2, r3
 800178a:	2302      	movs	r3, #2
 800178c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	f003 0320 	and.w	r3, r3, #32
 8001794:	2b00      	cmp	r3, #0
 8001796:	d008      	beq.n	80017aa <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800179a:	015a      	lsls	r2, r3, #5
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	4413      	add	r3, r2
 80017a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017a4:	461a      	mov	r2, r3
 80017a6:	2320      	movs	r3, #32
 80017a8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d009      	beq.n	80017c8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80017b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b6:	015a      	lsls	r2, r3, #5
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	4413      	add	r3, r2
 80017bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017c0:	461a      	mov	r2, r3
 80017c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017c6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80017c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ca:	3301      	adds	r3, #1
 80017cc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80017ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017d0:	085b      	lsrs	r3, r3, #1
 80017d2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80017d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f47f af62 	bne.w	80016a0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f002 f9b3 	bl	8003b4c <USB_ReadInterrupts>
 80017e6:	4603      	mov	r3, r0
 80017e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017ec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80017f0:	f040 80db 	bne.w	80019aa <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f002 f9d4 	bl	8003ba6 <USB_ReadDevAllInEpInterrupt>
 80017fe:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001800:	2300      	movs	r3, #0
 8001802:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001804:	e0cd      	b.n	80019a2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	2b00      	cmp	r3, #0
 800180e:	f000 80c2 	beq.w	8001996 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001818:	b2d2      	uxtb	r2, r2
 800181a:	4611      	mov	r1, r2
 800181c:	4618      	mov	r0, r3
 800181e:	f002 f9fa 	bl	8003c16 <USB_ReadDevInEPInterrupt>
 8001822:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b00      	cmp	r3, #0
 800182c:	d057      	beq.n	80018de <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800182e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001830:	f003 030f 	and.w	r3, r3, #15
 8001834:	2201      	movs	r2, #1
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001842:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	43db      	mvns	r3, r3
 8001848:	69f9      	ldr	r1, [r7, #28]
 800184a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800184e:	4013      	ands	r3, r2
 8001850:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001854:	015a      	lsls	r2, r3, #5
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	4413      	add	r3, r2
 800185a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800185e:	461a      	mov	r2, r3
 8001860:	2301      	movs	r3, #1
 8001862:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	799b      	ldrb	r3, [r3, #6]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d132      	bne.n	80018d2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800186c:	6879      	ldr	r1, [r7, #4]
 800186e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001870:	4613      	mov	r3, r2
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	4413      	add	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	440b      	add	r3, r1
 800187a:	3320      	adds	r3, #32
 800187c:	6819      	ldr	r1, [r3, #0]
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001882:	4613      	mov	r3, r2
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	4413      	add	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4403      	add	r3, r0
 800188c:	331c      	adds	r3, #28
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4419      	add	r1, r3
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001896:	4613      	mov	r3, r2
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	4413      	add	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4403      	add	r3, r0
 80018a0:	3320      	adds	r3, #32
 80018a2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80018a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d113      	bne.n	80018d2 <HAL_PCD_IRQHandler+0x3a2>
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018ae:	4613      	mov	r3, r2
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	4413      	add	r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	440b      	add	r3, r1
 80018b8:	3324      	adds	r3, #36	@ 0x24
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d108      	bne.n	80018d2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6818      	ldr	r0, [r3, #0]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80018ca:	461a      	mov	r2, r3
 80018cc:	2101      	movs	r1, #1
 80018ce:	f002 fa01 	bl	8003cd4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80018d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	4619      	mov	r1, r3
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f004 fc7e 	bl	80061da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	f003 0308 	and.w	r3, r3, #8
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d008      	beq.n	80018fa <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80018e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ea:	015a      	lsls	r2, r3, #5
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	4413      	add	r3, r2
 80018f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80018f4:	461a      	mov	r2, r3
 80018f6:	2308      	movs	r3, #8
 80018f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	f003 0310 	and.w	r3, r3, #16
 8001900:	2b00      	cmp	r3, #0
 8001902:	d008      	beq.n	8001916 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001906:	015a      	lsls	r2, r3, #5
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	4413      	add	r3, r2
 800190c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001910:	461a      	mov	r2, r3
 8001912:	2310      	movs	r3, #16
 8001914:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800191c:	2b00      	cmp	r3, #0
 800191e:	d008      	beq.n	8001932 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001922:	015a      	lsls	r2, r3, #5
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	4413      	add	r3, r2
 8001928:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800192c:	461a      	mov	r2, r3
 800192e:	2340      	movs	r3, #64	@ 0x40
 8001930:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d023      	beq.n	8001984 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800193c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800193e:	6a38      	ldr	r0, [r7, #32]
 8001940:	f001 f9e8 	bl	8002d14 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001944:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001946:	4613      	mov	r3, r2
 8001948:	00db      	lsls	r3, r3, #3
 800194a:	4413      	add	r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	3310      	adds	r3, #16
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	4413      	add	r3, r2
 8001954:	3304      	adds	r3, #4
 8001956:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	78db      	ldrb	r3, [r3, #3]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d108      	bne.n	8001972 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	2200      	movs	r2, #0
 8001964:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001968:	b2db      	uxtb	r3, r3
 800196a:	4619      	mov	r1, r3
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f004 fccb 	bl	8006308 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001974:	015a      	lsls	r2, r3, #5
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	4413      	add	r3, r2
 800197a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800197e:	461a      	mov	r2, r3
 8001980:	2302      	movs	r3, #2
 8001982:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800198e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f000 fcbd 	bl	8002310 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001998:	3301      	adds	r3, #1
 800199a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800199c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800199e:	085b      	lsrs	r3, r3, #1
 80019a0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80019a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f47f af2e 	bne.w	8001806 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f002 f8cc 	bl	8003b4c <USB_ReadInterrupts>
 80019b4:	4603      	mov	r3, r0
 80019b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80019ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80019be:	d122      	bne.n	8001a06 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	69fa      	ldr	r2, [r7, #28]
 80019ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80019ce:	f023 0301 	bic.w	r3, r3, #1
 80019d2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d108      	bne.n	80019f0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80019e6:	2100      	movs	r1, #0
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f000 fea3 	bl	8002734 <HAL_PCDEx_LPM_Callback>
 80019ee:	e002      	b.n	80019f6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f004 fc69 	bl	80062c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	695a      	ldr	r2, [r3, #20]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001a04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f002 f89e 	bl	8003b4c <USB_ReadInterrupts>
 8001a10:	4603      	mov	r3, r0
 8001a12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a16:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001a1a:	d112      	bne.n	8001a42 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d102      	bne.n	8001a32 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f004 fc25 	bl	800627c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	695a      	ldr	r2, [r3, #20]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001a40:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f002 f880 	bl	8003b4c <USB_ReadInterrupts>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a56:	f040 80b7 	bne.w	8001bc8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	69fa      	ldr	r2, [r7, #28]
 8001a64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a68:	f023 0301 	bic.w	r3, r3, #1
 8001a6c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2110      	movs	r1, #16
 8001a74:	4618      	mov	r0, r3
 8001a76:	f001 f94d 	bl	8002d14 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a7e:	e046      	b.n	8001b0e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a82:	015a      	lsls	r2, r3, #5
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	4413      	add	r3, r2
 8001a88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001a92:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a96:	015a      	lsls	r2, r3, #5
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001aa4:	0151      	lsls	r1, r2, #5
 8001aa6:	69fa      	ldr	r2, [r7, #28]
 8001aa8:	440a      	add	r2, r1
 8001aaa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001aae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001ab2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ab6:	015a      	lsls	r2, r3, #5
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	4413      	add	r3, r2
 8001abc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001ac6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aca:	015a      	lsls	r2, r3, #5
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	4413      	add	r3, r2
 8001ad0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ad8:	0151      	lsls	r1, r2, #5
 8001ada:	69fa      	ldr	r2, [r7, #28]
 8001adc:	440a      	add	r2, r1
 8001ade:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001ae2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001ae6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aea:	015a      	lsls	r2, r3, #5
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	4413      	add	r3, r2
 8001af0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001af8:	0151      	lsls	r1, r2, #5
 8001afa:	69fa      	ldr	r2, [r7, #28]
 8001afc:	440a      	add	r2, r1
 8001afe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001b02:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001b06:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	791b      	ldrb	r3, [r3, #4]
 8001b12:	461a      	mov	r2, r3
 8001b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d3b2      	bcc.n	8001a80 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	69fa      	ldr	r2, [r7, #28]
 8001b24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b28:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001b2c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	7bdb      	ldrb	r3, [r3, #15]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d016      	beq.n	8001b64 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001b40:	69fa      	ldr	r2, [r7, #28]
 8001b42:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b46:	f043 030b 	orr.w	r3, r3, #11
 8001b4a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b56:	69fa      	ldr	r2, [r7, #28]
 8001b58:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b5c:	f043 030b 	orr.w	r3, r3, #11
 8001b60:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b62:	e015      	b.n	8001b90 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b6a:	695b      	ldr	r3, [r3, #20]
 8001b6c:	69fa      	ldr	r2, [r7, #28]
 8001b6e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b72:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001b76:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001b7a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	69fa      	ldr	r2, [r7, #28]
 8001b86:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b8a:	f043 030b 	orr.w	r3, r3, #11
 8001b8e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	69fa      	ldr	r2, [r7, #28]
 8001b9a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b9e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001ba2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6818      	ldr	r0, [r3, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	f002 f88e 	bl	8003cd4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	695a      	ldr	r2, [r3, #20]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001bc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f001 ffbd 	bl	8003b4c <USB_ReadInterrupts>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001bd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001bdc:	d123      	bne.n	8001c26 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f002 f853 	bl	8003c8e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f001 f90a 	bl	8002e06 <USB_GetDevSpeed>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681c      	ldr	r4, [r3, #0]
 8001bfe:	f000 fda5 	bl	800274c <HAL_RCC_GetHCLKFreq>
 8001c02:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4620      	mov	r0, r4
 8001c0c:	f000 fe0e 	bl	800282c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f004 fb0a 	bl	800622a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	695a      	ldr	r2, [r3, #20]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001c24:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f001 ff8e 	bl	8003b4c <USB_ReadInterrupts>
 8001c30:	4603      	mov	r3, r0
 8001c32:	f003 0308 	and.w	r3, r3, #8
 8001c36:	2b08      	cmp	r3, #8
 8001c38:	d10a      	bne.n	8001c50 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f004 fae7 	bl	800620e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	695a      	ldr	r2, [r3, #20]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f002 0208 	and.w	r2, r2, #8
 8001c4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f001 ff79 	bl	8003b4c <USB_ReadInterrupts>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c60:	2b80      	cmp	r3, #128	@ 0x80
 8001c62:	d123      	bne.n	8001cac <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001c64:	6a3b      	ldr	r3, [r7, #32]
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001c6c:	6a3b      	ldr	r3, [r7, #32]
 8001c6e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c70:	2301      	movs	r3, #1
 8001c72:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c74:	e014      	b.n	8001ca0 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001c76:	6879      	ldr	r1, [r7, #4]
 8001c78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	4413      	add	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	440b      	add	r3, r1
 8001c84:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d105      	bne.n	8001c9a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	4619      	mov	r1, r3
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 fb0a 	bl	80022ae <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	791b      	ldrb	r3, [r3, #4]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d3e4      	bcc.n	8001c76 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f001 ff4b 	bl	8003b4c <USB_ReadInterrupts>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cbc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001cc0:	d13c      	bne.n	8001d3c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cc6:	e02b      	b.n	8001d20 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cca:	015a      	lsls	r2, r3, #5
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	4413      	add	r3, r2
 8001cd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001cd8:	6879      	ldr	r1, [r7, #4]
 8001cda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cdc:	4613      	mov	r3, r2
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	4413      	add	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	440b      	add	r3, r1
 8001ce6:	3318      	adds	r3, #24
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d115      	bne.n	8001d1a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001cee:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	da12      	bge.n	8001d1a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001cf4:	6879      	ldr	r1, [r7, #4]
 8001cf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	4413      	add	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	440b      	add	r3, r1
 8001d02:	3317      	adds	r3, #23
 8001d04:	2201      	movs	r2, #1
 8001d06:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	4619      	mov	r1, r3
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f000 faca 	bl	80022ae <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	791b      	ldrb	r3, [r3, #4]
 8001d24:	461a      	mov	r2, r3
 8001d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d3cd      	bcc.n	8001cc8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	695a      	ldr	r2, [r3, #20]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001d3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f001 ff03 	bl	8003b4c <USB_ReadInterrupts>
 8001d46:	4603      	mov	r3, r0
 8001d48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d4c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001d50:	d156      	bne.n	8001e00 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d52:	2301      	movs	r3, #1
 8001d54:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d56:	e045      	b.n	8001de4 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5a:	015a      	lsls	r2, r3, #5
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	4413      	add	r3, r2
 8001d60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d68:	6879      	ldr	r1, [r7, #4]
 8001d6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	4413      	add	r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	440b      	add	r3, r1
 8001d76:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d12e      	bne.n	8001dde <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001d80:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	da2b      	bge.n	8001dde <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001d92:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d121      	bne.n	8001dde <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001d9a:	6879      	ldr	r1, [r7, #4]
 8001d9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d9e:	4613      	mov	r3, r2
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	4413      	add	r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	440b      	add	r3, r1
 8001da8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001dac:	2201      	movs	r2, #1
 8001dae:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001db0:	6a3b      	ldr	r3, [r7, #32]
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001db8:	6a3b      	ldr	r3, [r7, #32]
 8001dba:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001dbc:	6a3b      	ldr	r3, [r7, #32]
 8001dbe:	695b      	ldr	r3, [r3, #20]
 8001dc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d10a      	bne.n	8001dde <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	69fa      	ldr	r2, [r7, #28]
 8001dd2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001dd6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dda:	6053      	str	r3, [r2, #4]
            break;
 8001ddc:	e008      	b.n	8001df0 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de0:	3301      	adds	r3, #1
 8001de2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	791b      	ldrb	r3, [r3, #4]
 8001de8:	461a      	mov	r2, r3
 8001dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d3b3      	bcc.n	8001d58 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	695a      	ldr	r2, [r3, #20]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001dfe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f001 fea1 	bl	8003b4c <USB_ReadInterrupts>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001e10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e14:	d10a      	bne.n	8001e2c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f004 fa88 	bl	800632c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	695a      	ldr	r2, [r3, #20]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001e2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f001 fe8b 	bl	8003b4c <USB_ReadInterrupts>
 8001e36:	4603      	mov	r3, r0
 8001e38:	f003 0304 	and.w	r3, r3, #4
 8001e3c:	2b04      	cmp	r3, #4
 8001e3e:	d115      	bne.n	8001e6c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	f003 0304 	and.w	r3, r3, #4
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d002      	beq.n	8001e58 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f004 fa78 	bl	8006348 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6859      	ldr	r1, [r3, #4]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	430a      	orrs	r2, r1
 8001e66:	605a      	str	r2, [r3, #4]
 8001e68:	e000      	b.n	8001e6c <HAL_PCD_IRQHandler+0x93c>
      return;
 8001e6a:	bf00      	nop
    }
  }
}
 8001e6c:	3734      	adds	r7, #52	@ 0x34
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd90      	pop	{r4, r7, pc}

08001e72 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b082      	sub	sp, #8
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d101      	bne.n	8001e8c <HAL_PCD_SetAddress+0x1a>
 8001e88:	2302      	movs	r3, #2
 8001e8a:	e012      	b.n	8001eb2 <HAL_PCD_SetAddress+0x40>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	78fa      	ldrb	r2, [r7, #3]
 8001e98:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	78fa      	ldrb	r2, [r7, #3]
 8001ea0:	4611      	mov	r1, r2
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f001 fdea 	bl	8003a7c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b084      	sub	sp, #16
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
 8001ec2:	4608      	mov	r0, r1
 8001ec4:	4611      	mov	r1, r2
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	4603      	mov	r3, r0
 8001eca:	70fb      	strb	r3, [r7, #3]
 8001ecc:	460b      	mov	r3, r1
 8001ece:	803b      	strh	r3, [r7, #0]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ed8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	da0f      	bge.n	8001f00 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ee0:	78fb      	ldrb	r3, [r7, #3]
 8001ee2:	f003 020f 	and.w	r2, r3, #15
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	4413      	add	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	3310      	adds	r3, #16
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	3304      	adds	r3, #4
 8001ef6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2201      	movs	r2, #1
 8001efc:	705a      	strb	r2, [r3, #1]
 8001efe:	e00f      	b.n	8001f20 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f00:	78fb      	ldrb	r3, [r7, #3]
 8001f02:	f003 020f 	and.w	r2, r3, #15
 8001f06:	4613      	mov	r3, r2
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	4413      	add	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	4413      	add	r3, r2
 8001f16:	3304      	adds	r3, #4
 8001f18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001f20:	78fb      	ldrb	r3, [r7, #3]
 8001f22:	f003 030f 	and.w	r3, r3, #15
 8001f26:	b2da      	uxtb	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001f2c:	883b      	ldrh	r3, [r7, #0]
 8001f2e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	78ba      	ldrb	r2, [r7, #2]
 8001f3a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	785b      	ldrb	r3, [r3, #1]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d004      	beq.n	8001f4e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	461a      	mov	r2, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001f4e:	78bb      	ldrb	r3, [r7, #2]
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d102      	bne.n	8001f5a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2200      	movs	r2, #0
 8001f58:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d101      	bne.n	8001f68 <HAL_PCD_EP_Open+0xae>
 8001f64:	2302      	movs	r3, #2
 8001f66:	e00e      	b.n	8001f86 <HAL_PCD_EP_Open+0xcc>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68f9      	ldr	r1, [r7, #12]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f000 ff6a 	bl	8002e50 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001f84:	7afb      	ldrb	r3, [r7, #11]
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3710      	adds	r7, #16
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b084      	sub	sp, #16
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
 8001f96:	460b      	mov	r3, r1
 8001f98:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	da0f      	bge.n	8001fc2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fa2:	78fb      	ldrb	r3, [r7, #3]
 8001fa4:	f003 020f 	and.w	r2, r3, #15
 8001fa8:	4613      	mov	r3, r2
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	4413      	add	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	3310      	adds	r3, #16
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	3304      	adds	r3, #4
 8001fb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	705a      	strb	r2, [r3, #1]
 8001fc0:	e00f      	b.n	8001fe2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fc2:	78fb      	ldrb	r3, [r7, #3]
 8001fc4:	f003 020f 	and.w	r2, r3, #15
 8001fc8:	4613      	mov	r3, r2
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	4413      	add	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	3304      	adds	r3, #4
 8001fda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fe2:	78fb      	ldrb	r3, [r7, #3]
 8001fe4:	f003 030f 	and.w	r3, r3, #15
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d101      	bne.n	8001ffc <HAL_PCD_EP_Close+0x6e>
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	e00e      	b.n	800201a <HAL_PCD_EP_Close+0x8c>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68f9      	ldr	r1, [r7, #12]
 800200a:	4618      	mov	r0, r3
 800200c:	f000 ffa8 	bl	8002f60 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b086      	sub	sp, #24
 8002026:	af00      	add	r7, sp, #0
 8002028:	60f8      	str	r0, [r7, #12]
 800202a:	607a      	str	r2, [r7, #4]
 800202c:	603b      	str	r3, [r7, #0]
 800202e:	460b      	mov	r3, r1
 8002030:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002032:	7afb      	ldrb	r3, [r7, #11]
 8002034:	f003 020f 	and.w	r2, r3, #15
 8002038:	4613      	mov	r3, r2
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	4413      	add	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	4413      	add	r3, r2
 8002048:	3304      	adds	r3, #4
 800204a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	2200      	movs	r2, #0
 800205c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	2200      	movs	r2, #0
 8002062:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002064:	7afb      	ldrb	r3, [r7, #11]
 8002066:	f003 030f 	and.w	r3, r3, #15
 800206a:	b2da      	uxtb	r2, r3
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	799b      	ldrb	r3, [r3, #6]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d102      	bne.n	800207e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6818      	ldr	r0, [r3, #0]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	799b      	ldrb	r3, [r3, #6]
 8002086:	461a      	mov	r2, r3
 8002088:	6979      	ldr	r1, [r7, #20]
 800208a:	f001 f845 	bl	8003118 <USB_EPStartXfer>

  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3718      	adds	r7, #24
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	460b      	mov	r3, r1
 80020a2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80020a4:	78fb      	ldrb	r3, [r7, #3]
 80020a6:	f003 020f 	and.w	r2, r3, #15
 80020aa:	6879      	ldr	r1, [r7, #4]
 80020ac:	4613      	mov	r3, r2
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	4413      	add	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	440b      	add	r3, r1
 80020b6:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80020ba:	681b      	ldr	r3, [r3, #0]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	607a      	str	r2, [r7, #4]
 80020d2:	603b      	str	r3, [r7, #0]
 80020d4:	460b      	mov	r3, r1
 80020d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020d8:	7afb      	ldrb	r3, [r7, #11]
 80020da:	f003 020f 	and.w	r2, r3, #15
 80020de:	4613      	mov	r3, r2
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	4413      	add	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	3310      	adds	r3, #16
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	4413      	add	r3, r2
 80020ec:	3304      	adds	r3, #4
 80020ee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	2200      	movs	r2, #0
 8002100:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	2201      	movs	r2, #1
 8002106:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002108:	7afb      	ldrb	r3, [r7, #11]
 800210a:	f003 030f 	and.w	r3, r3, #15
 800210e:	b2da      	uxtb	r2, r3
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	799b      	ldrb	r3, [r3, #6]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d102      	bne.n	8002122 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6818      	ldr	r0, [r3, #0]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	799b      	ldrb	r3, [r3, #6]
 800212a:	461a      	mov	r2, r3
 800212c:	6979      	ldr	r1, [r7, #20]
 800212e:	f000 fff3 	bl	8003118 <USB_EPStartXfer>

  return HAL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	3718      	adds	r7, #24
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	460b      	mov	r3, r1
 8002146:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002148:	78fb      	ldrb	r3, [r7, #3]
 800214a:	f003 030f 	and.w	r3, r3, #15
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	7912      	ldrb	r2, [r2, #4]
 8002152:	4293      	cmp	r3, r2
 8002154:	d901      	bls.n	800215a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e04f      	b.n	80021fa <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800215a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800215e:	2b00      	cmp	r3, #0
 8002160:	da0f      	bge.n	8002182 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002162:	78fb      	ldrb	r3, [r7, #3]
 8002164:	f003 020f 	and.w	r2, r3, #15
 8002168:	4613      	mov	r3, r2
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	4413      	add	r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	3310      	adds	r3, #16
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	4413      	add	r3, r2
 8002176:	3304      	adds	r3, #4
 8002178:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2201      	movs	r2, #1
 800217e:	705a      	strb	r2, [r3, #1]
 8002180:	e00d      	b.n	800219e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002182:	78fa      	ldrb	r2, [r7, #3]
 8002184:	4613      	mov	r3, r2
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	4413      	add	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	4413      	add	r3, r2
 8002194:	3304      	adds	r3, #4
 8002196:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2200      	movs	r2, #0
 800219c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2201      	movs	r2, #1
 80021a2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021a4:	78fb      	ldrb	r3, [r7, #3]
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	b2da      	uxtb	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d101      	bne.n	80021be <HAL_PCD_EP_SetStall+0x82>
 80021ba:	2302      	movs	r3, #2
 80021bc:	e01d      	b.n	80021fa <HAL_PCD_EP_SetStall+0xbe>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2201      	movs	r2, #1
 80021c2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68f9      	ldr	r1, [r7, #12]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f001 fb81 	bl	80038d4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021d2:	78fb      	ldrb	r3, [r7, #3]
 80021d4:	f003 030f 	and.w	r3, r3, #15
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d109      	bne.n	80021f0 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6818      	ldr	r0, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	7999      	ldrb	r1, [r3, #6]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80021ea:	461a      	mov	r2, r3
 80021ec:	f001 fd72 	bl	8003cd4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b084      	sub	sp, #16
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
 800220a:	460b      	mov	r3, r1
 800220c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800220e:	78fb      	ldrb	r3, [r7, #3]
 8002210:	f003 030f 	and.w	r3, r3, #15
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	7912      	ldrb	r2, [r2, #4]
 8002218:	4293      	cmp	r3, r2
 800221a:	d901      	bls.n	8002220 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e042      	b.n	80022a6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002220:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002224:	2b00      	cmp	r3, #0
 8002226:	da0f      	bge.n	8002248 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002228:	78fb      	ldrb	r3, [r7, #3]
 800222a:	f003 020f 	and.w	r2, r3, #15
 800222e:	4613      	mov	r3, r2
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	4413      	add	r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	3310      	adds	r3, #16
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	4413      	add	r3, r2
 800223c:	3304      	adds	r3, #4
 800223e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2201      	movs	r2, #1
 8002244:	705a      	strb	r2, [r3, #1]
 8002246:	e00f      	b.n	8002268 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002248:	78fb      	ldrb	r3, [r7, #3]
 800224a:	f003 020f 	and.w	r2, r3, #15
 800224e:	4613      	mov	r3, r2
 8002250:	00db      	lsls	r3, r3, #3
 8002252:	4413      	add	r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	4413      	add	r3, r2
 800225e:	3304      	adds	r3, #4
 8002260:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2200      	movs	r2, #0
 8002266:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800226e:	78fb      	ldrb	r3, [r7, #3]
 8002270:	f003 030f 	and.w	r3, r3, #15
 8002274:	b2da      	uxtb	r2, r3
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002280:	2b01      	cmp	r3, #1
 8002282:	d101      	bne.n	8002288 <HAL_PCD_EP_ClrStall+0x86>
 8002284:	2302      	movs	r3, #2
 8002286:	e00e      	b.n	80022a6 <HAL_PCD_EP_ClrStall+0xa4>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68f9      	ldr	r1, [r7, #12]
 8002296:	4618      	mov	r0, r3
 8002298:	f001 fb8a 	bl	80039b0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b084      	sub	sp, #16
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
 80022b6:	460b      	mov	r3, r1
 80022b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80022ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	da0c      	bge.n	80022dc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022c2:	78fb      	ldrb	r3, [r7, #3]
 80022c4:	f003 020f 	and.w	r2, r3, #15
 80022c8:	4613      	mov	r3, r2
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	4413      	add	r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	3310      	adds	r3, #16
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	4413      	add	r3, r2
 80022d6:	3304      	adds	r3, #4
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	e00c      	b.n	80022f6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022dc:	78fb      	ldrb	r3, [r7, #3]
 80022de:	f003 020f 	and.w	r2, r3, #15
 80022e2:	4613      	mov	r3, r2
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	4413      	add	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	4413      	add	r3, r2
 80022f2:	3304      	adds	r3, #4
 80022f4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68f9      	ldr	r1, [r7, #12]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f001 f9a9 	bl	8003654 <USB_EPStopXfer>
 8002302:	4603      	mov	r3, r0
 8002304:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002306:	7afb      	ldrb	r3, [r7, #11]
}
 8002308:	4618      	mov	r0, r3
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b08a      	sub	sp, #40	@ 0x28
 8002314:	af02      	add	r7, sp, #8
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	4613      	mov	r3, r2
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	4413      	add	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	3310      	adds	r3, #16
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	4413      	add	r3, r2
 8002334:	3304      	adds	r3, #4
 8002336:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	695a      	ldr	r2, [r3, #20]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	691b      	ldr	r3, [r3, #16]
 8002340:	429a      	cmp	r2, r3
 8002342:	d901      	bls.n	8002348 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e06b      	b.n	8002420 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	691a      	ldr	r2, [r3, #16]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	69fa      	ldr	r2, [r7, #28]
 800235a:	429a      	cmp	r2, r3
 800235c:	d902      	bls.n	8002364 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	3303      	adds	r3, #3
 8002368:	089b      	lsrs	r3, r3, #2
 800236a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800236c:	e02a      	b.n	80023c4 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	691a      	ldr	r2, [r3, #16]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	69fa      	ldr	r2, [r7, #28]
 8002380:	429a      	cmp	r2, r3
 8002382:	d902      	bls.n	800238a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	3303      	adds	r3, #3
 800238e:	089b      	lsrs	r3, r3, #2
 8002390:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	68d9      	ldr	r1, [r3, #12]
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	b2da      	uxtb	r2, r3
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	4603      	mov	r3, r0
 80023a6:	6978      	ldr	r0, [r7, #20]
 80023a8:	f001 f9fe 	bl	80037a8 <USB_WritePacket>

    ep->xfer_buff  += len;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	68da      	ldr	r2, [r3, #12]
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	441a      	add	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	695a      	ldr	r2, [r3, #20]
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	441a      	add	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	015a      	lsls	r2, r3, #5
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	4413      	add	r3, r2
 80023cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d809      	bhi.n	80023ee <PCD_WriteEmptyTxFifo+0xde>
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	695a      	ldr	r2, [r3, #20]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d203      	bcs.n	80023ee <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1bf      	bne.n	800236e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	691a      	ldr	r2, [r3, #16]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d811      	bhi.n	800241e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	f003 030f 	and.w	r3, r3, #15
 8002400:	2201      	movs	r2, #1
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800240e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	43db      	mvns	r3, r3
 8002414:	6939      	ldr	r1, [r7, #16]
 8002416:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800241a:	4013      	ands	r3, r2
 800241c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	3720      	adds	r7, #32
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b088      	sub	sp, #32
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	333c      	adds	r3, #60	@ 0x3c
 8002440:	3304      	adds	r3, #4
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	015a      	lsls	r2, r3, #5
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	4413      	add	r3, r2
 800244e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	799b      	ldrb	r3, [r3, #6]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d17b      	bne.n	8002556 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	f003 0308 	and.w	r3, r3, #8
 8002464:	2b00      	cmp	r3, #0
 8002466:	d015      	beq.n	8002494 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	4a61      	ldr	r2, [pc, #388]	@ (80025f0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800246c:	4293      	cmp	r3, r2
 800246e:	f240 80b9 	bls.w	80025e4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 80b3 	beq.w	80025e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	015a      	lsls	r2, r3, #5
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	4413      	add	r3, r2
 8002486:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800248a:	461a      	mov	r2, r3
 800248c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002490:	6093      	str	r3, [r2, #8]
 8002492:	e0a7      	b.n	80025e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	f003 0320 	and.w	r3, r3, #32
 800249a:	2b00      	cmp	r3, #0
 800249c:	d009      	beq.n	80024b2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	015a      	lsls	r2, r3, #5
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	4413      	add	r3, r2
 80024a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024aa:	461a      	mov	r2, r3
 80024ac:	2320      	movs	r3, #32
 80024ae:	6093      	str	r3, [r2, #8]
 80024b0:	e098      	b.n	80025e4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f040 8093 	bne.w	80025e4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	4a4b      	ldr	r2, [pc, #300]	@ (80025f0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d90f      	bls.n	80024e6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d00a      	beq.n	80024e6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	015a      	lsls	r2, r3, #5
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	4413      	add	r3, r2
 80024d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024dc:	461a      	mov	r2, r3
 80024de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80024e2:	6093      	str	r3, [r2, #8]
 80024e4:	e07e      	b.n	80025e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	4613      	mov	r3, r2
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	4413      	add	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	4413      	add	r3, r2
 80024f8:	3304      	adds	r3, #4
 80024fa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6a1a      	ldr	r2, [r3, #32]
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	0159      	lsls	r1, r3, #5
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	440b      	add	r3, r1
 8002508:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002512:	1ad2      	subs	r2, r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d114      	bne.n	8002548 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d109      	bne.n	800253a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6818      	ldr	r0, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002530:	461a      	mov	r2, r3
 8002532:	2101      	movs	r1, #1
 8002534:	f001 fbce 	bl	8003cd4 <USB_EP0_OutStart>
 8002538:	e006      	b.n	8002548 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	68da      	ldr	r2, [r3, #12]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	441a      	add	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	b2db      	uxtb	r3, r3
 800254c:	4619      	mov	r1, r3
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f003 fe28 	bl	80061a4 <HAL_PCD_DataOutStageCallback>
 8002554:	e046      	b.n	80025e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	4a26      	ldr	r2, [pc, #152]	@ (80025f4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d124      	bne.n	80025a8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00a      	beq.n	800257e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	015a      	lsls	r2, r3, #5
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	4413      	add	r3, r2
 8002570:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002574:	461a      	mov	r2, r3
 8002576:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800257a:	6093      	str	r3, [r2, #8]
 800257c:	e032      	b.n	80025e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	f003 0320 	and.w	r3, r3, #32
 8002584:	2b00      	cmp	r3, #0
 8002586:	d008      	beq.n	800259a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	015a      	lsls	r2, r3, #5
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	4413      	add	r3, r2
 8002590:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002594:	461a      	mov	r2, r3
 8002596:	2320      	movs	r3, #32
 8002598:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	b2db      	uxtb	r3, r3
 800259e:	4619      	mov	r1, r3
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f003 fdff 	bl	80061a4 <HAL_PCD_DataOutStageCallback>
 80025a6:	e01d      	b.n	80025e4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d114      	bne.n	80025d8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80025ae:	6879      	ldr	r1, [r7, #4]
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	4613      	mov	r3, r2
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	4413      	add	r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	440b      	add	r3, r1
 80025bc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d108      	bne.n	80025d8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6818      	ldr	r0, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80025d0:	461a      	mov	r2, r3
 80025d2:	2100      	movs	r1, #0
 80025d4:	f001 fb7e 	bl	8003cd4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	4619      	mov	r1, r3
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f003 fde0 	bl	80061a4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3720      	adds	r7, #32
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	4f54300a 	.word	0x4f54300a
 80025f4:	4f54310a 	.word	0x4f54310a

080025f8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	333c      	adds	r3, #60	@ 0x3c
 8002610:	3304      	adds	r3, #4
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	015a      	lsls	r2, r3, #5
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	4413      	add	r3, r2
 800261e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	4a15      	ldr	r2, [pc, #84]	@ (8002680 <PCD_EP_OutSetupPacket_int+0x88>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d90e      	bls.n	800264c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002634:	2b00      	cmp	r3, #0
 8002636:	d009      	beq.n	800264c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	015a      	lsls	r2, r3, #5
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	4413      	add	r3, r2
 8002640:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002644:	461a      	mov	r2, r3
 8002646:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800264a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f003 fd97 	bl	8006180 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	4a0a      	ldr	r2, [pc, #40]	@ (8002680 <PCD_EP_OutSetupPacket_int+0x88>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d90c      	bls.n	8002674 <PCD_EP_OutSetupPacket_int+0x7c>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	799b      	ldrb	r3, [r3, #6]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d108      	bne.n	8002674 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6818      	ldr	r0, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800266c:	461a      	mov	r2, r3
 800266e:	2101      	movs	r1, #1
 8002670:	f001 fb30 	bl	8003cd4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3718      	adds	r7, #24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	4f54300a 	.word	0x4f54300a

08002684 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	460b      	mov	r3, r1
 800268e:	70fb      	strb	r3, [r7, #3]
 8002690:	4613      	mov	r3, r2
 8002692:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800269a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800269c:	78fb      	ldrb	r3, [r7, #3]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d107      	bne.n	80026b2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80026a2:	883b      	ldrh	r3, [r7, #0]
 80026a4:	0419      	lsls	r1, r3, #16
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68ba      	ldr	r2, [r7, #8]
 80026ac:	430a      	orrs	r2, r1
 80026ae:	629a      	str	r2, [r3, #40]	@ 0x28
 80026b0:	e028      	b.n	8002704 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026b8:	0c1b      	lsrs	r3, r3, #16
 80026ba:	68ba      	ldr	r2, [r7, #8]
 80026bc:	4413      	add	r3, r2
 80026be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80026c0:	2300      	movs	r3, #0
 80026c2:	73fb      	strb	r3, [r7, #15]
 80026c4:	e00d      	b.n	80026e2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	7bfb      	ldrb	r3, [r7, #15]
 80026cc:	3340      	adds	r3, #64	@ 0x40
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	4413      	add	r3, r2
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	0c1b      	lsrs	r3, r3, #16
 80026d6:	68ba      	ldr	r2, [r7, #8]
 80026d8:	4413      	add	r3, r2
 80026da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80026dc:	7bfb      	ldrb	r3, [r7, #15]
 80026de:	3301      	adds	r3, #1
 80026e0:	73fb      	strb	r3, [r7, #15]
 80026e2:	7bfa      	ldrb	r2, [r7, #15]
 80026e4:	78fb      	ldrb	r3, [r7, #3]
 80026e6:	3b01      	subs	r3, #1
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d3ec      	bcc.n	80026c6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80026ec:	883b      	ldrh	r3, [r7, #0]
 80026ee:	0418      	lsls	r0, r3, #16
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6819      	ldr	r1, [r3, #0]
 80026f4:	78fb      	ldrb	r3, [r7, #3]
 80026f6:	3b01      	subs	r3, #1
 80026f8:	68ba      	ldr	r2, [r7, #8]
 80026fa:	4302      	orrs	r2, r0
 80026fc:	3340      	adds	r3, #64	@ 0x40
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	440b      	add	r3, r1
 8002702:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3714      	adds	r7, #20
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr

08002712 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002712:	b480      	push	{r7}
 8002714:	b083      	sub	sp, #12
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
 800271a:	460b      	mov	r3, r1
 800271c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	887a      	ldrh	r2, [r7, #2]
 8002724:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	460b      	mov	r3, r1
 800273e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002750:	4b03      	ldr	r3, [pc, #12]	@ (8002760 <HAL_RCC_GetHCLKFreq+0x14>)
 8002752:	681b      	ldr	r3, [r3, #0]
}
 8002754:	4618      	mov	r0, r3
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	20000004 	.word	0x20000004

08002764 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002764:	b084      	sub	sp, #16
 8002766:	b580      	push	{r7, lr}
 8002768:	b084      	sub	sp, #16
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
 800276e:	f107 001c 	add.w	r0, r7, #28
 8002772:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002776:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800277a:	2b01      	cmp	r3, #1
 800277c:	d123      	bne.n	80027c6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002782:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8002792:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80027a6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d105      	bne.n	80027ba <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f001 fae8 	bl	8003d90 <USB_CoreReset>
 80027c0:	4603      	mov	r3, r0
 80027c2:	73fb      	strb	r3, [r7, #15]
 80027c4:	e01b      	b.n	80027fe <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f001 fadc 	bl	8003d90 <USB_CoreReset>
 80027d8:	4603      	mov	r3, r0
 80027da:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80027dc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d106      	bne.n	80027f2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027e8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	639a      	str	r2, [r3, #56]	@ 0x38
 80027f0:	e005      	b.n	80027fe <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027f6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80027fe:	7fbb      	ldrb	r3, [r7, #30]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d10b      	bne.n	800281c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f043 0206 	orr.w	r2, r3, #6
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f043 0220 	orr.w	r2, r3, #32
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800281c:	7bfb      	ldrb	r3, [r7, #15]
}
 800281e:	4618      	mov	r0, r3
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002828:	b004      	add	sp, #16
 800282a:	4770      	bx	lr

0800282c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800282c:	b480      	push	{r7}
 800282e:	b087      	sub	sp, #28
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	4613      	mov	r3, r2
 8002838:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800283a:	79fb      	ldrb	r3, [r7, #7]
 800283c:	2b02      	cmp	r3, #2
 800283e:	d165      	bne.n	800290c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	4a41      	ldr	r2, [pc, #260]	@ (8002948 <USB_SetTurnaroundTime+0x11c>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d906      	bls.n	8002856 <USB_SetTurnaroundTime+0x2a>
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	4a40      	ldr	r2, [pc, #256]	@ (800294c <USB_SetTurnaroundTime+0x120>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d202      	bcs.n	8002856 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002850:	230f      	movs	r3, #15
 8002852:	617b      	str	r3, [r7, #20]
 8002854:	e062      	b.n	800291c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	4a3c      	ldr	r2, [pc, #240]	@ (800294c <USB_SetTurnaroundTime+0x120>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d306      	bcc.n	800286c <USB_SetTurnaroundTime+0x40>
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	4a3b      	ldr	r2, [pc, #236]	@ (8002950 <USB_SetTurnaroundTime+0x124>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d202      	bcs.n	800286c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002866:	230e      	movs	r3, #14
 8002868:	617b      	str	r3, [r7, #20]
 800286a:	e057      	b.n	800291c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	4a38      	ldr	r2, [pc, #224]	@ (8002950 <USB_SetTurnaroundTime+0x124>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d306      	bcc.n	8002882 <USB_SetTurnaroundTime+0x56>
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	4a37      	ldr	r2, [pc, #220]	@ (8002954 <USB_SetTurnaroundTime+0x128>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d202      	bcs.n	8002882 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800287c:	230d      	movs	r3, #13
 800287e:	617b      	str	r3, [r7, #20]
 8002880:	e04c      	b.n	800291c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	4a33      	ldr	r2, [pc, #204]	@ (8002954 <USB_SetTurnaroundTime+0x128>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d306      	bcc.n	8002898 <USB_SetTurnaroundTime+0x6c>
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	4a32      	ldr	r2, [pc, #200]	@ (8002958 <USB_SetTurnaroundTime+0x12c>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d802      	bhi.n	8002898 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002892:	230c      	movs	r3, #12
 8002894:	617b      	str	r3, [r7, #20]
 8002896:	e041      	b.n	800291c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	4a2f      	ldr	r2, [pc, #188]	@ (8002958 <USB_SetTurnaroundTime+0x12c>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d906      	bls.n	80028ae <USB_SetTurnaroundTime+0x82>
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	4a2e      	ldr	r2, [pc, #184]	@ (800295c <USB_SetTurnaroundTime+0x130>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d802      	bhi.n	80028ae <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80028a8:	230b      	movs	r3, #11
 80028aa:	617b      	str	r3, [r7, #20]
 80028ac:	e036      	b.n	800291c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	4a2a      	ldr	r2, [pc, #168]	@ (800295c <USB_SetTurnaroundTime+0x130>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d906      	bls.n	80028c4 <USB_SetTurnaroundTime+0x98>
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	4a29      	ldr	r2, [pc, #164]	@ (8002960 <USB_SetTurnaroundTime+0x134>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d802      	bhi.n	80028c4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80028be:	230a      	movs	r3, #10
 80028c0:	617b      	str	r3, [r7, #20]
 80028c2:	e02b      	b.n	800291c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	4a26      	ldr	r2, [pc, #152]	@ (8002960 <USB_SetTurnaroundTime+0x134>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d906      	bls.n	80028da <USB_SetTurnaroundTime+0xae>
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	4a25      	ldr	r2, [pc, #148]	@ (8002964 <USB_SetTurnaroundTime+0x138>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d202      	bcs.n	80028da <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80028d4:	2309      	movs	r3, #9
 80028d6:	617b      	str	r3, [r7, #20]
 80028d8:	e020      	b.n	800291c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	4a21      	ldr	r2, [pc, #132]	@ (8002964 <USB_SetTurnaroundTime+0x138>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d306      	bcc.n	80028f0 <USB_SetTurnaroundTime+0xc4>
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	4a20      	ldr	r2, [pc, #128]	@ (8002968 <USB_SetTurnaroundTime+0x13c>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d802      	bhi.n	80028f0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80028ea:	2308      	movs	r3, #8
 80028ec:	617b      	str	r3, [r7, #20]
 80028ee:	e015      	b.n	800291c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	4a1d      	ldr	r2, [pc, #116]	@ (8002968 <USB_SetTurnaroundTime+0x13c>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d906      	bls.n	8002906 <USB_SetTurnaroundTime+0xda>
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	4a1c      	ldr	r2, [pc, #112]	@ (800296c <USB_SetTurnaroundTime+0x140>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d202      	bcs.n	8002906 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002900:	2307      	movs	r3, #7
 8002902:	617b      	str	r3, [r7, #20]
 8002904:	e00a      	b.n	800291c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002906:	2306      	movs	r3, #6
 8002908:	617b      	str	r3, [r7, #20]
 800290a:	e007      	b.n	800291c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800290c:	79fb      	ldrb	r3, [r7, #7]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d102      	bne.n	8002918 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002912:	2309      	movs	r3, #9
 8002914:	617b      	str	r3, [r7, #20]
 8002916:	e001      	b.n	800291c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002918:	2309      	movs	r3, #9
 800291a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	68da      	ldr	r2, [r3, #12]
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	029b      	lsls	r3, r3, #10
 8002930:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8002934:	431a      	orrs	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	371c      	adds	r7, #28
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr
 8002948:	00d8acbf 	.word	0x00d8acbf
 800294c:	00e4e1c0 	.word	0x00e4e1c0
 8002950:	00f42400 	.word	0x00f42400
 8002954:	01067380 	.word	0x01067380
 8002958:	011a499f 	.word	0x011a499f
 800295c:	01312cff 	.word	0x01312cff
 8002960:	014ca43f 	.word	0x014ca43f
 8002964:	016e3600 	.word	0x016e3600
 8002968:	01a6ab1f 	.word	0x01a6ab1f
 800296c:	01e84800 	.word	0x01e84800

08002970 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f043 0201 	orr.w	r2, r3, #1
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr

08002992 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002992:	b480      	push	{r7}
 8002994:	b083      	sub	sp, #12
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f023 0201 	bic.w	r2, r3, #1
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	460b      	mov	r3, r1
 80029be:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80029c0:	2300      	movs	r3, #0
 80029c2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80029d0:	78fb      	ldrb	r3, [r7, #3]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d115      	bne.n	8002a02 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80029e2:	200a      	movs	r0, #10
 80029e4:	f7fe f98e 	bl	8000d04 <HAL_Delay>
      ms += 10U;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	330a      	adds	r3, #10
 80029ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f001 f93f 	bl	8003c72 <USB_GetMode>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d01e      	beq.n	8002a38 <USB_SetCurrentMode+0x84>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2bc7      	cmp	r3, #199	@ 0xc7
 80029fe:	d9f0      	bls.n	80029e2 <USB_SetCurrentMode+0x2e>
 8002a00:	e01a      	b.n	8002a38 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002a02:	78fb      	ldrb	r3, [r7, #3]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d115      	bne.n	8002a34 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002a14:	200a      	movs	r0, #10
 8002a16:	f7fe f975 	bl	8000d04 <HAL_Delay>
      ms += 10U;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	330a      	adds	r3, #10
 8002a1e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f001 f926 	bl	8003c72 <USB_GetMode>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d005      	beq.n	8002a38 <USB_SetCurrentMode+0x84>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2bc7      	cmp	r3, #199	@ 0xc7
 8002a30:	d9f0      	bls.n	8002a14 <USB_SetCurrentMode+0x60>
 8002a32:	e001      	b.n	8002a38 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e005      	b.n	8002a44 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2bc8      	cmp	r3, #200	@ 0xc8
 8002a3c:	d101      	bne.n	8002a42 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e000      	b.n	8002a44 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3710      	adds	r7, #16
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002a4c:	b084      	sub	sp, #16
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b086      	sub	sp, #24
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
 8002a56:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002a5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002a66:	2300      	movs	r3, #0
 8002a68:	613b      	str	r3, [r7, #16]
 8002a6a:	e009      	b.n	8002a80 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	3340      	adds	r3, #64	@ 0x40
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	2200      	movs	r2, #0
 8002a78:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	613b      	str	r3, [r7, #16]
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	2b0e      	cmp	r3, #14
 8002a84:	d9f2      	bls.n	8002a6c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002a86:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d11c      	bne.n	8002ac8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a9c:	f043 0302 	orr.w	r3, r3, #2
 8002aa0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aa6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ab2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002abe:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	639a      	str	r2, [r3, #56]	@ 0x38
 8002ac6:	e00b      	b.n	8002ae0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002acc:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ad8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	2300      	movs	r3, #0
 8002aea:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002aec:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d10d      	bne.n	8002b10 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002af4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d104      	bne.n	8002b06 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002afc:	2100      	movs	r1, #0
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 f968 	bl	8002dd4 <USB_SetDevSpeed>
 8002b04:	e008      	b.n	8002b18 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002b06:	2101      	movs	r1, #1
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 f963 	bl	8002dd4 <USB_SetDevSpeed>
 8002b0e:	e003      	b.n	8002b18 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002b10:	2103      	movs	r1, #3
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f95e 	bl	8002dd4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002b18:	2110      	movs	r1, #16
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 f8fa 	bl	8002d14 <USB_FlushTxFifo>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f924 	bl	8002d78 <USB_FlushRxFifo>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b40:	461a      	mov	r2, r3
 8002b42:	2300      	movs	r3, #0
 8002b44:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	2300      	movs	r3, #0
 8002b50:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b58:	461a      	mov	r2, r3
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002b5e:	2300      	movs	r3, #0
 8002b60:	613b      	str	r3, [r7, #16]
 8002b62:	e043      	b.n	8002bec <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	015a      	lsls	r2, r3, #5
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002b76:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002b7a:	d118      	bne.n	8002bae <USB_DevInit+0x162>
    {
      if (i == 0U)
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d10a      	bne.n	8002b98 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	015a      	lsls	r2, r3, #5
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	4413      	add	r3, r2
 8002b8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b8e:	461a      	mov	r2, r3
 8002b90:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002b94:	6013      	str	r3, [r2, #0]
 8002b96:	e013      	b.n	8002bc0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	015a      	lsls	r2, r3, #5
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002baa:	6013      	str	r3, [r2, #0]
 8002bac:	e008      	b.n	8002bc0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	015a      	lsls	r2, r3, #5
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002bba:	461a      	mov	r2, r3
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	015a      	lsls	r2, r3, #5
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002bcc:	461a      	mov	r2, r3
 8002bce:	2300      	movs	r3, #0
 8002bd0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	015a      	lsls	r2, r3, #5
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	4413      	add	r3, r2
 8002bda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002bde:	461a      	mov	r2, r3
 8002be0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002be4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	3301      	adds	r3, #1
 8002bea:	613b      	str	r3, [r7, #16]
 8002bec:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d3b5      	bcc.n	8002b64 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	613b      	str	r3, [r7, #16]
 8002bfc:	e043      	b.n	8002c86 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	015a      	lsls	r2, r3, #5
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	4413      	add	r3, r2
 8002c06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002c10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002c14:	d118      	bne.n	8002c48 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d10a      	bne.n	8002c32 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	015a      	lsls	r2, r3, #5
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	4413      	add	r3, r2
 8002c24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c28:	461a      	mov	r2, r3
 8002c2a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002c2e:	6013      	str	r3, [r2, #0]
 8002c30:	e013      	b.n	8002c5a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	015a      	lsls	r2, r3, #5
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	4413      	add	r3, r2
 8002c3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c3e:	461a      	mov	r2, r3
 8002c40:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	e008      	b.n	8002c5a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	015a      	lsls	r2, r3, #5
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	4413      	add	r3, r2
 8002c50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c54:	461a      	mov	r2, r3
 8002c56:	2300      	movs	r3, #0
 8002c58:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	015a      	lsls	r2, r3, #5
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	4413      	add	r3, r2
 8002c62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c66:	461a      	mov	r2, r3
 8002c68:	2300      	movs	r3, #0
 8002c6a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	015a      	lsls	r2, r3, #5
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	4413      	add	r3, r2
 8002c74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c78:	461a      	mov	r2, r3
 8002c7a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002c7e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	3301      	adds	r3, #1
 8002c84:	613b      	str	r3, [r7, #16]
 8002c86:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d3b5      	bcc.n	8002bfe <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ca0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ca4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8002cb2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002cb4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d105      	bne.n	8002cc8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	f043 0210 	orr.w	r2, r3, #16
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	699a      	ldr	r2, [r3, #24]
 8002ccc:	4b10      	ldr	r3, [pc, #64]	@ (8002d10 <USB_DevInit+0x2c4>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002cd4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d005      	beq.n	8002ce8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	f043 0208 	orr.w	r2, r3, #8
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002ce8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d107      	bne.n	8002d00 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002cf8:	f043 0304 	orr.w	r3, r3, #4
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002d00:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3718      	adds	r7, #24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002d0c:	b004      	add	sp, #16
 8002d0e:	4770      	bx	lr
 8002d10:	803c3800 	.word	0x803c3800

08002d14 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	3301      	adds	r3, #1
 8002d26:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002d2e:	d901      	bls.n	8002d34 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e01b      	b.n	8002d6c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	daf2      	bge.n	8002d22 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	019b      	lsls	r3, r3, #6
 8002d44:	f043 0220 	orr.w	r2, r3, #32
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	3301      	adds	r3, #1
 8002d50:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002d58:	d901      	bls.n	8002d5e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e006      	b.n	8002d6c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	f003 0320 	and.w	r3, r3, #32
 8002d66:	2b20      	cmp	r3, #32
 8002d68:	d0f0      	beq.n	8002d4c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3714      	adds	r7, #20
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002d80:	2300      	movs	r3, #0
 8002d82:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	3301      	adds	r3, #1
 8002d88:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002d90:	d901      	bls.n	8002d96 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e018      	b.n	8002dc8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	daf2      	bge.n	8002d84 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2210      	movs	r2, #16
 8002da6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	3301      	adds	r3, #1
 8002dac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002db4:	d901      	bls.n	8002dba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e006      	b.n	8002dc8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	f003 0310 	and.w	r3, r3, #16
 8002dc2:	2b10      	cmp	r3, #16
 8002dc4:	d0f0      	beq.n	8002da8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3714      	adds	r7, #20
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	460b      	mov	r3, r1
 8002dde:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	78fb      	ldrb	r3, [r7, #3]
 8002dee:	68f9      	ldr	r1, [r7, #12]
 8002df0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002df4:	4313      	orrs	r3, r2
 8002df6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3714      	adds	r7, #20
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b087      	sub	sp, #28
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f003 0306 	and.w	r3, r3, #6
 8002e1e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d102      	bne.n	8002e2c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8002e26:	2300      	movs	r3, #0
 8002e28:	75fb      	strb	r3, [r7, #23]
 8002e2a:	e00a      	b.n	8002e42 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d002      	beq.n	8002e38 <USB_GetDevSpeed+0x32>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2b06      	cmp	r3, #6
 8002e36:	d102      	bne.n	8002e3e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8002e38:	2302      	movs	r3, #2
 8002e3a:	75fb      	strb	r3, [r7, #23]
 8002e3c:	e001      	b.n	8002e42 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8002e3e:	230f      	movs	r3, #15
 8002e40:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8002e42:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	371c      	adds	r7, #28
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	785b      	ldrb	r3, [r3, #1]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d13a      	bne.n	8002ee2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e72:	69da      	ldr	r2, [r3, #28]
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	f003 030f 	and.w	r3, r3, #15
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	68f9      	ldr	r1, [r7, #12]
 8002e86:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	015a      	lsls	r2, r3, #5
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	4413      	add	r3, r2
 8002e96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d155      	bne.n	8002f50 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	015a      	lsls	r2, r3, #5
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	4413      	add	r3, r2
 8002eac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	791b      	ldrb	r3, [r3, #4]
 8002ebe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002ec0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	059b      	lsls	r3, r3, #22
 8002ec6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	68ba      	ldr	r2, [r7, #8]
 8002ecc:	0151      	lsls	r1, r2, #5
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	440a      	add	r2, r1
 8002ed2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002ed6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002eda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ede:	6013      	str	r3, [r2, #0]
 8002ee0:	e036      	b.n	8002f50 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ee8:	69da      	ldr	r2, [r3, #28]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	f003 030f 	and.w	r3, r3, #15
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef8:	041b      	lsls	r3, r3, #16
 8002efa:	68f9      	ldr	r1, [r7, #12]
 8002efc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002f00:	4313      	orrs	r3, r2
 8002f02:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	015a      	lsls	r2, r3, #5
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d11a      	bne.n	8002f50 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	015a      	lsls	r2, r3, #5
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	4413      	add	r3, r2
 8002f22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	791b      	ldrb	r3, [r3, #4]
 8002f34:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8002f36:	430b      	orrs	r3, r1
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	68ba      	ldr	r2, [r7, #8]
 8002f3c:	0151      	lsls	r1, r2, #5
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	440a      	add	r2, r1
 8002f42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002f46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f4e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3714      	adds	r7, #20
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
	...

08002f60 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	785b      	ldrb	r3, [r3, #1]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d161      	bne.n	8003040 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	015a      	lsls	r2, r3, #5
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	4413      	add	r3, r2
 8002f84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002f8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002f92:	d11f      	bne.n	8002fd4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	015a      	lsls	r2, r3, #5
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68ba      	ldr	r2, [r7, #8]
 8002fa4:	0151      	lsls	r1, r2, #5
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	440a      	add	r2, r1
 8002faa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002fae:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002fb2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	015a      	lsls	r2, r3, #5
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	4413      	add	r3, r2
 8002fbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68ba      	ldr	r2, [r7, #8]
 8002fc4:	0151      	lsls	r1, r2, #5
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	440a      	add	r2, r1
 8002fca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002fce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002fd2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fda:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	f003 030f 	and.w	r3, r3, #15
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	43db      	mvns	r3, r3
 8002fee:	68f9      	ldr	r1, [r7, #12]
 8002ff0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ffe:	69da      	ldr	r2, [r3, #28]
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	f003 030f 	and.w	r3, r3, #15
 8003008:	2101      	movs	r1, #1
 800300a:	fa01 f303 	lsl.w	r3, r1, r3
 800300e:	b29b      	uxth	r3, r3
 8003010:	43db      	mvns	r3, r3
 8003012:	68f9      	ldr	r1, [r7, #12]
 8003014:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003018:	4013      	ands	r3, r2
 800301a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	015a      	lsls	r2, r3, #5
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	4413      	add	r3, r2
 8003024:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	0159      	lsls	r1, r3, #5
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	440b      	add	r3, r1
 8003032:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003036:	4619      	mov	r1, r3
 8003038:	4b35      	ldr	r3, [pc, #212]	@ (8003110 <USB_DeactivateEndpoint+0x1b0>)
 800303a:	4013      	ands	r3, r2
 800303c:	600b      	str	r3, [r1, #0]
 800303e:	e060      	b.n	8003102 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	015a      	lsls	r2, r3, #5
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	4413      	add	r3, r2
 8003048:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003052:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003056:	d11f      	bne.n	8003098 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	015a      	lsls	r2, r3, #5
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	4413      	add	r3, r2
 8003060:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68ba      	ldr	r2, [r7, #8]
 8003068:	0151      	lsls	r1, r2, #5
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	440a      	add	r2, r1
 800306e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003072:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003076:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	015a      	lsls	r2, r3, #5
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	4413      	add	r3, r2
 8003080:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68ba      	ldr	r2, [r7, #8]
 8003088:	0151      	lsls	r1, r2, #5
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	440a      	add	r2, r1
 800308e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003092:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003096:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800309e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	f003 030f 	and.w	r3, r3, #15
 80030a8:	2101      	movs	r1, #1
 80030aa:	fa01 f303 	lsl.w	r3, r1, r3
 80030ae:	041b      	lsls	r3, r3, #16
 80030b0:	43db      	mvns	r3, r3
 80030b2:	68f9      	ldr	r1, [r7, #12]
 80030b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80030b8:	4013      	ands	r3, r2
 80030ba:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030c2:	69da      	ldr	r2, [r3, #28]
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	f003 030f 	and.w	r3, r3, #15
 80030cc:	2101      	movs	r1, #1
 80030ce:	fa01 f303 	lsl.w	r3, r1, r3
 80030d2:	041b      	lsls	r3, r3, #16
 80030d4:	43db      	mvns	r3, r3
 80030d6:	68f9      	ldr	r1, [r7, #12]
 80030d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80030dc:	4013      	ands	r3, r2
 80030de:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	015a      	lsls	r2, r3, #5
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	4413      	add	r3, r2
 80030e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	0159      	lsls	r1, r3, #5
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	440b      	add	r3, r1
 80030f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030fa:	4619      	mov	r1, r3
 80030fc:	4b05      	ldr	r3, [pc, #20]	@ (8003114 <USB_DeactivateEndpoint+0x1b4>)
 80030fe:	4013      	ands	r3, r2
 8003100:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3714      	adds	r7, #20
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr
 8003110:	ec337800 	.word	0xec337800
 8003114:	eff37800 	.word	0xeff37800

08003118 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b08a      	sub	sp, #40	@ 0x28
 800311c:	af02      	add	r7, sp, #8
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	4613      	mov	r3, r2
 8003124:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	785b      	ldrb	r3, [r3, #1]
 8003134:	2b01      	cmp	r3, #1
 8003136:	f040 817f 	bne.w	8003438 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d132      	bne.n	80031a8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	015a      	lsls	r2, r3, #5
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	4413      	add	r3, r2
 800314a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	0151      	lsls	r1, r2, #5
 8003154:	69fa      	ldr	r2, [r7, #28]
 8003156:	440a      	add	r2, r1
 8003158:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800315c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003160:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003164:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	015a      	lsls	r2, r3, #5
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	4413      	add	r3, r2
 800316e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	0151      	lsls	r1, r2, #5
 8003178:	69fa      	ldr	r2, [r7, #28]
 800317a:	440a      	add	r2, r1
 800317c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003180:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003184:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	015a      	lsls	r2, r3, #5
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	4413      	add	r3, r2
 800318e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	0151      	lsls	r1, r2, #5
 8003198:	69fa      	ldr	r2, [r7, #28]
 800319a:	440a      	add	r2, r1
 800319c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80031a0:	0cdb      	lsrs	r3, r3, #19
 80031a2:	04db      	lsls	r3, r3, #19
 80031a4:	6113      	str	r3, [r2, #16]
 80031a6:	e097      	b.n	80032d8 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	015a      	lsls	r2, r3, #5
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	4413      	add	r3, r2
 80031b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	0151      	lsls	r1, r2, #5
 80031ba:	69fa      	ldr	r2, [r7, #28]
 80031bc:	440a      	add	r2, r1
 80031be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80031c2:	0cdb      	lsrs	r3, r3, #19
 80031c4:	04db      	lsls	r3, r3, #19
 80031c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	015a      	lsls	r2, r3, #5
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	4413      	add	r3, r2
 80031d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	0151      	lsls	r1, r2, #5
 80031da:	69fa      	ldr	r2, [r7, #28]
 80031dc:	440a      	add	r2, r1
 80031de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80031e2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80031e6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80031ea:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d11a      	bne.n	8003228 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	691a      	ldr	r2, [r3, #16]
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d903      	bls.n	8003206 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	689a      	ldr	r2, [r3, #8]
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	015a      	lsls	r2, r3, #5
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	4413      	add	r3, r2
 800320e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	0151      	lsls	r1, r2, #5
 8003218:	69fa      	ldr	r2, [r7, #28]
 800321a:	440a      	add	r2, r1
 800321c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003220:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003224:	6113      	str	r3, [r2, #16]
 8003226:	e044      	b.n	80032b2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	691a      	ldr	r2, [r3, #16]
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	4413      	add	r3, r2
 8003232:	1e5a      	subs	r2, r3, #1
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	fbb2 f3f3 	udiv	r3, r2, r3
 800323c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	015a      	lsls	r2, r3, #5
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	4413      	add	r3, r2
 8003246:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800324a:	691a      	ldr	r2, [r3, #16]
 800324c:	8afb      	ldrh	r3, [r7, #22]
 800324e:	04d9      	lsls	r1, r3, #19
 8003250:	4ba4      	ldr	r3, [pc, #656]	@ (80034e4 <USB_EPStartXfer+0x3cc>)
 8003252:	400b      	ands	r3, r1
 8003254:	69b9      	ldr	r1, [r7, #24]
 8003256:	0148      	lsls	r0, r1, #5
 8003258:	69f9      	ldr	r1, [r7, #28]
 800325a:	4401      	add	r1, r0
 800325c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003260:	4313      	orrs	r3, r2
 8003262:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	791b      	ldrb	r3, [r3, #4]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d122      	bne.n	80032b2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	015a      	lsls	r2, r3, #5
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	4413      	add	r3, r2
 8003274:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	0151      	lsls	r1, r2, #5
 800327e:	69fa      	ldr	r2, [r7, #28]
 8003280:	440a      	add	r2, r1
 8003282:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003286:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800328a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	015a      	lsls	r2, r3, #5
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	4413      	add	r3, r2
 8003294:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003298:	691a      	ldr	r2, [r3, #16]
 800329a:	8afb      	ldrh	r3, [r7, #22]
 800329c:	075b      	lsls	r3, r3, #29
 800329e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80032a2:	69b9      	ldr	r1, [r7, #24]
 80032a4:	0148      	lsls	r0, r1, #5
 80032a6:	69f9      	ldr	r1, [r7, #28]
 80032a8:	4401      	add	r1, r0
 80032aa:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80032ae:	4313      	orrs	r3, r2
 80032b0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	015a      	lsls	r2, r3, #5
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	4413      	add	r3, r2
 80032ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032be:	691a      	ldr	r2, [r3, #16]
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032c8:	69b9      	ldr	r1, [r7, #24]
 80032ca:	0148      	lsls	r0, r1, #5
 80032cc:	69f9      	ldr	r1, [r7, #28]
 80032ce:	4401      	add	r1, r0
 80032d0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80032d4:	4313      	orrs	r3, r2
 80032d6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80032d8:	79fb      	ldrb	r3, [r7, #7]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d14b      	bne.n	8003376 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	69db      	ldr	r3, [r3, #28]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d009      	beq.n	80032fa <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	015a      	lsls	r2, r3, #5
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	4413      	add	r3, r2
 80032ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032f2:	461a      	mov	r2, r3
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	69db      	ldr	r3, [r3, #28]
 80032f8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	791b      	ldrb	r3, [r3, #4]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d128      	bne.n	8003354 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800330e:	2b00      	cmp	r3, #0
 8003310:	d110      	bne.n	8003334 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	015a      	lsls	r2, r3, #5
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	4413      	add	r3, r2
 800331a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	0151      	lsls	r1, r2, #5
 8003324:	69fa      	ldr	r2, [r7, #28]
 8003326:	440a      	add	r2, r1
 8003328:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800332c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003330:	6013      	str	r3, [r2, #0]
 8003332:	e00f      	b.n	8003354 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	015a      	lsls	r2, r3, #5
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	4413      	add	r3, r2
 800333c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	0151      	lsls	r1, r2, #5
 8003346:	69fa      	ldr	r2, [r7, #28]
 8003348:	440a      	add	r2, r1
 800334a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800334e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003352:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	015a      	lsls	r2, r3, #5
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	4413      	add	r3, r2
 800335c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	0151      	lsls	r1, r2, #5
 8003366:	69fa      	ldr	r2, [r7, #28]
 8003368:	440a      	add	r2, r1
 800336a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800336e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003372:	6013      	str	r3, [r2, #0]
 8003374:	e166      	b.n	8003644 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	015a      	lsls	r2, r3, #5
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	4413      	add	r3, r2
 800337e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	0151      	lsls	r1, r2, #5
 8003388:	69fa      	ldr	r2, [r7, #28]
 800338a:	440a      	add	r2, r1
 800338c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003390:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003394:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	791b      	ldrb	r3, [r3, #4]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d015      	beq.n	80033ca <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f000 814e 	beq.w	8003644 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	f003 030f 	and.w	r3, r3, #15
 80033b8:	2101      	movs	r1, #1
 80033ba:	fa01 f303 	lsl.w	r3, r1, r3
 80033be:	69f9      	ldr	r1, [r7, #28]
 80033c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80033c4:	4313      	orrs	r3, r2
 80033c6:	634b      	str	r3, [r1, #52]	@ 0x34
 80033c8:	e13c      	b.n	8003644 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d110      	bne.n	80033fc <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	015a      	lsls	r2, r3, #5
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	4413      	add	r3, r2
 80033e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	0151      	lsls	r1, r2, #5
 80033ec:	69fa      	ldr	r2, [r7, #28]
 80033ee:	440a      	add	r2, r1
 80033f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80033f4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80033f8:	6013      	str	r3, [r2, #0]
 80033fa:	e00f      	b.n	800341c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	015a      	lsls	r2, r3, #5
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	4413      	add	r3, r2
 8003404:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	0151      	lsls	r1, r2, #5
 800340e:	69fa      	ldr	r2, [r7, #28]
 8003410:	440a      	add	r2, r1
 8003412:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003416:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800341a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	68d9      	ldr	r1, [r3, #12]
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	781a      	ldrb	r2, [r3, #0]
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	691b      	ldr	r3, [r3, #16]
 8003428:	b298      	uxth	r0, r3
 800342a:	79fb      	ldrb	r3, [r7, #7]
 800342c:	9300      	str	r3, [sp, #0]
 800342e:	4603      	mov	r3, r0
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	f000 f9b9 	bl	80037a8 <USB_WritePacket>
 8003436:	e105      	b.n	8003644 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	015a      	lsls	r2, r3, #5
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	4413      	add	r3, r2
 8003440:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	69ba      	ldr	r2, [r7, #24]
 8003448:	0151      	lsls	r1, r2, #5
 800344a:	69fa      	ldr	r2, [r7, #28]
 800344c:	440a      	add	r2, r1
 800344e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003452:	0cdb      	lsrs	r3, r3, #19
 8003454:	04db      	lsls	r3, r3, #19
 8003456:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	015a      	lsls	r2, r3, #5
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	4413      	add	r3, r2
 8003460:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	0151      	lsls	r1, r2, #5
 800346a:	69fa      	ldr	r2, [r7, #28]
 800346c:	440a      	add	r2, r1
 800346e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003472:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003476:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800347a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d132      	bne.n	80034e8 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d003      	beq.n	8003492 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	689a      	ldr	r2, [r3, #8]
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	689a      	ldr	r2, [r3, #8]
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	015a      	lsls	r2, r3, #5
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	4413      	add	r3, r2
 80034a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034a6:	691a      	ldr	r2, [r3, #16]
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034b0:	69b9      	ldr	r1, [r7, #24]
 80034b2:	0148      	lsls	r0, r1, #5
 80034b4:	69f9      	ldr	r1, [r7, #28]
 80034b6:	4401      	add	r1, r0
 80034b8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80034bc:	4313      	orrs	r3, r2
 80034be:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	015a      	lsls	r2, r3, #5
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	4413      	add	r3, r2
 80034c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	0151      	lsls	r1, r2, #5
 80034d2:	69fa      	ldr	r2, [r7, #28]
 80034d4:	440a      	add	r2, r1
 80034d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80034da:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80034de:	6113      	str	r3, [r2, #16]
 80034e0:	e062      	b.n	80035a8 <USB_EPStartXfer+0x490>
 80034e2:	bf00      	nop
 80034e4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d123      	bne.n	8003538 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	015a      	lsls	r2, r3, #5
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	4413      	add	r3, r2
 80034f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034fc:	691a      	ldr	r2, [r3, #16]
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003506:	69b9      	ldr	r1, [r7, #24]
 8003508:	0148      	lsls	r0, r1, #5
 800350a:	69f9      	ldr	r1, [r7, #28]
 800350c:	4401      	add	r1, r0
 800350e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003512:	4313      	orrs	r3, r2
 8003514:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	015a      	lsls	r2, r3, #5
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	4413      	add	r3, r2
 800351e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	0151      	lsls	r1, r2, #5
 8003528:	69fa      	ldr	r2, [r7, #28]
 800352a:	440a      	add	r2, r1
 800352c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003530:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003534:	6113      	str	r3, [r2, #16]
 8003536:	e037      	b.n	80035a8 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	691a      	ldr	r2, [r3, #16]
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	4413      	add	r3, r2
 8003542:	1e5a      	subs	r2, r3, #1
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	fbb2 f3f3 	udiv	r3, r2, r3
 800354c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	8afa      	ldrh	r2, [r7, #22]
 8003554:	fb03 f202 	mul.w	r2, r3, r2
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	015a      	lsls	r2, r3, #5
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	4413      	add	r3, r2
 8003564:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003568:	691a      	ldr	r2, [r3, #16]
 800356a:	8afb      	ldrh	r3, [r7, #22]
 800356c:	04d9      	lsls	r1, r3, #19
 800356e:	4b38      	ldr	r3, [pc, #224]	@ (8003650 <USB_EPStartXfer+0x538>)
 8003570:	400b      	ands	r3, r1
 8003572:	69b9      	ldr	r1, [r7, #24]
 8003574:	0148      	lsls	r0, r1, #5
 8003576:	69f9      	ldr	r1, [r7, #28]
 8003578:	4401      	add	r1, r0
 800357a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800357e:	4313      	orrs	r3, r2
 8003580:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	015a      	lsls	r2, r3, #5
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	4413      	add	r3, r2
 800358a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800358e:	691a      	ldr	r2, [r3, #16]
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003598:	69b9      	ldr	r1, [r7, #24]
 800359a:	0148      	lsls	r0, r1, #5
 800359c:	69f9      	ldr	r1, [r7, #28]
 800359e:	4401      	add	r1, r0
 80035a0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80035a4:	4313      	orrs	r3, r2
 80035a6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80035a8:	79fb      	ldrb	r3, [r7, #7]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d10d      	bne.n	80035ca <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d009      	beq.n	80035ca <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	68d9      	ldr	r1, [r3, #12]
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	015a      	lsls	r2, r3, #5
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	4413      	add	r3, r2
 80035c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035c6:	460a      	mov	r2, r1
 80035c8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	791b      	ldrb	r3, [r3, #4]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d128      	bne.n	8003624 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d110      	bne.n	8003604 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	015a      	lsls	r2, r3, #5
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	4413      	add	r3, r2
 80035ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	0151      	lsls	r1, r2, #5
 80035f4:	69fa      	ldr	r2, [r7, #28]
 80035f6:	440a      	add	r2, r1
 80035f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80035fc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003600:	6013      	str	r3, [r2, #0]
 8003602:	e00f      	b.n	8003624 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	015a      	lsls	r2, r3, #5
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	4413      	add	r3, r2
 800360c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	0151      	lsls	r1, r2, #5
 8003616:	69fa      	ldr	r2, [r7, #28]
 8003618:	440a      	add	r2, r1
 800361a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800361e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003622:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	015a      	lsls	r2, r3, #5
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	4413      	add	r3, r2
 800362c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	0151      	lsls	r1, r2, #5
 8003636:	69fa      	ldr	r2, [r7, #28]
 8003638:	440a      	add	r2, r1
 800363a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800363e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003642:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3720      	adds	r7, #32
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	1ff80000 	.word	0x1ff80000

08003654 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003654:	b480      	push	{r7}
 8003656:	b087      	sub	sp, #28
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800365e:	2300      	movs	r3, #0
 8003660:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003662:	2300      	movs	r3, #0
 8003664:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	785b      	ldrb	r3, [r3, #1]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d14a      	bne.n	8003708 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	015a      	lsls	r2, r3, #5
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	4413      	add	r3, r2
 800367c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003686:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800368a:	f040 8086 	bne.w	800379a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	015a      	lsls	r2, r3, #5
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	4413      	add	r3, r2
 8003698:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	7812      	ldrb	r2, [r2, #0]
 80036a2:	0151      	lsls	r1, r2, #5
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	440a      	add	r2, r1
 80036a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80036ac:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80036b0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	015a      	lsls	r2, r3, #5
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	4413      	add	r3, r2
 80036bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	7812      	ldrb	r2, [r2, #0]
 80036c6:	0151      	lsls	r1, r2, #5
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	440a      	add	r2, r1
 80036cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80036d0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80036d4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	3301      	adds	r3, #1
 80036da:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f242 7210 	movw	r2, #10000	@ 0x2710
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d902      	bls.n	80036ec <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	75fb      	strb	r3, [r7, #23]
          break;
 80036ea:	e056      	b.n	800379a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	015a      	lsls	r2, r3, #5
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	4413      	add	r3, r2
 80036f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003700:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003704:	d0e7      	beq.n	80036d6 <USB_EPStopXfer+0x82>
 8003706:	e048      	b.n	800379a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	015a      	lsls	r2, r3, #5
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	4413      	add	r3, r2
 8003712:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800371c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003720:	d13b      	bne.n	800379a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	015a      	lsls	r2, r3, #5
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	4413      	add	r3, r2
 800372c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	683a      	ldr	r2, [r7, #0]
 8003734:	7812      	ldrb	r2, [r2, #0]
 8003736:	0151      	lsls	r1, r2, #5
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	440a      	add	r2, r1
 800373c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003740:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003744:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	015a      	lsls	r2, r3, #5
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	4413      	add	r3, r2
 8003750:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	7812      	ldrb	r2, [r2, #0]
 800375a:	0151      	lsls	r1, r2, #5
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	440a      	add	r2, r1
 8003760:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003764:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003768:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	3301      	adds	r3, #1
 800376e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003776:	4293      	cmp	r3, r2
 8003778:	d902      	bls.n	8003780 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	75fb      	strb	r3, [r7, #23]
          break;
 800377e:	e00c      	b.n	800379a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	015a      	lsls	r2, r3, #5
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	4413      	add	r3, r2
 800378a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003794:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003798:	d0e7      	beq.n	800376a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800379a:	7dfb      	ldrb	r3, [r7, #23]
}
 800379c:	4618      	mov	r0, r3
 800379e:	371c      	adds	r7, #28
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b089      	sub	sp, #36	@ 0x24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	4611      	mov	r1, r2
 80037b4:	461a      	mov	r2, r3
 80037b6:	460b      	mov	r3, r1
 80037b8:	71fb      	strb	r3, [r7, #7]
 80037ba:	4613      	mov	r3, r2
 80037bc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80037c6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d123      	bne.n	8003816 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80037ce:	88bb      	ldrh	r3, [r7, #4]
 80037d0:	3303      	adds	r3, #3
 80037d2:	089b      	lsrs	r3, r3, #2
 80037d4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80037d6:	2300      	movs	r3, #0
 80037d8:	61bb      	str	r3, [r7, #24]
 80037da:	e018      	b.n	800380e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80037dc:	79fb      	ldrb	r3, [r7, #7]
 80037de:	031a      	lsls	r2, r3, #12
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	4413      	add	r3, r2
 80037e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037e8:	461a      	mov	r2, r3
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	6013      	str	r3, [r2, #0]
      pSrc++;
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	3301      	adds	r3, #1
 80037f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	3301      	adds	r3, #1
 80037fa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	3301      	adds	r3, #1
 8003800:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	3301      	adds	r3, #1
 8003806:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	3301      	adds	r3, #1
 800380c:	61bb      	str	r3, [r7, #24]
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	429a      	cmp	r2, r3
 8003814:	d3e2      	bcc.n	80037dc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3724      	adds	r7, #36	@ 0x24
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003824:	b480      	push	{r7}
 8003826:	b08b      	sub	sp, #44	@ 0x2c
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	4613      	mov	r3, r2
 8003830:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800383a:	88fb      	ldrh	r3, [r7, #6]
 800383c:	089b      	lsrs	r3, r3, #2
 800383e:	b29b      	uxth	r3, r3
 8003840:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003842:	88fb      	ldrh	r3, [r7, #6]
 8003844:	f003 0303 	and.w	r3, r3, #3
 8003848:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800384a:	2300      	movs	r3, #0
 800384c:	623b      	str	r3, [r7, #32]
 800384e:	e014      	b.n	800387a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800385a:	601a      	str	r2, [r3, #0]
    pDest++;
 800385c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800385e:	3301      	adds	r3, #1
 8003860:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003864:	3301      	adds	r3, #1
 8003866:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800386a:	3301      	adds	r3, #1
 800386c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800386e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003870:	3301      	adds	r3, #1
 8003872:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8003874:	6a3b      	ldr	r3, [r7, #32]
 8003876:	3301      	adds	r3, #1
 8003878:	623b      	str	r3, [r7, #32]
 800387a:	6a3a      	ldr	r2, [r7, #32]
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	429a      	cmp	r2, r3
 8003880:	d3e6      	bcc.n	8003850 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003882:	8bfb      	ldrh	r3, [r7, #30]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d01e      	beq.n	80038c6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003888:	2300      	movs	r3, #0
 800388a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003892:	461a      	mov	r2, r3
 8003894:	f107 0310 	add.w	r3, r7, #16
 8003898:	6812      	ldr	r2, [r2, #0]
 800389a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	6a3b      	ldr	r3, [r7, #32]
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	fa22 f303 	lsr.w	r3, r2, r3
 80038a8:	b2da      	uxtb	r2, r3
 80038aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ac:	701a      	strb	r2, [r3, #0]
      i++;
 80038ae:	6a3b      	ldr	r3, [r7, #32]
 80038b0:	3301      	adds	r3, #1
 80038b2:	623b      	str	r3, [r7, #32]
      pDest++;
 80038b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b6:	3301      	adds	r3, #1
 80038b8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80038ba:	8bfb      	ldrh	r3, [r7, #30]
 80038bc:	3b01      	subs	r3, #1
 80038be:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80038c0:	8bfb      	ldrh	r3, [r7, #30]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1ea      	bne.n	800389c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80038c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	372c      	adds	r7, #44	@ 0x2c
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	785b      	ldrb	r3, [r3, #1]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d12c      	bne.n	800394a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	015a      	lsls	r2, r3, #5
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	4413      	add	r3, r2
 80038f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	db12      	blt.n	8003928 <USB_EPSetStall+0x54>
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00f      	beq.n	8003928 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	015a      	lsls	r2, r3, #5
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	4413      	add	r3, r2
 8003910:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68ba      	ldr	r2, [r7, #8]
 8003918:	0151      	lsls	r1, r2, #5
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	440a      	add	r2, r1
 800391e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003922:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003926:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	015a      	lsls	r2, r3, #5
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	4413      	add	r3, r2
 8003930:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68ba      	ldr	r2, [r7, #8]
 8003938:	0151      	lsls	r1, r2, #5
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	440a      	add	r2, r1
 800393e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003942:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003946:	6013      	str	r3, [r2, #0]
 8003948:	e02b      	b.n	80039a2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	015a      	lsls	r2, r3, #5
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	4413      	add	r3, r2
 8003952:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	db12      	blt.n	8003982 <USB_EPSetStall+0xae>
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00f      	beq.n	8003982 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	015a      	lsls	r2, r3, #5
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	4413      	add	r3, r2
 800396a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68ba      	ldr	r2, [r7, #8]
 8003972:	0151      	lsls	r1, r2, #5
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	440a      	add	r2, r1
 8003978:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800397c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003980:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	015a      	lsls	r2, r3, #5
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	4413      	add	r3, r2
 800398a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68ba      	ldr	r2, [r7, #8]
 8003992:	0151      	lsls	r1, r2, #5
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	440a      	add	r2, r1
 8003998:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800399c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80039a0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3714      	adds	r7, #20
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	785b      	ldrb	r3, [r3, #1]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d128      	bne.n	8003a1e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	015a      	lsls	r2, r3, #5
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	4413      	add	r3, r2
 80039d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68ba      	ldr	r2, [r7, #8]
 80039dc:	0151      	lsls	r1, r2, #5
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	440a      	add	r2, r1
 80039e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80039e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80039ea:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	791b      	ldrb	r3, [r3, #4]
 80039f0:	2b03      	cmp	r3, #3
 80039f2:	d003      	beq.n	80039fc <USB_EPClearStall+0x4c>
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	791b      	ldrb	r3, [r3, #4]
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d138      	bne.n	8003a6e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	015a      	lsls	r2, r3, #5
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	4413      	add	r3, r2
 8003a04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68ba      	ldr	r2, [r7, #8]
 8003a0c:	0151      	lsls	r1, r2, #5
 8003a0e:	68fa      	ldr	r2, [r7, #12]
 8003a10:	440a      	add	r2, r1
 8003a12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003a16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a1a:	6013      	str	r3, [r2, #0]
 8003a1c:	e027      	b.n	8003a6e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	015a      	lsls	r2, r3, #5
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	4413      	add	r3, r2
 8003a26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68ba      	ldr	r2, [r7, #8]
 8003a2e:	0151      	lsls	r1, r2, #5
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	440a      	add	r2, r1
 8003a34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003a38:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003a3c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	791b      	ldrb	r3, [r3, #4]
 8003a42:	2b03      	cmp	r3, #3
 8003a44:	d003      	beq.n	8003a4e <USB_EPClearStall+0x9e>
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	791b      	ldrb	r3, [r3, #4]
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d10f      	bne.n	8003a6e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	015a      	lsls	r2, r3, #5
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	4413      	add	r3, r2
 8003a56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68ba      	ldr	r2, [r7, #8]
 8003a5e:	0151      	lsls	r1, r2, #5
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	440a      	add	r2, r1
 8003a64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003a68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a6c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3714      	adds	r7, #20
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	460b      	mov	r3, r1
 8003a86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a9a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003a9e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	78fb      	ldrb	r3, [r7, #3]
 8003aaa:	011b      	lsls	r3, r3, #4
 8003aac:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8003ab0:	68f9      	ldr	r1, [r7, #12]
 8003ab2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3714      	adds	r7, #20
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003ae2:	f023 0303 	bic.w	r3, r3, #3
 8003ae6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003af6:	f023 0302 	bic.w	r3, r3, #2
 8003afa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3714      	adds	r7, #20
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b085      	sub	sp, #20
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003b24:	f023 0303 	bic.w	r3, r3, #3
 8003b28:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b38:	f043 0302 	orr.w	r3, r3, #2
 8003b3c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3714      	adds	r7, #20
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	695b      	ldr	r3, [r3, #20]
 8003b58:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	4013      	ands	r3, r2
 8003b62:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003b64:	68fb      	ldr	r3, [r7, #12]
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3714      	adds	r7, #20
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr

08003b72 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8003b72:	b480      	push	{r7}
 8003b74:	b085      	sub	sp, #20
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b8e:	69db      	ldr	r3, [r3, #28]
 8003b90:	68ba      	ldr	r2, [r7, #8]
 8003b92:	4013      	ands	r3, r2
 8003b94:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	0c1b      	lsrs	r3, r3, #16
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3714      	adds	r7, #20
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b085      	sub	sp, #20
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bc2:	69db      	ldr	r3, [r3, #28]
 8003bc4:	68ba      	ldr	r2, [r7, #8]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	b29b      	uxth	r3, r3
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3714      	adds	r7, #20
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr

08003bda <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003bda:	b480      	push	{r7}
 8003bdc:	b085      	sub	sp, #20
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
 8003be2:	460b      	mov	r3, r1
 8003be4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003bea:	78fb      	ldrb	r3, [r7, #3]
 8003bec:	015a      	lsls	r2, r3, #5
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	4013      	ands	r3, r2
 8003c06:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003c08:	68bb      	ldr	r3, [r7, #8]
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3714      	adds	r7, #20
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr

08003c16 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003c16:	b480      	push	{r7}
 8003c18:	b087      	sub	sp, #28
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
 8003c1e:	460b      	mov	r3, r1
 8003c20:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c38:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8003c3a:	78fb      	ldrb	r3, [r7, #3]
 8003c3c:	f003 030f 	and.w	r3, r3, #15
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	fa22 f303 	lsr.w	r3, r2, r3
 8003c46:	01db      	lsls	r3, r3, #7
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003c50:	78fb      	ldrb	r3, [r7, #3]
 8003c52:	015a      	lsls	r2, r3, #5
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	4413      	add	r3, r2
 8003c58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	4013      	ands	r3, r2
 8003c62:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003c64:	68bb      	ldr	r3, [r7, #8]
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	371c      	adds	r7, #28
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr

08003c72 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003c72:	b480      	push	{r7}
 8003c74:	b083      	sub	sp, #12
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	f003 0301 	and.w	r3, r3, #1
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr

08003c8e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8003c8e:	b480      	push	{r7}
 8003c90:	b085      	sub	sp, #20
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ca8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003cac:	f023 0307 	bic.w	r3, r3, #7
 8003cb0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003cc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cc4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3714      	adds	r7, #20
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b087      	sub	sp, #28
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	460b      	mov	r3, r1
 8003cde:	607a      	str	r2, [r7, #4]
 8003ce0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	333c      	adds	r3, #60	@ 0x3c
 8003cea:	3304      	adds	r3, #4
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	4a26      	ldr	r2, [pc, #152]	@ (8003d8c <USB_EP0_OutStart+0xb8>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d90a      	bls.n	8003d0e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d04:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d08:	d101      	bne.n	8003d0e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	e037      	b.n	8003d7e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d14:	461a      	mov	r2, r3
 8003d16:	2300      	movs	r3, #0
 8003d18:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	697a      	ldr	r2, [r7, #20]
 8003d24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d28:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003d2c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	697a      	ldr	r2, [r7, #20]
 8003d38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d3c:	f043 0318 	orr.w	r3, r3, #24
 8003d40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d50:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8003d54:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8003d56:	7afb      	ldrb	r3, [r7, #11]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d10f      	bne.n	8003d7c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d62:	461a      	mov	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	697a      	ldr	r2, [r7, #20]
 8003d72:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d76:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8003d7a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	371c      	adds	r7, #28
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	4f54300a 	.word	0x4f54300a

08003d90 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	3301      	adds	r3, #1
 8003da0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003da8:	d901      	bls.n	8003dae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e01b      	b.n	8003de6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	daf2      	bge.n	8003d9c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003db6:	2300      	movs	r3, #0
 8003db8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	f043 0201 	orr.w	r2, r3, #1
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	3301      	adds	r3, #1
 8003dca:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003dd2:	d901      	bls.n	8003dd8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e006      	b.n	8003de6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	f003 0301 	and.w	r3, r3, #1
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d0f0      	beq.n	8003dc6 <USB_CoreReset+0x36>

  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3714      	adds	r7, #20
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
	...

08003df4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8003e00:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8003e04:	f002 fc38 	bl	8006678 <USBD_static_malloc>
 8003e08:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d109      	bne.n	8003e24 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	32b0      	adds	r2, #176	@ 0xb0
 8003e1a:	2100      	movs	r1, #0
 8003e1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8003e20:	2302      	movs	r3, #2
 8003e22:	e0d4      	b.n	8003fce <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8003e24:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8003e28:	2100      	movs	r1, #0
 8003e2a:	68f8      	ldr	r0, [r7, #12]
 8003e2c:	f002 fe60 	bl	8006af0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	32b0      	adds	r2, #176	@ 0xb0
 8003e3a:	68f9      	ldr	r1, [r7, #12]
 8003e3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	32b0      	adds	r2, #176	@ 0xb0
 8003e4a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	7c1b      	ldrb	r3, [r3, #16]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d138      	bne.n	8003ece <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8003e5c:	4b5e      	ldr	r3, [pc, #376]	@ (8003fd8 <USBD_CDC_Init+0x1e4>)
 8003e5e:	7819      	ldrb	r1, [r3, #0]
 8003e60:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003e64:	2202      	movs	r2, #2
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f002 fae3 	bl	8006432 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8003e6c:	4b5a      	ldr	r3, [pc, #360]	@ (8003fd8 <USBD_CDC_Init+0x1e4>)
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	f003 020f 	and.w	r2, r3, #15
 8003e74:	6879      	ldr	r1, [r7, #4]
 8003e76:	4613      	mov	r3, r2
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	4413      	add	r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	440b      	add	r3, r1
 8003e80:	3324      	adds	r3, #36	@ 0x24
 8003e82:	2201      	movs	r2, #1
 8003e84:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8003e86:	4b55      	ldr	r3, [pc, #340]	@ (8003fdc <USBD_CDC_Init+0x1e8>)
 8003e88:	7819      	ldrb	r1, [r3, #0]
 8003e8a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003e8e:	2202      	movs	r2, #2
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f002 face 	bl	8006432 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8003e96:	4b51      	ldr	r3, [pc, #324]	@ (8003fdc <USBD_CDC_Init+0x1e8>)
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	f003 020f 	and.w	r2, r3, #15
 8003e9e:	6879      	ldr	r1, [r7, #4]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	4413      	add	r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	440b      	add	r3, r1
 8003eaa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003eae:	2201      	movs	r2, #1
 8003eb0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8003eb2:	4b4b      	ldr	r3, [pc, #300]	@ (8003fe0 <USBD_CDC_Init+0x1ec>)
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	f003 020f 	and.w	r2, r3, #15
 8003eba:	6879      	ldr	r1, [r7, #4]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4413      	add	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	440b      	add	r3, r1
 8003ec6:	3326      	adds	r3, #38	@ 0x26
 8003ec8:	2210      	movs	r2, #16
 8003eca:	801a      	strh	r2, [r3, #0]
 8003ecc:	e035      	b.n	8003f3a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8003ece:	4b42      	ldr	r3, [pc, #264]	@ (8003fd8 <USBD_CDC_Init+0x1e4>)
 8003ed0:	7819      	ldrb	r1, [r3, #0]
 8003ed2:	2340      	movs	r3, #64	@ 0x40
 8003ed4:	2202      	movs	r2, #2
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f002 faab 	bl	8006432 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8003edc:	4b3e      	ldr	r3, [pc, #248]	@ (8003fd8 <USBD_CDC_Init+0x1e4>)
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	f003 020f 	and.w	r2, r3, #15
 8003ee4:	6879      	ldr	r1, [r7, #4]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	4413      	add	r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	440b      	add	r3, r1
 8003ef0:	3324      	adds	r3, #36	@ 0x24
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8003ef6:	4b39      	ldr	r3, [pc, #228]	@ (8003fdc <USBD_CDC_Init+0x1e8>)
 8003ef8:	7819      	ldrb	r1, [r3, #0]
 8003efa:	2340      	movs	r3, #64	@ 0x40
 8003efc:	2202      	movs	r2, #2
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f002 fa97 	bl	8006432 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8003f04:	4b35      	ldr	r3, [pc, #212]	@ (8003fdc <USBD_CDC_Init+0x1e8>)
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	f003 020f 	and.w	r2, r3, #15
 8003f0c:	6879      	ldr	r1, [r7, #4]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	4413      	add	r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	440b      	add	r3, r1
 8003f18:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8003f20:	4b2f      	ldr	r3, [pc, #188]	@ (8003fe0 <USBD_CDC_Init+0x1ec>)
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	f003 020f 	and.w	r2, r3, #15
 8003f28:	6879      	ldr	r1, [r7, #4]
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	4413      	add	r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	440b      	add	r3, r1
 8003f34:	3326      	adds	r3, #38	@ 0x26
 8003f36:	2210      	movs	r2, #16
 8003f38:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8003f3a:	4b29      	ldr	r3, [pc, #164]	@ (8003fe0 <USBD_CDC_Init+0x1ec>)
 8003f3c:	7819      	ldrb	r1, [r3, #0]
 8003f3e:	2308      	movs	r3, #8
 8003f40:	2203      	movs	r2, #3
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f002 fa75 	bl	8006432 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8003f48:	4b25      	ldr	r3, [pc, #148]	@ (8003fe0 <USBD_CDC_Init+0x1ec>)
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	f003 020f 	and.w	r2, r3, #15
 8003f50:	6879      	ldr	r1, [r7, #4]
 8003f52:	4613      	mov	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4413      	add	r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	440b      	add	r3, r1
 8003f5c:	3324      	adds	r3, #36	@ 0x24
 8003f5e:	2201      	movs	r2, #1
 8003f60:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	33b0      	adds	r3, #176	@ 0xb0
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	4413      	add	r3, r2
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8003f98:	2302      	movs	r3, #2
 8003f9a:	e018      	b.n	8003fce <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	7c1b      	ldrb	r3, [r3, #16]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d10a      	bne.n	8003fba <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8003fa4:	4b0d      	ldr	r3, [pc, #52]	@ (8003fdc <USBD_CDC_Init+0x1e8>)
 8003fa6:	7819      	ldrb	r1, [r3, #0]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003fae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f002 fb2c 	bl	8006610 <USBD_LL_PrepareReceive>
 8003fb8:	e008      	b.n	8003fcc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8003fba:	4b08      	ldr	r3, [pc, #32]	@ (8003fdc <USBD_CDC_Init+0x1e8>)
 8003fbc:	7819      	ldrb	r1, [r3, #0]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003fc4:	2340      	movs	r3, #64	@ 0x40
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f002 fb22 	bl	8006610 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3710      	adds	r7, #16
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	20000097 	.word	0x20000097
 8003fdc:	20000098 	.word	0x20000098
 8003fe0:	20000099 	.word	0x20000099

08003fe4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	460b      	mov	r3, r1
 8003fee:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8003ff0:	4b3a      	ldr	r3, [pc, #232]	@ (80040dc <USBD_CDC_DeInit+0xf8>)
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f002 fa41 	bl	800647e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8003ffc:	4b37      	ldr	r3, [pc, #220]	@ (80040dc <USBD_CDC_DeInit+0xf8>)
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	f003 020f 	and.w	r2, r3, #15
 8004004:	6879      	ldr	r1, [r7, #4]
 8004006:	4613      	mov	r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	4413      	add	r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	440b      	add	r3, r1
 8004010:	3324      	adds	r3, #36	@ 0x24
 8004012:	2200      	movs	r2, #0
 8004014:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004016:	4b32      	ldr	r3, [pc, #200]	@ (80040e0 <USBD_CDC_DeInit+0xfc>)
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	4619      	mov	r1, r3
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f002 fa2e 	bl	800647e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004022:	4b2f      	ldr	r3, [pc, #188]	@ (80040e0 <USBD_CDC_DeInit+0xfc>)
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	f003 020f 	and.w	r2, r3, #15
 800402a:	6879      	ldr	r1, [r7, #4]
 800402c:	4613      	mov	r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	4413      	add	r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	440b      	add	r3, r1
 8004036:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800403a:	2200      	movs	r2, #0
 800403c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800403e:	4b29      	ldr	r3, [pc, #164]	@ (80040e4 <USBD_CDC_DeInit+0x100>)
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	4619      	mov	r1, r3
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f002 fa1a 	bl	800647e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800404a:	4b26      	ldr	r3, [pc, #152]	@ (80040e4 <USBD_CDC_DeInit+0x100>)
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	f003 020f 	and.w	r2, r3, #15
 8004052:	6879      	ldr	r1, [r7, #4]
 8004054:	4613      	mov	r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	4413      	add	r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	440b      	add	r3, r1
 800405e:	3324      	adds	r3, #36	@ 0x24
 8004060:	2200      	movs	r2, #0
 8004062:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004064:	4b1f      	ldr	r3, [pc, #124]	@ (80040e4 <USBD_CDC_DeInit+0x100>)
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	f003 020f 	and.w	r2, r3, #15
 800406c:	6879      	ldr	r1, [r7, #4]
 800406e:	4613      	mov	r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	4413      	add	r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	440b      	add	r3, r1
 8004078:	3326      	adds	r3, #38	@ 0x26
 800407a:	2200      	movs	r2, #0
 800407c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	32b0      	adds	r2, #176	@ 0xb0
 8004088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d01f      	beq.n	80040d0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	33b0      	adds	r3, #176	@ 0xb0
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4413      	add	r3, r2
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	32b0      	adds	r2, #176	@ 0xb0
 80040ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f002 faee 	bl	8006694 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	32b0      	adds	r2, #176	@ 0xb0
 80040c2:	2100      	movs	r1, #0
 80040c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3708      	adds	r7, #8
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	20000097 	.word	0x20000097
 80040e0:	20000098 	.word	0x20000098
 80040e4:	20000099 	.word	0x20000099

080040e8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	32b0      	adds	r2, #176	@ 0xb0
 80040fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004100:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004102:	2300      	movs	r3, #0
 8004104:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004106:	2300      	movs	r3, #0
 8004108:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800410a:	2300      	movs	r3, #0
 800410c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d101      	bne.n	8004118 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004114:	2303      	movs	r3, #3
 8004116:	e0bf      	b.n	8004298 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004120:	2b00      	cmp	r3, #0
 8004122:	d050      	beq.n	80041c6 <USBD_CDC_Setup+0xde>
 8004124:	2b20      	cmp	r3, #32
 8004126:	f040 80af 	bne.w	8004288 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	88db      	ldrh	r3, [r3, #6]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d03a      	beq.n	80041a8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	b25b      	sxtb	r3, r3
 8004138:	2b00      	cmp	r3, #0
 800413a:	da1b      	bge.n	8004174 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	33b0      	adds	r3, #176	@ 0xb0
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	4413      	add	r3, r2
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	683a      	ldr	r2, [r7, #0]
 8004150:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8004152:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	88d2      	ldrh	r2, [r2, #6]
 8004158:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	88db      	ldrh	r3, [r3, #6]
 800415e:	2b07      	cmp	r3, #7
 8004160:	bf28      	it	cs
 8004162:	2307      	movcs	r3, #7
 8004164:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	89fa      	ldrh	r2, [r7, #14]
 800416a:	4619      	mov	r1, r3
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f001 fd53 	bl	8005c18 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8004172:	e090      	b.n	8004296 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	785a      	ldrb	r2, [r3, #1]
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	88db      	ldrh	r3, [r3, #6]
 8004182:	2b3f      	cmp	r3, #63	@ 0x3f
 8004184:	d803      	bhi.n	800418e <USBD_CDC_Setup+0xa6>
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	88db      	ldrh	r3, [r3, #6]
 800418a:	b2da      	uxtb	r2, r3
 800418c:	e000      	b.n	8004190 <USBD_CDC_Setup+0xa8>
 800418e:	2240      	movs	r2, #64	@ 0x40
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8004196:	6939      	ldr	r1, [r7, #16]
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800419e:	461a      	mov	r2, r3
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f001 fd65 	bl	8005c70 <USBD_CtlPrepareRx>
      break;
 80041a6:	e076      	b.n	8004296 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	33b0      	adds	r3, #176	@ 0xb0
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4413      	add	r3, r2
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	683a      	ldr	r2, [r7, #0]
 80041bc:	7850      	ldrb	r0, [r2, #1]
 80041be:	2200      	movs	r2, #0
 80041c0:	6839      	ldr	r1, [r7, #0]
 80041c2:	4798      	blx	r3
      break;
 80041c4:	e067      	b.n	8004296 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	785b      	ldrb	r3, [r3, #1]
 80041ca:	2b0b      	cmp	r3, #11
 80041cc:	d851      	bhi.n	8004272 <USBD_CDC_Setup+0x18a>
 80041ce:	a201      	add	r2, pc, #4	@ (adr r2, 80041d4 <USBD_CDC_Setup+0xec>)
 80041d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d4:	08004205 	.word	0x08004205
 80041d8:	08004281 	.word	0x08004281
 80041dc:	08004273 	.word	0x08004273
 80041e0:	08004273 	.word	0x08004273
 80041e4:	08004273 	.word	0x08004273
 80041e8:	08004273 	.word	0x08004273
 80041ec:	08004273 	.word	0x08004273
 80041f0:	08004273 	.word	0x08004273
 80041f4:	08004273 	.word	0x08004273
 80041f8:	08004273 	.word	0x08004273
 80041fc:	0800422f 	.word	0x0800422f
 8004200:	08004259 	.word	0x08004259
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800420a:	b2db      	uxtb	r3, r3
 800420c:	2b03      	cmp	r3, #3
 800420e:	d107      	bne.n	8004220 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004210:	f107 030a 	add.w	r3, r7, #10
 8004214:	2202      	movs	r2, #2
 8004216:	4619      	mov	r1, r3
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f001 fcfd 	bl	8005c18 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800421e:	e032      	b.n	8004286 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004220:	6839      	ldr	r1, [r7, #0]
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f001 fc7b 	bl	8005b1e <USBD_CtlError>
            ret = USBD_FAIL;
 8004228:	2303      	movs	r3, #3
 800422a:	75fb      	strb	r3, [r7, #23]
          break;
 800422c:	e02b      	b.n	8004286 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b03      	cmp	r3, #3
 8004238:	d107      	bne.n	800424a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800423a:	f107 030d 	add.w	r3, r7, #13
 800423e:	2201      	movs	r2, #1
 8004240:	4619      	mov	r1, r3
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f001 fce8 	bl	8005c18 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004248:	e01d      	b.n	8004286 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800424a:	6839      	ldr	r1, [r7, #0]
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f001 fc66 	bl	8005b1e <USBD_CtlError>
            ret = USBD_FAIL;
 8004252:	2303      	movs	r3, #3
 8004254:	75fb      	strb	r3, [r7, #23]
          break;
 8004256:	e016      	b.n	8004286 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800425e:	b2db      	uxtb	r3, r3
 8004260:	2b03      	cmp	r3, #3
 8004262:	d00f      	beq.n	8004284 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8004264:	6839      	ldr	r1, [r7, #0]
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f001 fc59 	bl	8005b1e <USBD_CtlError>
            ret = USBD_FAIL;
 800426c:	2303      	movs	r3, #3
 800426e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004270:	e008      	b.n	8004284 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004272:	6839      	ldr	r1, [r7, #0]
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f001 fc52 	bl	8005b1e <USBD_CtlError>
          ret = USBD_FAIL;
 800427a:	2303      	movs	r3, #3
 800427c:	75fb      	strb	r3, [r7, #23]
          break;
 800427e:	e002      	b.n	8004286 <USBD_CDC_Setup+0x19e>
          break;
 8004280:	bf00      	nop
 8004282:	e008      	b.n	8004296 <USBD_CDC_Setup+0x1ae>
          break;
 8004284:	bf00      	nop
      }
      break;
 8004286:	e006      	b.n	8004296 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8004288:	6839      	ldr	r1, [r7, #0]
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f001 fc47 	bl	8005b1e <USBD_CtlError>
      ret = USBD_FAIL;
 8004290:	2303      	movs	r3, #3
 8004292:	75fb      	strb	r3, [r7, #23]
      break;
 8004294:	bf00      	nop
  }

  return (uint8_t)ret;
 8004296:	7dfb      	ldrb	r3, [r7, #23]
}
 8004298:	4618      	mov	r0, r3
 800429a:	3718      	adds	r7, #24
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	460b      	mov	r3, r1
 80042aa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80042b2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	32b0      	adds	r2, #176	@ 0xb0
 80042be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e065      	b.n	8004396 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	32b0      	adds	r2, #176	@ 0xb0
 80042d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042d8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80042da:	78fb      	ldrb	r3, [r7, #3]
 80042dc:	f003 020f 	and.w	r2, r3, #15
 80042e0:	6879      	ldr	r1, [r7, #4]
 80042e2:	4613      	mov	r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	4413      	add	r3, r2
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	440b      	add	r3, r1
 80042ec:	3318      	adds	r3, #24
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d02f      	beq.n	8004354 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80042f4:	78fb      	ldrb	r3, [r7, #3]
 80042f6:	f003 020f 	and.w	r2, r3, #15
 80042fa:	6879      	ldr	r1, [r7, #4]
 80042fc:	4613      	mov	r3, r2
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	4413      	add	r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	440b      	add	r3, r1
 8004306:	3318      	adds	r3, #24
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	78fb      	ldrb	r3, [r7, #3]
 800430c:	f003 010f 	and.w	r1, r3, #15
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	460b      	mov	r3, r1
 8004314:	00db      	lsls	r3, r3, #3
 8004316:	440b      	add	r3, r1
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	4403      	add	r3, r0
 800431c:	331c      	adds	r3, #28
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	fbb2 f1f3 	udiv	r1, r2, r3
 8004324:	fb01 f303 	mul.w	r3, r1, r3
 8004328:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800432a:	2b00      	cmp	r3, #0
 800432c:	d112      	bne.n	8004354 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800432e:	78fb      	ldrb	r3, [r7, #3]
 8004330:	f003 020f 	and.w	r2, r3, #15
 8004334:	6879      	ldr	r1, [r7, #4]
 8004336:	4613      	mov	r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	4413      	add	r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	440b      	add	r3, r1
 8004340:	3318      	adds	r3, #24
 8004342:	2200      	movs	r2, #0
 8004344:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004346:	78f9      	ldrb	r1, [r7, #3]
 8004348:	2300      	movs	r3, #0
 800434a:	2200      	movs	r2, #0
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f002 f93e 	bl	80065ce <USBD_LL_Transmit>
 8004352:	e01f      	b.n	8004394 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	2200      	movs	r2, #0
 8004358:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	33b0      	adds	r3, #176	@ 0xb0
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	4413      	add	r3, r2
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d010      	beq.n	8004394 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	33b0      	adds	r3, #176	@ 0xb0
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	4413      	add	r3, r2
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	68ba      	ldr	r2, [r7, #8]
 8004386:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800438a:	68ba      	ldr	r2, [r7, #8]
 800438c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8004390:	78fa      	ldrb	r2, [r7, #3]
 8004392:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3710      	adds	r7, #16
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}

0800439e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800439e:	b580      	push	{r7, lr}
 80043a0:	b084      	sub	sp, #16
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
 80043a6:	460b      	mov	r3, r1
 80043a8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	32b0      	adds	r2, #176	@ 0xb0
 80043b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043b8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	32b0      	adds	r2, #176	@ 0xb0
 80043c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d101      	bne.n	80043d0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e01a      	b.n	8004406 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80043d0:	78fb      	ldrb	r3, [r7, #3]
 80043d2:	4619      	mov	r1, r3
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f002 f93c 	bl	8006652 <USBD_LL_GetRxDataSize>
 80043da:	4602      	mov	r2, r0
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	33b0      	adds	r3, #176	@ 0xb0
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	4413      	add	r3, r2
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8004400:	4611      	mov	r1, r2
 8004402:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3710      	adds	r7, #16
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800440e:	b580      	push	{r7, lr}
 8004410:	b084      	sub	sp, #16
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	32b0      	adds	r2, #176	@ 0xb0
 8004420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004424:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d101      	bne.n	8004430 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800442c:	2303      	movs	r3, #3
 800442e:	e024      	b.n	800447a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	33b0      	adds	r3, #176	@ 0xb0
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	4413      	add	r3, r2
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d019      	beq.n	8004478 <USBD_CDC_EP0_RxReady+0x6a>
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800444a:	2bff      	cmp	r3, #255	@ 0xff
 800444c:	d014      	beq.n	8004478 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	33b0      	adds	r3, #176	@ 0xb0
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	4413      	add	r3, r2
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8004466:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800446e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	22ff      	movs	r2, #255	@ 0xff
 8004474:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
	...

08004484 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800448c:	2182      	movs	r1, #130	@ 0x82
 800448e:	4818      	ldr	r0, [pc, #96]	@ (80044f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004490:	f000 fd0f 	bl	8004eb2 <USBD_GetEpDesc>
 8004494:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004496:	2101      	movs	r1, #1
 8004498:	4815      	ldr	r0, [pc, #84]	@ (80044f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800449a:	f000 fd0a 	bl	8004eb2 <USBD_GetEpDesc>
 800449e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80044a0:	2181      	movs	r1, #129	@ 0x81
 80044a2:	4813      	ldr	r0, [pc, #76]	@ (80044f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80044a4:	f000 fd05 	bl	8004eb2 <USBD_GetEpDesc>
 80044a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d002      	beq.n	80044b6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	2210      	movs	r2, #16
 80044b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d006      	beq.n	80044ca <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	2200      	movs	r2, #0
 80044c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80044c4:	711a      	strb	r2, [r3, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d006      	beq.n	80044de <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80044d8:	711a      	strb	r2, [r3, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2243      	movs	r2, #67	@ 0x43
 80044e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80044e4:	4b02      	ldr	r3, [pc, #8]	@ (80044f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3718      	adds	r7, #24
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	20000054 	.word	0x20000054

080044f4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b086      	sub	sp, #24
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80044fc:	2182      	movs	r1, #130	@ 0x82
 80044fe:	4818      	ldr	r0, [pc, #96]	@ (8004560 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004500:	f000 fcd7 	bl	8004eb2 <USBD_GetEpDesc>
 8004504:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004506:	2101      	movs	r1, #1
 8004508:	4815      	ldr	r0, [pc, #84]	@ (8004560 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800450a:	f000 fcd2 	bl	8004eb2 <USBD_GetEpDesc>
 800450e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004510:	2181      	movs	r1, #129	@ 0x81
 8004512:	4813      	ldr	r0, [pc, #76]	@ (8004560 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004514:	f000 fccd 	bl	8004eb2 <USBD_GetEpDesc>
 8004518:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d002      	beq.n	8004526 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	2210      	movs	r2, #16
 8004524:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d006      	beq.n	800453a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	2200      	movs	r2, #0
 8004530:	711a      	strb	r2, [r3, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	f042 0202 	orr.w	r2, r2, #2
 8004538:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d006      	beq.n	800454e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	711a      	strb	r2, [r3, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	f042 0202 	orr.w	r2, r2, #2
 800454c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2243      	movs	r2, #67	@ 0x43
 8004552:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004554:	4b02      	ldr	r3, [pc, #8]	@ (8004560 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8004556:	4618      	mov	r0, r3
 8004558:	3718      	adds	r7, #24
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	20000054 	.word	0x20000054

08004564 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b086      	sub	sp, #24
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800456c:	2182      	movs	r1, #130	@ 0x82
 800456e:	4818      	ldr	r0, [pc, #96]	@ (80045d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004570:	f000 fc9f 	bl	8004eb2 <USBD_GetEpDesc>
 8004574:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004576:	2101      	movs	r1, #1
 8004578:	4815      	ldr	r0, [pc, #84]	@ (80045d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800457a:	f000 fc9a 	bl	8004eb2 <USBD_GetEpDesc>
 800457e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004580:	2181      	movs	r1, #129	@ 0x81
 8004582:	4813      	ldr	r0, [pc, #76]	@ (80045d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004584:	f000 fc95 	bl	8004eb2 <USBD_GetEpDesc>
 8004588:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d002      	beq.n	8004596 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	2210      	movs	r2, #16
 8004594:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d006      	beq.n	80045aa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	2200      	movs	r2, #0
 80045a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80045a4:	711a      	strb	r2, [r3, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d006      	beq.n	80045be <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80045b8:	711a      	strb	r2, [r3, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2243      	movs	r2, #67	@ 0x43
 80045c2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80045c4:	4b02      	ldr	r3, [pc, #8]	@ (80045d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3718      	adds	r7, #24
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	20000054 	.word	0x20000054

080045d4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	220a      	movs	r2, #10
 80045e0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80045e2:	4b03      	ldr	r3, [pc, #12]	@ (80045f0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr
 80045f0:	20000010 	.word	0x20000010

080045f4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d101      	bne.n	8004608 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004604:	2303      	movs	r3, #3
 8004606:	e009      	b.n	800461c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	33b0      	adds	r3, #176	@ 0xb0
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	4413      	add	r3, r2
 8004616:	683a      	ldr	r2, [r7, #0]
 8004618:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800461a:	2300      	movs	r3, #0
}
 800461c:	4618      	mov	r0, r3
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004628:	b480      	push	{r7}
 800462a:	b087      	sub	sp, #28
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	32b0      	adds	r2, #176	@ 0xb0
 800463e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004642:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800464a:	2303      	movs	r3, #3
 800464c:	e008      	b.n	8004660 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	68ba      	ldr	r2, [r7, #8]
 8004652:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	371c      	adds	r7, #28
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	32b0      	adds	r2, #176	@ 0xb0
 8004680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004684:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d101      	bne.n	8004690 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800468c:	2303      	movs	r3, #3
 800468e:	e004      	b.n	800469a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	683a      	ldr	r2, [r7, #0]
 8004694:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3714      	adds	r7, #20
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
	...

080046a8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	32b0      	adds	r2, #176	@ 0xb0
 80046ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046be:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	32b0      	adds	r2, #176	@ 0xb0
 80046ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e018      	b.n	8004708 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	7c1b      	ldrb	r3, [r3, #16]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d10a      	bne.n	80046f4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80046de:	4b0c      	ldr	r3, [pc, #48]	@ (8004710 <USBD_CDC_ReceivePacket+0x68>)
 80046e0:	7819      	ldrb	r1, [r3, #0]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80046e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f001 ff8f 	bl	8006610 <USBD_LL_PrepareReceive>
 80046f2:	e008      	b.n	8004706 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80046f4:	4b06      	ldr	r3, [pc, #24]	@ (8004710 <USBD_CDC_ReceivePacket+0x68>)
 80046f6:	7819      	ldrb	r1, [r3, #0]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80046fe:	2340      	movs	r3, #64	@ 0x40
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f001 ff85 	bl	8006610 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3710      	adds	r7, #16
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	20000098 	.word	0x20000098

08004714 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b086      	sub	sp, #24
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	4613      	mov	r3, r2
 8004720:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d101      	bne.n	800472c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004728:	2303      	movs	r3, #3
 800472a:	e01f      	b.n	800476c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2200      	movs	r2, #0
 8004740:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d003      	beq.n	8004752 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	68ba      	ldr	r2, [r7, #8]
 800474e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	79fa      	ldrb	r2, [r7, #7]
 800475e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f001 fdff 	bl	8006364 <USBD_LL_Init>
 8004766:	4603      	mov	r3, r0
 8004768:	75fb      	strb	r3, [r7, #23]

  return ret;
 800476a:	7dfb      	ldrb	r3, [r7, #23]
}
 800476c:	4618      	mov	r0, r3
 800476e:	3718      	adds	r7, #24
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800477e:	2300      	movs	r3, #0
 8004780:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d101      	bne.n	800478c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004788:	2303      	movs	r3, #3
 800478a:	e025      	b.n	80047d8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	683a      	ldr	r2, [r7, #0]
 8004790:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	32ae      	adds	r2, #174	@ 0xae
 800479e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00f      	beq.n	80047c8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	32ae      	adds	r2, #174	@ 0xae
 80047b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047b8:	f107 020e 	add.w	r2, r7, #14
 80047bc:	4610      	mov	r0, r2
 80047be:	4798      	blx	r3
 80047c0:	4602      	mov	r2, r0
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80047ce:	1c5a      	adds	r2, r3, #1
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f001 fe07 	bl	80063fc <USBD_LL_Start>
 80047ee:	4603      	mov	r3, r0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3708      	adds	r7, #8
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004800:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8004802:	4618      	mov	r0, r3
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr

0800480e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800480e:	b580      	push	{r7, lr}
 8004810:	b084      	sub	sp, #16
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
 8004816:	460b      	mov	r3, r1
 8004818:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800481a:	2300      	movs	r3, #0
 800481c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004824:	2b00      	cmp	r3, #0
 8004826:	d009      	beq.n	800483c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	78fa      	ldrb	r2, [r7, #3]
 8004832:	4611      	mov	r1, r2
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	4798      	blx	r3
 8004838:	4603      	mov	r3, r0
 800483a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800483c:	7bfb      	ldrb	r3, [r7, #15]
}
 800483e:	4618      	mov	r0, r3
 8004840:	3710      	adds	r7, #16
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004846:	b580      	push	{r7, lr}
 8004848:	b084      	sub	sp, #16
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
 800484e:	460b      	mov	r3, r1
 8004850:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004852:	2300      	movs	r3, #0
 8004854:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	78fa      	ldrb	r2, [r7, #3]
 8004860:	4611      	mov	r1, r2
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	4798      	blx	r3
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d001      	beq.n	8004870 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800486c:	2303      	movs	r3, #3
 800486e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004870:	7bfb      	ldrb	r3, [r7, #15]
}
 8004872:	4618      	mov	r0, r3
 8004874:	3710      	adds	r7, #16
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}

0800487a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800487a:	b580      	push	{r7, lr}
 800487c:	b084      	sub	sp, #16
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
 8004882:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800488a:	6839      	ldr	r1, [r7, #0]
 800488c:	4618      	mov	r0, r3
 800488e:	f001 f90c 	bl	8005aaa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2201      	movs	r2, #1
 8004896:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80048a0:	461a      	mov	r2, r3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80048ae:	f003 031f 	and.w	r3, r3, #31
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d01a      	beq.n	80048ec <USBD_LL_SetupStage+0x72>
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d822      	bhi.n	8004900 <USBD_LL_SetupStage+0x86>
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d002      	beq.n	80048c4 <USBD_LL_SetupStage+0x4a>
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d00a      	beq.n	80048d8 <USBD_LL_SetupStage+0x5e>
 80048c2:	e01d      	b.n	8004900 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80048ca:	4619      	mov	r1, r3
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 fb63 	bl	8004f98 <USBD_StdDevReq>
 80048d2:	4603      	mov	r3, r0
 80048d4:	73fb      	strb	r3, [r7, #15]
      break;
 80048d6:	e020      	b.n	800491a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80048de:	4619      	mov	r1, r3
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 fbcb 	bl	800507c <USBD_StdItfReq>
 80048e6:	4603      	mov	r3, r0
 80048e8:	73fb      	strb	r3, [r7, #15]
      break;
 80048ea:	e016      	b.n	800491a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80048f2:	4619      	mov	r1, r3
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 fc2d 	bl	8005154 <USBD_StdEPReq>
 80048fa:	4603      	mov	r3, r0
 80048fc:	73fb      	strb	r3, [r7, #15]
      break;
 80048fe:	e00c      	b.n	800491a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004906:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800490a:	b2db      	uxtb	r3, r3
 800490c:	4619      	mov	r1, r3
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f001 fdd4 	bl	80064bc <USBD_LL_StallEP>
 8004914:	4603      	mov	r3, r0
 8004916:	73fb      	strb	r3, [r7, #15]
      break;
 8004918:	bf00      	nop
  }

  return ret;
 800491a:	7bfb      	ldrb	r3, [r7, #15]
}
 800491c:	4618      	mov	r0, r3
 800491e:	3710      	adds	r7, #16
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b086      	sub	sp, #24
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	460b      	mov	r3, r1
 800492e:	607a      	str	r2, [r7, #4]
 8004930:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8004932:	2300      	movs	r3, #0
 8004934:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8004936:	7afb      	ldrb	r3, [r7, #11]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d16e      	bne.n	8004a1a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8004942:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800494a:	2b03      	cmp	r3, #3
 800494c:	f040 8098 	bne.w	8004a80 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	689a      	ldr	r2, [r3, #8]
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	429a      	cmp	r2, r3
 800495a:	d913      	bls.n	8004984 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	689a      	ldr	r2, [r3, #8]
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	1ad2      	subs	r2, r2, r3
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	68da      	ldr	r2, [r3, #12]
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	4293      	cmp	r3, r2
 8004974:	bf28      	it	cs
 8004976:	4613      	movcs	r3, r2
 8004978:	461a      	mov	r2, r3
 800497a:	6879      	ldr	r1, [r7, #4]
 800497c:	68f8      	ldr	r0, [r7, #12]
 800497e:	f001 f994 	bl	8005caa <USBD_CtlContinueRx>
 8004982:	e07d      	b.n	8004a80 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800498a:	f003 031f 	and.w	r3, r3, #31
 800498e:	2b02      	cmp	r3, #2
 8004990:	d014      	beq.n	80049bc <USBD_LL_DataOutStage+0x98>
 8004992:	2b02      	cmp	r3, #2
 8004994:	d81d      	bhi.n	80049d2 <USBD_LL_DataOutStage+0xae>
 8004996:	2b00      	cmp	r3, #0
 8004998:	d002      	beq.n	80049a0 <USBD_LL_DataOutStage+0x7c>
 800499a:	2b01      	cmp	r3, #1
 800499c:	d003      	beq.n	80049a6 <USBD_LL_DataOutStage+0x82>
 800499e:	e018      	b.n	80049d2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80049a0:	2300      	movs	r3, #0
 80049a2:	75bb      	strb	r3, [r7, #22]
            break;
 80049a4:	e018      	b.n	80049d8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	4619      	mov	r1, r3
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f000 fa64 	bl	8004e7e <USBD_CoreFindIF>
 80049b6:	4603      	mov	r3, r0
 80049b8:	75bb      	strb	r3, [r7, #22]
            break;
 80049ba:	e00d      	b.n	80049d8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	4619      	mov	r1, r3
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f000 fa66 	bl	8004e98 <USBD_CoreFindEP>
 80049cc:	4603      	mov	r3, r0
 80049ce:	75bb      	strb	r3, [r7, #22]
            break;
 80049d0:	e002      	b.n	80049d8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80049d2:	2300      	movs	r3, #0
 80049d4:	75bb      	strb	r3, [r7, #22]
            break;
 80049d6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80049d8:	7dbb      	ldrb	r3, [r7, #22]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d119      	bne.n	8004a12 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	2b03      	cmp	r3, #3
 80049e8:	d113      	bne.n	8004a12 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80049ea:	7dba      	ldrb	r2, [r7, #22]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	32ae      	adds	r2, #174	@ 0xae
 80049f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00b      	beq.n	8004a12 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80049fa:	7dba      	ldrb	r2, [r7, #22]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8004a02:	7dba      	ldrb	r2, [r7, #22]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	32ae      	adds	r2, #174	@ 0xae
 8004a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	68f8      	ldr	r0, [r7, #12]
 8004a10:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004a12:	68f8      	ldr	r0, [r7, #12]
 8004a14:	f001 f95a 	bl	8005ccc <USBD_CtlSendStatus>
 8004a18:	e032      	b.n	8004a80 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8004a1a:	7afb      	ldrb	r3, [r7, #11]
 8004a1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	4619      	mov	r1, r3
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	f000 fa37 	bl	8004e98 <USBD_CoreFindEP>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004a2e:	7dbb      	ldrb	r3, [r7, #22]
 8004a30:	2bff      	cmp	r3, #255	@ 0xff
 8004a32:	d025      	beq.n	8004a80 <USBD_LL_DataOutStage+0x15c>
 8004a34:	7dbb      	ldrb	r3, [r7, #22]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d122      	bne.n	8004a80 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b03      	cmp	r3, #3
 8004a44:	d117      	bne.n	8004a76 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8004a46:	7dba      	ldrb	r2, [r7, #22]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	32ae      	adds	r2, #174	@ 0xae
 8004a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00f      	beq.n	8004a76 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8004a56:	7dba      	ldrb	r2, [r7, #22]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8004a5e:	7dba      	ldrb	r2, [r7, #22]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	32ae      	adds	r2, #174	@ 0xae
 8004a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	7afa      	ldrb	r2, [r7, #11]
 8004a6c:	4611      	mov	r1, r2
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	4798      	blx	r3
 8004a72:	4603      	mov	r3, r0
 8004a74:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8004a76:	7dfb      	ldrb	r3, [r7, #23]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d001      	beq.n	8004a80 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8004a7c:	7dfb      	ldrb	r3, [r7, #23]
 8004a7e:	e000      	b.n	8004a82 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3718      	adds	r7, #24
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b086      	sub	sp, #24
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	60f8      	str	r0, [r7, #12]
 8004a92:	460b      	mov	r3, r1
 8004a94:	607a      	str	r2, [r7, #4]
 8004a96:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8004a98:	7afb      	ldrb	r3, [r7, #11]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d16f      	bne.n	8004b7e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	3314      	adds	r3, #20
 8004aa2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d15a      	bne.n	8004b64 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	689a      	ldr	r2, [r3, #8]
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d914      	bls.n	8004ae4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	689a      	ldr	r2, [r3, #8]
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	1ad2      	subs	r2, r2, r3
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	461a      	mov	r2, r3
 8004ace:	6879      	ldr	r1, [r7, #4]
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f001 f8bc 	bl	8005c4e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	2200      	movs	r2, #0
 8004ada:	2100      	movs	r1, #0
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	f001 fd97 	bl	8006610 <USBD_LL_PrepareReceive>
 8004ae2:	e03f      	b.n	8004b64 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	68da      	ldr	r2, [r3, #12]
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d11c      	bne.n	8004b2a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	685a      	ldr	r2, [r3, #4]
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d316      	bcc.n	8004b2a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	685a      	ldr	r2, [r3, #4]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d20f      	bcs.n	8004b2a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	f001 f89d 	bl	8005c4e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	2200      	movs	r2, #0
 8004b20:	2100      	movs	r1, #0
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	f001 fd74 	bl	8006610 <USBD_LL_PrepareReceive>
 8004b28:	e01c      	b.n	8004b64 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	2b03      	cmp	r3, #3
 8004b34:	d10f      	bne.n	8004b56 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d009      	beq.n	8004b56 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004b56:	2180      	movs	r1, #128	@ 0x80
 8004b58:	68f8      	ldr	r0, [r7, #12]
 8004b5a:	f001 fcaf 	bl	80064bc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f001 f8c7 	bl	8005cf2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d03a      	beq.n	8004be4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f7ff fe42 	bl	80047f8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8004b7c:	e032      	b.n	8004be4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8004b7e:	7afb      	ldrb	r3, [r7, #11]
 8004b80:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	4619      	mov	r1, r3
 8004b88:	68f8      	ldr	r0, [r7, #12]
 8004b8a:	f000 f985 	bl	8004e98 <USBD_CoreFindEP>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004b92:	7dfb      	ldrb	r3, [r7, #23]
 8004b94:	2bff      	cmp	r3, #255	@ 0xff
 8004b96:	d025      	beq.n	8004be4 <USBD_LL_DataInStage+0x15a>
 8004b98:	7dfb      	ldrb	r3, [r7, #23]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d122      	bne.n	8004be4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	2b03      	cmp	r3, #3
 8004ba8:	d11c      	bne.n	8004be4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8004baa:	7dfa      	ldrb	r2, [r7, #23]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	32ae      	adds	r2, #174	@ 0xae
 8004bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d014      	beq.n	8004be4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8004bba:	7dfa      	ldrb	r2, [r7, #23]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8004bc2:	7dfa      	ldrb	r2, [r7, #23]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	32ae      	adds	r2, #174	@ 0xae
 8004bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	7afa      	ldrb	r2, [r7, #11]
 8004bd0:	4611      	mov	r1, r2
 8004bd2:	68f8      	ldr	r0, [r7, #12]
 8004bd4:	4798      	blx	r3
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8004bda:	7dbb      	ldrb	r3, [r7, #22]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d001      	beq.n	8004be4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8004be0:	7dbb      	ldrb	r3, [r7, #22]
 8004be2:	e000      	b.n	8004be6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3718      	adds	r7, #24
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b084      	sub	sp, #16
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d014      	beq.n	8004c54 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00e      	beq.n	8004c54 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	6852      	ldr	r2, [r2, #4]
 8004c42:	b2d2      	uxtb	r2, r2
 8004c44:	4611      	mov	r1, r2
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	4798      	blx	r3
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d001      	beq.n	8004c54 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8004c50:	2303      	movs	r3, #3
 8004c52:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004c54:	2340      	movs	r3, #64	@ 0x40
 8004c56:	2200      	movs	r2, #0
 8004c58:	2100      	movs	r1, #0
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f001 fbe9 	bl	8006432 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2240      	movs	r2, #64	@ 0x40
 8004c6c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004c70:	2340      	movs	r3, #64	@ 0x40
 8004c72:	2200      	movs	r2, #0
 8004c74:	2180      	movs	r1, #128	@ 0x80
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f001 fbdb 	bl	8006432 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2240      	movs	r2, #64	@ 0x40
 8004c86:	621a      	str	r2, [r3, #32]

  return ret;
 8004c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3710      	adds	r7, #16
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004c92:	b480      	push	{r7}
 8004c94:	b083      	sub	sp, #12
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	78fa      	ldrb	r2, [r7, #3]
 8004ca2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr

08004cb2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	b083      	sub	sp, #12
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b04      	cmp	r3, #4
 8004cc4:	d006      	beq.n	8004cd4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004ccc:	b2da      	uxtb	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2204      	movs	r2, #4
 8004cd8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	370c      	adds	r7, #12
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr

08004cea <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004cea:	b480      	push	{r7}
 8004cec:	b083      	sub	sp, #12
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	2b04      	cmp	r3, #4
 8004cfc:	d106      	bne.n	8004d0c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8004d04:	b2da      	uxtb	r2, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	370c      	adds	r7, #12
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr

08004d1a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b082      	sub	sp, #8
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b03      	cmp	r3, #3
 8004d2c:	d110      	bne.n	8004d50 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00b      	beq.n	8004d50 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004d3e:	69db      	ldr	r3, [r3, #28]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d005      	beq.n	8004d50 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004d4a:	69db      	ldr	r3, [r3, #28]
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3708      	adds	r7, #8
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b082      	sub	sp, #8
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
 8004d62:	460b      	mov	r3, r1
 8004d64:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	32ae      	adds	r2, #174	@ 0xae
 8004d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d101      	bne.n	8004d7c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e01c      	b.n	8004db6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	2b03      	cmp	r3, #3
 8004d86:	d115      	bne.n	8004db4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	32ae      	adds	r2, #174	@ 0xae
 8004d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d96:	6a1b      	ldr	r3, [r3, #32]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00b      	beq.n	8004db4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	32ae      	adds	r2, #174	@ 0xae
 8004da6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004daa:	6a1b      	ldr	r3, [r3, #32]
 8004dac:	78fa      	ldrb	r2, [r7, #3]
 8004dae:	4611      	mov	r1, r2
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3708      	adds	r7, #8
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b082      	sub	sp, #8
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	32ae      	adds	r2, #174	@ 0xae
 8004dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d101      	bne.n	8004de0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e01c      	b.n	8004e1a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	2b03      	cmp	r3, #3
 8004dea:	d115      	bne.n	8004e18 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	32ae      	adds	r2, #174	@ 0xae
 8004df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00b      	beq.n	8004e18 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	32ae      	adds	r2, #174	@ 0xae
 8004e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e10:	78fa      	ldrb	r2, [r7, #3]
 8004e12:	4611      	mov	r1, r2
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004e22:	b480      	push	{r7}
 8004e24:	b083      	sub	sp, #12
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8004e40:	2300      	movs	r3, #0
 8004e42:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00e      	beq.n	8004e74 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	6852      	ldr	r2, [r2, #4]
 8004e62:	b2d2      	uxtb	r2, r2
 8004e64:	4611      	mov	r1, r2
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	4798      	blx	r3
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d001      	beq.n	8004e74 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8004e70:	2303      	movs	r3, #3
 8004e72:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3710      	adds	r7, #16
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}

08004e7e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8004e7e:	b480      	push	{r7}
 8004e80:	b083      	sub	sp, #12
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
 8004e86:	460b      	mov	r3, r1
 8004e88:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8004e8a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8004ea4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	370c      	adds	r7, #12
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr

08004eb2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8004eb2:	b580      	push	{r7, lr}
 8004eb4:	b086      	sub	sp, #24
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
 8004eba:	460b      	mov	r3, r1
 8004ebc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	885b      	ldrh	r3, [r3, #2]
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	7812      	ldrb	r2, [r2, #0]
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d91f      	bls.n	8004f18 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8004ede:	e013      	b.n	8004f08 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8004ee0:	f107 030a 	add.w	r3, r7, #10
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	6978      	ldr	r0, [r7, #20]
 8004ee8:	f000 f81b 	bl	8004f22 <USBD_GetNextDesc>
 8004eec:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	785b      	ldrb	r3, [r3, #1]
 8004ef2:	2b05      	cmp	r3, #5
 8004ef4:	d108      	bne.n	8004f08 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	789b      	ldrb	r3, [r3, #2]
 8004efe:	78fa      	ldrb	r2, [r7, #3]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d008      	beq.n	8004f16 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8004f04:	2300      	movs	r3, #0
 8004f06:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	885b      	ldrh	r3, [r3, #2]
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	897b      	ldrh	r3, [r7, #10]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d8e5      	bhi.n	8004ee0 <USBD_GetEpDesc+0x2e>
 8004f14:	e000      	b.n	8004f18 <USBD_GetEpDesc+0x66>
          break;
 8004f16:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8004f18:	693b      	ldr	r3, [r7, #16]
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3718      	adds	r7, #24
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}

08004f22 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8004f22:	b480      	push	{r7}
 8004f24:	b085      	sub	sp, #20
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
 8004f2a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	881b      	ldrh	r3, [r3, #0]
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	7812      	ldrb	r2, [r2, #0]
 8004f38:	4413      	add	r3, r2
 8004f3a:	b29a      	uxth	r2, r3
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	461a      	mov	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4413      	add	r3, r2
 8004f4a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3714      	adds	r7, #20
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr

08004f5a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	b087      	sub	sp, #28
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	3301      	adds	r3, #1
 8004f70:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004f78:	8a3b      	ldrh	r3, [r7, #16]
 8004f7a:	021b      	lsls	r3, r3, #8
 8004f7c:	b21a      	sxth	r2, r3
 8004f7e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	b21b      	sxth	r3, r3
 8004f86:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8004f88:	89fb      	ldrh	r3, [r7, #14]
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	371c      	adds	r7, #28
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
	...

08004f98 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004fae:	2b40      	cmp	r3, #64	@ 0x40
 8004fb0:	d005      	beq.n	8004fbe <USBD_StdDevReq+0x26>
 8004fb2:	2b40      	cmp	r3, #64	@ 0x40
 8004fb4:	d857      	bhi.n	8005066 <USBD_StdDevReq+0xce>
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00f      	beq.n	8004fda <USBD_StdDevReq+0x42>
 8004fba:	2b20      	cmp	r3, #32
 8004fbc:	d153      	bne.n	8005066 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	32ae      	adds	r2, #174	@ 0xae
 8004fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	6839      	ldr	r1, [r7, #0]
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	4798      	blx	r3
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	73fb      	strb	r3, [r7, #15]
      break;
 8004fd8:	e04a      	b.n	8005070 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	785b      	ldrb	r3, [r3, #1]
 8004fde:	2b09      	cmp	r3, #9
 8004fe0:	d83b      	bhi.n	800505a <USBD_StdDevReq+0xc2>
 8004fe2:	a201      	add	r2, pc, #4	@ (adr r2, 8004fe8 <USBD_StdDevReq+0x50>)
 8004fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe8:	0800503d 	.word	0x0800503d
 8004fec:	08005051 	.word	0x08005051
 8004ff0:	0800505b 	.word	0x0800505b
 8004ff4:	08005047 	.word	0x08005047
 8004ff8:	0800505b 	.word	0x0800505b
 8004ffc:	0800501b 	.word	0x0800501b
 8005000:	08005011 	.word	0x08005011
 8005004:	0800505b 	.word	0x0800505b
 8005008:	08005033 	.word	0x08005033
 800500c:	08005025 	.word	0x08005025
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005010:	6839      	ldr	r1, [r7, #0]
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 fa3c 	bl	8005490 <USBD_GetDescriptor>
          break;
 8005018:	e024      	b.n	8005064 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800501a:	6839      	ldr	r1, [r7, #0]
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 fba1 	bl	8005764 <USBD_SetAddress>
          break;
 8005022:	e01f      	b.n	8005064 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005024:	6839      	ldr	r1, [r7, #0]
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 fbe0 	bl	80057ec <USBD_SetConfig>
 800502c:	4603      	mov	r3, r0
 800502e:	73fb      	strb	r3, [r7, #15]
          break;
 8005030:	e018      	b.n	8005064 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005032:	6839      	ldr	r1, [r7, #0]
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 fc83 	bl	8005940 <USBD_GetConfig>
          break;
 800503a:	e013      	b.n	8005064 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800503c:	6839      	ldr	r1, [r7, #0]
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 fcb4 	bl	80059ac <USBD_GetStatus>
          break;
 8005044:	e00e      	b.n	8005064 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005046:	6839      	ldr	r1, [r7, #0]
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 fce3 	bl	8005a14 <USBD_SetFeature>
          break;
 800504e:	e009      	b.n	8005064 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005050:	6839      	ldr	r1, [r7, #0]
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 fd07 	bl	8005a66 <USBD_ClrFeature>
          break;
 8005058:	e004      	b.n	8005064 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800505a:	6839      	ldr	r1, [r7, #0]
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 fd5e 	bl	8005b1e <USBD_CtlError>
          break;
 8005062:	bf00      	nop
      }
      break;
 8005064:	e004      	b.n	8005070 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005066:	6839      	ldr	r1, [r7, #0]
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 fd58 	bl	8005b1e <USBD_CtlError>
      break;
 800506e:	bf00      	nop
  }

  return ret;
 8005070:	7bfb      	ldrb	r3, [r7, #15]
}
 8005072:	4618      	mov	r0, r3
 8005074:	3710      	adds	r7, #16
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop

0800507c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005086:	2300      	movs	r3, #0
 8005088:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005092:	2b40      	cmp	r3, #64	@ 0x40
 8005094:	d005      	beq.n	80050a2 <USBD_StdItfReq+0x26>
 8005096:	2b40      	cmp	r3, #64	@ 0x40
 8005098:	d852      	bhi.n	8005140 <USBD_StdItfReq+0xc4>
 800509a:	2b00      	cmp	r3, #0
 800509c:	d001      	beq.n	80050a2 <USBD_StdItfReq+0x26>
 800509e:	2b20      	cmp	r3, #32
 80050a0:	d14e      	bne.n	8005140 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	3b01      	subs	r3, #1
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d840      	bhi.n	8005132 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	889b      	ldrh	r3, [r3, #4]
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d836      	bhi.n	8005128 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	889b      	ldrh	r3, [r3, #4]
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	4619      	mov	r1, r3
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f7ff fedb 	bl	8004e7e <USBD_CoreFindIF>
 80050c8:	4603      	mov	r3, r0
 80050ca:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80050cc:	7bbb      	ldrb	r3, [r7, #14]
 80050ce:	2bff      	cmp	r3, #255	@ 0xff
 80050d0:	d01d      	beq.n	800510e <USBD_StdItfReq+0x92>
 80050d2:	7bbb      	ldrb	r3, [r7, #14]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d11a      	bne.n	800510e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80050d8:	7bba      	ldrb	r2, [r7, #14]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	32ae      	adds	r2, #174	@ 0xae
 80050de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00f      	beq.n	8005108 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80050e8:	7bba      	ldrb	r2, [r7, #14]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80050f0:	7bba      	ldrb	r2, [r7, #14]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	32ae      	adds	r2, #174	@ 0xae
 80050f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	6839      	ldr	r1, [r7, #0]
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	4798      	blx	r3
 8005102:	4603      	mov	r3, r0
 8005104:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005106:	e004      	b.n	8005112 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005108:	2303      	movs	r3, #3
 800510a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800510c:	e001      	b.n	8005112 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800510e:	2303      	movs	r3, #3
 8005110:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	88db      	ldrh	r3, [r3, #6]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d110      	bne.n	800513c <USBD_StdItfReq+0xc0>
 800511a:	7bfb      	ldrb	r3, [r7, #15]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d10d      	bne.n	800513c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 fdd3 	bl	8005ccc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005126:	e009      	b.n	800513c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005128:	6839      	ldr	r1, [r7, #0]
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 fcf7 	bl	8005b1e <USBD_CtlError>
          break;
 8005130:	e004      	b.n	800513c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005132:	6839      	ldr	r1, [r7, #0]
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 fcf2 	bl	8005b1e <USBD_CtlError>
          break;
 800513a:	e000      	b.n	800513e <USBD_StdItfReq+0xc2>
          break;
 800513c:	bf00      	nop
      }
      break;
 800513e:	e004      	b.n	800514a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005140:	6839      	ldr	r1, [r7, #0]
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 fceb 	bl	8005b1e <USBD_CtlError>
      break;
 8005148:	bf00      	nop
  }

  return ret;
 800514a:	7bfb      	ldrb	r3, [r7, #15]
}
 800514c:	4618      	mov	r0, r3
 800514e:	3710      	adds	r7, #16
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800515e:	2300      	movs	r3, #0
 8005160:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	889b      	ldrh	r3, [r3, #4]
 8005166:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005170:	2b40      	cmp	r3, #64	@ 0x40
 8005172:	d007      	beq.n	8005184 <USBD_StdEPReq+0x30>
 8005174:	2b40      	cmp	r3, #64	@ 0x40
 8005176:	f200 817f 	bhi.w	8005478 <USBD_StdEPReq+0x324>
 800517a:	2b00      	cmp	r3, #0
 800517c:	d02a      	beq.n	80051d4 <USBD_StdEPReq+0x80>
 800517e:	2b20      	cmp	r3, #32
 8005180:	f040 817a 	bne.w	8005478 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005184:	7bbb      	ldrb	r3, [r7, #14]
 8005186:	4619      	mov	r1, r3
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f7ff fe85 	bl	8004e98 <USBD_CoreFindEP>
 800518e:	4603      	mov	r3, r0
 8005190:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005192:	7b7b      	ldrb	r3, [r7, #13]
 8005194:	2bff      	cmp	r3, #255	@ 0xff
 8005196:	f000 8174 	beq.w	8005482 <USBD_StdEPReq+0x32e>
 800519a:	7b7b      	ldrb	r3, [r7, #13]
 800519c:	2b00      	cmp	r3, #0
 800519e:	f040 8170 	bne.w	8005482 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80051a2:	7b7a      	ldrb	r2, [r7, #13]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80051aa:	7b7a      	ldrb	r2, [r7, #13]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	32ae      	adds	r2, #174	@ 0xae
 80051b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	f000 8163 	beq.w	8005482 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80051bc:	7b7a      	ldrb	r2, [r7, #13]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	32ae      	adds	r2, #174	@ 0xae
 80051c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	6839      	ldr	r1, [r7, #0]
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	4798      	blx	r3
 80051ce:	4603      	mov	r3, r0
 80051d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80051d2:	e156      	b.n	8005482 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	785b      	ldrb	r3, [r3, #1]
 80051d8:	2b03      	cmp	r3, #3
 80051da:	d008      	beq.n	80051ee <USBD_StdEPReq+0x9a>
 80051dc:	2b03      	cmp	r3, #3
 80051de:	f300 8145 	bgt.w	800546c <USBD_StdEPReq+0x318>
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	f000 809b 	beq.w	800531e <USBD_StdEPReq+0x1ca>
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d03c      	beq.n	8005266 <USBD_StdEPReq+0x112>
 80051ec:	e13e      	b.n	800546c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d002      	beq.n	8005200 <USBD_StdEPReq+0xac>
 80051fa:	2b03      	cmp	r3, #3
 80051fc:	d016      	beq.n	800522c <USBD_StdEPReq+0xd8>
 80051fe:	e02c      	b.n	800525a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005200:	7bbb      	ldrb	r3, [r7, #14]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00d      	beq.n	8005222 <USBD_StdEPReq+0xce>
 8005206:	7bbb      	ldrb	r3, [r7, #14]
 8005208:	2b80      	cmp	r3, #128	@ 0x80
 800520a:	d00a      	beq.n	8005222 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800520c:	7bbb      	ldrb	r3, [r7, #14]
 800520e:	4619      	mov	r1, r3
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f001 f953 	bl	80064bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005216:	2180      	movs	r1, #128	@ 0x80
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f001 f94f 	bl	80064bc <USBD_LL_StallEP>
 800521e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005220:	e020      	b.n	8005264 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005222:	6839      	ldr	r1, [r7, #0]
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 fc7a 	bl	8005b1e <USBD_CtlError>
              break;
 800522a:	e01b      	b.n	8005264 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	885b      	ldrh	r3, [r3, #2]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d10e      	bne.n	8005252 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005234:	7bbb      	ldrb	r3, [r7, #14]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00b      	beq.n	8005252 <USBD_StdEPReq+0xfe>
 800523a:	7bbb      	ldrb	r3, [r7, #14]
 800523c:	2b80      	cmp	r3, #128	@ 0x80
 800523e:	d008      	beq.n	8005252 <USBD_StdEPReq+0xfe>
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	88db      	ldrh	r3, [r3, #6]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d104      	bne.n	8005252 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005248:	7bbb      	ldrb	r3, [r7, #14]
 800524a:	4619      	mov	r1, r3
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f001 f935 	bl	80064bc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 fd3a 	bl	8005ccc <USBD_CtlSendStatus>

              break;
 8005258:	e004      	b.n	8005264 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800525a:	6839      	ldr	r1, [r7, #0]
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 fc5e 	bl	8005b1e <USBD_CtlError>
              break;
 8005262:	bf00      	nop
          }
          break;
 8005264:	e107      	b.n	8005476 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800526c:	b2db      	uxtb	r3, r3
 800526e:	2b02      	cmp	r3, #2
 8005270:	d002      	beq.n	8005278 <USBD_StdEPReq+0x124>
 8005272:	2b03      	cmp	r3, #3
 8005274:	d016      	beq.n	80052a4 <USBD_StdEPReq+0x150>
 8005276:	e04b      	b.n	8005310 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005278:	7bbb      	ldrb	r3, [r7, #14]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00d      	beq.n	800529a <USBD_StdEPReq+0x146>
 800527e:	7bbb      	ldrb	r3, [r7, #14]
 8005280:	2b80      	cmp	r3, #128	@ 0x80
 8005282:	d00a      	beq.n	800529a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005284:	7bbb      	ldrb	r3, [r7, #14]
 8005286:	4619      	mov	r1, r3
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f001 f917 	bl	80064bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800528e:	2180      	movs	r1, #128	@ 0x80
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f001 f913 	bl	80064bc <USBD_LL_StallEP>
 8005296:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005298:	e040      	b.n	800531c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800529a:	6839      	ldr	r1, [r7, #0]
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 fc3e 	bl	8005b1e <USBD_CtlError>
              break;
 80052a2:	e03b      	b.n	800531c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	885b      	ldrh	r3, [r3, #2]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d136      	bne.n	800531a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80052ac:	7bbb      	ldrb	r3, [r7, #14]
 80052ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d004      	beq.n	80052c0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80052b6:	7bbb      	ldrb	r3, [r7, #14]
 80052b8:	4619      	mov	r1, r3
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f001 f91d 	bl	80064fa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 fd03 	bl	8005ccc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80052c6:	7bbb      	ldrb	r3, [r7, #14]
 80052c8:	4619      	mov	r1, r3
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f7ff fde4 	bl	8004e98 <USBD_CoreFindEP>
 80052d0:	4603      	mov	r3, r0
 80052d2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80052d4:	7b7b      	ldrb	r3, [r7, #13]
 80052d6:	2bff      	cmp	r3, #255	@ 0xff
 80052d8:	d01f      	beq.n	800531a <USBD_StdEPReq+0x1c6>
 80052da:	7b7b      	ldrb	r3, [r7, #13]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d11c      	bne.n	800531a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80052e0:	7b7a      	ldrb	r2, [r7, #13]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80052e8:	7b7a      	ldrb	r2, [r7, #13]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	32ae      	adds	r2, #174	@ 0xae
 80052ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d010      	beq.n	800531a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80052f8:	7b7a      	ldrb	r2, [r7, #13]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	32ae      	adds	r2, #174	@ 0xae
 80052fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	6839      	ldr	r1, [r7, #0]
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	4798      	blx	r3
 800530a:	4603      	mov	r3, r0
 800530c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800530e:	e004      	b.n	800531a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005310:	6839      	ldr	r1, [r7, #0]
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 fc03 	bl	8005b1e <USBD_CtlError>
              break;
 8005318:	e000      	b.n	800531c <USBD_StdEPReq+0x1c8>
              break;
 800531a:	bf00      	nop
          }
          break;
 800531c:	e0ab      	b.n	8005476 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2b02      	cmp	r3, #2
 8005328:	d002      	beq.n	8005330 <USBD_StdEPReq+0x1dc>
 800532a:	2b03      	cmp	r3, #3
 800532c:	d032      	beq.n	8005394 <USBD_StdEPReq+0x240>
 800532e:	e097      	b.n	8005460 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005330:	7bbb      	ldrb	r3, [r7, #14]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d007      	beq.n	8005346 <USBD_StdEPReq+0x1f2>
 8005336:	7bbb      	ldrb	r3, [r7, #14]
 8005338:	2b80      	cmp	r3, #128	@ 0x80
 800533a:	d004      	beq.n	8005346 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800533c:	6839      	ldr	r1, [r7, #0]
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 fbed 	bl	8005b1e <USBD_CtlError>
                break;
 8005344:	e091      	b.n	800546a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005346:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800534a:	2b00      	cmp	r3, #0
 800534c:	da0b      	bge.n	8005366 <USBD_StdEPReq+0x212>
 800534e:	7bbb      	ldrb	r3, [r7, #14]
 8005350:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005354:	4613      	mov	r3, r2
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	4413      	add	r3, r2
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	3310      	adds	r3, #16
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	4413      	add	r3, r2
 8005362:	3304      	adds	r3, #4
 8005364:	e00b      	b.n	800537e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005366:	7bbb      	ldrb	r3, [r7, #14]
 8005368:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800536c:	4613      	mov	r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4413      	add	r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	4413      	add	r3, r2
 800537c:	3304      	adds	r3, #4
 800537e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	2200      	movs	r2, #0
 8005384:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	2202      	movs	r2, #2
 800538a:	4619      	mov	r1, r3
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 fc43 	bl	8005c18 <USBD_CtlSendData>
              break;
 8005392:	e06a      	b.n	800546a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005394:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005398:	2b00      	cmp	r3, #0
 800539a:	da11      	bge.n	80053c0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800539c:	7bbb      	ldrb	r3, [r7, #14]
 800539e:	f003 020f 	and.w	r2, r3, #15
 80053a2:	6879      	ldr	r1, [r7, #4]
 80053a4:	4613      	mov	r3, r2
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	4413      	add	r3, r2
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	440b      	add	r3, r1
 80053ae:	3324      	adds	r3, #36	@ 0x24
 80053b0:	881b      	ldrh	r3, [r3, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d117      	bne.n	80053e6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80053b6:	6839      	ldr	r1, [r7, #0]
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 fbb0 	bl	8005b1e <USBD_CtlError>
                  break;
 80053be:	e054      	b.n	800546a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80053c0:	7bbb      	ldrb	r3, [r7, #14]
 80053c2:	f003 020f 	and.w	r2, r3, #15
 80053c6:	6879      	ldr	r1, [r7, #4]
 80053c8:	4613      	mov	r3, r2
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4413      	add	r3, r2
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	440b      	add	r3, r1
 80053d2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80053d6:	881b      	ldrh	r3, [r3, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d104      	bne.n	80053e6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80053dc:	6839      	ldr	r1, [r7, #0]
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 fb9d 	bl	8005b1e <USBD_CtlError>
                  break;
 80053e4:	e041      	b.n	800546a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80053e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	da0b      	bge.n	8005406 <USBD_StdEPReq+0x2b2>
 80053ee:	7bbb      	ldrb	r3, [r7, #14]
 80053f0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80053f4:	4613      	mov	r3, r2
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	4413      	add	r3, r2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	3310      	adds	r3, #16
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	4413      	add	r3, r2
 8005402:	3304      	adds	r3, #4
 8005404:	e00b      	b.n	800541e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005406:	7bbb      	ldrb	r3, [r7, #14]
 8005408:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800540c:	4613      	mov	r3, r2
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	4413      	add	r3, r2
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	4413      	add	r3, r2
 800541c:	3304      	adds	r3, #4
 800541e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005420:	7bbb      	ldrb	r3, [r7, #14]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d002      	beq.n	800542c <USBD_StdEPReq+0x2d8>
 8005426:	7bbb      	ldrb	r3, [r7, #14]
 8005428:	2b80      	cmp	r3, #128	@ 0x80
 800542a:	d103      	bne.n	8005434 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	2200      	movs	r2, #0
 8005430:	601a      	str	r2, [r3, #0]
 8005432:	e00e      	b.n	8005452 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005434:	7bbb      	ldrb	r3, [r7, #14]
 8005436:	4619      	mov	r1, r3
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f001 f87d 	bl	8006538 <USBD_LL_IsStallEP>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d003      	beq.n	800544c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	2201      	movs	r2, #1
 8005448:	601a      	str	r2, [r3, #0]
 800544a:	e002      	b.n	8005452 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	2200      	movs	r2, #0
 8005450:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	2202      	movs	r2, #2
 8005456:	4619      	mov	r1, r3
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 fbdd 	bl	8005c18 <USBD_CtlSendData>
              break;
 800545e:	e004      	b.n	800546a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8005460:	6839      	ldr	r1, [r7, #0]
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 fb5b 	bl	8005b1e <USBD_CtlError>
              break;
 8005468:	bf00      	nop
          }
          break;
 800546a:	e004      	b.n	8005476 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800546c:	6839      	ldr	r1, [r7, #0]
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 fb55 	bl	8005b1e <USBD_CtlError>
          break;
 8005474:	bf00      	nop
      }
      break;
 8005476:	e005      	b.n	8005484 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005478:	6839      	ldr	r1, [r7, #0]
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 fb4f 	bl	8005b1e <USBD_CtlError>
      break;
 8005480:	e000      	b.n	8005484 <USBD_StdEPReq+0x330>
      break;
 8005482:	bf00      	nop
  }

  return ret;
 8005484:	7bfb      	ldrb	r3, [r7, #15]
}
 8005486:	4618      	mov	r0, r3
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
	...

08005490 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800549a:	2300      	movs	r3, #0
 800549c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800549e:	2300      	movs	r3, #0
 80054a0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80054a2:	2300      	movs	r3, #0
 80054a4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	885b      	ldrh	r3, [r3, #2]
 80054aa:	0a1b      	lsrs	r3, r3, #8
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	3b01      	subs	r3, #1
 80054b0:	2b06      	cmp	r3, #6
 80054b2:	f200 8128 	bhi.w	8005706 <USBD_GetDescriptor+0x276>
 80054b6:	a201      	add	r2, pc, #4	@ (adr r2, 80054bc <USBD_GetDescriptor+0x2c>)
 80054b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054bc:	080054d9 	.word	0x080054d9
 80054c0:	080054f1 	.word	0x080054f1
 80054c4:	08005531 	.word	0x08005531
 80054c8:	08005707 	.word	0x08005707
 80054cc:	08005707 	.word	0x08005707
 80054d0:	080056a7 	.word	0x080056a7
 80054d4:	080056d3 	.word	0x080056d3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	7c12      	ldrb	r2, [r2, #16]
 80054e4:	f107 0108 	add.w	r1, r7, #8
 80054e8:	4610      	mov	r0, r2
 80054ea:	4798      	blx	r3
 80054ec:	60f8      	str	r0, [r7, #12]
      break;
 80054ee:	e112      	b.n	8005716 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	7c1b      	ldrb	r3, [r3, #16]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d10d      	bne.n	8005514 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80054fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005500:	f107 0208 	add.w	r2, r7, #8
 8005504:	4610      	mov	r0, r2
 8005506:	4798      	blx	r3
 8005508:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	3301      	adds	r3, #1
 800550e:	2202      	movs	r2, #2
 8005510:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005512:	e100      	b.n	8005716 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800551a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800551c:	f107 0208 	add.w	r2, r7, #8
 8005520:	4610      	mov	r0, r2
 8005522:	4798      	blx	r3
 8005524:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	3301      	adds	r3, #1
 800552a:	2202      	movs	r2, #2
 800552c:	701a      	strb	r2, [r3, #0]
      break;
 800552e:	e0f2      	b.n	8005716 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	885b      	ldrh	r3, [r3, #2]
 8005534:	b2db      	uxtb	r3, r3
 8005536:	2b05      	cmp	r3, #5
 8005538:	f200 80ac 	bhi.w	8005694 <USBD_GetDescriptor+0x204>
 800553c:	a201      	add	r2, pc, #4	@ (adr r2, 8005544 <USBD_GetDescriptor+0xb4>)
 800553e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005542:	bf00      	nop
 8005544:	0800555d 	.word	0x0800555d
 8005548:	08005591 	.word	0x08005591
 800554c:	080055c5 	.word	0x080055c5
 8005550:	080055f9 	.word	0x080055f9
 8005554:	0800562d 	.word	0x0800562d
 8005558:	08005661 	.word	0x08005661
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d00b      	beq.n	8005580 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	7c12      	ldrb	r2, [r2, #16]
 8005574:	f107 0108 	add.w	r1, r7, #8
 8005578:	4610      	mov	r0, r2
 800557a:	4798      	blx	r3
 800557c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800557e:	e091      	b.n	80056a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005580:	6839      	ldr	r1, [r7, #0]
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 facb 	bl	8005b1e <USBD_CtlError>
            err++;
 8005588:	7afb      	ldrb	r3, [r7, #11]
 800558a:	3301      	adds	r3, #1
 800558c:	72fb      	strb	r3, [r7, #11]
          break;
 800558e:	e089      	b.n	80056a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d00b      	beq.n	80055b4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	7c12      	ldrb	r2, [r2, #16]
 80055a8:	f107 0108 	add.w	r1, r7, #8
 80055ac:	4610      	mov	r0, r2
 80055ae:	4798      	blx	r3
 80055b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80055b2:	e077      	b.n	80056a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80055b4:	6839      	ldr	r1, [r7, #0]
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 fab1 	bl	8005b1e <USBD_CtlError>
            err++;
 80055bc:	7afb      	ldrb	r3, [r7, #11]
 80055be:	3301      	adds	r3, #1
 80055c0:	72fb      	strb	r3, [r7, #11]
          break;
 80055c2:	e06f      	b.n	80056a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d00b      	beq.n	80055e8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	7c12      	ldrb	r2, [r2, #16]
 80055dc:	f107 0108 	add.w	r1, r7, #8
 80055e0:	4610      	mov	r0, r2
 80055e2:	4798      	blx	r3
 80055e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80055e6:	e05d      	b.n	80056a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80055e8:	6839      	ldr	r1, [r7, #0]
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 fa97 	bl	8005b1e <USBD_CtlError>
            err++;
 80055f0:	7afb      	ldrb	r3, [r7, #11]
 80055f2:	3301      	adds	r3, #1
 80055f4:	72fb      	strb	r3, [r7, #11]
          break;
 80055f6:	e055      	b.n	80056a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d00b      	beq.n	800561c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	7c12      	ldrb	r2, [r2, #16]
 8005610:	f107 0108 	add.w	r1, r7, #8
 8005614:	4610      	mov	r0, r2
 8005616:	4798      	blx	r3
 8005618:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800561a:	e043      	b.n	80056a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800561c:	6839      	ldr	r1, [r7, #0]
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 fa7d 	bl	8005b1e <USBD_CtlError>
            err++;
 8005624:	7afb      	ldrb	r3, [r7, #11]
 8005626:	3301      	adds	r3, #1
 8005628:	72fb      	strb	r3, [r7, #11]
          break;
 800562a:	e03b      	b.n	80056a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005632:	695b      	ldr	r3, [r3, #20]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d00b      	beq.n	8005650 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800563e:	695b      	ldr	r3, [r3, #20]
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	7c12      	ldrb	r2, [r2, #16]
 8005644:	f107 0108 	add.w	r1, r7, #8
 8005648:	4610      	mov	r0, r2
 800564a:	4798      	blx	r3
 800564c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800564e:	e029      	b.n	80056a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005650:	6839      	ldr	r1, [r7, #0]
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 fa63 	bl	8005b1e <USBD_CtlError>
            err++;
 8005658:	7afb      	ldrb	r3, [r7, #11]
 800565a:	3301      	adds	r3, #1
 800565c:	72fb      	strb	r3, [r7, #11]
          break;
 800565e:	e021      	b.n	80056a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005666:	699b      	ldr	r3, [r3, #24]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d00b      	beq.n	8005684 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005672:	699b      	ldr	r3, [r3, #24]
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	7c12      	ldrb	r2, [r2, #16]
 8005678:	f107 0108 	add.w	r1, r7, #8
 800567c:	4610      	mov	r0, r2
 800567e:	4798      	blx	r3
 8005680:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005682:	e00f      	b.n	80056a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005684:	6839      	ldr	r1, [r7, #0]
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 fa49 	bl	8005b1e <USBD_CtlError>
            err++;
 800568c:	7afb      	ldrb	r3, [r7, #11]
 800568e:	3301      	adds	r3, #1
 8005690:	72fb      	strb	r3, [r7, #11]
          break;
 8005692:	e007      	b.n	80056a4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005694:	6839      	ldr	r1, [r7, #0]
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 fa41 	bl	8005b1e <USBD_CtlError>
          err++;
 800569c:	7afb      	ldrb	r3, [r7, #11]
 800569e:	3301      	adds	r3, #1
 80056a0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80056a2:	bf00      	nop
      }
      break;
 80056a4:	e037      	b.n	8005716 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	7c1b      	ldrb	r3, [r3, #16]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d109      	bne.n	80056c2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80056b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056b6:	f107 0208 	add.w	r2, r7, #8
 80056ba:	4610      	mov	r0, r2
 80056bc:	4798      	blx	r3
 80056be:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80056c0:	e029      	b.n	8005716 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80056c2:	6839      	ldr	r1, [r7, #0]
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f000 fa2a 	bl	8005b1e <USBD_CtlError>
        err++;
 80056ca:	7afb      	ldrb	r3, [r7, #11]
 80056cc:	3301      	adds	r3, #1
 80056ce:	72fb      	strb	r3, [r7, #11]
      break;
 80056d0:	e021      	b.n	8005716 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	7c1b      	ldrb	r3, [r3, #16]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d10d      	bne.n	80056f6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80056e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056e2:	f107 0208 	add.w	r2, r7, #8
 80056e6:	4610      	mov	r0, r2
 80056e8:	4798      	blx	r3
 80056ea:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	3301      	adds	r3, #1
 80056f0:	2207      	movs	r2, #7
 80056f2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80056f4:	e00f      	b.n	8005716 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80056f6:	6839      	ldr	r1, [r7, #0]
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 fa10 	bl	8005b1e <USBD_CtlError>
        err++;
 80056fe:	7afb      	ldrb	r3, [r7, #11]
 8005700:	3301      	adds	r3, #1
 8005702:	72fb      	strb	r3, [r7, #11]
      break;
 8005704:	e007      	b.n	8005716 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005706:	6839      	ldr	r1, [r7, #0]
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 fa08 	bl	8005b1e <USBD_CtlError>
      err++;
 800570e:	7afb      	ldrb	r3, [r7, #11]
 8005710:	3301      	adds	r3, #1
 8005712:	72fb      	strb	r3, [r7, #11]
      break;
 8005714:	bf00      	nop
  }

  if (err != 0U)
 8005716:	7afb      	ldrb	r3, [r7, #11]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d11e      	bne.n	800575a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	88db      	ldrh	r3, [r3, #6]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d016      	beq.n	8005752 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005724:	893b      	ldrh	r3, [r7, #8]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00e      	beq.n	8005748 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	88da      	ldrh	r2, [r3, #6]
 800572e:	893b      	ldrh	r3, [r7, #8]
 8005730:	4293      	cmp	r3, r2
 8005732:	bf28      	it	cs
 8005734:	4613      	movcs	r3, r2
 8005736:	b29b      	uxth	r3, r3
 8005738:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800573a:	893b      	ldrh	r3, [r7, #8]
 800573c:	461a      	mov	r2, r3
 800573e:	68f9      	ldr	r1, [r7, #12]
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f000 fa69 	bl	8005c18 <USBD_CtlSendData>
 8005746:	e009      	b.n	800575c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005748:	6839      	ldr	r1, [r7, #0]
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 f9e7 	bl	8005b1e <USBD_CtlError>
 8005750:	e004      	b.n	800575c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 faba 	bl	8005ccc <USBD_CtlSendStatus>
 8005758:	e000      	b.n	800575c <USBD_GetDescriptor+0x2cc>
    return;
 800575a:	bf00      	nop
  }
}
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop

08005764 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	889b      	ldrh	r3, [r3, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d131      	bne.n	80057da <USBD_SetAddress+0x76>
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	88db      	ldrh	r3, [r3, #6]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d12d      	bne.n	80057da <USBD_SetAddress+0x76>
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	885b      	ldrh	r3, [r3, #2]
 8005782:	2b7f      	cmp	r3, #127	@ 0x7f
 8005784:	d829      	bhi.n	80057da <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	885b      	ldrh	r3, [r3, #2]
 800578a:	b2db      	uxtb	r3, r3
 800578c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005790:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005798:	b2db      	uxtb	r3, r3
 800579a:	2b03      	cmp	r3, #3
 800579c:	d104      	bne.n	80057a8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800579e:	6839      	ldr	r1, [r7, #0]
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 f9bc 	bl	8005b1e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057a6:	e01d      	b.n	80057e4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	7bfa      	ldrb	r2, [r7, #15]
 80057ac:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80057b0:	7bfb      	ldrb	r3, [r7, #15]
 80057b2:	4619      	mov	r1, r3
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 feeb 	bl	8006590 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 fa86 	bl	8005ccc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80057c0:	7bfb      	ldrb	r3, [r7, #15]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d004      	beq.n	80057d0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2202      	movs	r2, #2
 80057ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057ce:	e009      	b.n	80057e4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057d8:	e004      	b.n	80057e4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80057da:	6839      	ldr	r1, [r7, #0]
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 f99e 	bl	8005b1e <USBD_CtlError>
  }
}
 80057e2:	bf00      	nop
 80057e4:	bf00      	nop
 80057e6:	3710      	adds	r7, #16
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80057f6:	2300      	movs	r3, #0
 80057f8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	885b      	ldrh	r3, [r3, #2]
 80057fe:	b2da      	uxtb	r2, r3
 8005800:	4b4e      	ldr	r3, [pc, #312]	@ (800593c <USBD_SetConfig+0x150>)
 8005802:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005804:	4b4d      	ldr	r3, [pc, #308]	@ (800593c <USBD_SetConfig+0x150>)
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	2b01      	cmp	r3, #1
 800580a:	d905      	bls.n	8005818 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800580c:	6839      	ldr	r1, [r7, #0]
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 f985 	bl	8005b1e <USBD_CtlError>
    return USBD_FAIL;
 8005814:	2303      	movs	r3, #3
 8005816:	e08c      	b.n	8005932 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800581e:	b2db      	uxtb	r3, r3
 8005820:	2b02      	cmp	r3, #2
 8005822:	d002      	beq.n	800582a <USBD_SetConfig+0x3e>
 8005824:	2b03      	cmp	r3, #3
 8005826:	d029      	beq.n	800587c <USBD_SetConfig+0x90>
 8005828:	e075      	b.n	8005916 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800582a:	4b44      	ldr	r3, [pc, #272]	@ (800593c <USBD_SetConfig+0x150>)
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d020      	beq.n	8005874 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8005832:	4b42      	ldr	r3, [pc, #264]	@ (800593c <USBD_SetConfig+0x150>)
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	461a      	mov	r2, r3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800583c:	4b3f      	ldr	r3, [pc, #252]	@ (800593c <USBD_SetConfig+0x150>)
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	4619      	mov	r1, r3
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f7fe ffe3 	bl	800480e <USBD_SetClassConfig>
 8005848:	4603      	mov	r3, r0
 800584a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800584c:	7bfb      	ldrb	r3, [r7, #15]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d008      	beq.n	8005864 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8005852:	6839      	ldr	r1, [r7, #0]
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 f962 	bl	8005b1e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2202      	movs	r2, #2
 800585e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005862:	e065      	b.n	8005930 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f000 fa31 	bl	8005ccc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2203      	movs	r2, #3
 800586e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8005872:	e05d      	b.n	8005930 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 fa29 	bl	8005ccc <USBD_CtlSendStatus>
      break;
 800587a:	e059      	b.n	8005930 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800587c:	4b2f      	ldr	r3, [pc, #188]	@ (800593c <USBD_SetConfig+0x150>)
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d112      	bne.n	80058aa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2202      	movs	r2, #2
 8005888:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800588c:	4b2b      	ldr	r3, [pc, #172]	@ (800593c <USBD_SetConfig+0x150>)
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	461a      	mov	r2, r3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005896:	4b29      	ldr	r3, [pc, #164]	@ (800593c <USBD_SetConfig+0x150>)
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	4619      	mov	r1, r3
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f7fe ffd2 	bl	8004846 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 fa12 	bl	8005ccc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80058a8:	e042      	b.n	8005930 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80058aa:	4b24      	ldr	r3, [pc, #144]	@ (800593c <USBD_SetConfig+0x150>)
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	461a      	mov	r2, r3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d02a      	beq.n	800590e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	4619      	mov	r1, r3
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f7fe ffc0 	bl	8004846 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80058c6:	4b1d      	ldr	r3, [pc, #116]	@ (800593c <USBD_SetConfig+0x150>)
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	461a      	mov	r2, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80058d0:	4b1a      	ldr	r3, [pc, #104]	@ (800593c <USBD_SetConfig+0x150>)
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	4619      	mov	r1, r3
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f7fe ff99 	bl	800480e <USBD_SetClassConfig>
 80058dc:	4603      	mov	r3, r0
 80058de:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80058e0:	7bfb      	ldrb	r3, [r7, #15]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00f      	beq.n	8005906 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80058e6:	6839      	ldr	r1, [r7, #0]
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 f918 	bl	8005b1e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	4619      	mov	r1, r3
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f7fe ffa5 	bl	8004846 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2202      	movs	r2, #2
 8005900:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8005904:	e014      	b.n	8005930 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 f9e0 	bl	8005ccc <USBD_CtlSendStatus>
      break;
 800590c:	e010      	b.n	8005930 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 f9dc 	bl	8005ccc <USBD_CtlSendStatus>
      break;
 8005914:	e00c      	b.n	8005930 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8005916:	6839      	ldr	r1, [r7, #0]
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f000 f900 	bl	8005b1e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800591e:	4b07      	ldr	r3, [pc, #28]	@ (800593c <USBD_SetConfig+0x150>)
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	4619      	mov	r1, r3
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f7fe ff8e 	bl	8004846 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800592a:	2303      	movs	r3, #3
 800592c:	73fb      	strb	r3, [r7, #15]
      break;
 800592e:	bf00      	nop
  }

  return ret;
 8005930:	7bfb      	ldrb	r3, [r7, #15]
}
 8005932:	4618      	mov	r0, r3
 8005934:	3710      	adds	r7, #16
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	20000188 	.word	0x20000188

08005940 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	88db      	ldrh	r3, [r3, #6]
 800594e:	2b01      	cmp	r3, #1
 8005950:	d004      	beq.n	800595c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005952:	6839      	ldr	r1, [r7, #0]
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 f8e2 	bl	8005b1e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800595a:	e023      	b.n	80059a4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005962:	b2db      	uxtb	r3, r3
 8005964:	2b02      	cmp	r3, #2
 8005966:	dc02      	bgt.n	800596e <USBD_GetConfig+0x2e>
 8005968:	2b00      	cmp	r3, #0
 800596a:	dc03      	bgt.n	8005974 <USBD_GetConfig+0x34>
 800596c:	e015      	b.n	800599a <USBD_GetConfig+0x5a>
 800596e:	2b03      	cmp	r3, #3
 8005970:	d00b      	beq.n	800598a <USBD_GetConfig+0x4a>
 8005972:	e012      	b.n	800599a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	3308      	adds	r3, #8
 800597e:	2201      	movs	r2, #1
 8005980:	4619      	mov	r1, r3
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 f948 	bl	8005c18 <USBD_CtlSendData>
        break;
 8005988:	e00c      	b.n	80059a4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	3304      	adds	r3, #4
 800598e:	2201      	movs	r2, #1
 8005990:	4619      	mov	r1, r3
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 f940 	bl	8005c18 <USBD_CtlSendData>
        break;
 8005998:	e004      	b.n	80059a4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800599a:	6839      	ldr	r1, [r7, #0]
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 f8be 	bl	8005b1e <USBD_CtlError>
        break;
 80059a2:	bf00      	nop
}
 80059a4:	bf00      	nop
 80059a6:	3708      	adds	r7, #8
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	3b01      	subs	r3, #1
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	d81e      	bhi.n	8005a02 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	88db      	ldrh	r3, [r3, #6]
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d004      	beq.n	80059d6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80059cc:	6839      	ldr	r1, [r7, #0]
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 f8a5 	bl	8005b1e <USBD_CtlError>
        break;
 80059d4:	e01a      	b.n	8005a0c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2201      	movs	r2, #1
 80059da:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d005      	beq.n	80059f2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	f043 0202 	orr.w	r2, r3, #2
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	330c      	adds	r3, #12
 80059f6:	2202      	movs	r2, #2
 80059f8:	4619      	mov	r1, r3
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 f90c 	bl	8005c18 <USBD_CtlSendData>
      break;
 8005a00:	e004      	b.n	8005a0c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005a02:	6839      	ldr	r1, [r7, #0]
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 f88a 	bl	8005b1e <USBD_CtlError>
      break;
 8005a0a:	bf00      	nop
  }
}
 8005a0c:	bf00      	nop
 8005a0e:	3708      	adds	r7, #8
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	885b      	ldrh	r3, [r3, #2]
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d107      	bne.n	8005a36 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 f94c 	bl	8005ccc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8005a34:	e013      	b.n	8005a5e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	885b      	ldrh	r3, [r3, #2]
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d10b      	bne.n	8005a56 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	889b      	ldrh	r3, [r3, #4]
 8005a42:	0a1b      	lsrs	r3, r3, #8
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	b2da      	uxtb	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 f93c 	bl	8005ccc <USBD_CtlSendStatus>
}
 8005a54:	e003      	b.n	8005a5e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8005a56:	6839      	ldr	r1, [r7, #0]
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 f860 	bl	8005b1e <USBD_CtlError>
}
 8005a5e:	bf00      	nop
 8005a60:	3708      	adds	r7, #8
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b082      	sub	sp, #8
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
 8005a6e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d80b      	bhi.n	8005a96 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	885b      	ldrh	r3, [r3, #2]
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d10c      	bne.n	8005aa0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 f91c 	bl	8005ccc <USBD_CtlSendStatus>
      }
      break;
 8005a94:	e004      	b.n	8005aa0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005a96:	6839      	ldr	r1, [r7, #0]
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f000 f840 	bl	8005b1e <USBD_CtlError>
      break;
 8005a9e:	e000      	b.n	8005aa2 <USBD_ClrFeature+0x3c>
      break;
 8005aa0:	bf00      	nop
  }
}
 8005aa2:	bf00      	nop
 8005aa4:	3708      	adds	r7, #8
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}

08005aaa <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005aaa:	b580      	push	{r7, lr}
 8005aac:	b084      	sub	sp, #16
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
 8005ab2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	781a      	ldrb	r2, [r3, #0]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	781a      	ldrb	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005ad4:	68f8      	ldr	r0, [r7, #12]
 8005ad6:	f7ff fa40 	bl	8004f5a <SWAPBYTE>
 8005ada:	4603      	mov	r3, r0
 8005adc:	461a      	mov	r2, r3
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	3301      	adds	r3, #1
 8005aec:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005aee:	68f8      	ldr	r0, [r7, #12]
 8005af0:	f7ff fa33 	bl	8004f5a <SWAPBYTE>
 8005af4:	4603      	mov	r3, r0
 8005af6:	461a      	mov	r2, r3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	3301      	adds	r3, #1
 8005b00:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	3301      	adds	r3, #1
 8005b06:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005b08:	68f8      	ldr	r0, [r7, #12]
 8005b0a:	f7ff fa26 	bl	8004f5a <SWAPBYTE>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	461a      	mov	r2, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	80da      	strh	r2, [r3, #6]
}
 8005b16:	bf00      	nop
 8005b18:	3710      	adds	r7, #16
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}

08005b1e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b1e:	b580      	push	{r7, lr}
 8005b20:	b082      	sub	sp, #8
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
 8005b26:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005b28:	2180      	movs	r1, #128	@ 0x80
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 fcc6 	bl	80064bc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005b30:	2100      	movs	r1, #0
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 fcc2 	bl	80064bc <USBD_LL_StallEP>
}
 8005b38:	bf00      	nop
 8005b3a:	3708      	adds	r7, #8
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d042      	beq.n	8005bdc <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8005b5a:	6938      	ldr	r0, [r7, #16]
 8005b5c:	f000 f842 	bl	8005be4 <USBD_GetLen>
 8005b60:	4603      	mov	r3, r0
 8005b62:	3301      	adds	r3, #1
 8005b64:	005b      	lsls	r3, r3, #1
 8005b66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b6a:	d808      	bhi.n	8005b7e <USBD_GetString+0x3e>
 8005b6c:	6938      	ldr	r0, [r7, #16]
 8005b6e:	f000 f839 	bl	8005be4 <USBD_GetLen>
 8005b72:	4603      	mov	r3, r0
 8005b74:	3301      	adds	r3, #1
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	005b      	lsls	r3, r3, #1
 8005b7a:	b29a      	uxth	r2, r3
 8005b7c:	e001      	b.n	8005b82 <USBD_GetString+0x42>
 8005b7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005b86:	7dfb      	ldrb	r3, [r7, #23]
 8005b88:	68ba      	ldr	r2, [r7, #8]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	7812      	ldrb	r2, [r2, #0]
 8005b90:	701a      	strb	r2, [r3, #0]
  idx++;
 8005b92:	7dfb      	ldrb	r3, [r7, #23]
 8005b94:	3301      	adds	r3, #1
 8005b96:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005b98:	7dfb      	ldrb	r3, [r7, #23]
 8005b9a:	68ba      	ldr	r2, [r7, #8]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	2203      	movs	r2, #3
 8005ba0:	701a      	strb	r2, [r3, #0]
  idx++;
 8005ba2:	7dfb      	ldrb	r3, [r7, #23]
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005ba8:	e013      	b.n	8005bd2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8005baa:	7dfb      	ldrb	r3, [r7, #23]
 8005bac:	68ba      	ldr	r2, [r7, #8]
 8005bae:	4413      	add	r3, r2
 8005bb0:	693a      	ldr	r2, [r7, #16]
 8005bb2:	7812      	ldrb	r2, [r2, #0]
 8005bb4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	3301      	adds	r3, #1
 8005bba:	613b      	str	r3, [r7, #16]
    idx++;
 8005bbc:	7dfb      	ldrb	r3, [r7, #23]
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005bc2:	7dfb      	ldrb	r3, [r7, #23]
 8005bc4:	68ba      	ldr	r2, [r7, #8]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	2200      	movs	r2, #0
 8005bca:	701a      	strb	r2, [r3, #0]
    idx++;
 8005bcc:	7dfb      	ldrb	r3, [r7, #23]
 8005bce:	3301      	adds	r3, #1
 8005bd0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d1e7      	bne.n	8005baa <USBD_GetString+0x6a>
 8005bda:	e000      	b.n	8005bde <USBD_GetString+0x9e>
    return;
 8005bdc:	bf00      	nop
  }
}
 8005bde:	3718      	adds	r7, #24
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b085      	sub	sp, #20
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005bec:	2300      	movs	r3, #0
 8005bee:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005bf4:	e005      	b.n	8005c02 <USBD_GetLen+0x1e>
  {
    len++;
 8005bf6:	7bfb      	ldrb	r3, [r7, #15]
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	3301      	adds	r3, #1
 8005c00:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d1f5      	bne.n	8005bf6 <USBD_GetLen+0x12>
  }

  return len;
 8005c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3714      	adds	r7, #20
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2202      	movs	r2, #2
 8005c28:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	68ba      	ldr	r2, [r7, #8]
 8005c3c:	2100      	movs	r1, #0
 8005c3e:	68f8      	ldr	r0, [r7, #12]
 8005c40:	f000 fcc5 	bl	80065ce <USBD_LL_Transmit>

  return USBD_OK;
 8005c44:	2300      	movs	r3, #0
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3710      	adds	r7, #16
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b084      	sub	sp, #16
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	60f8      	str	r0, [r7, #12]
 8005c56:	60b9      	str	r1, [r7, #8]
 8005c58:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	68ba      	ldr	r2, [r7, #8]
 8005c5e:	2100      	movs	r1, #0
 8005c60:	68f8      	ldr	r0, [r7, #12]
 8005c62:	f000 fcb4 	bl	80065ce <USBD_LL_Transmit>

  return USBD_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2203      	movs	r2, #3
 8005c80:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	68ba      	ldr	r2, [r7, #8]
 8005c98:	2100      	movs	r1, #0
 8005c9a:	68f8      	ldr	r0, [r7, #12]
 8005c9c:	f000 fcb8 	bl	8006610 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3710      	adds	r7, #16
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b084      	sub	sp, #16
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	60f8      	str	r0, [r7, #12]
 8005cb2:	60b9      	str	r1, [r7, #8]
 8005cb4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	68ba      	ldr	r2, [r7, #8]
 8005cba:	2100      	movs	r1, #0
 8005cbc:	68f8      	ldr	r0, [r7, #12]
 8005cbe:	f000 fca7 	bl	8006610 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3710      	adds	r7, #16
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2204      	movs	r2, #4
 8005cd8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005cdc:	2300      	movs	r3, #0
 8005cde:	2200      	movs	r2, #0
 8005ce0:	2100      	movs	r1, #0
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 fc73 	bl	80065ce <USBD_LL_Transmit>

  return USBD_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3708      	adds	r7, #8
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b082      	sub	sp, #8
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2205      	movs	r2, #5
 8005cfe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005d02:	2300      	movs	r3, #0
 8005d04:	2200      	movs	r2, #0
 8005d06:	2100      	movs	r1, #0
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 fc81 	bl	8006610 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3708      	adds	r7, #8
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	4912      	ldr	r1, [pc, #72]	@ (8005d68 <MX_USB_DEVICE_Init+0x50>)
 8005d20:	4812      	ldr	r0, [pc, #72]	@ (8005d6c <MX_USB_DEVICE_Init+0x54>)
 8005d22:	f7fe fcf7 	bl	8004714 <USBD_Init>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d001      	beq.n	8005d30 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005d2c:	f7fa fe56 	bl	80009dc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005d30:	490f      	ldr	r1, [pc, #60]	@ (8005d70 <MX_USB_DEVICE_Init+0x58>)
 8005d32:	480e      	ldr	r0, [pc, #56]	@ (8005d6c <MX_USB_DEVICE_Init+0x54>)
 8005d34:	f7fe fd1e 	bl	8004774 <USBD_RegisterClass>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d001      	beq.n	8005d42 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005d3e:	f7fa fe4d 	bl	80009dc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005d42:	490c      	ldr	r1, [pc, #48]	@ (8005d74 <MX_USB_DEVICE_Init+0x5c>)
 8005d44:	4809      	ldr	r0, [pc, #36]	@ (8005d6c <MX_USB_DEVICE_Init+0x54>)
 8005d46:	f7fe fc55 	bl	80045f4 <USBD_CDC_RegisterInterface>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d001      	beq.n	8005d54 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005d50:	f7fa fe44 	bl	80009dc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005d54:	4805      	ldr	r0, [pc, #20]	@ (8005d6c <MX_USB_DEVICE_Init+0x54>)
 8005d56:	f7fe fd43 	bl	80047e0 <USBD_Start>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d001      	beq.n	8005d64 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005d60:	f7fa fe3c 	bl	80009dc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005d64:	bf00      	nop
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	200000b0 	.word	0x200000b0
 8005d6c:	2000018c 	.word	0x2000018c
 8005d70:	2000001c 	.word	0x2000001c
 8005d74:	2000009c 	.word	0x2000009c

08005d78 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	4905      	ldr	r1, [pc, #20]	@ (8005d94 <CDC_Init_FS+0x1c>)
 8005d80:	4805      	ldr	r0, [pc, #20]	@ (8005d98 <CDC_Init_FS+0x20>)
 8005d82:	f7fe fc51 	bl	8004628 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005d86:	4905      	ldr	r1, [pc, #20]	@ (8005d9c <CDC_Init_FS+0x24>)
 8005d88:	4803      	ldr	r0, [pc, #12]	@ (8005d98 <CDC_Init_FS+0x20>)
 8005d8a:	f7fe fc6f 	bl	800466c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8005d8e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	20000c68 	.word	0x20000c68
 8005d98:	2000018c 	.word	0x2000018c
 8005d9c:	20000468 	.word	0x20000468

08005da0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005da0:	b480      	push	{r7}
 8005da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005da4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	4603      	mov	r3, r0
 8005db8:	6039      	str	r1, [r7, #0]
 8005dba:	71fb      	strb	r3, [r7, #7]
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005dc0:	79fb      	ldrb	r3, [r7, #7]
 8005dc2:	2b23      	cmp	r3, #35	@ 0x23
 8005dc4:	d84a      	bhi.n	8005e5c <CDC_Control_FS+0xac>
 8005dc6:	a201      	add	r2, pc, #4	@ (adr r2, 8005dcc <CDC_Control_FS+0x1c>)
 8005dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dcc:	08005e5d 	.word	0x08005e5d
 8005dd0:	08005e5d 	.word	0x08005e5d
 8005dd4:	08005e5d 	.word	0x08005e5d
 8005dd8:	08005e5d 	.word	0x08005e5d
 8005ddc:	08005e5d 	.word	0x08005e5d
 8005de0:	08005e5d 	.word	0x08005e5d
 8005de4:	08005e5d 	.word	0x08005e5d
 8005de8:	08005e5d 	.word	0x08005e5d
 8005dec:	08005e5d 	.word	0x08005e5d
 8005df0:	08005e5d 	.word	0x08005e5d
 8005df4:	08005e5d 	.word	0x08005e5d
 8005df8:	08005e5d 	.word	0x08005e5d
 8005dfc:	08005e5d 	.word	0x08005e5d
 8005e00:	08005e5d 	.word	0x08005e5d
 8005e04:	08005e5d 	.word	0x08005e5d
 8005e08:	08005e5d 	.word	0x08005e5d
 8005e0c:	08005e5d 	.word	0x08005e5d
 8005e10:	08005e5d 	.word	0x08005e5d
 8005e14:	08005e5d 	.word	0x08005e5d
 8005e18:	08005e5d 	.word	0x08005e5d
 8005e1c:	08005e5d 	.word	0x08005e5d
 8005e20:	08005e5d 	.word	0x08005e5d
 8005e24:	08005e5d 	.word	0x08005e5d
 8005e28:	08005e5d 	.word	0x08005e5d
 8005e2c:	08005e5d 	.word	0x08005e5d
 8005e30:	08005e5d 	.word	0x08005e5d
 8005e34:	08005e5d 	.word	0x08005e5d
 8005e38:	08005e5d 	.word	0x08005e5d
 8005e3c:	08005e5d 	.word	0x08005e5d
 8005e40:	08005e5d 	.word	0x08005e5d
 8005e44:	08005e5d 	.word	0x08005e5d
 8005e48:	08005e5d 	.word	0x08005e5d
 8005e4c:	08005e5d 	.word	0x08005e5d
 8005e50:	08005e5d 	.word	0x08005e5d
 8005e54:	08005e5d 	.word	0x08005e5d
 8005e58:	08005e5d 	.word	0x08005e5d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8005e5c:	bf00      	nop
  }

  return (USBD_OK);
 8005e5e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005e76:	6879      	ldr	r1, [r7, #4]
 8005e78:	4805      	ldr	r0, [pc, #20]	@ (8005e90 <CDC_Receive_FS+0x24>)
 8005e7a:	f7fe fbf7 	bl	800466c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005e7e:	4804      	ldr	r0, [pc, #16]	@ (8005e90 <CDC_Receive_FS+0x24>)
 8005e80:	f7fe fc12 	bl	80046a8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8005e84:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3708      	adds	r7, #8
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	2000018c 	.word	0x2000018c

08005e94 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b087      	sub	sp, #28
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8005ea6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	371c      	adds	r7, #28
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
	...

08005eb8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	6039      	str	r1, [r7, #0]
 8005ec2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	2212      	movs	r2, #18
 8005ec8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005eca:	4b03      	ldr	r3, [pc, #12]	@ (8005ed8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr
 8005ed8:	200000cc 	.word	0x200000cc

08005edc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	6039      	str	r1, [r7, #0]
 8005ee6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	2204      	movs	r2, #4
 8005eec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005eee:	4b03      	ldr	r3, [pc, #12]	@ (8005efc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr
 8005efc:	200000e0 	.word	0x200000e0

08005f00 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	4603      	mov	r3, r0
 8005f08:	6039      	str	r1, [r7, #0]
 8005f0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005f0c:	79fb      	ldrb	r3, [r7, #7]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d105      	bne.n	8005f1e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005f12:	683a      	ldr	r2, [r7, #0]
 8005f14:	4907      	ldr	r1, [pc, #28]	@ (8005f34 <USBD_FS_ProductStrDescriptor+0x34>)
 8005f16:	4808      	ldr	r0, [pc, #32]	@ (8005f38 <USBD_FS_ProductStrDescriptor+0x38>)
 8005f18:	f7ff fe12 	bl	8005b40 <USBD_GetString>
 8005f1c:	e004      	b.n	8005f28 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005f1e:	683a      	ldr	r2, [r7, #0]
 8005f20:	4904      	ldr	r1, [pc, #16]	@ (8005f34 <USBD_FS_ProductStrDescriptor+0x34>)
 8005f22:	4805      	ldr	r0, [pc, #20]	@ (8005f38 <USBD_FS_ProductStrDescriptor+0x38>)
 8005f24:	f7ff fe0c 	bl	8005b40 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005f28:	4b02      	ldr	r3, [pc, #8]	@ (8005f34 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3708      	adds	r7, #8
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	20001468 	.word	0x20001468
 8005f38:	08007088 	.word	0x08007088

08005f3c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b082      	sub	sp, #8
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	4603      	mov	r3, r0
 8005f44:	6039      	str	r1, [r7, #0]
 8005f46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005f48:	683a      	ldr	r2, [r7, #0]
 8005f4a:	4904      	ldr	r1, [pc, #16]	@ (8005f5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005f4c:	4804      	ldr	r0, [pc, #16]	@ (8005f60 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005f4e:	f7ff fdf7 	bl	8005b40 <USBD_GetString>
  return USBD_StrDesc;
 8005f52:	4b02      	ldr	r3, [pc, #8]	@ (8005f5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3708      	adds	r7, #8
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}
 8005f5c:	20001468 	.word	0x20001468
 8005f60:	080070a0 	.word	0x080070a0

08005f64 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b082      	sub	sp, #8
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	6039      	str	r1, [r7, #0]
 8005f6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	221a      	movs	r2, #26
 8005f74:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005f76:	f000 f843 	bl	8006000 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005f7a:	4b02      	ldr	r3, [pc, #8]	@ (8005f84 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3708      	adds	r7, #8
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	200000e4 	.word	0x200000e4

08005f88 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	4603      	mov	r3, r0
 8005f90:	6039      	str	r1, [r7, #0]
 8005f92:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005f94:	79fb      	ldrb	r3, [r7, #7]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d105      	bne.n	8005fa6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005f9a:	683a      	ldr	r2, [r7, #0]
 8005f9c:	4907      	ldr	r1, [pc, #28]	@ (8005fbc <USBD_FS_ConfigStrDescriptor+0x34>)
 8005f9e:	4808      	ldr	r0, [pc, #32]	@ (8005fc0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005fa0:	f7ff fdce 	bl	8005b40 <USBD_GetString>
 8005fa4:	e004      	b.n	8005fb0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005fa6:	683a      	ldr	r2, [r7, #0]
 8005fa8:	4904      	ldr	r1, [pc, #16]	@ (8005fbc <USBD_FS_ConfigStrDescriptor+0x34>)
 8005faa:	4805      	ldr	r0, [pc, #20]	@ (8005fc0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005fac:	f7ff fdc8 	bl	8005b40 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005fb0:	4b02      	ldr	r3, [pc, #8]	@ (8005fbc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3708      	adds	r7, #8
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	20001468 	.word	0x20001468
 8005fc0:	080070b4 	.word	0x080070b4

08005fc4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b082      	sub	sp, #8
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	4603      	mov	r3, r0
 8005fcc:	6039      	str	r1, [r7, #0]
 8005fce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005fd0:	79fb      	ldrb	r3, [r7, #7]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d105      	bne.n	8005fe2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005fd6:	683a      	ldr	r2, [r7, #0]
 8005fd8:	4907      	ldr	r1, [pc, #28]	@ (8005ff8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005fda:	4808      	ldr	r0, [pc, #32]	@ (8005ffc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005fdc:	f7ff fdb0 	bl	8005b40 <USBD_GetString>
 8005fe0:	e004      	b.n	8005fec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005fe2:	683a      	ldr	r2, [r7, #0]
 8005fe4:	4904      	ldr	r1, [pc, #16]	@ (8005ff8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005fe6:	4805      	ldr	r0, [pc, #20]	@ (8005ffc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005fe8:	f7ff fdaa 	bl	8005b40 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005fec:	4b02      	ldr	r3, [pc, #8]	@ (8005ff8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3708      	adds	r7, #8
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	20001468 	.word	0x20001468
 8005ffc:	080070c0 	.word	0x080070c0

08006000 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006006:	4b0f      	ldr	r3, [pc, #60]	@ (8006044 <Get_SerialNum+0x44>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800600c:	4b0e      	ldr	r3, [pc, #56]	@ (8006048 <Get_SerialNum+0x48>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006012:	4b0e      	ldr	r3, [pc, #56]	@ (800604c <Get_SerialNum+0x4c>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4413      	add	r3, r2
 800601e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d009      	beq.n	800603a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006026:	2208      	movs	r2, #8
 8006028:	4909      	ldr	r1, [pc, #36]	@ (8006050 <Get_SerialNum+0x50>)
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	f000 f814 	bl	8006058 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006030:	2204      	movs	r2, #4
 8006032:	4908      	ldr	r1, [pc, #32]	@ (8006054 <Get_SerialNum+0x54>)
 8006034:	68b8      	ldr	r0, [r7, #8]
 8006036:	f000 f80f 	bl	8006058 <IntToUnicode>
  }
}
 800603a:	bf00      	nop
 800603c:	3710      	adds	r7, #16
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	1fff7a10 	.word	0x1fff7a10
 8006048:	1fff7a14 	.word	0x1fff7a14
 800604c:	1fff7a18 	.word	0x1fff7a18
 8006050:	200000e6 	.word	0x200000e6
 8006054:	200000f6 	.word	0x200000f6

08006058 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006058:	b480      	push	{r7}
 800605a:	b087      	sub	sp, #28
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	4613      	mov	r3, r2
 8006064:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006066:	2300      	movs	r3, #0
 8006068:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800606a:	2300      	movs	r3, #0
 800606c:	75fb      	strb	r3, [r7, #23]
 800606e:	e027      	b.n	80060c0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	0f1b      	lsrs	r3, r3, #28
 8006074:	2b09      	cmp	r3, #9
 8006076:	d80b      	bhi.n	8006090 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	0f1b      	lsrs	r3, r3, #28
 800607c:	b2da      	uxtb	r2, r3
 800607e:	7dfb      	ldrb	r3, [r7, #23]
 8006080:	005b      	lsls	r3, r3, #1
 8006082:	4619      	mov	r1, r3
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	440b      	add	r3, r1
 8006088:	3230      	adds	r2, #48	@ 0x30
 800608a:	b2d2      	uxtb	r2, r2
 800608c:	701a      	strb	r2, [r3, #0]
 800608e:	e00a      	b.n	80060a6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	0f1b      	lsrs	r3, r3, #28
 8006094:	b2da      	uxtb	r2, r3
 8006096:	7dfb      	ldrb	r3, [r7, #23]
 8006098:	005b      	lsls	r3, r3, #1
 800609a:	4619      	mov	r1, r3
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	440b      	add	r3, r1
 80060a0:	3237      	adds	r2, #55	@ 0x37
 80060a2:	b2d2      	uxtb	r2, r2
 80060a4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	011b      	lsls	r3, r3, #4
 80060aa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80060ac:	7dfb      	ldrb	r3, [r7, #23]
 80060ae:	005b      	lsls	r3, r3, #1
 80060b0:	3301      	adds	r3, #1
 80060b2:	68ba      	ldr	r2, [r7, #8]
 80060b4:	4413      	add	r3, r2
 80060b6:	2200      	movs	r2, #0
 80060b8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80060ba:	7dfb      	ldrb	r3, [r7, #23]
 80060bc:	3301      	adds	r3, #1
 80060be:	75fb      	strb	r3, [r7, #23]
 80060c0:	7dfa      	ldrb	r2, [r7, #23]
 80060c2:	79fb      	ldrb	r3, [r7, #7]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d3d3      	bcc.n	8006070 <IntToUnicode+0x18>
  }
}
 80060c8:	bf00      	nop
 80060ca:	bf00      	nop
 80060cc:	371c      	adds	r7, #28
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
	...

080060d8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b08a      	sub	sp, #40	@ 0x28
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060e0:	f107 0314 	add.w	r3, r7, #20
 80060e4:	2200      	movs	r2, #0
 80060e6:	601a      	str	r2, [r3, #0]
 80060e8:	605a      	str	r2, [r3, #4]
 80060ea:	609a      	str	r2, [r3, #8]
 80060ec:	60da      	str	r2, [r3, #12]
 80060ee:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80060f8:	d13a      	bne.n	8006170 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060fa:	2300      	movs	r3, #0
 80060fc:	613b      	str	r3, [r7, #16]
 80060fe:	4b1e      	ldr	r3, [pc, #120]	@ (8006178 <HAL_PCD_MspInit+0xa0>)
 8006100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006102:	4a1d      	ldr	r2, [pc, #116]	@ (8006178 <HAL_PCD_MspInit+0xa0>)
 8006104:	f043 0301 	orr.w	r3, r3, #1
 8006108:	6313      	str	r3, [r2, #48]	@ 0x30
 800610a:	4b1b      	ldr	r3, [pc, #108]	@ (8006178 <HAL_PCD_MspInit+0xa0>)
 800610c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800610e:	f003 0301 	and.w	r3, r3, #1
 8006112:	613b      	str	r3, [r7, #16]
 8006114:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006116:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800611a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800611c:	2302      	movs	r3, #2
 800611e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006120:	2300      	movs	r3, #0
 8006122:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006124:	2303      	movs	r3, #3
 8006126:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006128:	230a      	movs	r3, #10
 800612a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800612c:	f107 0314 	add.w	r3, r7, #20
 8006130:	4619      	mov	r1, r3
 8006132:	4812      	ldr	r0, [pc, #72]	@ (800617c <HAL_PCD_MspInit+0xa4>)
 8006134:	f7fa ff1c 	bl	8000f70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006138:	4b0f      	ldr	r3, [pc, #60]	@ (8006178 <HAL_PCD_MspInit+0xa0>)
 800613a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800613c:	4a0e      	ldr	r2, [pc, #56]	@ (8006178 <HAL_PCD_MspInit+0xa0>)
 800613e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006142:	6353      	str	r3, [r2, #52]	@ 0x34
 8006144:	2300      	movs	r3, #0
 8006146:	60fb      	str	r3, [r7, #12]
 8006148:	4b0b      	ldr	r3, [pc, #44]	@ (8006178 <HAL_PCD_MspInit+0xa0>)
 800614a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800614c:	4a0a      	ldr	r2, [pc, #40]	@ (8006178 <HAL_PCD_MspInit+0xa0>)
 800614e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006152:	6453      	str	r3, [r2, #68]	@ 0x44
 8006154:	4b08      	ldr	r3, [pc, #32]	@ (8006178 <HAL_PCD_MspInit+0xa0>)
 8006156:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006158:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800615c:	60fb      	str	r3, [r7, #12]
 800615e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006160:	2200      	movs	r2, #0
 8006162:	2100      	movs	r1, #0
 8006164:	2043      	movs	r0, #67	@ 0x43
 8006166:	f7fa fecc 	bl	8000f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800616a:	2043      	movs	r0, #67	@ 0x43
 800616c:	f7fa fee5 	bl	8000f3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006170:	bf00      	nop
 8006172:	3728      	adds	r7, #40	@ 0x28
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}
 8006178:	40023800 	.word	0x40023800
 800617c:	40020000 	.word	0x40020000

08006180 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006194:	4619      	mov	r1, r3
 8006196:	4610      	mov	r0, r2
 8006198:	f7fe fb6f 	bl	800487a <USBD_LL_SetupStage>
}
 800619c:	bf00      	nop
 800619e:	3708      	adds	r7, #8
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b082      	sub	sp, #8
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	460b      	mov	r3, r1
 80061ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80061b6:	78fa      	ldrb	r2, [r7, #3]
 80061b8:	6879      	ldr	r1, [r7, #4]
 80061ba:	4613      	mov	r3, r2
 80061bc:	00db      	lsls	r3, r3, #3
 80061be:	4413      	add	r3, r2
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	440b      	add	r3, r1
 80061c4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	78fb      	ldrb	r3, [r7, #3]
 80061cc:	4619      	mov	r1, r3
 80061ce:	f7fe fba9 	bl	8004924 <USBD_LL_DataOutStage>
}
 80061d2:	bf00      	nop
 80061d4:	3708      	adds	r7, #8
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}

080061da <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80061da:	b580      	push	{r7, lr}
 80061dc:	b082      	sub	sp, #8
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
 80061e2:	460b      	mov	r3, r1
 80061e4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80061ec:	78fa      	ldrb	r2, [r7, #3]
 80061ee:	6879      	ldr	r1, [r7, #4]
 80061f0:	4613      	mov	r3, r2
 80061f2:	00db      	lsls	r3, r3, #3
 80061f4:	4413      	add	r3, r2
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	440b      	add	r3, r1
 80061fa:	3320      	adds	r3, #32
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	78fb      	ldrb	r3, [r7, #3]
 8006200:	4619      	mov	r1, r3
 8006202:	f7fe fc42 	bl	8004a8a <USBD_LL_DataInStage>
}
 8006206:	bf00      	nop
 8006208:	3708      	adds	r7, #8
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800620e:	b580      	push	{r7, lr}
 8006210:	b082      	sub	sp, #8
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800621c:	4618      	mov	r0, r3
 800621e:	f7fe fd7c 	bl	8004d1a <USBD_LL_SOF>
}
 8006222:	bf00      	nop
 8006224:	3708      	adds	r7, #8
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b084      	sub	sp, #16
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006232:	2301      	movs	r3, #1
 8006234:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	79db      	ldrb	r3, [r3, #7]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d102      	bne.n	8006244 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800623e:	2300      	movs	r3, #0
 8006240:	73fb      	strb	r3, [r7, #15]
 8006242:	e008      	b.n	8006256 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	79db      	ldrb	r3, [r3, #7]
 8006248:	2b02      	cmp	r3, #2
 800624a:	d102      	bne.n	8006252 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800624c:	2301      	movs	r3, #1
 800624e:	73fb      	strb	r3, [r7, #15]
 8006250:	e001      	b.n	8006256 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006252:	f7fa fbc3 	bl	80009dc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800625c:	7bfa      	ldrb	r2, [r7, #15]
 800625e:	4611      	mov	r1, r2
 8006260:	4618      	mov	r0, r3
 8006262:	f7fe fd16 	bl	8004c92 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800626c:	4618      	mov	r0, r3
 800626e:	f7fe fcbe 	bl	8004bee <USBD_LL_Reset>
}
 8006272:	bf00      	nop
 8006274:	3710      	adds	r7, #16
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
	...

0800627c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b082      	sub	sp, #8
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800628a:	4618      	mov	r0, r3
 800628c:	f7fe fd11 	bl	8004cb2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	6812      	ldr	r2, [r2, #0]
 800629e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80062a2:	f043 0301 	orr.w	r3, r3, #1
 80062a6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	7adb      	ldrb	r3, [r3, #11]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d005      	beq.n	80062bc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80062b0:	4b04      	ldr	r3, [pc, #16]	@ (80062c4 <HAL_PCD_SuspendCallback+0x48>)
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	4a03      	ldr	r2, [pc, #12]	@ (80062c4 <HAL_PCD_SuspendCallback+0x48>)
 80062b6:	f043 0306 	orr.w	r3, r3, #6
 80062ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80062bc:	bf00      	nop
 80062be:	3708      	adds	r7, #8
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	e000ed00 	.word	0xe000ed00

080062c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80062d6:	4618      	mov	r0, r3
 80062d8:	f7fe fd07 	bl	8004cea <USBD_LL_Resume>
}
 80062dc:	bf00      	nop
 80062de:	3708      	adds	r7, #8
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	460b      	mov	r3, r1
 80062ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80062f6:	78fa      	ldrb	r2, [r7, #3]
 80062f8:	4611      	mov	r1, r2
 80062fa:	4618      	mov	r0, r3
 80062fc:	f7fe fd5f 	bl	8004dbe <USBD_LL_IsoOUTIncomplete>
}
 8006300:	bf00      	nop
 8006302:	3708      	adds	r7, #8
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b082      	sub	sp, #8
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	460b      	mov	r3, r1
 8006312:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800631a:	78fa      	ldrb	r2, [r7, #3]
 800631c:	4611      	mov	r1, r2
 800631e:	4618      	mov	r0, r3
 8006320:	f7fe fd1b 	bl	8004d5a <USBD_LL_IsoINIncomplete>
}
 8006324:	bf00      	nop
 8006326:	3708      	adds	r7, #8
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b082      	sub	sp, #8
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800633a:	4618      	mov	r0, r3
 800633c:	f7fe fd71 	bl	8004e22 <USBD_LL_DevConnected>
}
 8006340:	bf00      	nop
 8006342:	3708      	adds	r7, #8
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006356:	4618      	mov	r0, r3
 8006358:	f7fe fd6e 	bl	8004e38 <USBD_LL_DevDisconnected>
}
 800635c:	bf00      	nop
 800635e:	3708      	adds	r7, #8
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b082      	sub	sp, #8
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d13c      	bne.n	80063ee <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006374:	4a20      	ldr	r2, [pc, #128]	@ (80063f8 <USBD_LL_Init+0x94>)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a1e      	ldr	r2, [pc, #120]	@ (80063f8 <USBD_LL_Init+0x94>)
 8006380:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006384:	4b1c      	ldr	r3, [pc, #112]	@ (80063f8 <USBD_LL_Init+0x94>)
 8006386:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800638a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800638c:	4b1a      	ldr	r3, [pc, #104]	@ (80063f8 <USBD_LL_Init+0x94>)
 800638e:	2204      	movs	r2, #4
 8006390:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006392:	4b19      	ldr	r3, [pc, #100]	@ (80063f8 <USBD_LL_Init+0x94>)
 8006394:	2202      	movs	r2, #2
 8006396:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006398:	4b17      	ldr	r3, [pc, #92]	@ (80063f8 <USBD_LL_Init+0x94>)
 800639a:	2200      	movs	r2, #0
 800639c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800639e:	4b16      	ldr	r3, [pc, #88]	@ (80063f8 <USBD_LL_Init+0x94>)
 80063a0:	2202      	movs	r2, #2
 80063a2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80063a4:	4b14      	ldr	r3, [pc, #80]	@ (80063f8 <USBD_LL_Init+0x94>)
 80063a6:	2200      	movs	r2, #0
 80063a8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80063aa:	4b13      	ldr	r3, [pc, #76]	@ (80063f8 <USBD_LL_Init+0x94>)
 80063ac:	2200      	movs	r2, #0
 80063ae:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80063b0:	4b11      	ldr	r3, [pc, #68]	@ (80063f8 <USBD_LL_Init+0x94>)
 80063b2:	2200      	movs	r2, #0
 80063b4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80063b6:	4b10      	ldr	r3, [pc, #64]	@ (80063f8 <USBD_LL_Init+0x94>)
 80063b8:	2200      	movs	r2, #0
 80063ba:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80063bc:	4b0e      	ldr	r3, [pc, #56]	@ (80063f8 <USBD_LL_Init+0x94>)
 80063be:	2200      	movs	r2, #0
 80063c0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80063c2:	480d      	ldr	r0, [pc, #52]	@ (80063f8 <USBD_LL_Init+0x94>)
 80063c4:	f7fa ff70 	bl	80012a8 <HAL_PCD_Init>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d001      	beq.n	80063d2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80063ce:	f7fa fb05 	bl	80009dc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80063d2:	2180      	movs	r1, #128	@ 0x80
 80063d4:	4808      	ldr	r0, [pc, #32]	@ (80063f8 <USBD_LL_Init+0x94>)
 80063d6:	f7fc f99c 	bl	8002712 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80063da:	2240      	movs	r2, #64	@ 0x40
 80063dc:	2100      	movs	r1, #0
 80063de:	4806      	ldr	r0, [pc, #24]	@ (80063f8 <USBD_LL_Init+0x94>)
 80063e0:	f7fc f950 	bl	8002684 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80063e4:	2280      	movs	r2, #128	@ 0x80
 80063e6:	2101      	movs	r1, #1
 80063e8:	4803      	ldr	r0, [pc, #12]	@ (80063f8 <USBD_LL_Init+0x94>)
 80063ea:	f7fc f94b 	bl	8002684 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80063ee:	2300      	movs	r3, #0
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3708      	adds	r7, #8
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	20001668 	.word	0x20001668

080063fc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006404:	2300      	movs	r3, #0
 8006406:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006408:	2300      	movs	r3, #0
 800640a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006412:	4618      	mov	r0, r3
 8006414:	f7fb f857 	bl	80014c6 <HAL_PCD_Start>
 8006418:	4603      	mov	r3, r0
 800641a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800641c:	7bfb      	ldrb	r3, [r7, #15]
 800641e:	4618      	mov	r0, r3
 8006420:	f000 f942 	bl	80066a8 <USBD_Get_USB_Status>
 8006424:	4603      	mov	r3, r0
 8006426:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006428:	7bbb      	ldrb	r3, [r7, #14]
}
 800642a:	4618      	mov	r0, r3
 800642c:	3710      	adds	r7, #16
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}

08006432 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006432:	b580      	push	{r7, lr}
 8006434:	b084      	sub	sp, #16
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
 800643a:	4608      	mov	r0, r1
 800643c:	4611      	mov	r1, r2
 800643e:	461a      	mov	r2, r3
 8006440:	4603      	mov	r3, r0
 8006442:	70fb      	strb	r3, [r7, #3]
 8006444:	460b      	mov	r3, r1
 8006446:	70bb      	strb	r3, [r7, #2]
 8006448:	4613      	mov	r3, r2
 800644a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800644c:	2300      	movs	r3, #0
 800644e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006450:	2300      	movs	r3, #0
 8006452:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800645a:	78bb      	ldrb	r3, [r7, #2]
 800645c:	883a      	ldrh	r2, [r7, #0]
 800645e:	78f9      	ldrb	r1, [r7, #3]
 8006460:	f7fb fd2b 	bl	8001eba <HAL_PCD_EP_Open>
 8006464:	4603      	mov	r3, r0
 8006466:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006468:	7bfb      	ldrb	r3, [r7, #15]
 800646a:	4618      	mov	r0, r3
 800646c:	f000 f91c 	bl	80066a8 <USBD_Get_USB_Status>
 8006470:	4603      	mov	r3, r0
 8006472:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006474:	7bbb      	ldrb	r3, [r7, #14]
}
 8006476:	4618      	mov	r0, r3
 8006478:	3710      	adds	r7, #16
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}

0800647e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800647e:	b580      	push	{r7, lr}
 8006480:	b084      	sub	sp, #16
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
 8006486:	460b      	mov	r3, r1
 8006488:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800648a:	2300      	movs	r3, #0
 800648c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800648e:	2300      	movs	r3, #0
 8006490:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006498:	78fa      	ldrb	r2, [r7, #3]
 800649a:	4611      	mov	r1, r2
 800649c:	4618      	mov	r0, r3
 800649e:	f7fb fd76 	bl	8001f8e <HAL_PCD_EP_Close>
 80064a2:	4603      	mov	r3, r0
 80064a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80064a6:	7bfb      	ldrb	r3, [r7, #15]
 80064a8:	4618      	mov	r0, r3
 80064aa:	f000 f8fd 	bl	80066a8 <USBD_Get_USB_Status>
 80064ae:	4603      	mov	r3, r0
 80064b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80064b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3710      	adds	r7, #16
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	460b      	mov	r3, r1
 80064c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80064c8:	2300      	movs	r3, #0
 80064ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80064cc:	2300      	movs	r3, #0
 80064ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80064d6:	78fa      	ldrb	r2, [r7, #3]
 80064d8:	4611      	mov	r1, r2
 80064da:	4618      	mov	r0, r3
 80064dc:	f7fb fe2e 	bl	800213c <HAL_PCD_EP_SetStall>
 80064e0:	4603      	mov	r3, r0
 80064e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80064e4:	7bfb      	ldrb	r3, [r7, #15]
 80064e6:	4618      	mov	r0, r3
 80064e8:	f000 f8de 	bl	80066a8 <USBD_Get_USB_Status>
 80064ec:	4603      	mov	r3, r0
 80064ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80064f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3710      	adds	r7, #16
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80064fa:	b580      	push	{r7, lr}
 80064fc:	b084      	sub	sp, #16
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
 8006502:	460b      	mov	r3, r1
 8006504:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006506:	2300      	movs	r3, #0
 8006508:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800650a:	2300      	movs	r3, #0
 800650c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006514:	78fa      	ldrb	r2, [r7, #3]
 8006516:	4611      	mov	r1, r2
 8006518:	4618      	mov	r0, r3
 800651a:	f7fb fe72 	bl	8002202 <HAL_PCD_EP_ClrStall>
 800651e:	4603      	mov	r3, r0
 8006520:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006522:	7bfb      	ldrb	r3, [r7, #15]
 8006524:	4618      	mov	r0, r3
 8006526:	f000 f8bf 	bl	80066a8 <USBD_Get_USB_Status>
 800652a:	4603      	mov	r3, r0
 800652c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800652e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006530:	4618      	mov	r0, r3
 8006532:	3710      	adds	r7, #16
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006538:	b480      	push	{r7}
 800653a:	b085      	sub	sp, #20
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	460b      	mov	r3, r1
 8006542:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800654a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800654c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006550:	2b00      	cmp	r3, #0
 8006552:	da0b      	bge.n	800656c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006554:	78fb      	ldrb	r3, [r7, #3]
 8006556:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800655a:	68f9      	ldr	r1, [r7, #12]
 800655c:	4613      	mov	r3, r2
 800655e:	00db      	lsls	r3, r3, #3
 8006560:	4413      	add	r3, r2
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	440b      	add	r3, r1
 8006566:	3316      	adds	r3, #22
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	e00b      	b.n	8006584 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800656c:	78fb      	ldrb	r3, [r7, #3]
 800656e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006572:	68f9      	ldr	r1, [r7, #12]
 8006574:	4613      	mov	r3, r2
 8006576:	00db      	lsls	r3, r3, #3
 8006578:	4413      	add	r3, r2
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	440b      	add	r3, r1
 800657e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8006582:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006584:	4618      	mov	r0, r3
 8006586:	3714      	adds	r7, #20
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	460b      	mov	r3, r1
 800659a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800659c:	2300      	movs	r3, #0
 800659e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80065a0:	2300      	movs	r3, #0
 80065a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80065aa:	78fa      	ldrb	r2, [r7, #3]
 80065ac:	4611      	mov	r1, r2
 80065ae:	4618      	mov	r0, r3
 80065b0:	f7fb fc5f 	bl	8001e72 <HAL_PCD_SetAddress>
 80065b4:	4603      	mov	r3, r0
 80065b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80065b8:	7bfb      	ldrb	r3, [r7, #15]
 80065ba:	4618      	mov	r0, r3
 80065bc:	f000 f874 	bl	80066a8 <USBD_Get_USB_Status>
 80065c0:	4603      	mov	r3, r0
 80065c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80065c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3710      	adds	r7, #16
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}

080065ce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80065ce:	b580      	push	{r7, lr}
 80065d0:	b086      	sub	sp, #24
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	60f8      	str	r0, [r7, #12]
 80065d6:	607a      	str	r2, [r7, #4]
 80065d8:	603b      	str	r3, [r7, #0]
 80065da:	460b      	mov	r3, r1
 80065dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80065de:	2300      	movs	r3, #0
 80065e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80065e2:	2300      	movs	r3, #0
 80065e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80065ec:	7af9      	ldrb	r1, [r7, #11]
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	f7fb fd69 	bl	80020c8 <HAL_PCD_EP_Transmit>
 80065f6:	4603      	mov	r3, r0
 80065f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80065fa:	7dfb      	ldrb	r3, [r7, #23]
 80065fc:	4618      	mov	r0, r3
 80065fe:	f000 f853 	bl	80066a8 <USBD_Get_USB_Status>
 8006602:	4603      	mov	r3, r0
 8006604:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006606:	7dbb      	ldrb	r3, [r7, #22]
}
 8006608:	4618      	mov	r0, r3
 800660a:	3718      	adds	r7, #24
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}

08006610 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b086      	sub	sp, #24
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	607a      	str	r2, [r7, #4]
 800661a:	603b      	str	r3, [r7, #0]
 800661c:	460b      	mov	r3, r1
 800661e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006620:	2300      	movs	r3, #0
 8006622:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006624:	2300      	movs	r3, #0
 8006626:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800662e:	7af9      	ldrb	r1, [r7, #11]
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	f7fb fcf5 	bl	8002022 <HAL_PCD_EP_Receive>
 8006638:	4603      	mov	r3, r0
 800663a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800663c:	7dfb      	ldrb	r3, [r7, #23]
 800663e:	4618      	mov	r0, r3
 8006640:	f000 f832 	bl	80066a8 <USBD_Get_USB_Status>
 8006644:	4603      	mov	r3, r0
 8006646:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006648:	7dbb      	ldrb	r3, [r7, #22]
}
 800664a:	4618      	mov	r0, r3
 800664c:	3718      	adds	r7, #24
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}

08006652 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006652:	b580      	push	{r7, lr}
 8006654:	b082      	sub	sp, #8
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
 800665a:	460b      	mov	r3, r1
 800665c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006664:	78fa      	ldrb	r2, [r7, #3]
 8006666:	4611      	mov	r1, r2
 8006668:	4618      	mov	r0, r3
 800666a:	f7fb fd15 	bl	8002098 <HAL_PCD_EP_GetRxCount>
 800666e:	4603      	mov	r3, r0
}
 8006670:	4618      	mov	r0, r3
 8006672:	3708      	adds	r7, #8
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006680:	4b03      	ldr	r3, [pc, #12]	@ (8006690 <USBD_static_malloc+0x18>)
}
 8006682:	4618      	mov	r0, r3
 8006684:	370c      	adds	r7, #12
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop
 8006690:	20001b4c 	.word	0x20001b4c

08006694 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]

}
 800669c:	bf00      	nop
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b085      	sub	sp, #20
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	4603      	mov	r3, r0
 80066b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80066b2:	2300      	movs	r3, #0
 80066b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80066b6:	79fb      	ldrb	r3, [r7, #7]
 80066b8:	2b03      	cmp	r3, #3
 80066ba:	d817      	bhi.n	80066ec <USBD_Get_USB_Status+0x44>
 80066bc:	a201      	add	r2, pc, #4	@ (adr r2, 80066c4 <USBD_Get_USB_Status+0x1c>)
 80066be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c2:	bf00      	nop
 80066c4:	080066d5 	.word	0x080066d5
 80066c8:	080066db 	.word	0x080066db
 80066cc:	080066e1 	.word	0x080066e1
 80066d0:	080066e7 	.word	0x080066e7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80066d4:	2300      	movs	r3, #0
 80066d6:	73fb      	strb	r3, [r7, #15]
    break;
 80066d8:	e00b      	b.n	80066f2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80066da:	2303      	movs	r3, #3
 80066dc:	73fb      	strb	r3, [r7, #15]
    break;
 80066de:	e008      	b.n	80066f2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80066e0:	2301      	movs	r3, #1
 80066e2:	73fb      	strb	r3, [r7, #15]
    break;
 80066e4:	e005      	b.n	80066f2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80066e6:	2303      	movs	r3, #3
 80066e8:	73fb      	strb	r3, [r7, #15]
    break;
 80066ea:	e002      	b.n	80066f2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80066ec:	2303      	movs	r3, #3
 80066ee:	73fb      	strb	r3, [r7, #15]
    break;
 80066f0:	bf00      	nop
  }
  return usb_status;
 80066f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3714      	adds	r7, #20
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <std>:
 8006700:	2300      	movs	r3, #0
 8006702:	b510      	push	{r4, lr}
 8006704:	4604      	mov	r4, r0
 8006706:	e9c0 3300 	strd	r3, r3, [r0]
 800670a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800670e:	6083      	str	r3, [r0, #8]
 8006710:	8181      	strh	r1, [r0, #12]
 8006712:	6643      	str	r3, [r0, #100]	@ 0x64
 8006714:	81c2      	strh	r2, [r0, #14]
 8006716:	6183      	str	r3, [r0, #24]
 8006718:	4619      	mov	r1, r3
 800671a:	2208      	movs	r2, #8
 800671c:	305c      	adds	r0, #92	@ 0x5c
 800671e:	f000 f9e7 	bl	8006af0 <memset>
 8006722:	4b0d      	ldr	r3, [pc, #52]	@ (8006758 <std+0x58>)
 8006724:	6263      	str	r3, [r4, #36]	@ 0x24
 8006726:	4b0d      	ldr	r3, [pc, #52]	@ (800675c <std+0x5c>)
 8006728:	62a3      	str	r3, [r4, #40]	@ 0x28
 800672a:	4b0d      	ldr	r3, [pc, #52]	@ (8006760 <std+0x60>)
 800672c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800672e:	4b0d      	ldr	r3, [pc, #52]	@ (8006764 <std+0x64>)
 8006730:	6323      	str	r3, [r4, #48]	@ 0x30
 8006732:	4b0d      	ldr	r3, [pc, #52]	@ (8006768 <std+0x68>)
 8006734:	6224      	str	r4, [r4, #32]
 8006736:	429c      	cmp	r4, r3
 8006738:	d006      	beq.n	8006748 <std+0x48>
 800673a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800673e:	4294      	cmp	r4, r2
 8006740:	d002      	beq.n	8006748 <std+0x48>
 8006742:	33d0      	adds	r3, #208	@ 0xd0
 8006744:	429c      	cmp	r4, r3
 8006746:	d105      	bne.n	8006754 <std+0x54>
 8006748:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800674c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006750:	f000 ba46 	b.w	8006be0 <__retarget_lock_init_recursive>
 8006754:	bd10      	pop	{r4, pc}
 8006756:	bf00      	nop
 8006758:	08006941 	.word	0x08006941
 800675c:	08006963 	.word	0x08006963
 8006760:	0800699b 	.word	0x0800699b
 8006764:	080069bf 	.word	0x080069bf
 8006768:	20001d6c 	.word	0x20001d6c

0800676c <stdio_exit_handler>:
 800676c:	4a02      	ldr	r2, [pc, #8]	@ (8006778 <stdio_exit_handler+0xc>)
 800676e:	4903      	ldr	r1, [pc, #12]	@ (800677c <stdio_exit_handler+0x10>)
 8006770:	4803      	ldr	r0, [pc, #12]	@ (8006780 <stdio_exit_handler+0x14>)
 8006772:	f000 b869 	b.w	8006848 <_fwalk_sglue>
 8006776:	bf00      	nop
 8006778:	20000100 	.word	0x20000100
 800677c:	08006ee1 	.word	0x08006ee1
 8006780:	20000110 	.word	0x20000110

08006784 <cleanup_stdio>:
 8006784:	6841      	ldr	r1, [r0, #4]
 8006786:	4b0c      	ldr	r3, [pc, #48]	@ (80067b8 <cleanup_stdio+0x34>)
 8006788:	4299      	cmp	r1, r3
 800678a:	b510      	push	{r4, lr}
 800678c:	4604      	mov	r4, r0
 800678e:	d001      	beq.n	8006794 <cleanup_stdio+0x10>
 8006790:	f000 fba6 	bl	8006ee0 <_fflush_r>
 8006794:	68a1      	ldr	r1, [r4, #8]
 8006796:	4b09      	ldr	r3, [pc, #36]	@ (80067bc <cleanup_stdio+0x38>)
 8006798:	4299      	cmp	r1, r3
 800679a:	d002      	beq.n	80067a2 <cleanup_stdio+0x1e>
 800679c:	4620      	mov	r0, r4
 800679e:	f000 fb9f 	bl	8006ee0 <_fflush_r>
 80067a2:	68e1      	ldr	r1, [r4, #12]
 80067a4:	4b06      	ldr	r3, [pc, #24]	@ (80067c0 <cleanup_stdio+0x3c>)
 80067a6:	4299      	cmp	r1, r3
 80067a8:	d004      	beq.n	80067b4 <cleanup_stdio+0x30>
 80067aa:	4620      	mov	r0, r4
 80067ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067b0:	f000 bb96 	b.w	8006ee0 <_fflush_r>
 80067b4:	bd10      	pop	{r4, pc}
 80067b6:	bf00      	nop
 80067b8:	20001d6c 	.word	0x20001d6c
 80067bc:	20001dd4 	.word	0x20001dd4
 80067c0:	20001e3c 	.word	0x20001e3c

080067c4 <global_stdio_init.part.0>:
 80067c4:	b510      	push	{r4, lr}
 80067c6:	4b0b      	ldr	r3, [pc, #44]	@ (80067f4 <global_stdio_init.part.0+0x30>)
 80067c8:	4c0b      	ldr	r4, [pc, #44]	@ (80067f8 <global_stdio_init.part.0+0x34>)
 80067ca:	4a0c      	ldr	r2, [pc, #48]	@ (80067fc <global_stdio_init.part.0+0x38>)
 80067cc:	601a      	str	r2, [r3, #0]
 80067ce:	4620      	mov	r0, r4
 80067d0:	2200      	movs	r2, #0
 80067d2:	2104      	movs	r1, #4
 80067d4:	f7ff ff94 	bl	8006700 <std>
 80067d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80067dc:	2201      	movs	r2, #1
 80067de:	2109      	movs	r1, #9
 80067e0:	f7ff ff8e 	bl	8006700 <std>
 80067e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80067e8:	2202      	movs	r2, #2
 80067ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067ee:	2112      	movs	r1, #18
 80067f0:	f7ff bf86 	b.w	8006700 <std>
 80067f4:	20001ea4 	.word	0x20001ea4
 80067f8:	20001d6c 	.word	0x20001d6c
 80067fc:	0800676d 	.word	0x0800676d

08006800 <__sfp_lock_acquire>:
 8006800:	4801      	ldr	r0, [pc, #4]	@ (8006808 <__sfp_lock_acquire+0x8>)
 8006802:	f000 b9ee 	b.w	8006be2 <__retarget_lock_acquire_recursive>
 8006806:	bf00      	nop
 8006808:	20001ead 	.word	0x20001ead

0800680c <__sfp_lock_release>:
 800680c:	4801      	ldr	r0, [pc, #4]	@ (8006814 <__sfp_lock_release+0x8>)
 800680e:	f000 b9e9 	b.w	8006be4 <__retarget_lock_release_recursive>
 8006812:	bf00      	nop
 8006814:	20001ead 	.word	0x20001ead

08006818 <__sinit>:
 8006818:	b510      	push	{r4, lr}
 800681a:	4604      	mov	r4, r0
 800681c:	f7ff fff0 	bl	8006800 <__sfp_lock_acquire>
 8006820:	6a23      	ldr	r3, [r4, #32]
 8006822:	b11b      	cbz	r3, 800682c <__sinit+0x14>
 8006824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006828:	f7ff bff0 	b.w	800680c <__sfp_lock_release>
 800682c:	4b04      	ldr	r3, [pc, #16]	@ (8006840 <__sinit+0x28>)
 800682e:	6223      	str	r3, [r4, #32]
 8006830:	4b04      	ldr	r3, [pc, #16]	@ (8006844 <__sinit+0x2c>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d1f5      	bne.n	8006824 <__sinit+0xc>
 8006838:	f7ff ffc4 	bl	80067c4 <global_stdio_init.part.0>
 800683c:	e7f2      	b.n	8006824 <__sinit+0xc>
 800683e:	bf00      	nop
 8006840:	08006785 	.word	0x08006785
 8006844:	20001ea4 	.word	0x20001ea4

08006848 <_fwalk_sglue>:
 8006848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800684c:	4607      	mov	r7, r0
 800684e:	4688      	mov	r8, r1
 8006850:	4614      	mov	r4, r2
 8006852:	2600      	movs	r6, #0
 8006854:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006858:	f1b9 0901 	subs.w	r9, r9, #1
 800685c:	d505      	bpl.n	800686a <_fwalk_sglue+0x22>
 800685e:	6824      	ldr	r4, [r4, #0]
 8006860:	2c00      	cmp	r4, #0
 8006862:	d1f7      	bne.n	8006854 <_fwalk_sglue+0xc>
 8006864:	4630      	mov	r0, r6
 8006866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800686a:	89ab      	ldrh	r3, [r5, #12]
 800686c:	2b01      	cmp	r3, #1
 800686e:	d907      	bls.n	8006880 <_fwalk_sglue+0x38>
 8006870:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006874:	3301      	adds	r3, #1
 8006876:	d003      	beq.n	8006880 <_fwalk_sglue+0x38>
 8006878:	4629      	mov	r1, r5
 800687a:	4638      	mov	r0, r7
 800687c:	47c0      	blx	r8
 800687e:	4306      	orrs	r6, r0
 8006880:	3568      	adds	r5, #104	@ 0x68
 8006882:	e7e9      	b.n	8006858 <_fwalk_sglue+0x10>

08006884 <_puts_r>:
 8006884:	6a03      	ldr	r3, [r0, #32]
 8006886:	b570      	push	{r4, r5, r6, lr}
 8006888:	6884      	ldr	r4, [r0, #8]
 800688a:	4605      	mov	r5, r0
 800688c:	460e      	mov	r6, r1
 800688e:	b90b      	cbnz	r3, 8006894 <_puts_r+0x10>
 8006890:	f7ff ffc2 	bl	8006818 <__sinit>
 8006894:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006896:	07db      	lsls	r3, r3, #31
 8006898:	d405      	bmi.n	80068a6 <_puts_r+0x22>
 800689a:	89a3      	ldrh	r3, [r4, #12]
 800689c:	0598      	lsls	r0, r3, #22
 800689e:	d402      	bmi.n	80068a6 <_puts_r+0x22>
 80068a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80068a2:	f000 f99e 	bl	8006be2 <__retarget_lock_acquire_recursive>
 80068a6:	89a3      	ldrh	r3, [r4, #12]
 80068a8:	0719      	lsls	r1, r3, #28
 80068aa:	d502      	bpl.n	80068b2 <_puts_r+0x2e>
 80068ac:	6923      	ldr	r3, [r4, #16]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d135      	bne.n	800691e <_puts_r+0x9a>
 80068b2:	4621      	mov	r1, r4
 80068b4:	4628      	mov	r0, r5
 80068b6:	f000 f8c5 	bl	8006a44 <__swsetup_r>
 80068ba:	b380      	cbz	r0, 800691e <_puts_r+0x9a>
 80068bc:	f04f 35ff 	mov.w	r5, #4294967295
 80068c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80068c2:	07da      	lsls	r2, r3, #31
 80068c4:	d405      	bmi.n	80068d2 <_puts_r+0x4e>
 80068c6:	89a3      	ldrh	r3, [r4, #12]
 80068c8:	059b      	lsls	r3, r3, #22
 80068ca:	d402      	bmi.n	80068d2 <_puts_r+0x4e>
 80068cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80068ce:	f000 f989 	bl	8006be4 <__retarget_lock_release_recursive>
 80068d2:	4628      	mov	r0, r5
 80068d4:	bd70      	pop	{r4, r5, r6, pc}
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	da04      	bge.n	80068e4 <_puts_r+0x60>
 80068da:	69a2      	ldr	r2, [r4, #24]
 80068dc:	429a      	cmp	r2, r3
 80068de:	dc17      	bgt.n	8006910 <_puts_r+0x8c>
 80068e0:	290a      	cmp	r1, #10
 80068e2:	d015      	beq.n	8006910 <_puts_r+0x8c>
 80068e4:	6823      	ldr	r3, [r4, #0]
 80068e6:	1c5a      	adds	r2, r3, #1
 80068e8:	6022      	str	r2, [r4, #0]
 80068ea:	7019      	strb	r1, [r3, #0]
 80068ec:	68a3      	ldr	r3, [r4, #8]
 80068ee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80068f2:	3b01      	subs	r3, #1
 80068f4:	60a3      	str	r3, [r4, #8]
 80068f6:	2900      	cmp	r1, #0
 80068f8:	d1ed      	bne.n	80068d6 <_puts_r+0x52>
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	da11      	bge.n	8006922 <_puts_r+0x9e>
 80068fe:	4622      	mov	r2, r4
 8006900:	210a      	movs	r1, #10
 8006902:	4628      	mov	r0, r5
 8006904:	f000 f85f 	bl	80069c6 <__swbuf_r>
 8006908:	3001      	adds	r0, #1
 800690a:	d0d7      	beq.n	80068bc <_puts_r+0x38>
 800690c:	250a      	movs	r5, #10
 800690e:	e7d7      	b.n	80068c0 <_puts_r+0x3c>
 8006910:	4622      	mov	r2, r4
 8006912:	4628      	mov	r0, r5
 8006914:	f000 f857 	bl	80069c6 <__swbuf_r>
 8006918:	3001      	adds	r0, #1
 800691a:	d1e7      	bne.n	80068ec <_puts_r+0x68>
 800691c:	e7ce      	b.n	80068bc <_puts_r+0x38>
 800691e:	3e01      	subs	r6, #1
 8006920:	e7e4      	b.n	80068ec <_puts_r+0x68>
 8006922:	6823      	ldr	r3, [r4, #0]
 8006924:	1c5a      	adds	r2, r3, #1
 8006926:	6022      	str	r2, [r4, #0]
 8006928:	220a      	movs	r2, #10
 800692a:	701a      	strb	r2, [r3, #0]
 800692c:	e7ee      	b.n	800690c <_puts_r+0x88>
	...

08006930 <puts>:
 8006930:	4b02      	ldr	r3, [pc, #8]	@ (800693c <puts+0xc>)
 8006932:	4601      	mov	r1, r0
 8006934:	6818      	ldr	r0, [r3, #0]
 8006936:	f7ff bfa5 	b.w	8006884 <_puts_r>
 800693a:	bf00      	nop
 800693c:	2000010c 	.word	0x2000010c

08006940 <__sread>:
 8006940:	b510      	push	{r4, lr}
 8006942:	460c      	mov	r4, r1
 8006944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006948:	f000 f8fc 	bl	8006b44 <_read_r>
 800694c:	2800      	cmp	r0, #0
 800694e:	bfab      	itete	ge
 8006950:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006952:	89a3      	ldrhlt	r3, [r4, #12]
 8006954:	181b      	addge	r3, r3, r0
 8006956:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800695a:	bfac      	ite	ge
 800695c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800695e:	81a3      	strhlt	r3, [r4, #12]
 8006960:	bd10      	pop	{r4, pc}

08006962 <__swrite>:
 8006962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006966:	461f      	mov	r7, r3
 8006968:	898b      	ldrh	r3, [r1, #12]
 800696a:	05db      	lsls	r3, r3, #23
 800696c:	4605      	mov	r5, r0
 800696e:	460c      	mov	r4, r1
 8006970:	4616      	mov	r6, r2
 8006972:	d505      	bpl.n	8006980 <__swrite+0x1e>
 8006974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006978:	2302      	movs	r3, #2
 800697a:	2200      	movs	r2, #0
 800697c:	f000 f8d0 	bl	8006b20 <_lseek_r>
 8006980:	89a3      	ldrh	r3, [r4, #12]
 8006982:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006986:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800698a:	81a3      	strh	r3, [r4, #12]
 800698c:	4632      	mov	r2, r6
 800698e:	463b      	mov	r3, r7
 8006990:	4628      	mov	r0, r5
 8006992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006996:	f000 b8e7 	b.w	8006b68 <_write_r>

0800699a <__sseek>:
 800699a:	b510      	push	{r4, lr}
 800699c:	460c      	mov	r4, r1
 800699e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069a2:	f000 f8bd 	bl	8006b20 <_lseek_r>
 80069a6:	1c43      	adds	r3, r0, #1
 80069a8:	89a3      	ldrh	r3, [r4, #12]
 80069aa:	bf15      	itete	ne
 80069ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 80069ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80069b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80069b6:	81a3      	strheq	r3, [r4, #12]
 80069b8:	bf18      	it	ne
 80069ba:	81a3      	strhne	r3, [r4, #12]
 80069bc:	bd10      	pop	{r4, pc}

080069be <__sclose>:
 80069be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069c2:	f000 b89d 	b.w	8006b00 <_close_r>

080069c6 <__swbuf_r>:
 80069c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069c8:	460e      	mov	r6, r1
 80069ca:	4614      	mov	r4, r2
 80069cc:	4605      	mov	r5, r0
 80069ce:	b118      	cbz	r0, 80069d8 <__swbuf_r+0x12>
 80069d0:	6a03      	ldr	r3, [r0, #32]
 80069d2:	b90b      	cbnz	r3, 80069d8 <__swbuf_r+0x12>
 80069d4:	f7ff ff20 	bl	8006818 <__sinit>
 80069d8:	69a3      	ldr	r3, [r4, #24]
 80069da:	60a3      	str	r3, [r4, #8]
 80069dc:	89a3      	ldrh	r3, [r4, #12]
 80069de:	071a      	lsls	r2, r3, #28
 80069e0:	d501      	bpl.n	80069e6 <__swbuf_r+0x20>
 80069e2:	6923      	ldr	r3, [r4, #16]
 80069e4:	b943      	cbnz	r3, 80069f8 <__swbuf_r+0x32>
 80069e6:	4621      	mov	r1, r4
 80069e8:	4628      	mov	r0, r5
 80069ea:	f000 f82b 	bl	8006a44 <__swsetup_r>
 80069ee:	b118      	cbz	r0, 80069f8 <__swbuf_r+0x32>
 80069f0:	f04f 37ff 	mov.w	r7, #4294967295
 80069f4:	4638      	mov	r0, r7
 80069f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069f8:	6823      	ldr	r3, [r4, #0]
 80069fa:	6922      	ldr	r2, [r4, #16]
 80069fc:	1a98      	subs	r0, r3, r2
 80069fe:	6963      	ldr	r3, [r4, #20]
 8006a00:	b2f6      	uxtb	r6, r6
 8006a02:	4283      	cmp	r3, r0
 8006a04:	4637      	mov	r7, r6
 8006a06:	dc05      	bgt.n	8006a14 <__swbuf_r+0x4e>
 8006a08:	4621      	mov	r1, r4
 8006a0a:	4628      	mov	r0, r5
 8006a0c:	f000 fa68 	bl	8006ee0 <_fflush_r>
 8006a10:	2800      	cmp	r0, #0
 8006a12:	d1ed      	bne.n	80069f0 <__swbuf_r+0x2a>
 8006a14:	68a3      	ldr	r3, [r4, #8]
 8006a16:	3b01      	subs	r3, #1
 8006a18:	60a3      	str	r3, [r4, #8]
 8006a1a:	6823      	ldr	r3, [r4, #0]
 8006a1c:	1c5a      	adds	r2, r3, #1
 8006a1e:	6022      	str	r2, [r4, #0]
 8006a20:	701e      	strb	r6, [r3, #0]
 8006a22:	6962      	ldr	r2, [r4, #20]
 8006a24:	1c43      	adds	r3, r0, #1
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d004      	beq.n	8006a34 <__swbuf_r+0x6e>
 8006a2a:	89a3      	ldrh	r3, [r4, #12]
 8006a2c:	07db      	lsls	r3, r3, #31
 8006a2e:	d5e1      	bpl.n	80069f4 <__swbuf_r+0x2e>
 8006a30:	2e0a      	cmp	r6, #10
 8006a32:	d1df      	bne.n	80069f4 <__swbuf_r+0x2e>
 8006a34:	4621      	mov	r1, r4
 8006a36:	4628      	mov	r0, r5
 8006a38:	f000 fa52 	bl	8006ee0 <_fflush_r>
 8006a3c:	2800      	cmp	r0, #0
 8006a3e:	d0d9      	beq.n	80069f4 <__swbuf_r+0x2e>
 8006a40:	e7d6      	b.n	80069f0 <__swbuf_r+0x2a>
	...

08006a44 <__swsetup_r>:
 8006a44:	b538      	push	{r3, r4, r5, lr}
 8006a46:	4b29      	ldr	r3, [pc, #164]	@ (8006aec <__swsetup_r+0xa8>)
 8006a48:	4605      	mov	r5, r0
 8006a4a:	6818      	ldr	r0, [r3, #0]
 8006a4c:	460c      	mov	r4, r1
 8006a4e:	b118      	cbz	r0, 8006a58 <__swsetup_r+0x14>
 8006a50:	6a03      	ldr	r3, [r0, #32]
 8006a52:	b90b      	cbnz	r3, 8006a58 <__swsetup_r+0x14>
 8006a54:	f7ff fee0 	bl	8006818 <__sinit>
 8006a58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a5c:	0719      	lsls	r1, r3, #28
 8006a5e:	d422      	bmi.n	8006aa6 <__swsetup_r+0x62>
 8006a60:	06da      	lsls	r2, r3, #27
 8006a62:	d407      	bmi.n	8006a74 <__swsetup_r+0x30>
 8006a64:	2209      	movs	r2, #9
 8006a66:	602a      	str	r2, [r5, #0]
 8006a68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a6c:	81a3      	strh	r3, [r4, #12]
 8006a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8006a72:	e033      	b.n	8006adc <__swsetup_r+0x98>
 8006a74:	0758      	lsls	r0, r3, #29
 8006a76:	d512      	bpl.n	8006a9e <__swsetup_r+0x5a>
 8006a78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a7a:	b141      	cbz	r1, 8006a8e <__swsetup_r+0x4a>
 8006a7c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a80:	4299      	cmp	r1, r3
 8006a82:	d002      	beq.n	8006a8a <__swsetup_r+0x46>
 8006a84:	4628      	mov	r0, r5
 8006a86:	f000 f8af 	bl	8006be8 <_free_r>
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a8e:	89a3      	ldrh	r3, [r4, #12]
 8006a90:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006a94:	81a3      	strh	r3, [r4, #12]
 8006a96:	2300      	movs	r3, #0
 8006a98:	6063      	str	r3, [r4, #4]
 8006a9a:	6923      	ldr	r3, [r4, #16]
 8006a9c:	6023      	str	r3, [r4, #0]
 8006a9e:	89a3      	ldrh	r3, [r4, #12]
 8006aa0:	f043 0308 	orr.w	r3, r3, #8
 8006aa4:	81a3      	strh	r3, [r4, #12]
 8006aa6:	6923      	ldr	r3, [r4, #16]
 8006aa8:	b94b      	cbnz	r3, 8006abe <__swsetup_r+0x7a>
 8006aaa:	89a3      	ldrh	r3, [r4, #12]
 8006aac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006ab0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ab4:	d003      	beq.n	8006abe <__swsetup_r+0x7a>
 8006ab6:	4621      	mov	r1, r4
 8006ab8:	4628      	mov	r0, r5
 8006aba:	f000 fa5f 	bl	8006f7c <__smakebuf_r>
 8006abe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ac2:	f013 0201 	ands.w	r2, r3, #1
 8006ac6:	d00a      	beq.n	8006ade <__swsetup_r+0x9a>
 8006ac8:	2200      	movs	r2, #0
 8006aca:	60a2      	str	r2, [r4, #8]
 8006acc:	6962      	ldr	r2, [r4, #20]
 8006ace:	4252      	negs	r2, r2
 8006ad0:	61a2      	str	r2, [r4, #24]
 8006ad2:	6922      	ldr	r2, [r4, #16]
 8006ad4:	b942      	cbnz	r2, 8006ae8 <__swsetup_r+0xa4>
 8006ad6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006ada:	d1c5      	bne.n	8006a68 <__swsetup_r+0x24>
 8006adc:	bd38      	pop	{r3, r4, r5, pc}
 8006ade:	0799      	lsls	r1, r3, #30
 8006ae0:	bf58      	it	pl
 8006ae2:	6962      	ldrpl	r2, [r4, #20]
 8006ae4:	60a2      	str	r2, [r4, #8]
 8006ae6:	e7f4      	b.n	8006ad2 <__swsetup_r+0x8e>
 8006ae8:	2000      	movs	r0, #0
 8006aea:	e7f7      	b.n	8006adc <__swsetup_r+0x98>
 8006aec:	2000010c 	.word	0x2000010c

08006af0 <memset>:
 8006af0:	4402      	add	r2, r0
 8006af2:	4603      	mov	r3, r0
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d100      	bne.n	8006afa <memset+0xa>
 8006af8:	4770      	bx	lr
 8006afa:	f803 1b01 	strb.w	r1, [r3], #1
 8006afe:	e7f9      	b.n	8006af4 <memset+0x4>

08006b00 <_close_r>:
 8006b00:	b538      	push	{r3, r4, r5, lr}
 8006b02:	4d06      	ldr	r5, [pc, #24]	@ (8006b1c <_close_r+0x1c>)
 8006b04:	2300      	movs	r3, #0
 8006b06:	4604      	mov	r4, r0
 8006b08:	4608      	mov	r0, r1
 8006b0a:	602b      	str	r3, [r5, #0]
 8006b0c:	f7f9 ffe1 	bl	8000ad2 <_close>
 8006b10:	1c43      	adds	r3, r0, #1
 8006b12:	d102      	bne.n	8006b1a <_close_r+0x1a>
 8006b14:	682b      	ldr	r3, [r5, #0]
 8006b16:	b103      	cbz	r3, 8006b1a <_close_r+0x1a>
 8006b18:	6023      	str	r3, [r4, #0]
 8006b1a:	bd38      	pop	{r3, r4, r5, pc}
 8006b1c:	20001ea8 	.word	0x20001ea8

08006b20 <_lseek_r>:
 8006b20:	b538      	push	{r3, r4, r5, lr}
 8006b22:	4d07      	ldr	r5, [pc, #28]	@ (8006b40 <_lseek_r+0x20>)
 8006b24:	4604      	mov	r4, r0
 8006b26:	4608      	mov	r0, r1
 8006b28:	4611      	mov	r1, r2
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	602a      	str	r2, [r5, #0]
 8006b2e:	461a      	mov	r2, r3
 8006b30:	f7f9 fff6 	bl	8000b20 <_lseek>
 8006b34:	1c43      	adds	r3, r0, #1
 8006b36:	d102      	bne.n	8006b3e <_lseek_r+0x1e>
 8006b38:	682b      	ldr	r3, [r5, #0]
 8006b3a:	b103      	cbz	r3, 8006b3e <_lseek_r+0x1e>
 8006b3c:	6023      	str	r3, [r4, #0]
 8006b3e:	bd38      	pop	{r3, r4, r5, pc}
 8006b40:	20001ea8 	.word	0x20001ea8

08006b44 <_read_r>:
 8006b44:	b538      	push	{r3, r4, r5, lr}
 8006b46:	4d07      	ldr	r5, [pc, #28]	@ (8006b64 <_read_r+0x20>)
 8006b48:	4604      	mov	r4, r0
 8006b4a:	4608      	mov	r0, r1
 8006b4c:	4611      	mov	r1, r2
 8006b4e:	2200      	movs	r2, #0
 8006b50:	602a      	str	r2, [r5, #0]
 8006b52:	461a      	mov	r2, r3
 8006b54:	f7f9 ff84 	bl	8000a60 <_read>
 8006b58:	1c43      	adds	r3, r0, #1
 8006b5a:	d102      	bne.n	8006b62 <_read_r+0x1e>
 8006b5c:	682b      	ldr	r3, [r5, #0]
 8006b5e:	b103      	cbz	r3, 8006b62 <_read_r+0x1e>
 8006b60:	6023      	str	r3, [r4, #0]
 8006b62:	bd38      	pop	{r3, r4, r5, pc}
 8006b64:	20001ea8 	.word	0x20001ea8

08006b68 <_write_r>:
 8006b68:	b538      	push	{r3, r4, r5, lr}
 8006b6a:	4d07      	ldr	r5, [pc, #28]	@ (8006b88 <_write_r+0x20>)
 8006b6c:	4604      	mov	r4, r0
 8006b6e:	4608      	mov	r0, r1
 8006b70:	4611      	mov	r1, r2
 8006b72:	2200      	movs	r2, #0
 8006b74:	602a      	str	r2, [r5, #0]
 8006b76:	461a      	mov	r2, r3
 8006b78:	f7f9 ff8f 	bl	8000a9a <_write>
 8006b7c:	1c43      	adds	r3, r0, #1
 8006b7e:	d102      	bne.n	8006b86 <_write_r+0x1e>
 8006b80:	682b      	ldr	r3, [r5, #0]
 8006b82:	b103      	cbz	r3, 8006b86 <_write_r+0x1e>
 8006b84:	6023      	str	r3, [r4, #0]
 8006b86:	bd38      	pop	{r3, r4, r5, pc}
 8006b88:	20001ea8 	.word	0x20001ea8

08006b8c <__errno>:
 8006b8c:	4b01      	ldr	r3, [pc, #4]	@ (8006b94 <__errno+0x8>)
 8006b8e:	6818      	ldr	r0, [r3, #0]
 8006b90:	4770      	bx	lr
 8006b92:	bf00      	nop
 8006b94:	2000010c 	.word	0x2000010c

08006b98 <__libc_init_array>:
 8006b98:	b570      	push	{r4, r5, r6, lr}
 8006b9a:	4d0d      	ldr	r5, [pc, #52]	@ (8006bd0 <__libc_init_array+0x38>)
 8006b9c:	4c0d      	ldr	r4, [pc, #52]	@ (8006bd4 <__libc_init_array+0x3c>)
 8006b9e:	1b64      	subs	r4, r4, r5
 8006ba0:	10a4      	asrs	r4, r4, #2
 8006ba2:	2600      	movs	r6, #0
 8006ba4:	42a6      	cmp	r6, r4
 8006ba6:	d109      	bne.n	8006bbc <__libc_init_array+0x24>
 8006ba8:	4d0b      	ldr	r5, [pc, #44]	@ (8006bd8 <__libc_init_array+0x40>)
 8006baa:	4c0c      	ldr	r4, [pc, #48]	@ (8006bdc <__libc_init_array+0x44>)
 8006bac:	f000 fa54 	bl	8007058 <_init>
 8006bb0:	1b64      	subs	r4, r4, r5
 8006bb2:	10a4      	asrs	r4, r4, #2
 8006bb4:	2600      	movs	r6, #0
 8006bb6:	42a6      	cmp	r6, r4
 8006bb8:	d105      	bne.n	8006bc6 <__libc_init_array+0x2e>
 8006bba:	bd70      	pop	{r4, r5, r6, pc}
 8006bbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bc0:	4798      	blx	r3
 8006bc2:	3601      	adds	r6, #1
 8006bc4:	e7ee      	b.n	8006ba4 <__libc_init_array+0xc>
 8006bc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bca:	4798      	blx	r3
 8006bcc:	3601      	adds	r6, #1
 8006bce:	e7f2      	b.n	8006bb6 <__libc_init_array+0x1e>
 8006bd0:	080070d8 	.word	0x080070d8
 8006bd4:	080070d8 	.word	0x080070d8
 8006bd8:	080070d8 	.word	0x080070d8
 8006bdc:	080070dc 	.word	0x080070dc

08006be0 <__retarget_lock_init_recursive>:
 8006be0:	4770      	bx	lr

08006be2 <__retarget_lock_acquire_recursive>:
 8006be2:	4770      	bx	lr

08006be4 <__retarget_lock_release_recursive>:
 8006be4:	4770      	bx	lr
	...

08006be8 <_free_r>:
 8006be8:	b538      	push	{r3, r4, r5, lr}
 8006bea:	4605      	mov	r5, r0
 8006bec:	2900      	cmp	r1, #0
 8006bee:	d041      	beq.n	8006c74 <_free_r+0x8c>
 8006bf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bf4:	1f0c      	subs	r4, r1, #4
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	bfb8      	it	lt
 8006bfa:	18e4      	addlt	r4, r4, r3
 8006bfc:	f000 f8e0 	bl	8006dc0 <__malloc_lock>
 8006c00:	4a1d      	ldr	r2, [pc, #116]	@ (8006c78 <_free_r+0x90>)
 8006c02:	6813      	ldr	r3, [r2, #0]
 8006c04:	b933      	cbnz	r3, 8006c14 <_free_r+0x2c>
 8006c06:	6063      	str	r3, [r4, #4]
 8006c08:	6014      	str	r4, [r2, #0]
 8006c0a:	4628      	mov	r0, r5
 8006c0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c10:	f000 b8dc 	b.w	8006dcc <__malloc_unlock>
 8006c14:	42a3      	cmp	r3, r4
 8006c16:	d908      	bls.n	8006c2a <_free_r+0x42>
 8006c18:	6820      	ldr	r0, [r4, #0]
 8006c1a:	1821      	adds	r1, r4, r0
 8006c1c:	428b      	cmp	r3, r1
 8006c1e:	bf01      	itttt	eq
 8006c20:	6819      	ldreq	r1, [r3, #0]
 8006c22:	685b      	ldreq	r3, [r3, #4]
 8006c24:	1809      	addeq	r1, r1, r0
 8006c26:	6021      	streq	r1, [r4, #0]
 8006c28:	e7ed      	b.n	8006c06 <_free_r+0x1e>
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	b10b      	cbz	r3, 8006c34 <_free_r+0x4c>
 8006c30:	42a3      	cmp	r3, r4
 8006c32:	d9fa      	bls.n	8006c2a <_free_r+0x42>
 8006c34:	6811      	ldr	r1, [r2, #0]
 8006c36:	1850      	adds	r0, r2, r1
 8006c38:	42a0      	cmp	r0, r4
 8006c3a:	d10b      	bne.n	8006c54 <_free_r+0x6c>
 8006c3c:	6820      	ldr	r0, [r4, #0]
 8006c3e:	4401      	add	r1, r0
 8006c40:	1850      	adds	r0, r2, r1
 8006c42:	4283      	cmp	r3, r0
 8006c44:	6011      	str	r1, [r2, #0]
 8006c46:	d1e0      	bne.n	8006c0a <_free_r+0x22>
 8006c48:	6818      	ldr	r0, [r3, #0]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	6053      	str	r3, [r2, #4]
 8006c4e:	4408      	add	r0, r1
 8006c50:	6010      	str	r0, [r2, #0]
 8006c52:	e7da      	b.n	8006c0a <_free_r+0x22>
 8006c54:	d902      	bls.n	8006c5c <_free_r+0x74>
 8006c56:	230c      	movs	r3, #12
 8006c58:	602b      	str	r3, [r5, #0]
 8006c5a:	e7d6      	b.n	8006c0a <_free_r+0x22>
 8006c5c:	6820      	ldr	r0, [r4, #0]
 8006c5e:	1821      	adds	r1, r4, r0
 8006c60:	428b      	cmp	r3, r1
 8006c62:	bf04      	itt	eq
 8006c64:	6819      	ldreq	r1, [r3, #0]
 8006c66:	685b      	ldreq	r3, [r3, #4]
 8006c68:	6063      	str	r3, [r4, #4]
 8006c6a:	bf04      	itt	eq
 8006c6c:	1809      	addeq	r1, r1, r0
 8006c6e:	6021      	streq	r1, [r4, #0]
 8006c70:	6054      	str	r4, [r2, #4]
 8006c72:	e7ca      	b.n	8006c0a <_free_r+0x22>
 8006c74:	bd38      	pop	{r3, r4, r5, pc}
 8006c76:	bf00      	nop
 8006c78:	20001eb4 	.word	0x20001eb4

08006c7c <sbrk_aligned>:
 8006c7c:	b570      	push	{r4, r5, r6, lr}
 8006c7e:	4e0f      	ldr	r6, [pc, #60]	@ (8006cbc <sbrk_aligned+0x40>)
 8006c80:	460c      	mov	r4, r1
 8006c82:	6831      	ldr	r1, [r6, #0]
 8006c84:	4605      	mov	r5, r0
 8006c86:	b911      	cbnz	r1, 8006c8e <sbrk_aligned+0x12>
 8006c88:	f000 f9d6 	bl	8007038 <_sbrk_r>
 8006c8c:	6030      	str	r0, [r6, #0]
 8006c8e:	4621      	mov	r1, r4
 8006c90:	4628      	mov	r0, r5
 8006c92:	f000 f9d1 	bl	8007038 <_sbrk_r>
 8006c96:	1c43      	adds	r3, r0, #1
 8006c98:	d103      	bne.n	8006ca2 <sbrk_aligned+0x26>
 8006c9a:	f04f 34ff 	mov.w	r4, #4294967295
 8006c9e:	4620      	mov	r0, r4
 8006ca0:	bd70      	pop	{r4, r5, r6, pc}
 8006ca2:	1cc4      	adds	r4, r0, #3
 8006ca4:	f024 0403 	bic.w	r4, r4, #3
 8006ca8:	42a0      	cmp	r0, r4
 8006caa:	d0f8      	beq.n	8006c9e <sbrk_aligned+0x22>
 8006cac:	1a21      	subs	r1, r4, r0
 8006cae:	4628      	mov	r0, r5
 8006cb0:	f000 f9c2 	bl	8007038 <_sbrk_r>
 8006cb4:	3001      	adds	r0, #1
 8006cb6:	d1f2      	bne.n	8006c9e <sbrk_aligned+0x22>
 8006cb8:	e7ef      	b.n	8006c9a <sbrk_aligned+0x1e>
 8006cba:	bf00      	nop
 8006cbc:	20001eb0 	.word	0x20001eb0

08006cc0 <_malloc_r>:
 8006cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cc4:	1ccd      	adds	r5, r1, #3
 8006cc6:	f025 0503 	bic.w	r5, r5, #3
 8006cca:	3508      	adds	r5, #8
 8006ccc:	2d0c      	cmp	r5, #12
 8006cce:	bf38      	it	cc
 8006cd0:	250c      	movcc	r5, #12
 8006cd2:	2d00      	cmp	r5, #0
 8006cd4:	4606      	mov	r6, r0
 8006cd6:	db01      	blt.n	8006cdc <_malloc_r+0x1c>
 8006cd8:	42a9      	cmp	r1, r5
 8006cda:	d904      	bls.n	8006ce6 <_malloc_r+0x26>
 8006cdc:	230c      	movs	r3, #12
 8006cde:	6033      	str	r3, [r6, #0]
 8006ce0:	2000      	movs	r0, #0
 8006ce2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ce6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006dbc <_malloc_r+0xfc>
 8006cea:	f000 f869 	bl	8006dc0 <__malloc_lock>
 8006cee:	f8d8 3000 	ldr.w	r3, [r8]
 8006cf2:	461c      	mov	r4, r3
 8006cf4:	bb44      	cbnz	r4, 8006d48 <_malloc_r+0x88>
 8006cf6:	4629      	mov	r1, r5
 8006cf8:	4630      	mov	r0, r6
 8006cfa:	f7ff ffbf 	bl	8006c7c <sbrk_aligned>
 8006cfe:	1c43      	adds	r3, r0, #1
 8006d00:	4604      	mov	r4, r0
 8006d02:	d158      	bne.n	8006db6 <_malloc_r+0xf6>
 8006d04:	f8d8 4000 	ldr.w	r4, [r8]
 8006d08:	4627      	mov	r7, r4
 8006d0a:	2f00      	cmp	r7, #0
 8006d0c:	d143      	bne.n	8006d96 <_malloc_r+0xd6>
 8006d0e:	2c00      	cmp	r4, #0
 8006d10:	d04b      	beq.n	8006daa <_malloc_r+0xea>
 8006d12:	6823      	ldr	r3, [r4, #0]
 8006d14:	4639      	mov	r1, r7
 8006d16:	4630      	mov	r0, r6
 8006d18:	eb04 0903 	add.w	r9, r4, r3
 8006d1c:	f000 f98c 	bl	8007038 <_sbrk_r>
 8006d20:	4581      	cmp	r9, r0
 8006d22:	d142      	bne.n	8006daa <_malloc_r+0xea>
 8006d24:	6821      	ldr	r1, [r4, #0]
 8006d26:	1a6d      	subs	r5, r5, r1
 8006d28:	4629      	mov	r1, r5
 8006d2a:	4630      	mov	r0, r6
 8006d2c:	f7ff ffa6 	bl	8006c7c <sbrk_aligned>
 8006d30:	3001      	adds	r0, #1
 8006d32:	d03a      	beq.n	8006daa <_malloc_r+0xea>
 8006d34:	6823      	ldr	r3, [r4, #0]
 8006d36:	442b      	add	r3, r5
 8006d38:	6023      	str	r3, [r4, #0]
 8006d3a:	f8d8 3000 	ldr.w	r3, [r8]
 8006d3e:	685a      	ldr	r2, [r3, #4]
 8006d40:	bb62      	cbnz	r2, 8006d9c <_malloc_r+0xdc>
 8006d42:	f8c8 7000 	str.w	r7, [r8]
 8006d46:	e00f      	b.n	8006d68 <_malloc_r+0xa8>
 8006d48:	6822      	ldr	r2, [r4, #0]
 8006d4a:	1b52      	subs	r2, r2, r5
 8006d4c:	d420      	bmi.n	8006d90 <_malloc_r+0xd0>
 8006d4e:	2a0b      	cmp	r2, #11
 8006d50:	d917      	bls.n	8006d82 <_malloc_r+0xc2>
 8006d52:	1961      	adds	r1, r4, r5
 8006d54:	42a3      	cmp	r3, r4
 8006d56:	6025      	str	r5, [r4, #0]
 8006d58:	bf18      	it	ne
 8006d5a:	6059      	strne	r1, [r3, #4]
 8006d5c:	6863      	ldr	r3, [r4, #4]
 8006d5e:	bf08      	it	eq
 8006d60:	f8c8 1000 	streq.w	r1, [r8]
 8006d64:	5162      	str	r2, [r4, r5]
 8006d66:	604b      	str	r3, [r1, #4]
 8006d68:	4630      	mov	r0, r6
 8006d6a:	f000 f82f 	bl	8006dcc <__malloc_unlock>
 8006d6e:	f104 000b 	add.w	r0, r4, #11
 8006d72:	1d23      	adds	r3, r4, #4
 8006d74:	f020 0007 	bic.w	r0, r0, #7
 8006d78:	1ac2      	subs	r2, r0, r3
 8006d7a:	bf1c      	itt	ne
 8006d7c:	1a1b      	subne	r3, r3, r0
 8006d7e:	50a3      	strne	r3, [r4, r2]
 8006d80:	e7af      	b.n	8006ce2 <_malloc_r+0x22>
 8006d82:	6862      	ldr	r2, [r4, #4]
 8006d84:	42a3      	cmp	r3, r4
 8006d86:	bf0c      	ite	eq
 8006d88:	f8c8 2000 	streq.w	r2, [r8]
 8006d8c:	605a      	strne	r2, [r3, #4]
 8006d8e:	e7eb      	b.n	8006d68 <_malloc_r+0xa8>
 8006d90:	4623      	mov	r3, r4
 8006d92:	6864      	ldr	r4, [r4, #4]
 8006d94:	e7ae      	b.n	8006cf4 <_malloc_r+0x34>
 8006d96:	463c      	mov	r4, r7
 8006d98:	687f      	ldr	r7, [r7, #4]
 8006d9a:	e7b6      	b.n	8006d0a <_malloc_r+0x4a>
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	42a3      	cmp	r3, r4
 8006da2:	d1fb      	bne.n	8006d9c <_malloc_r+0xdc>
 8006da4:	2300      	movs	r3, #0
 8006da6:	6053      	str	r3, [r2, #4]
 8006da8:	e7de      	b.n	8006d68 <_malloc_r+0xa8>
 8006daa:	230c      	movs	r3, #12
 8006dac:	6033      	str	r3, [r6, #0]
 8006dae:	4630      	mov	r0, r6
 8006db0:	f000 f80c 	bl	8006dcc <__malloc_unlock>
 8006db4:	e794      	b.n	8006ce0 <_malloc_r+0x20>
 8006db6:	6005      	str	r5, [r0, #0]
 8006db8:	e7d6      	b.n	8006d68 <_malloc_r+0xa8>
 8006dba:	bf00      	nop
 8006dbc:	20001eb4 	.word	0x20001eb4

08006dc0 <__malloc_lock>:
 8006dc0:	4801      	ldr	r0, [pc, #4]	@ (8006dc8 <__malloc_lock+0x8>)
 8006dc2:	f7ff bf0e 	b.w	8006be2 <__retarget_lock_acquire_recursive>
 8006dc6:	bf00      	nop
 8006dc8:	20001eac 	.word	0x20001eac

08006dcc <__malloc_unlock>:
 8006dcc:	4801      	ldr	r0, [pc, #4]	@ (8006dd4 <__malloc_unlock+0x8>)
 8006dce:	f7ff bf09 	b.w	8006be4 <__retarget_lock_release_recursive>
 8006dd2:	bf00      	nop
 8006dd4:	20001eac 	.word	0x20001eac

08006dd8 <__sflush_r>:
 8006dd8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006de0:	0716      	lsls	r6, r2, #28
 8006de2:	4605      	mov	r5, r0
 8006de4:	460c      	mov	r4, r1
 8006de6:	d454      	bmi.n	8006e92 <__sflush_r+0xba>
 8006de8:	684b      	ldr	r3, [r1, #4]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	dc02      	bgt.n	8006df4 <__sflush_r+0x1c>
 8006dee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	dd48      	ble.n	8006e86 <__sflush_r+0xae>
 8006df4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006df6:	2e00      	cmp	r6, #0
 8006df8:	d045      	beq.n	8006e86 <__sflush_r+0xae>
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006e00:	682f      	ldr	r7, [r5, #0]
 8006e02:	6a21      	ldr	r1, [r4, #32]
 8006e04:	602b      	str	r3, [r5, #0]
 8006e06:	d030      	beq.n	8006e6a <__sflush_r+0x92>
 8006e08:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006e0a:	89a3      	ldrh	r3, [r4, #12]
 8006e0c:	0759      	lsls	r1, r3, #29
 8006e0e:	d505      	bpl.n	8006e1c <__sflush_r+0x44>
 8006e10:	6863      	ldr	r3, [r4, #4]
 8006e12:	1ad2      	subs	r2, r2, r3
 8006e14:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006e16:	b10b      	cbz	r3, 8006e1c <__sflush_r+0x44>
 8006e18:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006e1a:	1ad2      	subs	r2, r2, r3
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006e20:	6a21      	ldr	r1, [r4, #32]
 8006e22:	4628      	mov	r0, r5
 8006e24:	47b0      	blx	r6
 8006e26:	1c43      	adds	r3, r0, #1
 8006e28:	89a3      	ldrh	r3, [r4, #12]
 8006e2a:	d106      	bne.n	8006e3a <__sflush_r+0x62>
 8006e2c:	6829      	ldr	r1, [r5, #0]
 8006e2e:	291d      	cmp	r1, #29
 8006e30:	d82b      	bhi.n	8006e8a <__sflush_r+0xb2>
 8006e32:	4a2a      	ldr	r2, [pc, #168]	@ (8006edc <__sflush_r+0x104>)
 8006e34:	410a      	asrs	r2, r1
 8006e36:	07d6      	lsls	r6, r2, #31
 8006e38:	d427      	bmi.n	8006e8a <__sflush_r+0xb2>
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	6062      	str	r2, [r4, #4]
 8006e3e:	04d9      	lsls	r1, r3, #19
 8006e40:	6922      	ldr	r2, [r4, #16]
 8006e42:	6022      	str	r2, [r4, #0]
 8006e44:	d504      	bpl.n	8006e50 <__sflush_r+0x78>
 8006e46:	1c42      	adds	r2, r0, #1
 8006e48:	d101      	bne.n	8006e4e <__sflush_r+0x76>
 8006e4a:	682b      	ldr	r3, [r5, #0]
 8006e4c:	b903      	cbnz	r3, 8006e50 <__sflush_r+0x78>
 8006e4e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006e50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e52:	602f      	str	r7, [r5, #0]
 8006e54:	b1b9      	cbz	r1, 8006e86 <__sflush_r+0xae>
 8006e56:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006e5a:	4299      	cmp	r1, r3
 8006e5c:	d002      	beq.n	8006e64 <__sflush_r+0x8c>
 8006e5e:	4628      	mov	r0, r5
 8006e60:	f7ff fec2 	bl	8006be8 <_free_r>
 8006e64:	2300      	movs	r3, #0
 8006e66:	6363      	str	r3, [r4, #52]	@ 0x34
 8006e68:	e00d      	b.n	8006e86 <__sflush_r+0xae>
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	4628      	mov	r0, r5
 8006e6e:	47b0      	blx	r6
 8006e70:	4602      	mov	r2, r0
 8006e72:	1c50      	adds	r0, r2, #1
 8006e74:	d1c9      	bne.n	8006e0a <__sflush_r+0x32>
 8006e76:	682b      	ldr	r3, [r5, #0]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d0c6      	beq.n	8006e0a <__sflush_r+0x32>
 8006e7c:	2b1d      	cmp	r3, #29
 8006e7e:	d001      	beq.n	8006e84 <__sflush_r+0xac>
 8006e80:	2b16      	cmp	r3, #22
 8006e82:	d11e      	bne.n	8006ec2 <__sflush_r+0xea>
 8006e84:	602f      	str	r7, [r5, #0]
 8006e86:	2000      	movs	r0, #0
 8006e88:	e022      	b.n	8006ed0 <__sflush_r+0xf8>
 8006e8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e8e:	b21b      	sxth	r3, r3
 8006e90:	e01b      	b.n	8006eca <__sflush_r+0xf2>
 8006e92:	690f      	ldr	r7, [r1, #16]
 8006e94:	2f00      	cmp	r7, #0
 8006e96:	d0f6      	beq.n	8006e86 <__sflush_r+0xae>
 8006e98:	0793      	lsls	r3, r2, #30
 8006e9a:	680e      	ldr	r6, [r1, #0]
 8006e9c:	bf08      	it	eq
 8006e9e:	694b      	ldreq	r3, [r1, #20]
 8006ea0:	600f      	str	r7, [r1, #0]
 8006ea2:	bf18      	it	ne
 8006ea4:	2300      	movne	r3, #0
 8006ea6:	eba6 0807 	sub.w	r8, r6, r7
 8006eaa:	608b      	str	r3, [r1, #8]
 8006eac:	f1b8 0f00 	cmp.w	r8, #0
 8006eb0:	dde9      	ble.n	8006e86 <__sflush_r+0xae>
 8006eb2:	6a21      	ldr	r1, [r4, #32]
 8006eb4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006eb6:	4643      	mov	r3, r8
 8006eb8:	463a      	mov	r2, r7
 8006eba:	4628      	mov	r0, r5
 8006ebc:	47b0      	blx	r6
 8006ebe:	2800      	cmp	r0, #0
 8006ec0:	dc08      	bgt.n	8006ed4 <__sflush_r+0xfc>
 8006ec2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ec6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006eca:	81a3      	strh	r3, [r4, #12]
 8006ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ed4:	4407      	add	r7, r0
 8006ed6:	eba8 0800 	sub.w	r8, r8, r0
 8006eda:	e7e7      	b.n	8006eac <__sflush_r+0xd4>
 8006edc:	dfbffffe 	.word	0xdfbffffe

08006ee0 <_fflush_r>:
 8006ee0:	b538      	push	{r3, r4, r5, lr}
 8006ee2:	690b      	ldr	r3, [r1, #16]
 8006ee4:	4605      	mov	r5, r0
 8006ee6:	460c      	mov	r4, r1
 8006ee8:	b913      	cbnz	r3, 8006ef0 <_fflush_r+0x10>
 8006eea:	2500      	movs	r5, #0
 8006eec:	4628      	mov	r0, r5
 8006eee:	bd38      	pop	{r3, r4, r5, pc}
 8006ef0:	b118      	cbz	r0, 8006efa <_fflush_r+0x1a>
 8006ef2:	6a03      	ldr	r3, [r0, #32]
 8006ef4:	b90b      	cbnz	r3, 8006efa <_fflush_r+0x1a>
 8006ef6:	f7ff fc8f 	bl	8006818 <__sinit>
 8006efa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d0f3      	beq.n	8006eea <_fflush_r+0xa>
 8006f02:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006f04:	07d0      	lsls	r0, r2, #31
 8006f06:	d404      	bmi.n	8006f12 <_fflush_r+0x32>
 8006f08:	0599      	lsls	r1, r3, #22
 8006f0a:	d402      	bmi.n	8006f12 <_fflush_r+0x32>
 8006f0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f0e:	f7ff fe68 	bl	8006be2 <__retarget_lock_acquire_recursive>
 8006f12:	4628      	mov	r0, r5
 8006f14:	4621      	mov	r1, r4
 8006f16:	f7ff ff5f 	bl	8006dd8 <__sflush_r>
 8006f1a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f1c:	07da      	lsls	r2, r3, #31
 8006f1e:	4605      	mov	r5, r0
 8006f20:	d4e4      	bmi.n	8006eec <_fflush_r+0xc>
 8006f22:	89a3      	ldrh	r3, [r4, #12]
 8006f24:	059b      	lsls	r3, r3, #22
 8006f26:	d4e1      	bmi.n	8006eec <_fflush_r+0xc>
 8006f28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f2a:	f7ff fe5b 	bl	8006be4 <__retarget_lock_release_recursive>
 8006f2e:	e7dd      	b.n	8006eec <_fflush_r+0xc>

08006f30 <__swhatbuf_r>:
 8006f30:	b570      	push	{r4, r5, r6, lr}
 8006f32:	460c      	mov	r4, r1
 8006f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f38:	2900      	cmp	r1, #0
 8006f3a:	b096      	sub	sp, #88	@ 0x58
 8006f3c:	4615      	mov	r5, r2
 8006f3e:	461e      	mov	r6, r3
 8006f40:	da0d      	bge.n	8006f5e <__swhatbuf_r+0x2e>
 8006f42:	89a3      	ldrh	r3, [r4, #12]
 8006f44:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006f48:	f04f 0100 	mov.w	r1, #0
 8006f4c:	bf14      	ite	ne
 8006f4e:	2340      	movne	r3, #64	@ 0x40
 8006f50:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006f54:	2000      	movs	r0, #0
 8006f56:	6031      	str	r1, [r6, #0]
 8006f58:	602b      	str	r3, [r5, #0]
 8006f5a:	b016      	add	sp, #88	@ 0x58
 8006f5c:	bd70      	pop	{r4, r5, r6, pc}
 8006f5e:	466a      	mov	r2, sp
 8006f60:	f000 f848 	bl	8006ff4 <_fstat_r>
 8006f64:	2800      	cmp	r0, #0
 8006f66:	dbec      	blt.n	8006f42 <__swhatbuf_r+0x12>
 8006f68:	9901      	ldr	r1, [sp, #4]
 8006f6a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006f6e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006f72:	4259      	negs	r1, r3
 8006f74:	4159      	adcs	r1, r3
 8006f76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006f7a:	e7eb      	b.n	8006f54 <__swhatbuf_r+0x24>

08006f7c <__smakebuf_r>:
 8006f7c:	898b      	ldrh	r3, [r1, #12]
 8006f7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f80:	079d      	lsls	r5, r3, #30
 8006f82:	4606      	mov	r6, r0
 8006f84:	460c      	mov	r4, r1
 8006f86:	d507      	bpl.n	8006f98 <__smakebuf_r+0x1c>
 8006f88:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006f8c:	6023      	str	r3, [r4, #0]
 8006f8e:	6123      	str	r3, [r4, #16]
 8006f90:	2301      	movs	r3, #1
 8006f92:	6163      	str	r3, [r4, #20]
 8006f94:	b003      	add	sp, #12
 8006f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f98:	ab01      	add	r3, sp, #4
 8006f9a:	466a      	mov	r2, sp
 8006f9c:	f7ff ffc8 	bl	8006f30 <__swhatbuf_r>
 8006fa0:	9f00      	ldr	r7, [sp, #0]
 8006fa2:	4605      	mov	r5, r0
 8006fa4:	4639      	mov	r1, r7
 8006fa6:	4630      	mov	r0, r6
 8006fa8:	f7ff fe8a 	bl	8006cc0 <_malloc_r>
 8006fac:	b948      	cbnz	r0, 8006fc2 <__smakebuf_r+0x46>
 8006fae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fb2:	059a      	lsls	r2, r3, #22
 8006fb4:	d4ee      	bmi.n	8006f94 <__smakebuf_r+0x18>
 8006fb6:	f023 0303 	bic.w	r3, r3, #3
 8006fba:	f043 0302 	orr.w	r3, r3, #2
 8006fbe:	81a3      	strh	r3, [r4, #12]
 8006fc0:	e7e2      	b.n	8006f88 <__smakebuf_r+0xc>
 8006fc2:	89a3      	ldrh	r3, [r4, #12]
 8006fc4:	6020      	str	r0, [r4, #0]
 8006fc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fca:	81a3      	strh	r3, [r4, #12]
 8006fcc:	9b01      	ldr	r3, [sp, #4]
 8006fce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006fd2:	b15b      	cbz	r3, 8006fec <__smakebuf_r+0x70>
 8006fd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fd8:	4630      	mov	r0, r6
 8006fda:	f000 f81d 	bl	8007018 <_isatty_r>
 8006fde:	b128      	cbz	r0, 8006fec <__smakebuf_r+0x70>
 8006fe0:	89a3      	ldrh	r3, [r4, #12]
 8006fe2:	f023 0303 	bic.w	r3, r3, #3
 8006fe6:	f043 0301 	orr.w	r3, r3, #1
 8006fea:	81a3      	strh	r3, [r4, #12]
 8006fec:	89a3      	ldrh	r3, [r4, #12]
 8006fee:	431d      	orrs	r5, r3
 8006ff0:	81a5      	strh	r5, [r4, #12]
 8006ff2:	e7cf      	b.n	8006f94 <__smakebuf_r+0x18>

08006ff4 <_fstat_r>:
 8006ff4:	b538      	push	{r3, r4, r5, lr}
 8006ff6:	4d07      	ldr	r5, [pc, #28]	@ (8007014 <_fstat_r+0x20>)
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	4604      	mov	r4, r0
 8006ffc:	4608      	mov	r0, r1
 8006ffe:	4611      	mov	r1, r2
 8007000:	602b      	str	r3, [r5, #0]
 8007002:	f7f9 fd72 	bl	8000aea <_fstat>
 8007006:	1c43      	adds	r3, r0, #1
 8007008:	d102      	bne.n	8007010 <_fstat_r+0x1c>
 800700a:	682b      	ldr	r3, [r5, #0]
 800700c:	b103      	cbz	r3, 8007010 <_fstat_r+0x1c>
 800700e:	6023      	str	r3, [r4, #0]
 8007010:	bd38      	pop	{r3, r4, r5, pc}
 8007012:	bf00      	nop
 8007014:	20001ea8 	.word	0x20001ea8

08007018 <_isatty_r>:
 8007018:	b538      	push	{r3, r4, r5, lr}
 800701a:	4d06      	ldr	r5, [pc, #24]	@ (8007034 <_isatty_r+0x1c>)
 800701c:	2300      	movs	r3, #0
 800701e:	4604      	mov	r4, r0
 8007020:	4608      	mov	r0, r1
 8007022:	602b      	str	r3, [r5, #0]
 8007024:	f7f9 fd71 	bl	8000b0a <_isatty>
 8007028:	1c43      	adds	r3, r0, #1
 800702a:	d102      	bne.n	8007032 <_isatty_r+0x1a>
 800702c:	682b      	ldr	r3, [r5, #0]
 800702e:	b103      	cbz	r3, 8007032 <_isatty_r+0x1a>
 8007030:	6023      	str	r3, [r4, #0]
 8007032:	bd38      	pop	{r3, r4, r5, pc}
 8007034:	20001ea8 	.word	0x20001ea8

08007038 <_sbrk_r>:
 8007038:	b538      	push	{r3, r4, r5, lr}
 800703a:	4d06      	ldr	r5, [pc, #24]	@ (8007054 <_sbrk_r+0x1c>)
 800703c:	2300      	movs	r3, #0
 800703e:	4604      	mov	r4, r0
 8007040:	4608      	mov	r0, r1
 8007042:	602b      	str	r3, [r5, #0]
 8007044:	f7f9 fd7a 	bl	8000b3c <_sbrk>
 8007048:	1c43      	adds	r3, r0, #1
 800704a:	d102      	bne.n	8007052 <_sbrk_r+0x1a>
 800704c:	682b      	ldr	r3, [r5, #0]
 800704e:	b103      	cbz	r3, 8007052 <_sbrk_r+0x1a>
 8007050:	6023      	str	r3, [r4, #0]
 8007052:	bd38      	pop	{r3, r4, r5, pc}
 8007054:	20001ea8 	.word	0x20001ea8

08007058 <_init>:
 8007058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800705a:	bf00      	nop
 800705c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800705e:	bc08      	pop	{r3}
 8007060:	469e      	mov	lr, r3
 8007062:	4770      	bx	lr

08007064 <_fini>:
 8007064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007066:	bf00      	nop
 8007068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800706a:	bc08      	pop	{r3}
 800706c:	469e      	mov	lr, r3
 800706e:	4770      	bx	lr
